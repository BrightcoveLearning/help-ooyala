try {
    (function() {
        var OO = {};

        OO.VERSION = {
            "core" : {"releaseVersion": "4.14.8", "rev": "<CORE_REV>"}
        };

        OO.playerParams = {
            "core_version" : 4,
            "vast_proxy_url" : "http://player.ooyala.com/adinsertion/vast_proxy"
        };


        OO.publicApi = OO.publicApi || {};

        // used for inserting player_params in dev harness version
        // please don't remove
        // the corresponding insertion code is found at start.js

        /*INSERT_PLAYER_PARAMS*/
        OO.playerParams = OO.playerParams || {};

        var consoleFilter;
        var recordingConsole = false;
        var MAX_CONSOLE_OUTPUT_LINES = 2000;

        /**
         * This stores the output recorded from calls to OO.log.  Recording is started
         * with OO.startRecordingConsoleOutput and stopped with OO.stopRecordingConsoleOutput.
         * @property OO#consoleOutput
         */
        OO.consoleOutput = [];

        OO.log = function() {
            if (typeof(window.console) != "undefined" && typeof(window.console.log) == "function") {
                if(OO.playerParams.debug) {
                    window.console.log.apply(window.console, arguments);
                }
            }

            if (recordingConsole) {
                var toAppend = "";
                var i;
                for (i = 0; i < arguments.length; i++) {
                    toAppend += arguments[i] + " ";
                }

                if (!OO.consoleOutput) {
                    OO.consoleOutput = [];
                }

                var regexFilter;
                if (consoleFilter) {
                    regexFilter = new RegExp(consoleFilter);
                }

                //check if the resulting output should be filtered out or not
                if (!regexFilter || regexFilter.test(toAppend))
                {
                    //if we are going over the max number of lines to store, remove the oldest one.
                    if (OO.consoleOutput.length >= MAX_CONSOLE_OUTPUT_LINES) {
                        OO.consoleOutput.shift();
                    }
                    OO.consoleOutput.push(toAppend);
                }
            }
        };

        /**
         * Enables recording the output sent to OO.log. To see the output check the value
         * of OO.consoleOutput
         * @method OO#startRecordingConsoleOutput
         * @return string Message that states recording was started (Main for debugging in console)
         */
        OO.startRecordingConsoleOutput = function(filter) {
            consoleFilter = filter;
            recordingConsole = true;
            return "CONSOLE RECORDING STARTED";
        };

        /**
         * Disables recording the output sent to OO.log. To see the output check the value
         * of OO.consoleOutput
         * @method OO#stopRecordingConsoleOutput
         * @return string Message that states recording was stopped (Main for debugging in console)
         */
        OO.stopRecordingConsoleOutput = function() {
            recordingConsole = false;
            return "CONSOLE RECORDING STOPPED";
        };

        /**
         * Clears the value stored in OO.consoleOutput.
         * @method OO#clearRecordedConsoleOutput
         * @return string Message that states recorded output was cleared (Main for debugging in console)
         */
        OO.clearRecordedConsoleOutput = function() {
            if (!OO.consoleOutput) {
                OO.consoleOutput = [];
            }
            OO.consoleOutput.splice(0, OO.consoleOutput.length);
            return "CONSOLE RECORDING CLEARED";
        };

        /**
         * Set max number of lines to record. If new number is less than current output
         * it will delete the oldest lines to fit.
         * @method OO#setMaxConsoleOutputLines
         */
        OO.setMaxConsoleOutputLines = function(numLines) {
            if (!OO.consoleOutput) {
                OO.consoleOutput = [];
            }

            if (numLines < OO.consoleOutput.length) {
                OO.consoleOutput.splice(0, OO.consoleOutput.length - numLines);
            }
            MAX_CONSOLE_OUTPUT_LINES = numLines;
            return "CONSOLE MAX LINES: " + MAX_CONSOLE_OUTPUT_LINES;
        };

        // Compatibility for browsers without native JSON library (IE)
        if(!window.JSON) {
            window.JSON = {
                stringify: function(obj) {return '<object>';},
                __end_marker: true
            };
        }

        // Compatibility for browsers without native Array.prototype.indexOf (IE..)
        if(!Array.prototype.indexOf) {
            Array.prototype.indexOf = function(obj, start) {
                var i, j = this.length;
                for (i = (start || 0); i < j; i++) {
                    if (this[i] === obj) { return i; }
                }
                return -1;
            };
        }

        // namespace resolution
        var namespace = OO.playerParams.namespace || 'OO'; // default namespace is OO
        // Check if there is any conflicts here. (If we load one version of player already.)
        if (window[namespace] && window[namespace].Player) {
            OO.log("PlayerV3 is loaded already!!!");
            if (window[namespace].REV != OO.publicApi.REV) {
                OO.log("there is a different VERSION loaded:", window[namespace].REV, OO.publicApi.REV);
            }
            throw "PlayerV3 already defined!!";
        }

        //we want to maintain a subset of the namespace so that OO.ready is available
        //as soon as this first script loads
        //do not clobber namespace.__static
        if (window[namespace] && window[namespace].__static) {
            OO.publicApi.__static = window[namespace].__static;
        } else {
            OO.publicApi.__static = {
                readyList:[],
                docReady: false,
                apiReady: false
            };
        }
        window[namespace] = OO.publicApi;
        window[namespace].__internal = OO;

        OO.isReady = function() {
            return OO.publicApi.__static.apiReady && OO.publicApi.__static.docReady;
        };

        OO.tryCallReady = function() {
            if (!OO.isReady()) { return;}
            while (OO.publicApi.__static.readyList.length > 0) {
                var fn = OO.publicApi.__static.readyList.pop();
                if (typeof fn === "function") {
                    try {
                        fn(OO.publicApi);
                    } catch(e) {
                        OO.log("Error executing ready function", e, e.stack);
                    }
                }
            }
            return;
        };

        OO.publicApi.ready = function(fn) {
            OO.publicApi.__static.readyList.unshift(fn);
            OO.tryCallReady();
        };

        var curOO = OO;
        OO.publicApi.plugin = function(moduleName, moduleClassFactory) {
            // This is to make sure side load module will register to the correct canary code.
            if (curOO.isReady()) {
                OO.log("plugin is ready to register", curOO, moduleName);
                curOO.plugin(moduleName, moduleClassFactory);
            } else {
                OO.log("plugin", moduleName);
                // Make sure third party module is evaluated before normal ready callback.
                OO.publicApi.__static.readyList.push(function(ns){ ns.plugin(moduleName, moduleClassFactory); });
            }

        };

//     Underscore.js 1.3.3
//     (c) 2009-2012 Jeremy Ashkenas, DocumentCloud Inc.
//     Underscore is freely distributable under the MIT license.
//     Portions of Underscore are inspired or borrowed from Prototype,
//     Oliver Steele's Functional, and John Resig's Micro-Templating.
//     For all details and documentation:
//     http://documentcloud.github.com/underscore

        (function() {

            // Baseline setup
            // --------------

            // Establish the root object, `window` in the browser, or `global` on the server.
            var root = this;

            // Save the previous value of the `_` variable.
            var previousUnderscore = root._;

            // Establish the object that gets returned to break out of a loop iteration.
            var breaker = {};

            // Save bytes in the minified (but not gzipped) version:
            var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;

            // Create quick reference variables for speed access to core prototypes.
            var slice            = ArrayProto.slice,
                unshift          = ArrayProto.unshift,
                toString         = ObjProto.toString,
                hasOwnProperty   = ObjProto.hasOwnProperty;

            // All **ECMAScript 5** native function implementations that we hope to use
            // are declared here.
            var
                nativeForEach      = ArrayProto.forEach,
                nativeMap          = ArrayProto.map,
                nativeReduce       = ArrayProto.reduce,
                nativeReduceRight  = ArrayProto.reduceRight,
                nativeFilter       = ArrayProto.filter,
                nativeEvery        = ArrayProto.every,
                nativeSome         = ArrayProto.some,
                nativeIndexOf      = ArrayProto.indexOf,
                nativeLastIndexOf  = ArrayProto.lastIndexOf,
                nativeIsArray      = Array.isArray,
                nativeKeys         = Object.keys,
                nativeBind         = FuncProto.bind;

            // Create a safe reference to the Underscore object for use below.
            var _ = function(obj) { return new wrapper(obj); };

            // Export the Underscore object for **Node.js**, with
            // backwards-compatibility for the old `require()` API. If we're in
            // the browser, add `_` as a global object via a string identifier,
            // for Closure Compiler "advanced" mode.
            if (typeof exports !== 'undefined') {
                if (typeof module !== 'undefined' && module.exports) {
                    exports = module.exports = _;
                }
                exports._ = _;
            } else {
                root['_'] = _;
            }

            // Current version.
            _.VERSION = '1.3.3';

            // Collection Functions
            // --------------------

            // The cornerstone, an `each` implementation, aka `forEach`.
            // Handles objects with the built-in `forEach`, arrays, and raw objects.
            // Delegates to **ECMAScript 5**'s native `forEach` if available.
            var each = _.each = _.forEach = function(obj, iterator, context) {
                if (obj == null) return;
                if (nativeForEach && obj.forEach === nativeForEach) {
                    obj.forEach(iterator, context);
                } else if (obj.length === +obj.length) {
                    for (var i = 0, l = obj.length; i < l; i++) {
                        if (i in obj && iterator.call(context, obj[i], i, obj) === breaker) return;
                    }
                } else {
                    for (var key in obj) {
                        if (_.has(obj, key)) {
                            if (iterator.call(context, obj[key], key, obj) === breaker) return;
                        }
                    }
                }
            };

            // Return the results of applying the iterator to each element.
            // Delegates to **ECMAScript 5**'s native `map` if available.
            _.map = _.collect = function(obj, iterator, context) {
                var results = [];
                if (obj == null) return results;
                if (nativeMap && obj.map === nativeMap) return obj.map(iterator, context);
                each(obj, function(value, index, list) {
                    results[results.length] = iterator.call(context, value, index, list);
                });
                if (obj.length === +obj.length) results.length = obj.length;
                return results;
            };

            // **Reduce** builds up a single result from a list of values, aka `inject`,
            // or `foldl`. Delegates to **ECMAScript 5**'s native `reduce` if available.
            _.reduce = _.foldl = _.inject = function(obj, iterator, memo, context) {
                var initial = arguments.length > 2;
                if (obj == null) obj = [];
                if (nativeReduce && obj.reduce === nativeReduce) {
                    if (context) iterator = _.bind(iterator, context);
                    return initial ? obj.reduce(iterator, memo) : obj.reduce(iterator);
                }
                each(obj, function(value, index, list) {
                    if (!initial) {
                        memo = value;
                        initial = true;
                    } else {
                        memo = iterator.call(context, memo, value, index, list);
                    }
                });
                if (!initial) throw new TypeError('Reduce of empty array with no initial value');
                return memo;
            };

            // The right-associative version of reduce, also known as `foldr`.
            // Delegates to **ECMAScript 5**'s native `reduceRight` if available.
            _.reduceRight = _.foldr = function(obj, iterator, memo, context) {
                var initial = arguments.length > 2;
                if (obj == null) obj = [];
                if (nativeReduceRight && obj.reduceRight === nativeReduceRight) {
                    if (context) iterator = _.bind(iterator, context);
                    return initial ? obj.reduceRight(iterator, memo) : obj.reduceRight(iterator);
                }
                var reversed = _.toArray(obj).reverse();
                if (context && !initial) iterator = _.bind(iterator, context);
                return initial ? _.reduce(reversed, iterator, memo, context) : _.reduce(reversed, iterator);
            };

            // Return the first value which passes a truth test. Aliased as `detect`.
            _.find = _.detect = function(obj, iterator, context) {
                var result;
                any(obj, function(value, index, list) {
                    if (iterator.call(context, value, index, list)) {
                        result = value;
                        return true;
                    }
                });
                return result;
            };

            // Return all the elements that pass a truth test.
            // Delegates to **ECMAScript 5**'s native `filter` if available.
            // Aliased as `select`.
            _.filter = _.select = function(obj, iterator, context) {
                var results = [];
                if (obj == null) return results;
                if (nativeFilter && obj.filter === nativeFilter) return obj.filter(iterator, context);
                each(obj, function(value, index, list) {
                    if (iterator.call(context, value, index, list)) results[results.length] = value;
                });
                return results;
            };

            // Return all the elements for which a truth test fails.
            _.reject = function(obj, iterator, context) {
                var results = [];
                if (obj == null) return results;
                each(obj, function(value, index, list) {
                    if (!iterator.call(context, value, index, list)) results[results.length] = value;
                });
                return results;
            };

            // Determine whether all of the elements match a truth test.
            // Delegates to **ECMAScript 5**'s native `every` if available.
            // Aliased as `all`.
            _.every = _.all = function(obj, iterator, context) {
                var result = true;
                if (obj == null) return result;
                if (nativeEvery && obj.every === nativeEvery) return obj.every(iterator, context);
                each(obj, function(value, index, list) {
                    if (!(result = result && iterator.call(context, value, index, list))) return breaker;
                });
                return !!result;
            };

            // Determine if at least one element in the object matches a truth test.
            // Delegates to **ECMAScript 5**'s native `some` if available.
            // Aliased as `any`.
            var any = _.some = _.any = function(obj, iterator, context) {
                iterator || (iterator = _.identity);
                var result = false;
                if (obj == null) return result;
                if (nativeSome && obj.some === nativeSome) return obj.some(iterator, context);
                each(obj, function(value, index, list) {
                    if (result || (result = iterator.call(context, value, index, list))) return breaker;
                });
                return !!result;
            };

            // Determine if a given value is included in the array or object using `===`.
            // Aliased as `contains`.
            _.include = _.contains = function(obj, target) {
                var found = false;
                if (obj == null) return found;
                if (nativeIndexOf && obj.indexOf === nativeIndexOf) return obj.indexOf(target) != -1;
                found = any(obj, function(value) {
                    return value === target;
                });
                return found;
            };

            // Invoke a method (with arguments) on every item in a collection.
            _.invoke = function(obj, method) {
                var args = slice.call(arguments, 2);
                return _.map(obj, function(value) {
                    return (_.isFunction(method) ? method || value : value[method]).apply(value, args);
                });
            };

            // Convenience version of a common use case of `map`: fetching a property.
            _.pluck = function(obj, key) {
                return _.map(obj, function(value){ return value[key]; });
            };

            // Return the maximum element or (element-based computation).
            _.max = function(obj, iterator, context) {
                if (!iterator && _.isArray(obj) && obj[0] === +obj[0]) return Math.max.apply(Math, obj);
                if (!iterator && _.isEmpty(obj)) return -Infinity;
                var result = {computed : -Infinity};
                each(obj, function(value, index, list) {
                    var computed = iterator ? iterator.call(context, value, index, list) : value;
                    computed >= result.computed && (result = {value : value, computed : computed});
                });
                return result.value;
            };

            // Return the minimum element (or element-based computation).
            _.min = function(obj, iterator, context) {
                if (!iterator && _.isArray(obj) && obj[0] === +obj[0]) return Math.min.apply(Math, obj);
                if (!iterator && _.isEmpty(obj)) return Infinity;
                var result = {computed : Infinity};
                each(obj, function(value, index, list) {
                    var computed = iterator ? iterator.call(context, value, index, list) : value;
                    computed < result.computed && (result = {value : value, computed : computed});
                });
                return result.value;
            };

            // Shuffle an array.
            _.shuffle = function(obj) {
                var shuffled = [], rand;
                each(obj, function(value, index, list) {
                    rand = Math.floor(Math.random() * (index + 1));
                    shuffled[index] = shuffled[rand];
                    shuffled[rand] = value;
                });
                return shuffled;
            };

            // Sort the object's values by a criterion produced by an iterator.
            _.sortBy = function(obj, val, context) {
                var iterator = _.isFunction(val) ? val : function(obj) { return obj[val]; };
                return _.pluck(_.map(obj, function(value, index, list) {
                    return {
                        value : value,
                        criteria : iterator.call(context, value, index, list)
                    };
                }).sort(function(left, right) {
                    var a = left.criteria, b = right.criteria;
                    if (a === void 0) return 1;
                    if (b === void 0) return -1;
                    return a < b ? -1 : a > b ? 1 : 0;
                }), 'value');
            };

            // Groups the object's values by a criterion. Pass either a string attribute
            // to group by, or a function that returns the criterion.
            _.groupBy = function(obj, val) {
                var result = {};
                var iterator = _.isFunction(val) ? val : function(obj) { return obj[val]; };
                each(obj, function(value, index) {
                    var key = iterator(value, index);
                    (result[key] || (result[key] = [])).push(value);
                });
                return result;
            };

            // Use a comparator function to figure out at what index an object should
            // be inserted so as to maintain order. Uses binary search.
            _.sortedIndex = function(array, obj, iterator) {
                iterator || (iterator = _.identity);
                var low = 0, high = array.length;
                while (low < high) {
                    var mid = (low + high) >> 1;
                    iterator(array[mid]) < iterator(obj) ? low = mid + 1 : high = mid;
                }
                return low;
            };

            // Safely convert anything iterable into a real, live array.
            _.toArray = function(obj) {
                if (!obj)                                     return [];
                if (_.isArray(obj))                           return slice.call(obj);
                if (_.isArguments(obj))                       return slice.call(obj);
                if (obj.toArray && _.isFunction(obj.toArray)) return obj.toArray();
                return _.values(obj);
            };

            // Return the number of elements in an object.
            _.size = function(obj) {
                return _.isArray(obj) ? obj.length : _.keys(obj).length;
            };

            // Array Functions
            // ---------------

            // Get the first element of an array. Passing **n** will return the first N
            // values in the array. Aliased as `head` and `take`. The **guard** check
            // allows it to work with `_.map`.
            _.first = _.head = _.take = function(array, n, guard) {
                return (n != null) && !guard ? slice.call(array, 0, n) : array[0];
            };

            // Returns everything but the last entry of the array. Especcialy useful on
            // the arguments object. Passing **n** will return all the values in
            // the array, excluding the last N. The **guard** check allows it to work with
            // `_.map`.
            _.initial = function(array, n, guard) {
                return slice.call(array, 0, array.length - ((n == null) || guard ? 1 : n));
            };

            // Get the last element of an array. Passing **n** will return the last N
            // values in the array. The **guard** check allows it to work with `_.map`.
            _.last = function(array, n, guard) {
                if ((n != null) && !guard) {
                    return slice.call(array, Math.max(array.length - n, 0));
                } else {
                    return array[array.length - 1];
                }
            };

            // Returns everything but the first entry of the array. Aliased as `tail`.
            // Especially useful on the arguments object. Passing an **index** will return
            // the rest of the values in the array from that index onward. The **guard**
            // check allows it to work with `_.map`.
            _.rest = _.tail = function(array, index, guard) {
                return slice.call(array, (index == null) || guard ? 1 : index);
            };

            // Trim out all falsy values from an array.
            _.compact = function(array) {
                return _.filter(array, function(value){ return !!value; });
            };

            // Return a completely flattened version of an array.
            _.flatten = function(array, shallow) {
                return _.reduce(array, function(memo, value) {
                    if (_.isArray(value)) return memo.concat(shallow ? value : _.flatten(value));
                    memo[memo.length] = value;
                    return memo;
                }, []);
            };

            // Return a version of the array that does not contain the specified value(s).
            _.without = function(array) {
                return _.difference(array, slice.call(arguments, 1));
            };

            // Produce a duplicate-free version of the array. If the array has already
            // been sorted, you have the option of using a faster algorithm.
            // Aliased as `unique`.
            _.uniq = _.unique = function(array, isSorted, iterator) {
                var initial = iterator ? _.map(array, iterator) : array;
                var results = [];
                // The `isSorted` flag is irrelevant if the array only contains two elements.
                if (array.length < 3) isSorted = true;
                _.reduce(initial, function (memo, value, index) {
                    if (isSorted ? _.last(memo) !== value || !memo.length : !_.include(memo, value)) {
                        memo.push(value);
                        results.push(array[index]);
                    }
                    return memo;
                }, []);
                return results;
            };

            // Produce an array that contains the union: each distinct element from all of
            // the passed-in arrays.
            _.union = function() {
                return _.uniq(_.flatten(arguments, true));
            };

            // Produce an array that contains every item shared between all the
            // passed-in arrays. (Aliased as "intersect" for back-compat.)
            _.intersection = _.intersect = function(array) {
                var rest = slice.call(arguments, 1);
                return _.filter(_.uniq(array), function(item) {
                    return _.every(rest, function(other) {
                        return _.indexOf(other, item) >= 0;
                    });
                });
            };

            // Take the difference between one array and a number of other arrays.
            // Only the elements present in just the first array will remain.
            _.difference = function(array) {
                var rest = _.flatten(slice.call(arguments, 1), true);
                return _.filter(array, function(value){ return !_.include(rest, value); });
            };

            // Zip together multiple lists into a single array -- elements that share
            // an index go together.
            _.zip = function() {
                var args = slice.call(arguments);
                var length = _.max(_.pluck(args, 'length'));
                var results = new Array(length);
                for (var i = 0; i < length; i++) results[i] = _.pluck(args, "" + i);
                return results;
            };

            // If the browser doesn't supply us with indexOf (I'm looking at you, **MSIE**),
            // we need this function. Return the position of the first occurrence of an
            // item in an array, or -1 if the item is not included in the array.
            // Delegates to **ECMAScript 5**'s native `indexOf` if available.
            // If the array is large and already in sort order, pass `true`
            // for **isSorted** to use binary search.
            _.indexOf = function(array, item, isSorted) {
                if (array == null) return -1;
                var i, l;
                if (isSorted) {
                    i = _.sortedIndex(array, item);
                    return array[i] === item ? i : -1;
                }
                if (nativeIndexOf && array.indexOf === nativeIndexOf) return array.indexOf(item);
                for (i = 0, l = array.length; i < l; i++) if (i in array && array[i] === item) return i;
                return -1;
            };

            // Delegates to **ECMAScript 5**'s native `lastIndexOf` if available.
            _.lastIndexOf = function(array, item) {
                if (array == null) return -1;
                if (nativeLastIndexOf && array.lastIndexOf === nativeLastIndexOf) return array.lastIndexOf(item);
                var i = array.length;
                while (i--) if (i in array && array[i] === item) return i;
                return -1;
            };

            // Generate an integer Array containing an arithmetic progression. A port of
            // the native Python `range()` function. See
            // [the Python documentation](http://docs.python.org/library/functions.html#range).
            _.range = function(start, stop, step) {
                if (arguments.length <= 1) {
                    stop = start || 0;
                    start = 0;
                }
                step = arguments[2] || 1;

                var len = Math.max(Math.ceil((stop - start) / step), 0);
                var idx = 0;
                var range = new Array(len);

                while(idx < len) {
                    range[idx++] = start;
                    start += step;
                }

                return range;
            };

            // Function (ahem) Functions
            // ------------------

            // Reusable constructor function for prototype setting.
            var ctor = function(){};

            // Create a function bound to a given object (assigning `this`, and arguments,
            // optionally). Binding with arguments is also known as `curry`.
            // Delegates to **ECMAScript 5**'s native `Function.bind` if available.
            // We check for `func.bind` first, to fail fast when `func` is undefined.
            _.bind = function bind(func, context) {
                var bound, args;
                if (func.bind === nativeBind && nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
                if (!_.isFunction(func)) throw new TypeError;
                args = slice.call(arguments, 2);
                return bound = function() {
                    if (!(this instanceof bound)) return func.apply(context, args.concat(slice.call(arguments)));
                    ctor.prototype = func.prototype;
                    var self = new ctor;
                    var result = func.apply(self, args.concat(slice.call(arguments)));
                    if (Object(result) === result) return result;
                    return self;
                };
            };

            // Bind all of an object's methods to that object. Useful for ensuring that
            // all callbacks defined on an object belong to it.
            _.bindAll = function(obj) {
                var funcs = slice.call(arguments, 1);
                if (funcs.length == 0) funcs = _.functions(obj);
                each(funcs, function(f) { obj[f] = _.bind(obj[f], obj); });
                return obj;
            };

            // Memoize an expensive function by storing its results.
            _.memoize = function(func, hasher) {
                var memo = {};
                hasher || (hasher = _.identity);
                return function() {
                    var key = hasher.apply(this, arguments);
                    return _.has(memo, key) ? memo[key] : (memo[key] = func.apply(this, arguments));
                };
            };

            // Delays a function for the given number of milliseconds, and then calls
            // it with the arguments supplied.
            _.delay = function(func, wait) {
                var args = slice.call(arguments, 2);
                return setTimeout(function(){ return func.apply(null, args); }, wait);
            };

            // Defers a function, scheduling it to run after the current call stack has
            // cleared.
            _.defer = function(func) {
                return _.delay.apply(_, [func, 1].concat(slice.call(arguments, 1)));
            };

            // Returns a function, that, when invoked, will only be triggered at most once
            // during a given window of time.
            _.throttle = function(func, wait) {
                var context, args, timeout, throttling, more, result;
                var whenDone = _.debounce(function(){ more = throttling = false; }, wait);
                return function() {
                    context = this; args = arguments;
                    var later = function() {
                        timeout = null;
                        if (more) func.apply(context, args);
                        whenDone();
                    };
                    if (!timeout) timeout = setTimeout(later, wait);
                    if (throttling) {
                        more = true;
                    } else {
                        result = func.apply(context, args);
                    }
                    whenDone();
                    throttling = true;
                    return result;
                };
            };

            // Returns a function, that, as long as it continues to be invoked, will not
            // be triggered. The function will be called after it stops being called for
            // N milliseconds. If `immediate` is passed, trigger the function on the
            // leading edge, instead of the trailing.
            _.debounce = function(func, wait, immediate) {
                var timeout;
                return function() {
                    var context = this, args = arguments;
                    var later = function() {
                        timeout = null;
                        if (!immediate) func.apply(context, args);
                    };
                    if (immediate && !timeout) func.apply(context, args);
                    clearTimeout(timeout);
                    timeout = setTimeout(later, wait);
                };
            };

            // Returns a function that will be executed at most one time, no matter how
            // often you call it. Useful for lazy initialization.
            _.once = function(func) {
                var ran = false, memo;
                return function() {
                    if (ran) return memo;
                    ran = true;
                    return memo = func.apply(this, arguments);
                };
            };

            // Returns the first function passed as an argument to the second,
            // allowing you to adjust arguments, run code before and after, and
            // conditionally execute the original function.
            _.wrap = function(func, wrapper) {
                return function() {
                    var args = [func].concat(slice.call(arguments, 0));
                    return wrapper.apply(this, args);
                };
            };

            // Returns a function that is the composition of a list of functions, each
            // consuming the return value of the function that follows.
            _.compose = function() {
                var funcs = arguments;
                return function() {
                    var args = arguments;
                    for (var i = funcs.length - 1; i >= 0; i--) {
                        args = [funcs[i].apply(this, args)];
                    }
                    return args[0];
                };
            };

            // Returns a function that will only be executed after being called N times.
            _.after = function(times, func) {
                if (times <= 0) return func();
                return function() {
                    if (--times < 1) { return func.apply(this, arguments); }
                };
            };

            // Object Functions
            // ----------------

            // Retrieve the names of an object's properties.
            // Delegates to **ECMAScript 5**'s native `Object.keys`
            _.keys = nativeKeys || function(obj) {
                    if (obj !== Object(obj)) throw new TypeError('Invalid object');
                    var keys = [];
                    for (var key in obj) if (_.has(obj, key)) keys[keys.length] = key;
                    return keys;
                };

            // Retrieve the values of an object's properties.
            _.values = function(obj) {
                return _.map(obj, _.identity);
            };

            // Return a sorted list of the function names available on the object.
            // Aliased as `methods`
            _.functions = _.methods = function(obj) {
                var names = [];
                for (var key in obj) {
                    if (_.isFunction(obj[key])) names.push(key);
                }
                return names.sort();
            };

            // Extend a given object with all the properties in passed-in object(s).
            _.extend = function(obj) {
                each(slice.call(arguments, 1), function(source) {
                    for (var prop in source) {
                        obj[prop] = source[prop];
                    }
                });
                return obj;
            };

            // Return a copy of the object only containing the whitelisted properties.
            _.pick = function(obj) {
                var result = {};
                each(_.flatten(slice.call(arguments, 1)), function(key) {
                    if (key in obj) result[key] = obj[key];
                });
                return result;
            };

            // Fill in a given object with default properties.
            _.defaults = function(obj) {
                each(slice.call(arguments, 1), function(source) {
                    for (var prop in source) {
                        if (obj[prop] == null) obj[prop] = source[prop];
                    }
                });
                return obj;
            };

            // Create a (shallow-cloned) duplicate of an object.
            _.clone = function(obj) {
                if (!_.isObject(obj)) return obj;
                return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
            };

            // Invokes interceptor with the obj, and then returns obj.
            // The primary purpose of this method is to "tap into" a method chain, in
            // order to perform operations on intermediate results within the chain.
            _.tap = function(obj, interceptor) {
                interceptor(obj);
                return obj;
            };

            // Internal recursive comparison function.
            function eq(a, b, stack) {
                // Identical objects are equal. `0 === -0`, but they aren't identical.
                // See the Harmony `egal` proposal: http://wiki.ecmascript.org/doku.php?id=harmony:egal.
                if (a === b) return a !== 0 || 1 / a == 1 / b;
                // A strict comparison is necessary because `null == undefined`.
                if (a == null || b == null) return a === b;
                // Unwrap any wrapped objects.
                if (a._chain) a = a._wrapped;
                if (b._chain) b = b._wrapped;
                // Invoke a custom `isEqual` method if one is provided.
                if (a.isEqual && _.isFunction(a.isEqual)) return a.isEqual(b);
                if (b.isEqual && _.isFunction(b.isEqual)) return b.isEqual(a);
                // Compare `[[Class]]` names.
                var className = toString.call(a);
                if (className != toString.call(b)) return false;
                switch (className) {
                    // Strings, numbers, dates, and booleans are compared by value.
                    case '[object String]':
                        // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
                        // equivalent to `new String("5")`.
                        return a == String(b);
                    case '[object Number]':
                        // `NaN`s are equivalent, but non-reflexive. An `egal` comparison is performed for
                        // other numeric values.
                        return a != +a ? b != +b : (a == 0 ? 1 / a == 1 / b : a == +b);
                    case '[object Date]':
                    case '[object Boolean]':
                        // Coerce dates and booleans to numeric primitive values. Dates are compared by their
                        // millisecond representations. Note that invalid dates with millisecond representations
                        // of `NaN` are not equivalent.
                        return +a == +b;
                    // RegExps are compared by their source patterns and flags.
                    case '[object RegExp]':
                        return a.source == b.source &&
                            a.global == b.global &&
                            a.multiline == b.multiline &&
                            a.ignoreCase == b.ignoreCase;
                }
                if (typeof a != 'object' || typeof b != 'object') return false;
                // Assume equality for cyclic structures. The algorithm for detecting cyclic
                // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.
                var length = stack.length;
                while (length--) {
                    // Linear search. Performance is inversely proportional to the number of
                    // unique nested structures.
                    if (stack[length] == a) return true;
                }
                // Add the first object to the stack of traversed objects.
                stack.push(a);
                var size = 0, result = true;
                // Recursively compare objects and arrays.
                if (className == '[object Array]') {
                    // Compare array lengths to determine if a deep comparison is necessary.
                    size = a.length;
                    result = size == b.length;
                    if (result) {
                        // Deep compare the contents, ignoring non-numeric properties.
                        while (size--) {
                            // Ensure commutative equality for sparse arrays.
                            if (!(result = size in a == size in b && eq(a[size], b[size], stack))) break;
                        }
                    }
                } else {
                    // Objects with different constructors are not equivalent.
                    if ('constructor' in a != 'constructor' in b || a.constructor != b.constructor) return false;
                    // Deep compare objects.
                    for (var key in a) {
                        if (_.has(a, key)) {
                            // Count the expected number of properties.
                            size++;
                            // Deep compare each member.
                            if (!(result = _.has(b, key) && eq(a[key], b[key], stack))) break;
                        }
                    }
                    // Ensure that both objects contain the same number of properties.
                    if (result) {
                        for (key in b) {
                            if (_.has(b, key) && !(size--)) break;
                        }
                        result = !size;
                    }
                }
                // Remove the first object from the stack of traversed objects.
                stack.pop();
                return result;
            }

            // Perform a deep comparison to check if two objects are equal.
            _.isEqual = function(a, b) {
                return eq(a, b, []);
            };

            // Is a given array, string, or object empty?
            // An "empty" object has no enumerable own-properties.
            _.isEmpty = function(obj) {
                if (obj == null) return true;
                if (_.isArray(obj) || _.isString(obj)) return obj.length === 0;
                for (var key in obj) if (_.has(obj, key)) return false;
                return true;
            };

            // Is a given value a DOM element?
            _.isElement = function(obj) {
                return !!(obj && obj.nodeType == 1);
            };

            // Is a given value an array?
            // Delegates to ECMA5's native Array.isArray
            _.isArray = nativeIsArray || function(obj) {
                    return toString.call(obj) == '[object Array]';
                };

            // Is a given variable an object?
            _.isObject = function(obj) {
                return obj === Object(obj);
            };

            // Is a given variable an arguments object?
            _.isArguments = function(obj) {
                return toString.call(obj) == '[object Arguments]';
            };
            if (!_.isArguments(arguments)) {
                _.isArguments = function(obj) {
                    return !!(obj && _.has(obj, 'callee'));
                };
            }

            // Is a given value a function?
            _.isFunction = function(obj) {
                return toString.call(obj) == '[object Function]';
            };

            // Is a given value a string?
            _.isString = function(obj) {
                return toString.call(obj) == '[object String]';
            };

            // Is a given value a number?
            _.isNumber = function(obj) {
                return toString.call(obj) == '[object Number]';
            };

            // Is a given object a finite number?
            _.isFinite = function(obj) {
                return _.isNumber(obj) && isFinite(obj);
            };

            // Is the given value `NaN`?
            _.isNaN = function(obj) {
                // `NaN` is the only value for which `===` is not reflexive.
                return obj !== obj;
            };

            // Is a given value a boolean?
            _.isBoolean = function(obj) {
                return obj === true || obj === false || toString.call(obj) == '[object Boolean]';
            };

            // Is a given value a date?
            _.isDate = function(obj) {
                return toString.call(obj) == '[object Date]';
            };

            // Is the given value a regular expression?
            _.isRegExp = function(obj) {
                return toString.call(obj) == '[object RegExp]';
            };

            // Is a given value equal to null?
            _.isNull = function(obj) {
                return obj === null;
            };

            // Is a given variable undefined?
            _.isUndefined = function(obj) {
                return obj === void 0;
            };

            // Has own property?
            _.has = function(obj, key) {
                // Original Underscore Code
                //return hasOwnProperty.call(obj, key);

                // Replacement code (the reason for this is that IE<9 don't define hasOwnProperty on DOM nodes)
                if(typeof (obj.hasOwnProperty) === "function") {
                    return obj.hasOwnProperty(key);
                } else {
                    return !(typeof (obj[key]) === undefined);
                }
            };

            // Utility Functions
            // -----------------

            // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
            // previous owner. Returns a reference to the Underscore object.
            _.noConflict = function() {
                root._ = previousUnderscore;
                return this;
            };

            // Keep the identity function around for default iterators.
            _.identity = function(value) {
                return value;
            };

            // Run a function **n** times.
            _.times = function (n, iterator, context) {
                for (var i = 0; i < n; i++) iterator.call(context, i);
            };

            // Escape a string for HTML interpolation.
            _.escape = function(string) {
                return (''+string).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;').replace(/'/g, '&#x27;').replace(/\//g,'&#x2F;');
            };

            // If the value of the named property is a function then invoke it;
            // otherwise, return it.
            _.result = function(object, property) {
                if (object == null) return null;
                var value = object[property];
                return _.isFunction(value) ? value.call(object) : value;
            };

            // Add your own custom functions to the Underscore object, ensuring that
            // they're correctly added to the OOP wrapper as well.
            _.mixin = function(obj) {
                each(_.functions(obj), function(name){
                    addToWrapper(name, _[name] = obj[name]);
                });
            };

            // Generate a unique integer id (unique within the entire client session).
            // Useful for temporary DOM ids.
            var idCounter = 0;
            _.uniqueId = function(prefix) {
                var id = idCounter++;
                return prefix ? prefix + id : id;
            };

            // By default, Underscore uses ERB-style template delimiters, change the
            // following template settings to use alternative delimiters.
            _.templateSettings = {
                evaluate    : /<%([\s\S]+?)%>/g,
                interpolate : /<%=([\s\S]+?)%>/g,
                escape      : /<%-([\s\S]+?)%>/g
            };

            // When customizing `templateSettings`, if you don't want to define an
            // interpolation, evaluation or escaping regex, we need one that is
            // guaranteed not to match.
            var noMatch = /.^/;

            // Certain characters need to be escaped so that they can be put into a
            // string literal.
            var escapes = {
                '\\': '\\',
                "'": "'",
                'r': '\r',
                'n': '\n',
                't': '\t',
                'u2028': '\u2028',
                'u2029': '\u2029'
            };

            for (var p in escapes) escapes[escapes[p]] = p;
            var escaper = /\\|'|\r|\n|\t|\u2028|\u2029/g;
            var unescaper = /\\(\\|'|r|n|t|u2028|u2029)/g;

            // Within an interpolation, evaluation, or escaping, remove HTML escaping
            // that had been previously added.
            var unescape = function(code) {
                return code.replace(unescaper, function(match, escape) {
                    return escapes[escape];
                });
            };

            // JavaScript micro-templating, similar to John Resig's implementation.
            // Underscore templating handles arbitrary delimiters, preserves whitespace,
            // and correctly escapes quotes within interpolated code.
            _.template = function(text, data, settings) {
                settings = _.defaults(settings || {}, _.templateSettings);

                // Compile the template source, taking care to escape characters that
                // cannot be included in a string literal and then unescape them in code
                // blocks.
                var source = "__p+='" + text
                        .replace(escaper, function(match) {
                            return '\\' + escapes[match];
                        })
                        .replace(settings.escape || noMatch, function(match, code) {
                            return "'+\n_.escape(" + unescape(code) + ")+\n'";
                        })
                        .replace(settings.interpolate || noMatch, function(match, code) {
                            return "'+\n(" + unescape(code) + ")+\n'";
                        })
                        .replace(settings.evaluate || noMatch, function(match, code) {
                            return "';\n" + unescape(code) + "\n;__p+='";
                        }) + "';\n";

                // If a variable is not specified, place data values in local scope.
                if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';

                source = "var __p='';" +
                    "var print=function(){__p+=Array.prototype.join.call(arguments, '')};\n" +
                    source + "return __p;\n";

                var render = new Function(settings.variable || 'obj', '_', source);
                if (data) return render(data, _);
                var template = function(data) {
                    return render.call(this, data, _);
                };

                // Provide the compiled function source as a convenience for build time
                // precompilation.
                template.source = 'function(' + (settings.variable || 'obj') + '){\n' +
                    source + '}';

                return template;
            };

            // Add a "chain" function, which will delegate to the wrapper.
            _.chain = function(obj) {
                return _(obj).chain();
            };

            // The OOP Wrapper
            // ---------------

            // If Underscore is called as a function, it returns a wrapped object that
            // can be used OO-style. This wrapper holds altered versions of all the
            // underscore functions. Wrapped objects may be chained.
            var wrapper = function(obj) { this._wrapped = obj; };

            // Expose `wrapper.prototype` as `_.prototype`
            _.prototype = wrapper.prototype;

            // Helper function to continue chaining intermediate results.
            var result = function(obj, chain) {
                return chain ? _(obj).chain() : obj;
            };

            // A method to easily add functions to the OOP wrapper.
            var addToWrapper = function(name, func) {
                wrapper.prototype[name] = function() {
                    var args = slice.call(arguments);
                    unshift.call(args, this._wrapped);
                    return result(func.apply(_, args), this._chain);
                };
            };

            // Add all of the Underscore functions to the wrapper object.
            _.mixin(_);

            // Add all mutator Array functions to the wrapper.
            each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {
                var method = ArrayProto[name];
                wrapper.prototype[name] = function() {
                    var wrapped = this._wrapped;
                    method.apply(wrapped, arguments);
                    var length = wrapped.length;
                    if ((name == 'shift' || name == 'splice') && length === 0) delete wrapped[0];
                    return result(wrapped, this._chain);
                };
            });

            // Add all accessor Array functions to the wrapper.
            each(['concat', 'join', 'slice'], function(name) {
                var method = ArrayProto[name];
                wrapper.prototype[name] = function() {
                    return result(method.apply(this._wrapped, arguments), this._chain);
                };
            });

            // Start chaining a wrapped Underscore object.
            wrapper.prototype.chain = function() {
                this._chain = true;
                return this;
            };

            // Extracts the result from a wrapped and chained object.
            wrapper.prototype.value = function() {
                return this._wrapped;
            };

        }).call(this);

        /*!
         * jQuery JavaScript Library v1.8.3
         * http://jquery.com/
         *
         * Includes Sizzle.js
         * http://sizzlejs.com/
         *
         * Copyright 2012 jQuery Foundation and other contributors
         * Released under the MIT license
         * http://jquery.org/license
         *
         * Date: Tue Nov 13 2012 08:20:33 GMT-0500 (Eastern Standard Time)
         */
        (function( window, undefined ) {
            var
                // A central reference to the root jQuery(document)
                rootjQuery,

                // The deferred used on DOM ready
                readyList,

                // Use the correct document accordingly with window argument (sandbox)
                document = window.document,
                location = window.location,
                navigator = window.navigator,

                // Map over jQuery in case of overwrite
                _jQuery = window.jQuery,

                // Map over the $ in case of overwrite
                _$ = window.$,

                // Save a reference to some core methods
                core_push = Array.prototype.push,
                core_slice = Array.prototype.slice,
                core_indexOf = Array.prototype.indexOf,
                core_toString = Object.prototype.toString,
                core_hasOwn = Object.prototype.hasOwnProperty,
                core_trim = String.prototype.trim,

                // Define a local copy of jQuery
                jQuery = function( selector, context ) {
                    // The jQuery object is actually just the init constructor 'enhanced'
                    return new jQuery.fn.init( selector, context, rootjQuery );
                },

                // Used for matching numbers
                core_pnum = /[\-+]?(?:\d*\.|)\d+(?:[eE][\-+]?\d+|)/.source,

                // Used for detecting and trimming whitespace
                core_rnotwhite = /\S/,
                core_rspace = /\s+/,

                // Make sure we trim BOM and NBSP (here's looking at you, Safari 5.0 and IE)
                rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

                // A simple way to check for HTML strings
                // Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
                rquickExpr = /^(?:[^#<]*(<[\w\W]+>)[^>]*$|#([\w\-]*)$)/,

                // Match a standalone tag
                rsingleTag = /^<(\w+)\s*\/?>(?:<\/\1>|)$/,

                // JSON RegExp
                rvalidchars = /^[\],:{}\s]*$/,
                rvalidbraces = /(?:^|:|,)(?:\s*\[)+/g,
                rvalidescape = /\\(?:["\\\/bfnrt]|u[\da-fA-F]{4})/g,
                rvalidtokens = /"[^"\\\r\n]*"|true|false|null|-?(?:\d\d*\.|)\d+(?:[eE][\-+]?\d+|)/g,

                // Matches dashed string for camelizing
                rmsPrefix = /^-ms-/,
                rdashAlpha = /-([\da-z])/gi,

                // Used by jQuery.camelCase as callback to replace()
                fcamelCase = function( all, letter ) {
                    return ( letter + "" ).toUpperCase();
                },

                // The ready event handler and self cleanup method
                DOMContentLoaded = function() {
                    if ( document.addEventListener ) {
                        document.removeEventListener( "DOMContentLoaded", DOMContentLoaded, false );
                        jQuery.ready();
                    } else if ( document.readyState === "complete" ) {
                        // we're here because readyState === "complete" in oldIE
                        // which is good enough for us to call the dom ready!
                        document.detachEvent( "onreadystatechange", DOMContentLoaded );
                        jQuery.ready();
                    }
                },

                // [[Class]] -> type pairs
                class2type = {};

            jQuery.fn = jQuery.prototype = {
                constructor: jQuery,
                init: function( selector, context, rootjQuery ) {
                    var match, elem, ret, doc;

                    // Handle $(""), $(null), $(undefined), $(false)
                    if ( !selector ) {
                        return this;
                    }

                    // Handle $(DOMElement)
                    if ( selector.nodeType ) {
                        this.context = this[0] = selector;
                        this.length = 1;
                        return this;
                    }

                    // Handle HTML strings
                    if ( typeof selector === "string" ) {
                        if ( selector.charAt(0) === "<" && selector.charAt( selector.length - 1 ) === ">" && selector.length >= 3 ) {
                            // Assume that strings that start and end with <> are HTML and skip the regex check
                            match = [ null, selector, null ];

                        } else {
                            match = rquickExpr.exec( selector );
                        }

                        // Match html or make sure no context is specified for #id
                        if ( match && (match[1] || !context) ) {

                            // HANDLE: $(html) -> $(array)
                            if ( match[1] ) {
                                context = context instanceof jQuery ? context[0] : context;
                                doc = ( context && context.nodeType ? context.ownerDocument || context : document );

                                // scripts is true for back-compat
                                selector = jQuery.parseHTML( match[1], doc, true );
                                if ( rsingleTag.test( match[1] ) && jQuery.isPlainObject( context ) ) {
                                    this.attr.call( selector, context, true );
                                }

                                return jQuery.merge( this, selector );

                                // HANDLE: $(#id)
                            } else {
                                elem = document.getElementById( match[2] );

                                // Check parentNode to catch when Blackberry 4.6 returns
                                // nodes that are no longer in the document #6963
                                if ( elem && elem.parentNode ) {
                                    // Handle the case where IE and Opera return items
                                    // by name instead of ID
                                    if ( elem.id !== match[2] ) {
                                        return rootjQuery.find( selector );
                                    }

                                    // Otherwise, we inject the element directly into the jQuery object
                                    this.length = 1;
                                    this[0] = elem;
                                }

                                this.context = document;
                                this.selector = selector;
                                return this;
                            }

                            // HANDLE: $(expr, $(...))
                        } else if ( !context || context.jquery ) {
                            return ( context || rootjQuery ).find( selector );

                            // HANDLE: $(expr, context)
                            // (which is just equivalent to: $(context).find(expr)
                        } else {
                            return this.constructor( context ).find( selector );
                        }

                        // HANDLE: $(function)
                        // Shortcut for document ready
                    } else if ( jQuery.isFunction( selector ) ) {
                        return rootjQuery.ready( selector );
                    }

                    if ( selector.selector !== undefined ) {
                        this.selector = selector.selector;
                        this.context = selector.context;
                    }

                    return jQuery.makeArray( selector, this );
                },

                // Start with an empty selector
                selector: "",

                // The current version of jQuery being used
                jquery: "1.8.3",

                // The default length of a jQuery object is 0
                length: 0,

                // The number of elements contained in the matched element set
                size: function() {
                    return this.length;
                },

                toArray: function() {
                    return core_slice.call( this );
                },

                // Get the Nth element in the matched element set OR
                // Get the whole matched element set as a clean array
                get: function( num ) {
                    return num == null ?

                        // Return a 'clean' array
                        this.toArray() :

                        // Return just the object
                        ( num < 0 ? this[ this.length + num ] : this[ num ] );
                },

                // Take an array of elements and push it onto the stack
                // (returning the new matched element set)
                pushStack: function( elems, name, selector ) {

                    // Build a new jQuery matched element set
                    var ret = jQuery.merge( this.constructor(), elems );

                    // Add the old object onto the stack (as a reference)
                    ret.prevObject = this;

                    ret.context = this.context;

                    if ( name === "find" ) {
                        ret.selector = this.selector + ( this.selector ? " " : "" ) + selector;
                    } else if ( name ) {
                        ret.selector = this.selector + "." + name + "(" + selector + ")";
                    }

                    // Return the newly-formed element set
                    return ret;
                },

                // Execute a callback for every element in the matched set.
                // (You can seed the arguments with an array of args, but this is
                // only used internally.)
                each: function( callback, args ) {
                    return jQuery.each( this, callback, args );
                },

                ready: function( fn ) {
                    // Add the callback
                    jQuery.ready.promise().done( fn );

                    return this;
                },

                eq: function( i ) {
                    i = +i;
                    return i === -1 ?
                        this.slice( i ) :
                        this.slice( i, i + 1 );
                },

                first: function() {
                    return this.eq( 0 );
                },

                last: function() {
                    return this.eq( -1 );
                },

                slice: function() {
                    return this.pushStack( core_slice.apply( this, arguments ),
                        "slice", core_slice.call(arguments).join(",") );
                },

                map: function( callback ) {
                    return this.pushStack( jQuery.map(this, function( elem, i ) {
                        return callback.call( elem, i, elem );
                    }));
                },

                end: function() {
                    return this.prevObject || this.constructor(null);
                },

                // For internal use only.
                // Behaves like an Array's method, not like a jQuery method.
                push: core_push,
                sort: [].sort,
                splice: [].splice
            };

// Give the init function the jQuery prototype for later instantiation
            jQuery.fn.init.prototype = jQuery.fn;

            jQuery.extend = jQuery.fn.extend = function() {
                var options, name, src, copy, copyIsArray, clone,
                    target = arguments[0] || {},
                    i = 1,
                    length = arguments.length,
                    deep = false;

                // Handle a deep copy situation
                if ( typeof target === "boolean" ) {
                    deep = target;
                    target = arguments[1] || {};
                    // skip the boolean and the target
                    i = 2;
                }

                // Handle case when target is a string or something (possible in deep copy)
                if ( typeof target !== "object" && !jQuery.isFunction(target) ) {
                    target = {};
                }

                // extend jQuery itself if only one argument is passed
                if ( length === i ) {
                    target = this;
                    --i;
                }

                for ( ; i < length; i++ ) {
                    // Only deal with non-null/undefined values
                    if ( (options = arguments[ i ]) != null ) {
                        // Extend the base object
                        for ( name in options ) {
                            src = target[ name ];
                            copy = options[ name ];

                            // Prevent never-ending loop
                            if ( target === copy ) {
                                continue;
                            }

                            // Recurse if we're merging plain objects or arrays
                            if ( deep && copy && ( jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)) ) ) {
                                if ( copyIsArray ) {
                                    copyIsArray = false;
                                    clone = src && jQuery.isArray(src) ? src : [];

                                } else {
                                    clone = src && jQuery.isPlainObject(src) ? src : {};
                                }

                                // Never move original objects, clone them
                                target[ name ] = jQuery.extend( deep, clone, copy );

                                // Don't bring in undefined values
                            } else if ( copy !== undefined ) {
                                target[ name ] = copy;
                            }
                        }
                    }
                }

                // Return the modified object
                return target;
            };

            jQuery.extend({
                noConflict: function( deep ) {
                    if ( window.$ === jQuery ) {
                        window.$ = _$;
                    }

                    if ( deep && window.jQuery === jQuery ) {
                        window.jQuery = _jQuery;
                    }

                    return jQuery;
                },

                // Is the DOM ready to be used? Set to true once it occurs.
                isReady: false,

                // A counter to track how many items to wait for before
                // the ready event fires. See #6781
                readyWait: 1,

                // Hold (or release) the ready event
                holdReady: function( hold ) {
                    if ( hold ) {
                        jQuery.readyWait++;
                    } else {
                        jQuery.ready( true );
                    }
                },

                // Handle when the DOM is ready
                ready: function( wait ) {

                    // Abort if there are pending holds or we're already ready
                    if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
                        return;
                    }

                    // Make sure body exists, at least, in case IE gets a little overzealous (ticket #5443).
                    if ( !document.body ) {
                        return setTimeout( jQuery.ready, 1 );
                    }

                    // Remember that the DOM is ready
                    jQuery.isReady = true;

                    // If a normal DOM Ready event fired, decrement, and wait if need be
                    if ( wait !== true && --jQuery.readyWait > 0 ) {
                        return;
                    }

                    // If there are functions bound, to execute
                    readyList.resolveWith( document, [ jQuery ] );

                    // Trigger any bound ready events
                    if ( jQuery.fn.trigger ) {
                        jQuery( document ).trigger("ready").off("ready");
                    }
                },

                // See test/unit/core.js for details concerning isFunction.
                // Since version 1.3, DOM methods and functions like alert
                // aren't supported. They return false on IE (#2968).
                isFunction: function( obj ) {
                    return jQuery.type(obj) === "function";
                },

                isArray: Array.isArray || function( obj ) {
                    return jQuery.type(obj) === "array";
                },

                isWindow: function( obj ) {
                    return obj != null && obj == obj.window;
                },

                isNumeric: function( obj ) {
                    return !isNaN( parseFloat(obj) ) && isFinite( obj );
                },

                type: function( obj ) {
                    return obj == null ?
                        String( obj ) :
                        class2type[ core_toString.call(obj) ] || "object";
                },

                isPlainObject: function( obj ) {
                    // Must be an Object.
                    // Because of IE, we also have to check the presence of the constructor property.
                    // Make sure that DOM nodes and window objects don't pass through, as well
                    if ( !obj || jQuery.type(obj) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
                        return false;
                    }

                    try {
                        // Not own constructor property must be Object
                        if ( obj.constructor &&
                            !core_hasOwn.call(obj, "constructor") &&
                            !core_hasOwn.call(obj.constructor.prototype, "isPrototypeOf") ) {
                            return false;
                        }
                    } catch ( e ) {
                        // IE8,9 Will throw exceptions on certain host objects #9897
                        return false;
                    }

                    // Own properties are enumerated firstly, so to speed up,
                    // if last one is own, then all properties are own.

                    var key;
                    for ( key in obj ) {}

                    return key === undefined || core_hasOwn.call( obj, key );
                },

                isEmptyObject: function( obj ) {
                    var name;
                    for ( name in obj ) {
                        return false;
                    }
                    return true;
                },

                error: function( msg ) {
                    throw new Error( msg );
                },

                // data: string of html
                // context (optional): If specified, the fragment will be created in this context, defaults to document
                // scripts (optional): If true, will include scripts passed in the html string
                parseHTML: function( data, context, scripts ) {
                    var parsed;
                    if ( !data || typeof data !== "string" ) {
                        return null;
                    }
                    if ( typeof context === "boolean" ) {
                        scripts = context;
                        context = 0;
                    }
                    context = context || document;

                    // Single tag
                    if ( (parsed = rsingleTag.exec( data )) ) {
                        return [ context.createElement( parsed[1] ) ];
                    }

                    parsed = jQuery.buildFragment( [ data ], context, scripts ? null : [] );
                    return jQuery.merge( [],
                        (parsed.cacheable ? jQuery.clone( parsed.fragment ) : parsed.fragment).childNodes );
                },

                parseJSON: function( data ) {
                    if ( !data || typeof data !== "string") {
                        return null;
                    }

                    // Make sure leading/trailing whitespace is removed (IE can't handle it)
                    data = jQuery.trim( data );

                    // Attempt to parse using the native JSON parser first
                    if ( window.JSON && window.JSON.parse ) {
                        return window.JSON.parse( data );
                    }

                    // Make sure the incoming data is actual JSON
                    // Logic borrowed from http://json.org/json2.js
                    if ( rvalidchars.test( data.replace( rvalidescape, "@" )
                            .replace( rvalidtokens, "]" )
                            .replace( rvalidbraces, "")) ) {

                        return ( new Function( "return " + data ) )();

                    }
                    jQuery.error( "Invalid JSON: " + data );
                },

                // Cross-browser xml parsing
                parseXML: function( data ) {
                    var xml, tmp;
                    if ( !data || typeof data !== "string" ) {
                        return null;
                    }
                    try {
                        if ( window.DOMParser ) { // Standard
                            tmp = new DOMParser();
                            xml = tmp.parseFromString( data , "text/xml" );
                        } else { // IE
                            xml = new ActiveXObject( "Microsoft.XMLDOM" );
                            xml.async = "false";
                            xml.loadXML( data );
                        }
                    } catch( e ) {
                        xml = undefined;
                    }
                    if ( !xml || !xml.documentElement || xml.getElementsByTagName( "parsererror" ).length ) {
                        jQuery.error( "Invalid XML: " + data );
                    }
                    return xml;
                },

                noop: function() {},

                // Evaluates a script in a global context
                // Workarounds based on findings by Jim Driscoll
                // http://weblogs.java.net/blog/driscoll/archive/2009/09/08/eval-javascript-global-context
                globalEval: function( data ) {
                    if ( data && core_rnotwhite.test( data ) ) {
                        // We use execScript on Internet Explorer
                        // We use an anonymous function so that context is window
                        // rather than jQuery in Firefox
                        ( window.execScript || function( data ) {
                            window[ "eval" ].call( window, data );
                        } )( data );
                    }
                },

                // Convert dashed to camelCase; used by the css and data modules
                // Microsoft forgot to hump their vendor prefix (#9572)
                camelCase: function( string ) {
                    return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
                },

                nodeName: function( elem, name ) {
                    return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
                },

                // args is for internal usage only
                each: function( obj, callback, args ) {
                    var name,
                        i = 0,
                        length = obj.length,
                        isObj = length === undefined || jQuery.isFunction( obj );

                    if ( args ) {
                        if ( isObj ) {
                            for ( name in obj ) {
                                if ( callback.apply( obj[ name ], args ) === false ) {
                                    break;
                                }
                            }
                        } else {
                            for ( ; i < length; ) {
                                if ( callback.apply( obj[ i++ ], args ) === false ) {
                                    break;
                                }
                            }
                        }

                        // A special, fast, case for the most common use of each
                    } else {
                        if ( isObj ) {
                            for ( name in obj ) {
                                if ( callback.call( obj[ name ], name, obj[ name ] ) === false ) {
                                    break;
                                }
                            }
                        } else {
                            for ( ; i < length; ) {
                                if ( callback.call( obj[ i ], i, obj[ i++ ] ) === false ) {
                                    break;
                                }
                            }
                        }
                    }

                    return obj;
                },

                // Use native String.trim function wherever possible
                trim: core_trim && !core_trim.call("\uFEFF\xA0") ?
                    function( text ) {
                        return text == null ?
                            "" :
                            core_trim.call( text );
                    } :

                    // Otherwise use our own trimming functionality
                    function( text ) {
                        return text == null ?
                            "" :
                            ( text + "" ).replace( rtrim, "" );
                    },

                // results is for internal usage only
                makeArray: function( arr, results ) {
                    var type,
                        ret = results || [];

                    if ( arr != null ) {
                        // The window, strings (and functions) also have 'length'
                        // Tweaked logic slightly to handle Blackberry 4.7 RegExp issues #6930
                        type = jQuery.type( arr );

                        if ( arr.length == null || type === "string" || type === "function" || type === "regexp" || jQuery.isWindow( arr ) ) {
                            core_push.call( ret, arr );
                        } else {
                            jQuery.merge( ret, arr );
                        }
                    }

                    return ret;
                },

                inArray: function( elem, arr, i ) {
                    var len;

                    if ( arr ) {
                        if ( core_indexOf ) {
                            return core_indexOf.call( arr, elem, i );
                        }

                        len = arr.length;
                        i = i ? i < 0 ? Math.max( 0, len + i ) : i : 0;

                        for ( ; i < len; i++ ) {
                            // Skip accessing in sparse arrays
                            if ( i in arr && arr[ i ] === elem ) {
                                return i;
                            }
                        }
                    }

                    return -1;
                },

                merge: function( first, second ) {
                    var l = second.length,
                        i = first.length,
                        j = 0;

                    if ( typeof l === "number" ) {
                        for ( ; j < l; j++ ) {
                            first[ i++ ] = second[ j ];
                        }

                    } else {
                        while ( second[j] !== undefined ) {
                            first[ i++ ] = second[ j++ ];
                        }
                    }

                    first.length = i;

                    return first;
                },

                grep: function( elems, callback, inv ) {
                    var retVal,
                        ret = [],
                        i = 0,
                        length = elems.length;
                    inv = !!inv;

                    // Go through the array, only saving the items
                    // that pass the validator function
                    for ( ; i < length; i++ ) {
                        retVal = !!callback( elems[ i ], i );
                        if ( inv !== retVal ) {
                            ret.push( elems[ i ] );
                        }
                    }

                    return ret;
                },

                // arg is for internal usage only
                map: function( elems, callback, arg ) {
                    var value, key,
                        ret = [],
                        i = 0,
                        length = elems.length,
                        // jquery objects are treated as arrays
                        isArray = elems instanceof jQuery || length !== undefined && typeof length === "number" && ( ( length > 0 && elems[ 0 ] && elems[ length -1 ] ) || length === 0 || jQuery.isArray( elems ) ) ;

                    // Go through the array, translating each of the items to their
                    if ( isArray ) {
                        for ( ; i < length; i++ ) {
                            value = callback( elems[ i ], i, arg );

                            if ( value != null ) {
                                ret[ ret.length ] = value;
                            }
                        }

                        // Go through every key on the object,
                    } else {
                        for ( key in elems ) {
                            value = callback( elems[ key ], key, arg );

                            if ( value != null ) {
                                ret[ ret.length ] = value;
                            }
                        }
                    }

                    // Flatten any nested arrays
                    return ret.concat.apply( [], ret );
                },

                // A global GUID counter for objects
                guid: 1,

                // Bind a function to a context, optionally partially applying any
                // arguments.
                proxy: function( fn, context ) {
                    var tmp, args, proxy;

                    if ( typeof context === "string" ) {
                        tmp = fn[ context ];
                        context = fn;
                        fn = tmp;
                    }

                    // Quick check to determine if target is callable, in the spec
                    // this throws a TypeError, but we will just return undefined.
                    if ( !jQuery.isFunction( fn ) ) {
                        return undefined;
                    }

                    // Simulated bind
                    args = core_slice.call( arguments, 2 );
                    proxy = function() {
                        return fn.apply( context, args.concat( core_slice.call( arguments ) ) );
                    };

                    // Set the guid of unique handler to the same of original handler, so it can be removed
                    proxy.guid = fn.guid = fn.guid || jQuery.guid++;

                    return proxy;
                },

                // Multifunctional method to get and set values of a collection
                // The value/s can optionally be executed if it's a function
                access: function( elems, fn, key, value, chainable, emptyGet, pass ) {
                    var exec,
                        bulk = key == null,
                        i = 0,
                        length = elems.length;

                    // Sets many values
                    if ( key && typeof key === "object" ) {
                        for ( i in key ) {
                            jQuery.access( elems, fn, i, key[i], 1, emptyGet, value );
                        }
                        chainable = 1;

                        // Sets one value
                    } else if ( value !== undefined ) {
                        // Optionally, function values get executed if exec is true
                        exec = pass === undefined && jQuery.isFunction( value );

                        if ( bulk ) {
                            // Bulk operations only iterate when executing function values
                            if ( exec ) {
                                exec = fn;
                                fn = function( elem, key, value ) {
                                    return exec.call( jQuery( elem ), value );
                                };

                                // Otherwise they run against the entire set
                            } else {
                                fn.call( elems, value );
                                fn = null;
                            }
                        }

                        if ( fn ) {
                            for (; i < length; i++ ) {
                                fn( elems[i], key, exec ? value.call( elems[i], i, fn( elems[i], key ) ) : value, pass );
                            }
                        }

                        chainable = 1;
                    }

                    return chainable ?
                        elems :

                        // Gets
                        bulk ?
                            fn.call( elems ) :
                            length ? fn( elems[0], key ) : emptyGet;
                },

                now: function() {
                    return ( new Date() ).getTime();
                }
            });

            jQuery.ready.promise = function( obj ) {
                if ( !readyList ) {

                    readyList = jQuery.Deferred();

                    // Catch cases where $(document).ready() is called after the browser event has already occurred.
                    // we once tried to use readyState "interactive" here, but it caused issues like the one
                    // discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15
                    if ( document.readyState === "complete" ) {
                        // Handle it asynchronously to allow scripts the opportunity to delay ready
                        setTimeout( jQuery.ready, 1 );

                        // Standards-based browsers support DOMContentLoaded
                    } else if ( document.addEventListener ) {
                        // Use the handy event callback
                        document.addEventListener( "DOMContentLoaded", DOMContentLoaded, false );

                        // A fallback to window.onload, that will always work
                        window.addEventListener( "load", jQuery.ready, false );

                        // If IE event model is used
                    } else {
                        // Ensure firing before onload, maybe late but safe also for iframes
                        document.attachEvent( "onreadystatechange", DOMContentLoaded );

                        // A fallback to window.onload, that will always work
                        window.attachEvent( "onload", jQuery.ready );

                        // If IE and not a frame
                        // continually check to see if the document is ready
                        var top = false;

                        try {
                            top = window.frameElement == null && document.documentElement;
                        } catch(e) {}

                        if ( top && top.doScroll ) {
                            (function doScrollCheck() {
                                if ( !jQuery.isReady ) {

                                    try {
                                        // Use the trick by Diego Perini
                                        // http://javascript.nwbox.com/IEContentLoaded/
                                        top.doScroll("left");
                                    } catch(e) {
                                        return setTimeout( doScrollCheck, 50 );
                                    }

                                    // and execute any waiting functions
                                    jQuery.ready();
                                }
                            })();
                        }
                    }
                }
                return readyList.promise( obj );
            };

// Populate the class2type map
            jQuery.each("Boolean Number String Function Array Date RegExp Object".split(" "), function(i, name) {
                class2type[ "[object " + name + "]" ] = name.toLowerCase();
            });

// All jQuery objects should point back to these
            rootjQuery = jQuery(document);
// String to Object options format cache
            var optionsCache = {};

// Convert String-formatted options into Object-formatted ones and store in cache
            function createOptions( options ) {
                var object = optionsCache[ options ] = {};
                jQuery.each( options.split( core_rspace ), function( _, flag ) {
                    object[ flag ] = true;
                });
                return object;
            }

            /*
             * Create a callback list using the following parameters:
             *
             *	options: an optional list of space-separated options that will change how
             *			the callback list behaves or a more traditional option object
             *
             * By default a callback list will act like an event callback list and can be
             * "fired" multiple times.
             *
             * Possible options:
             *
             *	once:			will ensure the callback list can only be fired once (like a Deferred)
             *
             *	memory:			will keep track of previous values and will call any callback added
             *					after the list has been fired right away with the latest "memorized"
             *					values (like a Deferred)
             *
             *	unique:			will ensure a callback can only be added once (no duplicate in the list)
             *
             *	stopOnFalse:	interrupt callings when a callback returns false
             *
             */
            jQuery.Callbacks = function( options ) {

                // Convert options from String-formatted to Object-formatted if needed
                // (we check in cache first)
                options = typeof options === "string" ?
                    ( optionsCache[ options ] || createOptions( options ) ) :
                    jQuery.extend( {}, options );

                var // Last fire value (for non-forgettable lists)
                    memory,
                    // Flag to know if list was already fired
                    fired,
                    // Flag to know if list is currently firing
                    firing,
                    // First callback to fire (used internally by add and fireWith)
                    firingStart,
                    // End of the loop when firing
                    firingLength,
                    // Index of currently firing callback (modified by remove if needed)
                    firingIndex,
                    // Actual callback list
                    list = [],
                    // Stack of fire calls for repeatable lists
                    stack = !options.once && [],
                    // Fire callbacks
                    fire = function( data ) {
                        memory = options.memory && data;
                        fired = true;
                        firingIndex = firingStart || 0;
                        firingStart = 0;
                        firingLength = list.length;
                        firing = true;
                        for ( ; list && firingIndex < firingLength; firingIndex++ ) {
                            if ( list[ firingIndex ].apply( data[ 0 ], data[ 1 ] ) === false && options.stopOnFalse ) {
                                memory = false; // To prevent further calls using add
                                break;
                            }
                        }
                        firing = false;
                        if ( list ) {
                            if ( stack ) {
                                if ( stack.length ) {
                                    fire( stack.shift() );
                                }
                            } else if ( memory ) {
                                list = [];
                            } else {
                                self.disable();
                            }
                        }
                    },
                    // Actual Callbacks object
                    self = {
                        // Add a callback or a collection of callbacks to the list
                        add: function() {
                            if ( list ) {
                                // First, we save the current length
                                var start = list.length;
                                (function add( args ) {
                                    jQuery.each( args, function( _, arg ) {
                                        var type = jQuery.type( arg );
                                        if ( type === "function" ) {
                                            if ( !options.unique || !self.has( arg ) ) {
                                                list.push( arg );
                                            }
                                        } else if ( arg && arg.length && type !== "string" ) {
                                            // Inspect recursively
                                            add( arg );
                                        }
                                    });
                                })( arguments );
                                // Do we need to add the callbacks to the
                                // current firing batch?
                                if ( firing ) {
                                    firingLength = list.length;
                                    // With memory, if we're not firing then
                                    // we should call right away
                                } else if ( memory ) {
                                    firingStart = start;
                                    fire( memory );
                                }
                            }
                            return this;
                        },
                        // Remove a callback from the list
                        remove: function() {
                            if ( list ) {
                                jQuery.each( arguments, function( _, arg ) {
                                    var index;
                                    while( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
                                        list.splice( index, 1 );
                                        // Handle firing indexes
                                        if ( firing ) {
                                            if ( index <= firingLength ) {
                                                firingLength--;
                                            }
                                            if ( index <= firingIndex ) {
                                                firingIndex--;
                                            }
                                        }
                                    }
                                });
                            }
                            return this;
                        },
                        // Control if a given callback is in the list
                        has: function( fn ) {
                            return jQuery.inArray( fn, list ) > -1;
                        },
                        // Remove all callbacks from the list
                        empty: function() {
                            list = [];
                            return this;
                        },
                        // Have the list do nothing anymore
                        disable: function() {
                            list = stack = memory = undefined;
                            return this;
                        },
                        // Is it disabled?
                        disabled: function() {
                            return !list;
                        },
                        // Lock the list in its current state
                        lock: function() {
                            stack = undefined;
                            if ( !memory ) {
                                self.disable();
                            }
                            return this;
                        },
                        // Is it locked?
                        locked: function() {
                            return !stack;
                        },
                        // Call all callbacks with the given context and arguments
                        fireWith: function( context, args ) {
                            args = args || [];
                            args = [ context, args.slice ? args.slice() : args ];
                            if ( list && ( !fired || stack ) ) {
                                if ( firing ) {
                                    stack.push( args );
                                } else {
                                    fire( args );
                                }
                            }
                            return this;
                        },
                        // Call all the callbacks with the given arguments
                        fire: function() {
                            self.fireWith( this, arguments );
                            return this;
                        },
                        // To know if the callbacks have already been called at least once
                        fired: function() {
                            return !!fired;
                        }
                    };

                return self;
            };
            jQuery.extend({

                Deferred: function( func ) {
                    var tuples = [
                            // action, add listener, listener list, final state
                            [ "resolve", "done", jQuery.Callbacks("once memory"), "resolved" ],
                            [ "reject", "fail", jQuery.Callbacks("once memory"), "rejected" ],
                            [ "notify", "progress", jQuery.Callbacks("memory") ]
                        ],
                        state = "pending",
                        promise = {
                            state: function() {
                                return state;
                            },
                            always: function() {
                                deferred.done( arguments ).fail( arguments );
                                return this;
                            },
                            then: function( /* fnDone, fnFail, fnProgress */ ) {
                                var fns = arguments;
                                return jQuery.Deferred(function( newDefer ) {
                                    jQuery.each( tuples, function( i, tuple ) {
                                        var action = tuple[ 0 ],
                                            fn = fns[ i ];
                                        // deferred[ done | fail | progress ] for forwarding actions to newDefer
                                        deferred[ tuple[1] ]( jQuery.isFunction( fn ) ?
                                            function() {
                                                var returned = fn.apply( this, arguments );
                                                if ( returned && jQuery.isFunction( returned.promise ) ) {
                                                    returned.promise()
                                                        .done( newDefer.resolve )
                                                        .fail( newDefer.reject )
                                                        .progress( newDefer.notify );
                                                } else {
                                                    newDefer[ action + "With" ]( this === deferred ? newDefer : this, [ returned ] );
                                                }
                                            } :
                                            newDefer[ action ]
                                        );
                                    });
                                    fns = null;
                                }).promise();
                            },
                            // Get a promise for this deferred
                            // If obj is provided, the promise aspect is added to the object
                            promise: function( obj ) {
                                return obj != null ? jQuery.extend( obj, promise ) : promise;
                            }
                        },
                        deferred = {};

                    // Keep pipe for back-compat
                    promise.pipe = promise.then;

                    // Add list-specific methods
                    jQuery.each( tuples, function( i, tuple ) {
                        var list = tuple[ 2 ],
                            stateString = tuple[ 3 ];

                        // promise[ done | fail | progress ] = list.add
                        promise[ tuple[1] ] = list.add;

                        // Handle state
                        if ( stateString ) {
                            list.add(function() {
                                // state = [ resolved | rejected ]
                                state = stateString;

                                // [ reject_list | resolve_list ].disable; progress_list.lock
                            }, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );
                        }

                        // deferred[ resolve | reject | notify ] = list.fire
                        deferred[ tuple[0] ] = list.fire;
                        deferred[ tuple[0] + "With" ] = list.fireWith;
                    });

                    // Make the deferred a promise
                    promise.promise( deferred );

                    // Call given func if any
                    if ( func ) {
                        func.call( deferred, deferred );
                    }

                    // All done!
                    return deferred;
                },

                // Deferred helper
                when: function( subordinate /* , ..., subordinateN */ ) {
                    var i = 0,
                        resolveValues = core_slice.call( arguments ),
                        length = resolveValues.length,

                        // the count of uncompleted subordinates
                        remaining = length !== 1 || ( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,

                        // the master Deferred. If resolveValues consist of only a single Deferred, just use that.
                        deferred = remaining === 1 ? subordinate : jQuery.Deferred(),

                        // Update function for both resolve and progress values
                        updateFunc = function( i, contexts, values ) {
                            return function( value ) {
                                contexts[ i ] = this;
                                values[ i ] = arguments.length > 1 ? core_slice.call( arguments ) : value;
                                if( values === progressValues ) {
                                    deferred.notifyWith( contexts, values );
                                } else if ( !( --remaining ) ) {
                                    deferred.resolveWith( contexts, values );
                                }
                            };
                        },

                        progressValues, progressContexts, resolveContexts;

                    // add listeners to Deferred subordinates; treat others as resolved
                    if ( length > 1 ) {
                        progressValues = new Array( length );
                        progressContexts = new Array( length );
                        resolveContexts = new Array( length );
                        for ( ; i < length; i++ ) {
                            if ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {
                                resolveValues[ i ].promise()
                                    .done( updateFunc( i, resolveContexts, resolveValues ) )
                                    .fail( deferred.reject )
                                    .progress( updateFunc( i, progressContexts, progressValues ) );
                            } else {
                                --remaining;
                            }
                        }
                    }

                    // if we're not waiting on anything, resolve the master
                    if ( !remaining ) {
                        deferred.resolveWith( resolveContexts, resolveValues );
                    }

                    return deferred.promise();
                }
            });
            jQuery.support = (function() {

                var support,
                    all,
                    a,
                    select,
                    opt,
                    input,
                    fragment,
                    eventName,
                    i,
                    isSupported,
                    clickFn,
                    div = document.createElement("div");

                // Setup
                div.setAttribute( "className", "t" );
                div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";

                // Support tests won't run in some limited or non-browser environments
                all = div.getElementsByTagName("*");
                a = div.getElementsByTagName("a")[ 0 ];
                if ( !all || !a || !all.length ) {
                    return {};
                }

                // First batch of tests
                select = document.createElement("select");
                opt = select.appendChild( document.createElement("option") );
                input = div.getElementsByTagName("input")[ 0 ];

                a.style.cssText = "top:1px;float:left;opacity:.5";
                support = {
                    // IE strips leading whitespace when .innerHTML is used
                    leadingWhitespace: ( div.firstChild.nodeType === 3 ),

                    // Make sure that tbody elements aren't automatically inserted
                    // IE will insert them into empty tables
                    tbody: !div.getElementsByTagName("tbody").length,

                    // Make sure that link elements get serialized correctly by innerHTML
                    // This requires a wrapper element in IE
                    htmlSerialize: !!div.getElementsByTagName("link").length,

                    // Get the style information from getAttribute
                    // (IE uses .cssText instead)
                    style: /top/.test( a.getAttribute("style") ),

                    // Make sure that URLs aren't manipulated
                    // (IE normalizes it by default)
                    hrefNormalized: ( a.getAttribute("href") === "/a" ),

                    // Make sure that element opacity exists
                    // (IE uses filter instead)
                    // Use a regex to work around a WebKit issue. See #5145
                    opacity: /^0.5/.test( a.style.opacity ),

                    // Verify style float existence
                    // (IE uses styleFloat instead of cssFloat)
                    cssFloat: !!a.style.cssFloat,

                    // Make sure that if no value is specified for a checkbox
                    // that it defaults to "on".
                    // (WebKit defaults to "" instead)
                    checkOn: ( input.value === "on" ),

                    // Make sure that a selected-by-default option has a working selected property.
                    // (WebKit defaults to false instead of true, IE too, if it's in an optgroup)
                    optSelected: opt.selected,

                    // Test setAttribute on camelCase class. If it works, we need attrFixes when doing get/setAttribute (ie6/7)
                    getSetAttribute: div.className !== "t",

                    // Tests for enctype support on a form (#6743)
                    enctype: !!document.createElement("form").enctype,

                    // Makes sure cloning an html5 element does not cause problems
                    // Where outerHTML is undefined, this still works
                    html5Clone: document.createElement("nav").cloneNode( true ).outerHTML !== "<:nav></:nav>",

                    // jQuery.support.boxModel DEPRECATED in 1.8 since we don't support Quirks Mode
                    boxModel: ( document.compatMode === "CSS1Compat" ),

                    // Will be defined later
                    submitBubbles: true,
                    changeBubbles: true,
                    focusinBubbles: false,
                    deleteExpando: true,
                    noCloneEvent: true,
                    inlineBlockNeedsLayout: false,
                    shrinkWrapBlocks: false,
                    reliableMarginRight: true,
                    boxSizingReliable: true,
                    pixelPosition: false
                };

                // Make sure checked status is properly cloned
                input.checked = true;
                support.noCloneChecked = input.cloneNode( true ).checked;

                // Make sure that the options inside disabled selects aren't marked as disabled
                // (WebKit marks them as disabled)
                select.disabled = true;
                support.optDisabled = !opt.disabled;

                // Test to see if it's possible to delete an expando from an element
                // Fails in Internet Explorer
                try {
                    delete div.test;
                } catch( e ) {
                    support.deleteExpando = false;
                }

                if ( !div.addEventListener && div.attachEvent && div.fireEvent ) {
                    div.attachEvent( "onclick", clickFn = function() {
                        // Cloning a node shouldn't copy over any
                        // bound event handlers (IE does this)
                        support.noCloneEvent = false;
                    });
                    div.cloneNode( true ).fireEvent("onclick");
                    div.detachEvent( "onclick", clickFn );
                }

                // Check if a radio maintains its value
                // after being appended to the DOM
                input = document.createElement("input");
                input.value = "t";
                input.setAttribute( "type", "radio" );
                support.radioValue = input.value === "t";

                input.setAttribute( "checked", "checked" );

                // #11217 - WebKit loses check when the name is after the checked attribute
                input.setAttribute( "name", "t" );

                div.appendChild( input );
                fragment = document.createDocumentFragment();
                fragment.appendChild( div.lastChild );

                // WebKit doesn't clone checked state correctly in fragments
                support.checkClone = fragment.cloneNode( true ).cloneNode( true ).lastChild.checked;

                // Check if a disconnected checkbox will retain its checked
                // value of true after appended to the DOM (IE6/7)
                support.appendChecked = input.checked;

                fragment.removeChild( input );
                fragment.appendChild( div );

                // Technique from Juriy Zaytsev
                // http://perfectionkills.com/detecting-event-support-without-browser-sniffing/
                // We only care about the case where non-standard event systems
                // are used, namely in IE. Short-circuiting here helps us to
                // avoid an eval call (in setAttribute) which can cause CSP
                // to go haywire. See: https://developer.mozilla.org/en/Security/CSP
                if ( div.attachEvent ) {
                    for ( i in {
                        submit: true,
                        change: true,
                        focusin: true
                    }) {
                        eventName = "on" + i;
                        isSupported = ( eventName in div );
                        if ( !isSupported ) {
                            div.setAttribute( eventName, "return;" );
                            isSupported = ( typeof div[ eventName ] === "function" );
                        }
                        support[ i + "Bubbles" ] = isSupported;
                    }
                }

                // Run tests that need a body at doc ready
                jQuery(function() {
                    var container, div, tds, marginDiv,
                        divReset = "padding:0;margin:0;border:0;display:block;overflow:hidden;",
                        body = document.getElementsByTagName("body")[0];

                    if ( !body ) {
                        // Return for frameset docs that don't have a body
                        return;
                    }

                    container = document.createElement("div");
                    container.style.cssText = "visibility:hidden;border:0;width:0;height:0;position:static;top:0;margin-top:1px";
                    body.insertBefore( container, body.firstChild );

                    // Construct the test element
                    div = document.createElement("div");
                    container.appendChild( div );

                    // Check if table cells still have offsetWidth/Height when they are set
                    // to display:none and there are still other visible table cells in a
                    // table row; if so, offsetWidth/Height are not reliable for use when
                    // determining if an element has been hidden directly using
                    // display:none (it is still safe to use offsets if a parent element is
                    // hidden; don safety goggles and see bug #4512 for more information).
                    // (only IE 8 fails this test)
                    div.innerHTML = "<table><tr><td></td><td>t</td></tr></table>";
                    tds = div.getElementsByTagName("td");
                    tds[ 0 ].style.cssText = "padding:0;margin:0;border:0;display:none";
                    isSupported = ( tds[ 0 ].offsetHeight === 0 );

                    tds[ 0 ].style.display = "";
                    tds[ 1 ].style.display = "none";

                    // Check if empty table cells still have offsetWidth/Height
                    // (IE <= 8 fail this test)
                    support.reliableHiddenOffsets = isSupported && ( tds[ 0 ].offsetHeight === 0 );

                    // Check box-sizing and margin behavior
                    div.innerHTML = "";
                    div.style.cssText = "box-sizing:border-box;-moz-box-sizing:border-box;-webkit-box-sizing:border-box;padding:1px;border:1px;display:block;width:4px;margin-top:1%;position:absolute;top:1%;";
                    support.boxSizing = ( div.offsetWidth === 4 );
                    support.doesNotIncludeMarginInBodyOffset = ( body.offsetTop !== 1 );

                    // NOTE: To any future maintainer, we've window.getComputedStyle
                    // because jsdom on node.js will break without it.
                    if ( window.getComputedStyle ) {
                        support.pixelPosition = ( window.getComputedStyle( div, null ) || {} ).top !== "1%";
                        support.boxSizingReliable = ( window.getComputedStyle( div, null ) || { width: "4px" } ).width === "4px";

                        // Check if div with explicit width and no margin-right incorrectly
                        // gets computed margin-right based on width of container. For more
                        // info see bug #3333
                        // Fails in WebKit before Feb 2011 nightlies
                        // WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
                        marginDiv = document.createElement("div");
                        marginDiv.style.cssText = div.style.cssText = divReset;
                        marginDiv.style.marginRight = marginDiv.style.width = "0";
                        div.style.width = "1px";
                        div.appendChild( marginDiv );
                        support.reliableMarginRight =
                            !parseFloat( ( window.getComputedStyle( marginDiv, null ) || {} ).marginRight );
                    }

                    if ( typeof div.style.zoom !== "undefined" ) {
                        // Check if natively block-level elements act like inline-block
                        // elements when setting their display to 'inline' and giving
                        // them layout
                        // (IE < 8 does this)
                        div.innerHTML = "";
                        div.style.cssText = divReset + "width:1px;padding:1px;display:inline;zoom:1";
                        support.inlineBlockNeedsLayout = ( div.offsetWidth === 3 );

                        // Check if elements with layout shrink-wrap their children
                        // (IE 6 does this)
                        div.style.display = "block";
                        div.style.overflow = "visible";
                        div.innerHTML = "<div></div>";
                        div.firstChild.style.width = "5px";
                        support.shrinkWrapBlocks = ( div.offsetWidth !== 3 );

                        container.style.zoom = 1;
                    }

                    // Null elements to avoid leaks in IE
                    body.removeChild( container );
                    container = div = tds = marginDiv = null;
                });

                // Null elements to avoid leaks in IE
                fragment.removeChild( div );
                all = a = select = opt = input = fragment = div = null;

                return support;
            })();
            var rbrace = /(?:\{[\s\S]*\}|\[[\s\S]*\])$/,
                rmultiDash = /([A-Z])/g;

            jQuery.extend({
                cache: {},

                deletedIds: [],

                // Remove at next major release (1.9/2.0)
                uuid: 0,

                // Unique for each copy of jQuery on the page
                // Non-digits removed to match rinlinejQuery
                expando: "jQuery" + ( jQuery.fn.jquery + Math.random() ).replace( /\D/g, "" ),

                // The following elements throw uncatchable exceptions if you
                // attempt to add expando properties to them.
                noData: {
                    "embed": true,
                    // Ban all objects except for Flash (which handle expandos)
                    "object": "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000",
                    "applet": true
                },

                hasData: function( elem ) {
                    elem = elem.nodeType ? jQuery.cache[ elem[jQuery.expando] ] : elem[ jQuery.expando ];
                    return !!elem && !isEmptyDataObject( elem );
                },

                data: function( elem, name, data, pvt /* Internal Use Only */ ) {
                    if ( !jQuery.acceptData( elem ) ) {
                        return;
                    }

                    var thisCache, ret,
                        internalKey = jQuery.expando,
                        getByName = typeof name === "string",

                        // We have to handle DOM nodes and JS objects differently because IE6-7
                        // can't GC object references properly across the DOM-JS boundary
                        isNode = elem.nodeType,

                        // Only DOM nodes need the global jQuery cache; JS object data is
                        // attached directly to the object so GC can occur automatically
                        cache = isNode ? jQuery.cache : elem,

                        // Only defining an ID for JS objects if its cache already exists allows
                        // the code to shortcut on the same path as a DOM node with no cache
                        id = isNode ? elem[ internalKey ] : elem[ internalKey ] && internalKey;

                    // Avoid doing any more work than we need to when trying to get data on an
                    // object that has no data at all
                    if ( (!id || !cache[id] || (!pvt && !cache[id].data)) && getByName && data === undefined ) {
                        return;
                    }

                    if ( !id ) {
                        // Only DOM nodes need a new unique ID for each element since their data
                        // ends up in the global cache
                        if ( isNode ) {
                            elem[ internalKey ] = id = jQuery.deletedIds.pop() || jQuery.guid++;
                        } else {
                            id = internalKey;
                        }
                    }

                    if ( !cache[ id ] ) {
                        cache[ id ] = {};

                        // Avoids exposing jQuery metadata on plain JS objects when the object
                        // is serialized using JSON.stringify
                        if ( !isNode ) {
                            cache[ id ].toJSON = jQuery.noop;
                        }
                    }

                    // An object can be passed to jQuery.data instead of a key/value pair; this gets
                    // shallow copied over onto the existing cache
                    if ( typeof name === "object" || typeof name === "function" ) {
                        if ( pvt ) {
                            cache[ id ] = jQuery.extend( cache[ id ], name );
                        } else {
                            cache[ id ].data = jQuery.extend( cache[ id ].data, name );
                        }
                    }

                    thisCache = cache[ id ];

                    // jQuery data() is stored in a separate object inside the object's internal data
                    // cache in order to avoid key collisions between internal data and user-defined
                    // data.
                    if ( !pvt ) {
                        if ( !thisCache.data ) {
                            thisCache.data = {};
                        }

                        thisCache = thisCache.data;
                    }

                    if ( data !== undefined ) {
                        thisCache[ jQuery.camelCase( name ) ] = data;
                    }

                    // Check for both converted-to-camel and non-converted data property names
                    // If a data property was specified
                    if ( getByName ) {

                        // First Try to find as-is property data
                        ret = thisCache[ name ];

                        // Test for null|undefined property data
                        if ( ret == null ) {

                            // Try to find the camelCased property
                            ret = thisCache[ jQuery.camelCase( name ) ];
                        }
                    } else {
                        ret = thisCache;
                    }

                    return ret;
                },

                removeData: function( elem, name, pvt /* Internal Use Only */ ) {
                    if ( !jQuery.acceptData( elem ) ) {
                        return;
                    }

                    var thisCache, i, l,

                        isNode = elem.nodeType,

                        // See jQuery.data for more information
                        cache = isNode ? jQuery.cache : elem,
                        id = isNode ? elem[ jQuery.expando ] : jQuery.expando;

                    // If there is already no cache entry for this object, there is no
                    // purpose in continuing
                    if ( !cache[ id ] ) {
                        return;
                    }

                    if ( name ) {

                        thisCache = pvt ? cache[ id ] : cache[ id ].data;

                        if ( thisCache ) {

                            // Support array or space separated string names for data keys
                            if ( !jQuery.isArray( name ) ) {

                                // try the string as a key before any manipulation
                                if ( name in thisCache ) {
                                    name = [ name ];
                                } else {

                                    // split the camel cased version by spaces unless a key with the spaces exists
                                    name = jQuery.camelCase( name );
                                    if ( name in thisCache ) {
                                        name = [ name ];
                                    } else {
                                        name = name.split(" ");
                                    }
                                }
                            }

                            for ( i = 0, l = name.length; i < l; i++ ) {
                                delete thisCache[ name[i] ];
                            }

                            // If there is no data left in the cache, we want to continue
                            // and let the cache object itself get destroyed
                            if ( !( pvt ? isEmptyDataObject : jQuery.isEmptyObject )( thisCache ) ) {
                                return;
                            }
                        }
                    }

                    // See jQuery.data for more information
                    if ( !pvt ) {
                        delete cache[ id ].data;

                        // Don't destroy the parent cache unless the internal data object
                        // had been the only thing left in it
                        if ( !isEmptyDataObject( cache[ id ] ) ) {
                            return;
                        }
                    }

                    // Destroy the cache
                    if ( isNode ) {
                        jQuery.cleanData( [ elem ], true );

                        // Use delete when supported for expandos or `cache` is not a window per isWindow (#10080)
                    } else if ( jQuery.support.deleteExpando || cache != cache.window ) {
                        delete cache[ id ];

                        // When all else fails, null
                    } else {
                        cache[ id ] = null;
                    }
                },

                // For internal use only.
                _data: function( elem, name, data ) {
                    return jQuery.data( elem, name, data, true );
                },

                // A method for determining if a DOM node can handle the data expando
                acceptData: function( elem ) {
                    var noData = elem.nodeName && jQuery.noData[ elem.nodeName.toLowerCase() ];

                    // nodes accept data unless otherwise specified; rejection can be conditional
                    return !noData || noData !== true && elem.getAttribute("classid") === noData;
                }
            });

            jQuery.fn.extend({
                data: function( key, value ) {
                    var parts, part, attr, name, l,
                        elem = this[0],
                        i = 0,
                        data = null;

                    // Gets all values
                    if ( key === undefined ) {
                        if ( this.length ) {
                            data = jQuery.data( elem );

                            if ( elem.nodeType === 1 && !jQuery._data( elem, "parsedAttrs" ) ) {
                                attr = elem.attributes;
                                for ( l = attr.length; i < l; i++ ) {
                                    name = attr[i].name;

                                    if ( !name.indexOf( "data-" ) ) {
                                        name = jQuery.camelCase( name.substring(5) );

                                        dataAttr( elem, name, data[ name ] );
                                    }
                                }
                                jQuery._data( elem, "parsedAttrs", true );
                            }
                        }

                        return data;
                    }

                    // Sets multiple values
                    if ( typeof key === "object" ) {
                        return this.each(function() {
                            jQuery.data( this, key );
                        });
                    }

                    parts = key.split( ".", 2 );
                    parts[1] = parts[1] ? "." + parts[1] : "";
                    part = parts[1] + "!";

                    return jQuery.access( this, function( value ) {

                        if ( value === undefined ) {
                            data = this.triggerHandler( "getData" + part, [ parts[0] ] );

                            // Try to fetch any internally stored data first
                            if ( data === undefined && elem ) {
                                data = jQuery.data( elem, key );
                                data = dataAttr( elem, key, data );
                            }

                            return data === undefined && parts[1] ?
                                this.data( parts[0] ) :
                                data;
                        }

                        parts[1] = value;
                        this.each(function() {
                            var self = jQuery( this );

                            self.triggerHandler( "setData" + part, parts );
                            jQuery.data( this, key, value );
                            self.triggerHandler( "changeData" + part, parts );
                        });
                    }, null, value, arguments.length > 1, null, false );
                },

                removeData: function( key ) {
                    return this.each(function() {
                        jQuery.removeData( this, key );
                    });
                }
            });

            function dataAttr( elem, key, data ) {
                // If nothing was found internally, try to fetch any
                // data from the HTML5 data-* attribute
                if ( data === undefined && elem.nodeType === 1 ) {

                    var name = "data-" + key.replace( rmultiDash, "-$1" ).toLowerCase();

                    data = elem.getAttribute( name );

                    if ( typeof data === "string" ) {
                        try {
                            data = data === "true" ? true :
                                data === "false" ? false :
                                    data === "null" ? null :
                                        // Only convert to a number if it doesn't change the string
                                        +data + "" === data ? +data :
                                            rbrace.test( data ) ? jQuery.parseJSON( data ) :
                                                data;
                        } catch( e ) {}

                        // Make sure we set the data so it isn't changed later
                        jQuery.data( elem, key, data );

                    } else {
                        data = undefined;
                    }
                }

                return data;
            }

// checks a cache object for emptiness
            function isEmptyDataObject( obj ) {
                var name;
                for ( name in obj ) {

                    // if the public data object is empty, the private is still empty
                    if ( name === "data" && jQuery.isEmptyObject( obj[name] ) ) {
                        continue;
                    }
                    if ( name !== "toJSON" ) {
                        return false;
                    }
                }

                return true;
            }
            jQuery.extend({
                queue: function( elem, type, data ) {
                    var queue;

                    if ( elem ) {
                        type = ( type || "fx" ) + "queue";
                        queue = jQuery._data( elem, type );

                        // Speed up dequeue by getting out quickly if this is just a lookup
                        if ( data ) {
                            if ( !queue || jQuery.isArray(data) ) {
                                queue = jQuery._data( elem, type, jQuery.makeArray(data) );
                            } else {
                                queue.push( data );
                            }
                        }
                        return queue || [];
                    }
                },

                dequeue: function( elem, type ) {
                    type = type || "fx";

                    var queue = jQuery.queue( elem, type ),
                        startLength = queue.length,
                        fn = queue.shift(),
                        hooks = jQuery._queueHooks( elem, type ),
                        next = function() {
                            jQuery.dequeue( elem, type );
                        };

                    // If the fx queue is dequeued, always remove the progress sentinel
                    if ( fn === "inprogress" ) {
                        fn = queue.shift();
                        startLength--;
                    }

                    if ( fn ) {

                        // Add a progress sentinel to prevent the fx queue from being
                        // automatically dequeued
                        if ( type === "fx" ) {
                            queue.unshift( "inprogress" );
                        }

                        // clear up the last queue stop function
                        delete hooks.stop;
                        fn.call( elem, next, hooks );
                    }

                    if ( !startLength && hooks ) {
                        hooks.empty.fire();
                    }
                },

                // not intended for public consumption - generates a queueHooks object, or returns the current one
                _queueHooks: function( elem, type ) {
                    var key = type + "queueHooks";
                    return jQuery._data( elem, key ) || jQuery._data( elem, key, {
                            empty: jQuery.Callbacks("once memory").add(function() {
                                jQuery.removeData( elem, type + "queue", true );
                                jQuery.removeData( elem, key, true );
                            })
                        });
                }
            });

            jQuery.fn.extend({
                queue: function( type, data ) {
                    var setter = 2;

                    if ( typeof type !== "string" ) {
                        data = type;
                        type = "fx";
                        setter--;
                    }

                    if ( arguments.length < setter ) {
                        return jQuery.queue( this[0], type );
                    }

                    return data === undefined ?
                        this :
                        this.each(function() {
                            var queue = jQuery.queue( this, type, data );

                            // ensure a hooks for this queue
                            jQuery._queueHooks( this, type );

                            if ( type === "fx" && queue[0] !== "inprogress" ) {
                                jQuery.dequeue( this, type );
                            }
                        });
                },
                dequeue: function( type ) {
                    return this.each(function() {
                        jQuery.dequeue( this, type );
                    });
                },
                // Based off of the plugin by Clint Helfers, with permission.
                // http://blindsignals.com/index.php/2009/07/jquery-delay/
                delay: function( time, type ) {
                    time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
                    type = type || "fx";

                    return this.queue( type, function( next, hooks ) {
                        var timeout = setTimeout( next, time );
                        hooks.stop = function() {
                            clearTimeout( timeout );
                        };
                    });
                },
                clearQueue: function( type ) {
                    return this.queue( type || "fx", [] );
                },
                // Get a promise resolved when queues of a certain type
                // are emptied (fx is the type by default)
                promise: function( type, obj ) {
                    var tmp,
                        count = 1,
                        defer = jQuery.Deferred(),
                        elements = this,
                        i = this.length,
                        resolve = function() {
                            if ( !( --count ) ) {
                                defer.resolveWith( elements, [ elements ] );
                            }
                        };

                    if ( typeof type !== "string" ) {
                        obj = type;
                        type = undefined;
                    }
                    type = type || "fx";

                    while( i-- ) {
                        tmp = jQuery._data( elements[ i ], type + "queueHooks" );
                        if ( tmp && tmp.empty ) {
                            count++;
                            tmp.empty.add( resolve );
                        }
                    }
                    resolve();
                    return defer.promise( obj );
                }
            });
            var nodeHook, boolHook, fixSpecified,
                rclass = /[\t\r\n]/g,
                rreturn = /\r/g,
                rtype = /^(?:button|input)$/i,
                rfocusable = /^(?:button|input|object|select|textarea)$/i,
                rclickable = /^a(?:rea|)$/i,
                rboolean = /^(?:autofocus|autoplay|async|checked|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped|selected)$/i,
                getSetAttribute = jQuery.support.getSetAttribute;

            jQuery.fn.extend({
                attr: function( name, value ) {
                    return jQuery.access( this, jQuery.attr, name, value, arguments.length > 1 );
                },

                removeAttr: function( name ) {
                    return this.each(function() {
                        jQuery.removeAttr( this, name );
                    });
                },

                prop: function( name, value ) {
                    return jQuery.access( this, jQuery.prop, name, value, arguments.length > 1 );
                },

                removeProp: function( name ) {
                    name = jQuery.propFix[ name ] || name;
                    return this.each(function() {
                        // try/catch handles cases where IE balks (such as removing a property on window)
                        try {
                            this[ name ] = undefined;
                            delete this[ name ];
                        } catch( e ) {}
                    });
                },

                addClass: function( value ) {
                    var classNames, i, l, elem,
                        setClass, c, cl;

                    if ( jQuery.isFunction( value ) ) {
                        return this.each(function( j ) {
                            jQuery( this ).addClass( value.call(this, j, this.className) );
                        });
                    }

                    if ( value && typeof value === "string" ) {
                        classNames = value.split( core_rspace );

                        for ( i = 0, l = this.length; i < l; i++ ) {
                            elem = this[ i ];

                            if ( elem.nodeType === 1 ) {
                                if ( !elem.className && classNames.length === 1 ) {
                                    elem.className = value;

                                } else {
                                    setClass = " " + elem.className + " ";

                                    for ( c = 0, cl = classNames.length; c < cl; c++ ) {
                                        if ( setClass.indexOf( " " + classNames[ c ] + " " ) < 0 ) {
                                            setClass += classNames[ c ] + " ";
                                        }
                                    }
                                    elem.className = jQuery.trim( setClass );
                                }
                            }
                        }
                    }

                    return this;
                },

                removeClass: function( value ) {
                    var removes, className, elem, c, cl, i, l;

                    if ( jQuery.isFunction( value ) ) {
                        return this.each(function( j ) {
                            jQuery( this ).removeClass( value.call(this, j, this.className) );
                        });
                    }
                    if ( (value && typeof value === "string") || value === undefined ) {
                        removes = ( value || "" ).split( core_rspace );

                        for ( i = 0, l = this.length; i < l; i++ ) {
                            elem = this[ i ];
                            if ( elem.nodeType === 1 && elem.className ) {

                                className = (" " + elem.className + " ").replace( rclass, " " );

                                // loop over each item in the removal list
                                for ( c = 0, cl = removes.length; c < cl; c++ ) {
                                    // Remove until there is nothing to remove,
                                    while ( className.indexOf(" " + removes[ c ] + " ") >= 0 ) {
                                        className = className.replace( " " + removes[ c ] + " " , " " );
                                    }
                                }
                                elem.className = value ? jQuery.trim( className ) : "";
                            }
                        }
                    }

                    return this;
                },

                toggleClass: function( value, stateVal ) {
                    var type = typeof value,
                        isBool = typeof stateVal === "boolean";

                    if ( jQuery.isFunction( value ) ) {
                        return this.each(function( i ) {
                            jQuery( this ).toggleClass( value.call(this, i, this.className, stateVal), stateVal );
                        });
                    }

                    return this.each(function() {
                        if ( type === "string" ) {
                            // toggle individual class names
                            var className,
                                i = 0,
                                self = jQuery( this ),
                                state = stateVal,
                                classNames = value.split( core_rspace );

                            while ( (className = classNames[ i++ ]) ) {
                                // check each className given, space separated list
                                state = isBool ? state : !self.hasClass( className );
                                self[ state ? "addClass" : "removeClass" ]( className );
                            }

                        } else if ( type === "undefined" || type === "boolean" ) {
                            if ( this.className ) {
                                // store className if set
                                jQuery._data( this, "__className__", this.className );
                            }

                            // toggle whole className
                            this.className = this.className || value === false ? "" : jQuery._data( this, "__className__" ) || "";
                        }
                    });
                },

                hasClass: function( selector ) {
                    var className = " " + selector + " ",
                        i = 0,
                        l = this.length;
                    for ( ; i < l; i++ ) {
                        if ( this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf( className ) >= 0 ) {
                            return true;
                        }
                    }

                    return false;
                },

                val: function( value ) {
                    var hooks, ret, isFunction,
                        elem = this[0];

                    if ( !arguments.length ) {
                        if ( elem ) {
                            hooks = jQuery.valHooks[ elem.type ] || jQuery.valHooks[ elem.nodeName.toLowerCase() ];

                            if ( hooks && "get" in hooks && (ret = hooks.get( elem, "value" )) !== undefined ) {
                                return ret;
                            }

                            ret = elem.value;

                            return typeof ret === "string" ?
                                // handle most common string cases
                                ret.replace(rreturn, "") :
                                // handle cases where value is null/undef or number
                                ret == null ? "" : ret;
                        }

                        return;
                    }

                    isFunction = jQuery.isFunction( value );

                    return this.each(function( i ) {
                        var val,
                            self = jQuery(this);

                        if ( this.nodeType !== 1 ) {
                            return;
                        }

                        if ( isFunction ) {
                            val = value.call( this, i, self.val() );
                        } else {
                            val = value;
                        }

                        // Treat null/undefined as ""; convert numbers to string
                        if ( val == null ) {
                            val = "";
                        } else if ( typeof val === "number" ) {
                            val += "";
                        } else if ( jQuery.isArray( val ) ) {
                            val = jQuery.map(val, function ( value ) {
                                return value == null ? "" : value + "";
                            });
                        }

                        hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

                        // If set returns undefined, fall back to normal setting
                        if ( !hooks || !("set" in hooks) || hooks.set( this, val, "value" ) === undefined ) {
                            this.value = val;
                        }
                    });
                }
            });

            jQuery.extend({
                valHooks: {
                    option: {
                        get: function( elem ) {
                            // attributes.value is undefined in Blackberry 4.7 but
                            // uses .value. See #6932
                            var val = elem.attributes.value;
                            return !val || val.specified ? elem.value : elem.text;
                        }
                    },
                    select: {
                        get: function( elem ) {
                            var value, option,
                                options = elem.options,
                                index = elem.selectedIndex,
                                one = elem.type === "select-one" || index < 0,
                                values = one ? null : [],
                                max = one ? index + 1 : options.length,
                                i = index < 0 ?
                                    max :
                                    one ? index : 0;

                            // Loop through all the selected options
                            for ( ; i < max; i++ ) {
                                option = options[ i ];

                                // oldIE doesn't update selected after form reset (#2551)
                                if ( ( option.selected || i === index ) &&
                                    // Don't return options that are disabled or in a disabled optgroup
                                    ( jQuery.support.optDisabled ? !option.disabled : option.getAttribute("disabled") === null ) &&
                                    ( !option.parentNode.disabled || !jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {

                                    // Get the specific value for the option
                                    value = jQuery( option ).val();

                                    // We don't need an array for one selects
                                    if ( one ) {
                                        return value;
                                    }

                                    // Multi-Selects return an array
                                    values.push( value );
                                }
                            }

                            return values;
                        },

                        set: function( elem, value ) {
                            var values = jQuery.makeArray( value );

                            jQuery(elem).find("option").each(function() {
                                this.selected = jQuery.inArray( jQuery(this).val(), values ) >= 0;
                            });

                            if ( !values.length ) {
                                elem.selectedIndex = -1;
                            }
                            return values;
                        }
                    }
                },

                // Unused in 1.8, left in so attrFn-stabbers won't die; remove in 1.9
                attrFn: {},

                attr: function( elem, name, value, pass ) {
                    var ret, hooks, notxml,
                        nType = elem.nodeType;

                    // don't get/set attributes on text, comment and attribute nodes
                    if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
                        return;
                    }

                    if ( pass && jQuery.isFunction( jQuery.fn[ name ] ) ) {
                        return jQuery( elem )[ name ]( value );
                    }

                    // Fallback to prop when attributes are not supported
                    if ( typeof elem.getAttribute === "undefined" ) {
                        return jQuery.prop( elem, name, value );
                    }

                    notxml = nType !== 1 || !jQuery.isXMLDoc( elem );

                    // All attributes are lowercase
                    // Grab necessary hook if one is defined
                    if ( notxml ) {
                        name = name.toLowerCase();
                        hooks = jQuery.attrHooks[ name ] || ( rboolean.test( name ) ? boolHook : nodeHook );
                    }

                    if ( value !== undefined ) {

                        if ( value === null ) {
                            jQuery.removeAttr( elem, name );
                            return;

                        } else if ( hooks && "set" in hooks && notxml && (ret = hooks.set( elem, value, name )) !== undefined ) {
                            return ret;

                        } else {
                            elem.setAttribute( name, value + "" );
                            return value;
                        }

                    } else if ( hooks && "get" in hooks && notxml && (ret = hooks.get( elem, name )) !== null ) {
                        return ret;

                    } else {

                        ret = elem.getAttribute( name );

                        // Non-existent attributes return null, we normalize to undefined
                        return ret === null ?
                            undefined :
                            ret;
                    }
                },

                removeAttr: function( elem, value ) {
                    var propName, attrNames, name, isBool,
                        i = 0;

                    if ( value && elem.nodeType === 1 ) {

                        attrNames = value.split( core_rspace );

                        for ( ; i < attrNames.length; i++ ) {
                            name = attrNames[ i ];

                            if ( name ) {
                                propName = jQuery.propFix[ name ] || name;
                                isBool = rboolean.test( name );

                                // See #9699 for explanation of this approach (setting first, then removal)
                                // Do not do this for boolean attributes (see #10870)
                                if ( !isBool ) {
                                    jQuery.attr( elem, name, "" );
                                }
                                elem.removeAttribute( getSetAttribute ? name : propName );

                                // Set corresponding property to false for boolean attributes
                                if ( isBool && propName in elem ) {
                                    elem[ propName ] = false;
                                }
                            }
                        }
                    }
                },

                attrHooks: {
                    type: {
                        set: function( elem, value ) {
                            // We can't allow the type property to be changed (since it causes problems in IE)
                            if ( rtype.test( elem.nodeName ) && elem.parentNode ) {
                                jQuery.error( "type property can't be changed" );
                            } else if ( !jQuery.support.radioValue && value === "radio" && jQuery.nodeName(elem, "input") ) {
                                // Setting the type on a radio button after the value resets the value in IE6-9
                                // Reset value to it's default in case type is set after value
                                // This is for element creation
                                var val = elem.value;
                                elem.setAttribute( "type", value );
                                if ( val ) {
                                    elem.value = val;
                                }
                                return value;
                            }
                        }
                    },
                    // Use the value property for back compat
                    // Use the nodeHook for button elements in IE6/7 (#1954)
                    value: {
                        get: function( elem, name ) {
                            if ( nodeHook && jQuery.nodeName( elem, "button" ) ) {
                                return nodeHook.get( elem, name );
                            }
                            return name in elem ?
                                elem.value :
                                null;
                        },
                        set: function( elem, value, name ) {
                            if ( nodeHook && jQuery.nodeName( elem, "button" ) ) {
                                return nodeHook.set( elem, value, name );
                            }
                            // Does not return so that setAttribute is also used
                            elem.value = value;
                        }
                    }
                },

                propFix: {
                    tabindex: "tabIndex",
                    readonly: "readOnly",
                    "for": "htmlFor",
                    "class": "className",
                    maxlength: "maxLength",
                    cellspacing: "cellSpacing",
                    cellpadding: "cellPadding",
                    rowspan: "rowSpan",
                    colspan: "colSpan",
                    usemap: "useMap",
                    frameborder: "frameBorder",
                    contenteditable: "contentEditable"
                },

                prop: function( elem, name, value ) {
                    var ret, hooks, notxml,
                        nType = elem.nodeType;

                    // don't get/set properties on text, comment and attribute nodes
                    if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
                        return;
                    }

                    notxml = nType !== 1 || !jQuery.isXMLDoc( elem );

                    if ( notxml ) {
                        // Fix name and attach hooks
                        name = jQuery.propFix[ name ] || name;
                        hooks = jQuery.propHooks[ name ];
                    }

                    if ( value !== undefined ) {
                        if ( hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ) {
                            return ret;

                        } else {
                            return ( elem[ name ] = value );
                        }

                    } else {
                        if ( hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ) {
                            return ret;

                        } else {
                            return elem[ name ];
                        }
                    }
                },

                propHooks: {
                    tabIndex: {
                        get: function( elem ) {
                            // elem.tabIndex doesn't always return the correct value when it hasn't been explicitly set
                            // http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
                            var attributeNode = elem.getAttributeNode("tabindex");

                            return attributeNode && attributeNode.specified ?
                                parseInt( attributeNode.value, 10 ) :
                                rfocusable.test( elem.nodeName ) || rclickable.test( elem.nodeName ) && elem.href ?
                                    0 :
                                    undefined;
                        }
                    }
                }
            });

// Hook for boolean attributes
            boolHook = {
                get: function( elem, name ) {
                    // Align boolean attributes with corresponding properties
                    // Fall back to attribute presence where some booleans are not supported
                    var attrNode,
                        property = jQuery.prop( elem, name );
                    return property === true || typeof property !== "boolean" && ( attrNode = elem.getAttributeNode(name) ) && attrNode.nodeValue !== false ?
                        name.toLowerCase() :
                        undefined;
                },
                set: function( elem, value, name ) {
                    var propName;
                    if ( value === false ) {
                        // Remove boolean attributes when set to false
                        jQuery.removeAttr( elem, name );
                    } else {
                        // value is true since we know at this point it's type boolean and not false
                        // Set boolean attributes to the same name and set the DOM property
                        propName = jQuery.propFix[ name ] || name;
                        if ( propName in elem ) {
                            // Only set the IDL specifically if it already exists on the element
                            elem[ propName ] = true;
                        }

                        elem.setAttribute( name, name.toLowerCase() );
                    }
                    return name;
                }
            };

// IE6/7 do not support getting/setting some attributes with get/setAttribute
            if ( !getSetAttribute ) {

                fixSpecified = {
                    name: true,
                    id: true,
                    coords: true
                };

                // Use this for any attribute in IE6/7
                // This fixes almost every IE6/7 issue
                nodeHook = jQuery.valHooks.button = {
                    get: function( elem, name ) {
                        var ret;
                        ret = elem.getAttributeNode( name );
                        return ret && ( fixSpecified[ name ] ? ret.value !== "" : ret.specified ) ?
                            ret.value :
                            undefined;
                    },
                    set: function( elem, value, name ) {
                        // Set the existing or create a new attribute node
                        var ret = elem.getAttributeNode( name );
                        if ( !ret ) {
                            ret = document.createAttribute( name );
                            elem.setAttributeNode( ret );
                        }
                        return ( ret.value = value + "" );
                    }
                };

                // Set width and height to auto instead of 0 on empty string( Bug #8150 )
                // This is for removals
                jQuery.each([ "width", "height" ], function( i, name ) {
                    jQuery.attrHooks[ name ] = jQuery.extend( jQuery.attrHooks[ name ], {
                        set: function( elem, value ) {
                            if ( value === "" ) {
                                elem.setAttribute( name, "auto" );
                                return value;
                            }
                        }
                    });
                });

                // Set contenteditable to false on removals(#10429)
                // Setting to empty string throws an error as an invalid value
                jQuery.attrHooks.contenteditable = {
                    get: nodeHook.get,
                    set: function( elem, value, name ) {
                        if ( value === "" ) {
                            value = "false";
                        }
                        nodeHook.set( elem, value, name );
                    }
                };
            }


// Some attributes require a special call on IE
            if ( !jQuery.support.hrefNormalized ) {
                jQuery.each([ "href", "src", "width", "height" ], function( i, name ) {
                    jQuery.attrHooks[ name ] = jQuery.extend( jQuery.attrHooks[ name ], {
                        get: function( elem ) {
                            var ret = elem.getAttribute( name, 2 );
                            return ret === null ? undefined : ret;
                        }
                    });
                });
            }

            if ( !jQuery.support.style ) {
                jQuery.attrHooks.style = {
                    get: function( elem ) {
                        // Return undefined in the case of empty string
                        // Normalize to lowercase since IE uppercases css property names
                        return elem.style.cssText.toLowerCase() || undefined;
                    },
                    set: function( elem, value ) {
                        return ( elem.style.cssText = value + "" );
                    }
                };
            }

// Safari mis-reports the default selected property of an option
// Accessing the parent's selectedIndex property fixes it
            if ( !jQuery.support.optSelected ) {
                jQuery.propHooks.selected = jQuery.extend( jQuery.propHooks.selected, {
                    get: function( elem ) {
                        var parent = elem.parentNode;

                        if ( parent ) {
                            parent.selectedIndex;

                            // Make sure that it also works with optgroups, see #5701
                            if ( parent.parentNode ) {
                                parent.parentNode.selectedIndex;
                            }
                        }
                        return null;
                    }
                });
            }

// IE6/7 call enctype encoding
            if ( !jQuery.support.enctype ) {
                jQuery.propFix.enctype = "encoding";
            }

// Radios and checkboxes getter/setter
            if ( !jQuery.support.checkOn ) {
                jQuery.each([ "radio", "checkbox" ], function() {
                    jQuery.valHooks[ this ] = {
                        get: function( elem ) {
                            // Handle the case where in Webkit "" is returned instead of "on" if a value isn't specified
                            return elem.getAttribute("value") === null ? "on" : elem.value;
                        }
                    };
                });
            }
            jQuery.each([ "radio", "checkbox" ], function() {
                jQuery.valHooks[ this ] = jQuery.extend( jQuery.valHooks[ this ], {
                    set: function( elem, value ) {
                        if ( jQuery.isArray( value ) ) {
                            return ( elem.checked = jQuery.inArray( jQuery(elem).val(), value ) >= 0 );
                        }
                    }
                });
            });
            var rformElems = /^(?:textarea|input|select)$/i,
                rtypenamespace = /^([^\.]*|)(?:\.(.+)|)$/,
                rhoverHack = /(?:^|\s)hover(\.\S+|)\b/,
                rkeyEvent = /^key/,
                rmouseEvent = /^(?:mouse|contextmenu)|click/,
                rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
                hoverHack = function( events ) {
                    return jQuery.event.special.hover ? events : events.replace( rhoverHack, "mouseenter$1 mouseleave$1" );
                };

            /*
             * Helper functions for managing events -- not part of the public interface.
             * Props to Dean Edwards' addEvent library for many of the ideas.
             */
            jQuery.event = {

                add: function( elem, types, handler, data, selector ) {

                    var elemData, eventHandle, events,
                        t, tns, type, namespaces, handleObj,
                        handleObjIn, handlers, special;

                    // Don't attach events to noData or text/comment nodes (allow plain objects tho)
                    if ( elem.nodeType === 3 || elem.nodeType === 8 || !types || !handler || !(elemData = jQuery._data( elem )) ) {
                        return;
                    }

                    // Caller can pass in an object of custom data in lieu of the handler
                    if ( handler.handler ) {
                        handleObjIn = handler;
                        handler = handleObjIn.handler;
                        selector = handleObjIn.selector;
                    }

                    // Make sure that the handler has a unique ID, used to find/remove it later
                    if ( !handler.guid ) {
                        handler.guid = jQuery.guid++;
                    }

                    // Init the element's event structure and main handler, if this is the first
                    events = elemData.events;
                    if ( !events ) {
                        elemData.events = events = {};
                    }
                    eventHandle = elemData.handle;
                    if ( !eventHandle ) {
                        elemData.handle = eventHandle = function( e ) {
                            // Discard the second event of a jQuery.event.trigger() and
                            // when an event is called after a page has unloaded
                            return typeof jQuery !== "undefined" && (!e || jQuery.event.triggered !== e.type) ?
                                jQuery.event.dispatch.apply( eventHandle.elem, arguments ) :
                                undefined;
                        };
                        // Add elem as a property of the handle fn to prevent a memory leak with IE non-native events
                        eventHandle.elem = elem;
                    }

                    // Handle multiple events separated by a space
                    // jQuery(...).bind("mouseover mouseout", fn);
                    types = jQuery.trim( hoverHack(types) ).split( " " );
                    for ( t = 0; t < types.length; t++ ) {

                        tns = rtypenamespace.exec( types[t] ) || [];
                        type = tns[1];
                        namespaces = ( tns[2] || "" ).split( "." ).sort();

                        // If event changes its type, use the special event handlers for the changed type
                        special = jQuery.event.special[ type ] || {};

                        // If selector defined, determine special event api type, otherwise given type
                        type = ( selector ? special.delegateType : special.bindType ) || type;

                        // Update special based on newly reset type
                        special = jQuery.event.special[ type ] || {};

                        // handleObj is passed to all event handlers
                        handleObj = jQuery.extend({
                            type: type,
                            origType: tns[1],
                            data: data,
                            handler: handler,
                            guid: handler.guid,
                            selector: selector,
                            needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
                            namespace: namespaces.join(".")
                        }, handleObjIn );

                        // Init the event handler queue if we're the first
                        handlers = events[ type ];
                        if ( !handlers ) {
                            handlers = events[ type ] = [];
                            handlers.delegateCount = 0;

                            // Only use addEventListener/attachEvent if the special events handler returns false
                            if ( !special.setup || special.setup.call( elem, data, namespaces, eventHandle ) === false ) {
                                // Bind the global event handler to the element
                                if ( elem.addEventListener ) {
                                    elem.addEventListener( type, eventHandle, false );

                                } else if ( elem.attachEvent ) {
                                    elem.attachEvent( "on" + type, eventHandle );
                                }
                            }
                        }

                        if ( special.add ) {
                            special.add.call( elem, handleObj );

                            if ( !handleObj.handler.guid ) {
                                handleObj.handler.guid = handler.guid;
                            }
                        }

                        // Add to the element's handler list, delegates in front
                        if ( selector ) {
                            handlers.splice( handlers.delegateCount++, 0, handleObj );
                        } else {
                            handlers.push( handleObj );
                        }

                        // Keep track of which events have ever been used, for event optimization
                        jQuery.event.global[ type ] = true;
                    }

                    // Nullify elem to prevent memory leaks in IE
                    elem = null;
                },

                global: {},

                // Detach an event or set of events from an element
                remove: function( elem, types, handler, selector, mappedTypes ) {

                    var t, tns, type, origType, namespaces, origCount,
                        j, events, special, eventType, handleObj,
                        elemData = jQuery.hasData( elem ) && jQuery._data( elem );

                    if ( !elemData || !(events = elemData.events) ) {
                        return;
                    }

                    // Once for each type.namespace in types; type may be omitted
                    types = jQuery.trim( hoverHack( types || "" ) ).split(" ");
                    for ( t = 0; t < types.length; t++ ) {
                        tns = rtypenamespace.exec( types[t] ) || [];
                        type = origType = tns[1];
                        namespaces = tns[2];

                        // Unbind all events (on this namespace, if provided) for the element
                        if ( !type ) {
                            for ( type in events ) {
                                jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
                            }
                            continue;
                        }

                        special = jQuery.event.special[ type ] || {};
                        type = ( selector? special.delegateType : special.bindType ) || type;
                        eventType = events[ type ] || [];
                        origCount = eventType.length;
                        namespaces = namespaces ? new RegExp("(^|\\.)" + namespaces.split(".").sort().join("\\.(?:.*\\.|)") + "(\\.|$)") : null;

                        // Remove matching events
                        for ( j = 0; j < eventType.length; j++ ) {
                            handleObj = eventType[ j ];

                            if ( ( mappedTypes || origType === handleObj.origType ) &&
                                ( !handler || handler.guid === handleObj.guid ) &&
                                ( !namespaces || namespaces.test( handleObj.namespace ) ) &&
                                ( !selector || selector === handleObj.selector || selector === "**" && handleObj.selector ) ) {
                                eventType.splice( j--, 1 );

                                if ( handleObj.selector ) {
                                    eventType.delegateCount--;
                                }
                                if ( special.remove ) {
                                    special.remove.call( elem, handleObj );
                                }
                            }
                        }

                        // Remove generic event handler if we removed something and no more handlers exist
                        // (avoids potential for endless recursion during removal of special event handlers)
                        if ( eventType.length === 0 && origCount !== eventType.length ) {
                            if ( !special.teardown || special.teardown.call( elem, namespaces, elemData.handle ) === false ) {
                                jQuery.removeEvent( elem, type, elemData.handle );
                            }

                            delete events[ type ];
                        }
                    }

                    // Remove the expando if it's no longer used
                    if ( jQuery.isEmptyObject( events ) ) {
                        delete elemData.handle;

                        // removeData also checks for emptiness and clears the expando if empty
                        // so use it instead of delete
                        jQuery.removeData( elem, "events", true );
                    }
                },

                // Events that are safe to short-circuit if no handlers are attached.
                // Native DOM events should not be added, they may have inline handlers.
                customEvent: {
                    "getData": true,
                    "setData": true,
                    "changeData": true
                },

                trigger: function( event, data, elem, onlyHandlers ) {
                    // Don't do events on text and comment nodes
                    if ( elem && (elem.nodeType === 3 || elem.nodeType === 8) ) {
                        return;
                    }

                    // Event object or event type
                    var cache, exclusive, i, cur, old, ontype, special, handle, eventPath, bubbleType,
                        type = event.type || event,
                        namespaces = [];

                    // focus/blur morphs to focusin/out; ensure we're not firing them right now
                    if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
                        return;
                    }

                    if ( type.indexOf( "!" ) >= 0 ) {
                        // Exclusive events trigger only for the exact event (no namespaces)
                        type = type.slice(0, -1);
                        exclusive = true;
                    }

                    if ( type.indexOf( "." ) >= 0 ) {
                        // Namespaced trigger; create a regexp to match event type in handle()
                        namespaces = type.split(".");
                        type = namespaces.shift();
                        namespaces.sort();
                    }

                    if ( (!elem || jQuery.event.customEvent[ type ]) && !jQuery.event.global[ type ] ) {
                        // No jQuery handlers for this event type, and it can't have inline handlers
                        return;
                    }

                    // Caller can pass in an Event, Object, or just an event type string
                    event = typeof event === "object" ?
                        // jQuery.Event object
                        event[ jQuery.expando ] ? event :
                            // Object literal
                            new jQuery.Event( type, event ) :
                        // Just the event type (string)
                        new jQuery.Event( type );

                    event.type = type;
                    event.isTrigger = true;
                    event.exclusive = exclusive;
                    event.namespace = namespaces.join( "." );
                    event.namespace_re = event.namespace? new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)") : null;
                    ontype = type.indexOf( ":" ) < 0 ? "on" + type : "";

                    // Handle a global trigger
                    if ( !elem ) {

                        // TODO: Stop taunting the data cache; remove global events and always attach to document
                        cache = jQuery.cache;
                        for ( i in cache ) {
                            if ( cache[ i ].events && cache[ i ].events[ type ] ) {
                                jQuery.event.trigger( event, data, cache[ i ].handle.elem, true );
                            }
                        }
                        return;
                    }

                    // Clean up the event in case it is being reused
                    event.result = undefined;
                    if ( !event.target ) {
                        event.target = elem;
                    }

                    // Clone any incoming data and prepend the event, creating the handler arg list
                    data = data != null ? jQuery.makeArray( data ) : [];
                    data.unshift( event );

                    // Allow special events to draw outside the lines
                    special = jQuery.event.special[ type ] || {};
                    if ( special.trigger && special.trigger.apply( elem, data ) === false ) {
                        return;
                    }

                    // Determine event propagation path in advance, per W3C events spec (#9951)
                    // Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
                    eventPath = [[ elem, special.bindType || type ]];
                    if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

                        bubbleType = special.delegateType || type;
                        cur = rfocusMorph.test( bubbleType + type ) ? elem : elem.parentNode;
                        for ( old = elem; cur; cur = cur.parentNode ) {
                            eventPath.push([ cur, bubbleType ]);
                            old = cur;
                        }

                        // Only add window if we got to document (e.g., not plain obj or detached DOM)
                        if ( old === (elem.ownerDocument || document) ) {
                            eventPath.push([ old.defaultView || old.parentWindow || window, bubbleType ]);
                        }
                    }

                    // Fire handlers on the event path
                    for ( i = 0; i < eventPath.length && !event.isPropagationStopped(); i++ ) {

                        cur = eventPath[i][0];
                        event.type = eventPath[i][1];

                        handle = ( jQuery._data( cur, "events" ) || {} )[ event.type ] && jQuery._data( cur, "handle" );
                        if ( handle ) {
                            handle.apply( cur, data );
                        }
                        // Note that this is a bare JS function and not a jQuery handler
                        handle = ontype && cur[ ontype ];
                        if ( handle && jQuery.acceptData( cur ) && handle.apply && handle.apply( cur, data ) === false ) {
                            event.preventDefault();
                        }
                    }
                    event.type = type;

                    // If nobody prevented the default action, do it now
                    if ( !onlyHandlers && !event.isDefaultPrevented() ) {

                        if ( (!special._default || special._default.apply( elem.ownerDocument, data ) === false) &&
                            !(type === "click" && jQuery.nodeName( elem, "a" )) && jQuery.acceptData( elem ) ) {

                            // Call a native DOM method on the target with the same name name as the event.
                            // Can't use an .isFunction() check here because IE6/7 fails that test.
                            // Don't do default actions on window, that's where global variables be (#6170)
                            // IE<9 dies on focus/blur to hidden element (#1486)
                            if ( ontype && elem[ type ] && ((type !== "focus" && type !== "blur") || event.target.offsetWidth !== 0) && !jQuery.isWindow( elem ) ) {

                                // Don't re-trigger an onFOO event when we call its FOO() method
                                old = elem[ ontype ];

                                if ( old ) {
                                    elem[ ontype ] = null;
                                }

                                // Prevent re-triggering of the same event, since we already bubbled it above
                                jQuery.event.triggered = type;
                                elem[ type ]();
                                jQuery.event.triggered = undefined;

                                if ( old ) {
                                    elem[ ontype ] = old;
                                }
                            }
                        }
                    }

                    return event.result;
                },

                dispatch: function( event ) {

                    // Make a writable jQuery.Event from the native event object
                    event = jQuery.event.fix( event || window.event );

                    var i, j, cur, ret, selMatch, matched, matches, handleObj, sel, related,
                        handlers = ( (jQuery._data( this, "events" ) || {} )[ event.type ] || []),
                        delegateCount = handlers.delegateCount,
                        args = core_slice.call( arguments ),
                        run_all = !event.exclusive && !event.namespace,
                        special = jQuery.event.special[ event.type ] || {},
                        handlerQueue = [];

                    // Use the fix-ed jQuery.Event rather than the (read-only) native event
                    args[0] = event;
                    event.delegateTarget = this;

                    // Call the preDispatch hook for the mapped type, and let it bail if desired
                    if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
                        return;
                    }

                    // Determine handlers that should run if there are delegated events
                    // Avoid non-left-click bubbling in Firefox (#3861)
                    if ( delegateCount && !(event.button && event.type === "click") ) {

                        for ( cur = event.target; cur != this; cur = cur.parentNode || this ) {

                            // Don't process clicks (ONLY) on disabled elements (#6911, #8165, #11382, #11764)
                            if ( cur.disabled !== true || event.type !== "click" ) {
                                selMatch = {};
                                matches = [];
                                for ( i = 0; i < delegateCount; i++ ) {
                                    handleObj = handlers[ i ];
                                    sel = handleObj.selector;

                                    if ( selMatch[ sel ] === undefined ) {
                                        selMatch[ sel ] = handleObj.needsContext ?
                                            jQuery( sel, this ).index( cur ) >= 0 :
                                            jQuery.find( sel, this, null, [ cur ] ).length;
                                    }
                                    if ( selMatch[ sel ] ) {
                                        matches.push( handleObj );
                                    }
                                }
                                if ( matches.length ) {
                                    handlerQueue.push({ elem: cur, matches: matches });
                                }
                            }
                        }
                    }

                    // Add the remaining (directly-bound) handlers
                    if ( handlers.length > delegateCount ) {
                        handlerQueue.push({ elem: this, matches: handlers.slice( delegateCount ) });
                    }

                    // Run delegates first; they may want to stop propagation beneath us
                    for ( i = 0; i < handlerQueue.length && !event.isPropagationStopped(); i++ ) {
                        matched = handlerQueue[ i ];
                        event.currentTarget = matched.elem;

                        for ( j = 0; j < matched.matches.length && !event.isImmediatePropagationStopped(); j++ ) {
                            handleObj = matched.matches[ j ];

                            // Triggered event must either 1) be non-exclusive and have no namespace, or
                            // 2) have namespace(s) a subset or equal to those in the bound event (both can have no namespace).
                            if ( run_all || (!event.namespace && !handleObj.namespace) || event.namespace_re && event.namespace_re.test( handleObj.namespace ) ) {

                                event.data = handleObj.data;
                                event.handleObj = handleObj;

                                ret = ( (jQuery.event.special[ handleObj.origType ] || {}).handle || handleObj.handler )
                                    .apply( matched.elem, args );

                                if ( ret !== undefined ) {
                                    event.result = ret;
                                    if ( ret === false ) {
                                        event.preventDefault();
                                        event.stopPropagation();
                                    }
                                }
                            }
                        }
                    }

                    // Call the postDispatch hook for the mapped type
                    if ( special.postDispatch ) {
                        special.postDispatch.call( this, event );
                    }

                    return event.result;
                },

                // Includes some event props shared by KeyEvent and MouseEvent
                // *** attrChange attrName relatedNode srcElement  are not normalized, non-W3C, deprecated, will be removed in 1.8 ***
                props: "attrChange attrName relatedNode srcElement altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),

                fixHooks: {},

                keyHooks: {
                    props: "char charCode key keyCode".split(" "),
                    filter: function( event, original ) {

                        // Add which for key events
                        if ( event.which == null ) {
                            event.which = original.charCode != null ? original.charCode : original.keyCode;
                        }

                        return event;
                    }
                },

                mouseHooks: {
                    props: "button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
                    filter: function( event, original ) {
                        var eventDoc, doc, body,
                            button = original.button,
                            fromElement = original.fromElement;

                        // Calculate pageX/Y if missing and clientX/Y available
                        if ( event.pageX == null && original.clientX != null ) {
                            eventDoc = event.target.ownerDocument || document;
                            doc = eventDoc.documentElement;
                            body = eventDoc.body;

                            event.pageX = original.clientX + ( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) - ( doc && doc.clientLeft || body && body.clientLeft || 0 );
                            event.pageY = original.clientY + ( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) - ( doc && doc.clientTop  || body && body.clientTop  || 0 );
                        }

                        // Add relatedTarget, if necessary
                        if ( !event.relatedTarget && fromElement ) {
                            event.relatedTarget = fromElement === event.target ? original.toElement : fromElement;
                        }

                        // Add which for click: 1 === left; 2 === middle; 3 === right
                        // Note: button is not normalized, so don't use it
                        if ( !event.which && button !== undefined ) {
                            event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
                        }

                        return event;
                    }
                },

                fix: function( event ) {
                    if ( event[ jQuery.expando ] ) {
                        return event;
                    }

                    // Create a writable copy of the event object and normalize some properties
                    var i, prop,
                        originalEvent = event,
                        fixHook = jQuery.event.fixHooks[ event.type ] || {},
                        copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;

                    event = jQuery.Event( originalEvent );

                    for ( i = copy.length; i; ) {
                        prop = copy[ --i ];
                        event[ prop ] = originalEvent[ prop ];
                    }

                    // Fix target property, if necessary (#1925, IE 6/7/8 & Safari2)
                    if ( !event.target ) {
                        event.target = originalEvent.srcElement || document;
                    }

                    // Target should not be a text node (#504, Safari)
                    if ( event.target.nodeType === 3 ) {
                        event.target = event.target.parentNode;
                    }

                    // For mouse/key events, metaKey==false if it's undefined (#3368, #11328; IE6/7/8)
                    event.metaKey = !!event.metaKey;

                    return fixHook.filter? fixHook.filter( event, originalEvent ) : event;
                },

                special: {
                    load: {
                        // Prevent triggered image.load events from bubbling to window.load
                        noBubble: true
                    },

                    focus: {
                        delegateType: "focusin"
                    },
                    blur: {
                        delegateType: "focusout"
                    },

                    beforeunload: {
                        setup: function( data, namespaces, eventHandle ) {
                            // We only want to do this special case on windows
                            if ( jQuery.isWindow( this ) ) {
                                this.onbeforeunload = eventHandle;
                            }
                        },

                        teardown: function( namespaces, eventHandle ) {
                            if ( this.onbeforeunload === eventHandle ) {
                                this.onbeforeunload = null;
                            }
                        }
                    }
                },

                simulate: function( type, elem, event, bubble ) {
                    // Piggyback on a donor event to simulate a different one.
                    // Fake originalEvent to avoid donor's stopPropagation, but if the
                    // simulated event prevents default then we do the same on the donor.
                    var e = jQuery.extend(
                        new jQuery.Event(),
                        event,
                        { type: type,
                            isSimulated: true,
                            originalEvent: {}
                        }
                    );
                    if ( bubble ) {
                        jQuery.event.trigger( e, null, elem );
                    } else {
                        jQuery.event.dispatch.call( elem, e );
                    }
                    if ( e.isDefaultPrevented() ) {
                        event.preventDefault();
                    }
                }
            };

// Some plugins are using, but it's undocumented/deprecated and will be removed.
// The 1.7 special event interface should provide all the hooks needed now.
            jQuery.event.handle = jQuery.event.dispatch;

            jQuery.removeEvent = document.removeEventListener ?
                function( elem, type, handle ) {
                    if ( elem.removeEventListener ) {
                        elem.removeEventListener( type, handle, false );
                    }
                } :
                function( elem, type, handle ) {
                    var name = "on" + type;

                    if ( elem.detachEvent ) {

                        // #8545, #7054, preventing memory leaks for custom events in IE6-8
                        // detachEvent needed property on element, by name of that event, to properly expose it to GC
                        if ( typeof elem[ name ] === "undefined" ) {
                            elem[ name ] = null;
                        }

                        elem.detachEvent( name, handle );
                    }
                };

            jQuery.Event = function( src, props ) {
                // Allow instantiation without the 'new' keyword
                if ( !(this instanceof jQuery.Event) ) {
                    return new jQuery.Event( src, props );
                }

                // Event object
                if ( src && src.type ) {
                    this.originalEvent = src;
                    this.type = src.type;

                    // Events bubbling up the document may have been marked as prevented
                    // by a handler lower down the tree; reflect the correct value.
                    this.isDefaultPrevented = ( src.defaultPrevented || src.returnValue === false ||
                    src.getPreventDefault && src.getPreventDefault() ) ? returnTrue : returnFalse;

                    // Event type
                } else {
                    this.type = src;
                }

                // Put explicitly provided properties onto the event object
                if ( props ) {
                    jQuery.extend( this, props );
                }

                // Create a timestamp if incoming event doesn't have one
                this.timeStamp = src && src.timeStamp || jQuery.now();

                // Mark it as fixed
                this[ jQuery.expando ] = true;
            };

            function returnFalse() {
                return false;
            }
            function returnTrue() {
                return true;
            }

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
            jQuery.Event.prototype = {
                preventDefault: function() {
                    this.isDefaultPrevented = returnTrue;

                    var e = this.originalEvent;
                    if ( !e ) {
                        return;
                    }

                    // if preventDefault exists run it on the original event
                    if ( e.preventDefault ) {
                        e.preventDefault();

                        // otherwise set the returnValue property of the original event to false (IE)
                    } else {
                        e.returnValue = false;
                    }
                },
                stopPropagation: function() {
                    this.isPropagationStopped = returnTrue;

                    var e = this.originalEvent;
                    if ( !e ) {
                        return;
                    }
                    // if stopPropagation exists run it on the original event
                    if ( e.stopPropagation ) {
                        e.stopPropagation();
                    }
                    // otherwise set the cancelBubble property of the original event to true (IE)
                    e.cancelBubble = true;
                },
                stopImmediatePropagation: function() {
                    this.isImmediatePropagationStopped = returnTrue;
                    this.stopPropagation();
                },
                isDefaultPrevented: returnFalse,
                isPropagationStopped: returnFalse,
                isImmediatePropagationStopped: returnFalse
            };

// Create mouseenter/leave events using mouseover/out and event-time checks
            jQuery.each({
                mouseenter: "mouseover",
                mouseleave: "mouseout"
            }, function( orig, fix ) {
                jQuery.event.special[ orig ] = {
                    delegateType: fix,
                    bindType: fix,

                    handle: function( event ) {
                        var ret,
                            target = this,
                            related = event.relatedTarget,
                            handleObj = event.handleObj,
                            selector = handleObj.selector;

                        // For mousenter/leave call the handler if related is outside the target.
                        // NB: No relatedTarget if the mouse left/entered the browser window
                        if ( !related || (related !== target && !jQuery.contains( target, related )) ) {
                            event.type = handleObj.origType;
                            ret = handleObj.handler.apply( this, arguments );
                            event.type = fix;
                        }
                        return ret;
                    }
                };
            });

// IE submit delegation
            if ( !jQuery.support.submitBubbles ) {

                jQuery.event.special.submit = {
                    setup: function() {
                        // Only need this for delegated form submit events
                        if ( jQuery.nodeName( this, "form" ) ) {
                            return false;
                        }

                        // Lazy-add a submit handler when a descendant form may potentially be submitted
                        jQuery.event.add( this, "click._submit keypress._submit", function( e ) {
                            // Node name check avoids a VML-related crash in IE (#9807)
                            var elem = e.target,
                                form = jQuery.nodeName( elem, "input" ) || jQuery.nodeName( elem, "button" ) ? elem.form : undefined;
                            if ( form && !jQuery._data( form, "_submit_attached" ) ) {
                                jQuery.event.add( form, "submit._submit", function( event ) {
                                    event._submit_bubble = true;
                                });
                                jQuery._data( form, "_submit_attached", true );
                            }
                        });
                        // return undefined since we don't need an event listener
                    },

                    postDispatch: function( event ) {
                        // If form was submitted by the user, bubble the event up the tree
                        if ( event._submit_bubble ) {
                            delete event._submit_bubble;
                            if ( this.parentNode && !event.isTrigger ) {
                                jQuery.event.simulate( "submit", this.parentNode, event, true );
                            }
                        }
                    },

                    teardown: function() {
                        // Only need this for delegated form submit events
                        if ( jQuery.nodeName( this, "form" ) ) {
                            return false;
                        }

                        // Remove delegated handlers; cleanData eventually reaps submit handlers attached above
                        jQuery.event.remove( this, "._submit" );
                    }
                };
            }

// IE change delegation and checkbox/radio fix
            if ( !jQuery.support.changeBubbles ) {

                jQuery.event.special.change = {

                    setup: function() {

                        if ( rformElems.test( this.nodeName ) ) {
                            // IE doesn't fire change on a check/radio until blur; trigger it on click
                            // after a propertychange. Eat the blur-change in special.change.handle.
                            // This still fires onchange a second time for check/radio after blur.
                            if ( this.type === "checkbox" || this.type === "radio" ) {
                                jQuery.event.add( this, "propertychange._change", function( event ) {
                                    if ( event.originalEvent.propertyName === "checked" ) {
                                        this._just_changed = true;
                                    }
                                });
                                jQuery.event.add( this, "click._change", function( event ) {
                                    if ( this._just_changed && !event.isTrigger ) {
                                        this._just_changed = false;
                                    }
                                    // Allow triggered, simulated change events (#11500)
                                    jQuery.event.simulate( "change", this, event, true );
                                });
                            }
                            return false;
                        }
                        // Delegated event; lazy-add a change handler on descendant inputs
                        jQuery.event.add( this, "beforeactivate._change", function( e ) {
                            var elem = e.target;

                            if ( rformElems.test( elem.nodeName ) && !jQuery._data( elem, "_change_attached" ) ) {
                                jQuery.event.add( elem, "change._change", function( event ) {
                                    if ( this.parentNode && !event.isSimulated && !event.isTrigger ) {
                                        jQuery.event.simulate( "change", this.parentNode, event, true );
                                    }
                                });
                                jQuery._data( elem, "_change_attached", true );
                            }
                        });
                    },

                    handle: function( event ) {
                        var elem = event.target;

                        // Swallow native change events from checkbox/radio, we already triggered them above
                        if ( this !== elem || event.isSimulated || event.isTrigger || (elem.type !== "radio" && elem.type !== "checkbox") ) {
                            return event.handleObj.handler.apply( this, arguments );
                        }
                    },

                    teardown: function() {
                        jQuery.event.remove( this, "._change" );

                        return !rformElems.test( this.nodeName );
                    }
                };
            }

// Create "bubbling" focus and blur events
            if ( !jQuery.support.focusinBubbles ) {
                jQuery.each({ focus: "focusin", blur: "focusout" }, function( orig, fix ) {

                    // Attach a single capturing handler while someone wants focusin/focusout
                    var attaches = 0,
                        handler = function( event ) {
                            jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ), true );
                        };

                    jQuery.event.special[ fix ] = {
                        setup: function() {
                            if ( attaches++ === 0 ) {
                                document.addEventListener( orig, handler, true );
                            }
                        },
                        teardown: function() {
                            if ( --attaches === 0 ) {
                                document.removeEventListener( orig, handler, true );
                            }
                        }
                    };
                });
            }

            jQuery.fn.extend({

                on: function( types, selector, data, fn, /*INTERNAL*/ one ) {
                    var origFn, type;

                    // Types can be a map of types/handlers
                    if ( typeof types === "object" ) {
                        // ( types-Object, selector, data )
                        if ( typeof selector !== "string" ) { // && selector != null
                            // ( types-Object, data )
                            data = data || selector;
                            selector = undefined;
                        }
                        for ( type in types ) {
                            this.on( type, selector, data, types[ type ], one );
                        }
                        return this;
                    }

                    if ( data == null && fn == null ) {
                        // ( types, fn )
                        fn = selector;
                        data = selector = undefined;
                    } else if ( fn == null ) {
                        if ( typeof selector === "string" ) {
                            // ( types, selector, fn )
                            fn = data;
                            data = undefined;
                        } else {
                            // ( types, data, fn )
                            fn = data;
                            data = selector;
                            selector = undefined;
                        }
                    }
                    if ( fn === false ) {
                        fn = returnFalse;
                    } else if ( !fn ) {
                        return this;
                    }

                    if ( one === 1 ) {
                        origFn = fn;
                        fn = function( event ) {
                            // Can use an empty set, since event contains the info
                            jQuery().off( event );
                            return origFn.apply( this, arguments );
                        };
                        // Use same guid so caller can remove using origFn
                        fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
                    }
                    return this.each( function() {
                        jQuery.event.add( this, types, fn, data, selector );
                    });
                },
                one: function( types, selector, data, fn ) {
                    return this.on( types, selector, data, fn, 1 );
                },
                off: function( types, selector, fn ) {
                    var handleObj, type;
                    if ( types && types.preventDefault && types.handleObj ) {
                        // ( event )  dispatched jQuery.Event
                        handleObj = types.handleObj;
                        jQuery( types.delegateTarget ).off(
                            handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType,
                            handleObj.selector,
                            handleObj.handler
                        );
                        return this;
                    }
                    if ( typeof types === "object" ) {
                        // ( types-object [, selector] )
                        for ( type in types ) {
                            this.off( type, selector, types[ type ] );
                        }
                        return this;
                    }
                    if ( selector === false || typeof selector === "function" ) {
                        // ( types [, fn] )
                        fn = selector;
                        selector = undefined;
                    }
                    if ( fn === false ) {
                        fn = returnFalse;
                    }
                    return this.each(function() {
                        jQuery.event.remove( this, types, fn, selector );
                    });
                },

                bind: function( types, data, fn ) {
                    return this.on( types, null, data, fn );
                },
                unbind: function( types, fn ) {
                    return this.off( types, null, fn );
                },

                live: function( types, data, fn ) {
                    jQuery( this.context ).on( types, this.selector, data, fn );
                    return this;
                },
                die: function( types, fn ) {
                    jQuery( this.context ).off( types, this.selector || "**", fn );
                    return this;
                },

                delegate: function( selector, types, data, fn ) {
                    return this.on( types, selector, data, fn );
                },
                undelegate: function( selector, types, fn ) {
                    // ( namespace ) or ( selector, types [, fn] )
                    return arguments.length === 1 ? this.off( selector, "**" ) : this.off( types, selector || "**", fn );
                },

                trigger: function( type, data ) {
                    return this.each(function() {
                        jQuery.event.trigger( type, data, this );
                    });
                },
                triggerHandler: function( type, data ) {
                    if ( this[0] ) {
                        return jQuery.event.trigger( type, data, this[0], true );
                    }
                },

                toggle: function( fn ) {
                    // Save reference to arguments for access in closure
                    var args = arguments,
                        guid = fn.guid || jQuery.guid++,
                        i = 0,
                        toggler = function( event ) {
                            // Figure out which function to execute
                            var lastToggle = ( jQuery._data( this, "lastToggle" + fn.guid ) || 0 ) % i;
                            jQuery._data( this, "lastToggle" + fn.guid, lastToggle + 1 );

                            // Make sure that clicks stop
                            event.preventDefault();

                            // and execute the function
                            return args[ lastToggle ].apply( this, arguments ) || false;
                        };

                    // link all the functions, so any of them can unbind this click handler
                    toggler.guid = guid;
                    while ( i < args.length ) {
                        args[ i++ ].guid = guid;
                    }

                    return this.click( toggler );
                },

                hover: function( fnOver, fnOut ) {
                    return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
                }
            });

            jQuery.each( ("blur focus focusin focusout load resize scroll unload click dblclick " +
            "mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
            "change select submit keydown keypress keyup error contextmenu").split(" "), function( i, name ) {

                // Handle event binding
                jQuery.fn[ name ] = function( data, fn ) {
                    if ( fn == null ) {
                        fn = data;
                        data = null;
                    }

                    return arguments.length > 0 ?
                        this.on( name, null, data, fn ) :
                        this.trigger( name );
                };

                if ( rkeyEvent.test( name ) ) {
                    jQuery.event.fixHooks[ name ] = jQuery.event.keyHooks;
                }

                if ( rmouseEvent.test( name ) ) {
                    jQuery.event.fixHooks[ name ] = jQuery.event.mouseHooks;
                }
            });
            /*!
             * Sizzle CSS Selector Engine
             * Copyright 2012 jQuery Foundation and other contributors
             * Released under the MIT license
             * http://sizzlejs.com/
             */
            (function( window, undefined ) {

                var cachedruns,
                    assertGetIdNotName,
                    Expr,
                    getText,
                    isXML,
                    contains,
                    compile,
                    sortOrder,
                    hasDuplicate,
                    outermostContext,

                    baseHasDuplicate = true,
                    strundefined = "undefined",

                    expando = ( "sizcache" + Math.random() ).replace( ".", "" ),

                    Token = String,
                    document = window.document,
                    docElem = document.documentElement,
                    dirruns = 0,
                    done = 0,
                    pop = [].pop,
                    push = [].push,
                    slice = [].slice,
                    // Use a stripped-down indexOf if a native one is unavailable
                    indexOf = [].indexOf || function( elem ) {
                            var i = 0,
                                len = this.length;
                            for ( ; i < len; i++ ) {
                                if ( this[i] === elem ) {
                                    return i;
                                }
                            }
                            return -1;
                        },

                    // Augment a function for special use by Sizzle
                    markFunction = function( fn, value ) {
                        fn[ expando ] = value == null || value;
                        return fn;
                    },

                    createCache = function() {
                        var cache = {},
                            keys = [];

                        return markFunction(function( key, value ) {
                            // Only keep the most recent entries
                            if ( keys.push( key ) > Expr.cacheLength ) {
                                delete cache[ keys.shift() ];
                            }

                            // Retrieve with (key + " ") to avoid collision with native Object.prototype properties (see Issue #157)
                            return (cache[ key + " " ] = value);
                        }, cache );
                    },

                    classCache = createCache(),
                    tokenCache = createCache(),
                    compilerCache = createCache(),

                    // Regex

                    // Whitespace characters http://www.w3.org/TR/css3-selectors/#whitespace
                    whitespace = "[\\x20\\t\\r\\n\\f]",
                    // http://www.w3.org/TR/css3-syntax/#characters
                    characterEncoding = "(?:\\\\.|[-\\w]|[^\\x00-\\xa0])+",

                    // Loosely modeled on CSS identifier characters
                    // An unquoted value should be a CSS identifier (http://www.w3.org/TR/css3-selectors/#attribute-selectors)
                    // Proper syntax: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
                    identifier = characterEncoding.replace( "w", "w#" ),

                    // Acceptable operators http://www.w3.org/TR/selectors/#attribute-selectors
                    operators = "([*^$|!~]?=)",
                    attributes = "\\[" + whitespace + "*(" + characterEncoding + ")" + whitespace +
                        "*(?:" + operators + whitespace + "*(?:(['\"])((?:\\\\.|[^\\\\])*?)\\3|(" + identifier + ")|)|)" + whitespace + "*\\]",

                    // Prefer arguments not in parens/brackets,
                    //   then attribute selectors and non-pseudos (denoted by :),
                    //   then anything else
                    // These preferences are here to reduce the number of selectors
                    //   needing tokenize in the PSEUDO preFilter
                    pseudos = ":(" + characterEncoding + ")(?:\\((?:(['\"])((?:\\\\.|[^\\\\])*?)\\2|([^()[\\]]*|(?:(?:" + attributes + ")|[^:]|\\\\.)*|.*))\\)|)",

                    // For matchExpr.POS and matchExpr.needsContext
                    pos = ":(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace +
                        "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)",

                    // Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
                    rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

                    rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
                    rcombinators = new RegExp( "^" + whitespace + "*([\\x20\\t\\r\\n\\f>+~])" + whitespace + "*" ),
                    rpseudo = new RegExp( pseudos ),

                    // Easily-parseable/retrievable ID or TAG or CLASS selectors
                    rquickExpr = /^(?:#([\w\-]+)|(\w+)|\.([\w\-]+))$/,

                    rnot = /^:not/,
                    rsibling = /[\x20\t\r\n\f]*[+~]/,
                    rendsWithNot = /:not\($/,

                    rheader = /h\d/i,
                    rinputs = /input|select|textarea|button/i,

                    rbackslash = /\\(?!\\)/g,

                    matchExpr = {
                        "ID": new RegExp( "^#(" + characterEncoding + ")" ),
                        "CLASS": new RegExp( "^\\.(" + characterEncoding + ")" ),
                        "NAME": new RegExp( "^\\[name=['\"]?(" + characterEncoding + ")['\"]?\\]" ),
                        "TAG": new RegExp( "^(" + characterEncoding.replace( "w", "w*" ) + ")" ),
                        "ATTR": new RegExp( "^" + attributes ),
                        "PSEUDO": new RegExp( "^" + pseudos ),
                        "POS": new RegExp( pos, "i" ),
                        "CHILD": new RegExp( "^:(only|nth|first|last)-child(?:\\(" + whitespace +
                            "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
                            "*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
                        // For use in libraries implementing .is()
                        "needsContext": new RegExp( "^" + whitespace + "*[>+~]|" + pos, "i" )
                    },

                    // Support

                    // Used for testing something on an element
                    assert = function( fn ) {
                        var div = document.createElement("div");

                        try {
                            return fn( div );
                        } catch (e) {
                            return false;
                        } finally {
                            // release memory in IE
                            div = null;
                        }
                    },

                    // Check if getElementsByTagName("*") returns only elements
                    assertTagNameNoComments = assert(function( div ) {
                        div.appendChild( document.createComment("") );
                        return !div.getElementsByTagName("*").length;
                    }),

                    // Check if getAttribute returns normalized href attributes
                    assertHrefNotNormalized = assert(function( div ) {
                        div.innerHTML = "<a href='#'></a>";
                        return div.firstChild && typeof div.firstChild.getAttribute !== strundefined &&
                            div.firstChild.getAttribute("href") === "#";
                    }),

                    // Check if attributes should be retrieved by attribute nodes
                    assertAttributes = assert(function( div ) {
                        div.innerHTML = "<select></select>";
                        var type = typeof div.lastChild.getAttribute("multiple");
                        // IE8 returns a string for some attributes even when not present
                        return type !== "boolean" && type !== "string";
                    }),

                    // Check if getElementsByClassName can be trusted
                    assertUsableClassName = assert(function( div ) {
                        // Opera can't find a second classname (in 9.6)
                        div.innerHTML = "<div class='hidden e'></div><div class='hidden'></div>";
                        if ( !div.getElementsByClassName || !div.getElementsByClassName("e").length ) {
                            return false;
                        }

                        // Safari 3.2 caches class attributes and doesn't catch changes
                        div.lastChild.className = "e";
                        return div.getElementsByClassName("e").length === 2;
                    }),

                    // Check if getElementById returns elements by name
                    // Check if getElementsByName privileges form controls or returns elements by ID
                    assertUsableName = assert(function( div ) {
                        // Inject content
                        div.id = expando + 0;
                        div.innerHTML = "<a name='" + expando + "'></a><div name='" + expando + "'></div>";
                        docElem.insertBefore( div, docElem.firstChild );

                        // Test
                        var pass = document.getElementsByName &&
                            // buggy browsers will return fewer than the correct 2
                            document.getElementsByName( expando ).length === 2 +
                            // buggy browsers will return more than the correct 0
                            document.getElementsByName( expando + 0 ).length;
                        assertGetIdNotName = !document.getElementById( expando );

                        // Cleanup
                        docElem.removeChild( div );

                        return pass;
                    });

// If slice is not available, provide a backup
                try {
                    slice.call( docElem.childNodes, 0 )[0].nodeType;
                } catch ( e ) {
                    slice = function( i ) {
                        var elem,
                            results = [];
                        for ( ; (elem = this[i]); i++ ) {
                            results.push( elem );
                        }
                        return results;
                    };
                }

                function Sizzle( selector, context, results, seed ) {
                    results = results || [];
                    context = context || document;
                    var match, elem, xml, m,
                        nodeType = context.nodeType;

                    if ( !selector || typeof selector !== "string" ) {
                        return results;
                    }

                    if ( nodeType !== 1 && nodeType !== 9 ) {
                        return [];
                    }

                    xml = isXML( context );

                    if ( !xml && !seed ) {
                        if ( (match = rquickExpr.exec( selector )) ) {
                            // Speed-up: Sizzle("#ID")
                            if ( (m = match[1]) ) {
                                if ( nodeType === 9 ) {
                                    elem = context.getElementById( m );
                                    // Check parentNode to catch when Blackberry 4.6 returns
                                    // nodes that are no longer in the document #6963
                                    if ( elem && elem.parentNode ) {
                                        // Handle the case where IE, Opera, and Webkit return items
                                        // by name instead of ID
                                        if ( elem.id === m ) {
                                            results.push( elem );
                                            return results;
                                        }
                                    } else {
                                        return results;
                                    }
                                } else {
                                    // Context is not a document
                                    if ( context.ownerDocument && (elem = context.ownerDocument.getElementById( m )) &&
                                        contains( context, elem ) && elem.id === m ) {
                                        results.push( elem );
                                        return results;
                                    }
                                }

                                // Speed-up: Sizzle("TAG")
                            } else if ( match[2] ) {
                                push.apply( results, slice.call(context.getElementsByTagName( selector ), 0) );
                                return results;

                                // Speed-up: Sizzle(".CLASS")
                            } else if ( (m = match[3]) && assertUsableClassName && context.getElementsByClassName ) {
                                push.apply( results, slice.call(context.getElementsByClassName( m ), 0) );
                                return results;
                            }
                        }
                    }

                    // All others
                    return select( selector.replace( rtrim, "$1" ), context, results, seed, xml );
                }

                Sizzle.matches = function( expr, elements ) {
                    return Sizzle( expr, null, null, elements );
                };

                Sizzle.matchesSelector = function( elem, expr ) {
                    return Sizzle( expr, null, null, [ elem ] ).length > 0;
                };

// Returns a function to use in pseudos for input types
                function createInputPseudo( type ) {
                    return function( elem ) {
                        var name = elem.nodeName.toLowerCase();
                        return name === "input" && elem.type === type;
                    };
                }

// Returns a function to use in pseudos for buttons
                function createButtonPseudo( type ) {
                    return function( elem ) {
                        var name = elem.nodeName.toLowerCase();
                        return (name === "input" || name === "button") && elem.type === type;
                    };
                }

// Returns a function to use in pseudos for positionals
                function createPositionalPseudo( fn ) {
                    return markFunction(function( argument ) {
                        argument = +argument;
                        return markFunction(function( seed, matches ) {
                            var j,
                                matchIndexes = fn( [], seed.length, argument ),
                                i = matchIndexes.length;

                            // Match elements found at the specified indexes
                            while ( i-- ) {
                                if ( seed[ (j = matchIndexes[i]) ] ) {
                                    seed[j] = !(matches[j] = seed[j]);
                                }
                            }
                        });
                    });
                }

                /**
                 * Utility function for retrieving the text value of an array of DOM nodes
                 * @param {Array|Element} elem
                 */
                getText = Sizzle.getText = function( elem ) {
                    var node,
                        ret = "",
                        i = 0,
                        nodeType = elem.nodeType;

                    if ( nodeType ) {
                        if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
                            // Use textContent for elements
                            // innerText usage removed for consistency of new lines (see #11153)
                            if ( typeof elem.textContent === "string" ) {
                                return elem.textContent;
                            } else {
                                // Traverse its children
                                for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
                                    ret += getText( elem );
                                }
                            }
                        } else if ( nodeType === 3 || nodeType === 4 ) {
                            return elem.nodeValue;
                        }
                        // Do not include comment or processing instruction nodes
                    } else {

                        // If no nodeType, this is expected to be an array
                        for ( ; (node = elem[i]); i++ ) {
                            // Do not traverse comment nodes
                            ret += getText( node );
                        }
                    }
                    return ret;
                };

                isXML = Sizzle.isXML = function( elem ) {
                    // documentElement is verified for cases where it doesn't yet exist
                    // (such as loading iframes in IE - #4833)
                    var documentElement = elem && (elem.ownerDocument || elem).documentElement;
                    return documentElement ? documentElement.nodeName !== "HTML" : false;
                };

// Element contains another
                contains = Sizzle.contains = docElem.contains ?
                    function( a, b ) {
                        var adown = a.nodeType === 9 ? a.documentElement : a,
                            bup = b && b.parentNode;
                        return a === bup || !!( bup && bup.nodeType === 1 && adown.contains && adown.contains(bup) );
                    } :
                    docElem.compareDocumentPosition ?
                        function( a, b ) {
                            return b && !!( a.compareDocumentPosition( b ) & 16 );
                        } :
                        function( a, b ) {
                            while ( (b = b.parentNode) ) {
                                if ( b === a ) {
                                    return true;
                                }
                            }
                            return false;
                        };

                Sizzle.attr = function( elem, name ) {
                    var val,
                        xml = isXML( elem );

                    if ( !xml ) {
                        name = name.toLowerCase();
                    }
                    if ( (val = Expr.attrHandle[ name ]) ) {
                        return val( elem );
                    }
                    if ( xml || assertAttributes ) {
                        return elem.getAttribute( name );
                    }
                    val = elem.getAttributeNode( name );
                    return val ?
                        typeof elem[ name ] === "boolean" ?
                            elem[ name ] ? name : null :
                            val.specified ? val.value : null :
                        null;
                };

                Expr = Sizzle.selectors = {

                    // Can be adjusted by the user
                    cacheLength: 50,

                    createPseudo: markFunction,

                    match: matchExpr,

                    // IE6/7 return a modified href
                    attrHandle: assertHrefNotNormalized ?
                        {} :
                        {
                            "href": function( elem ) {
                                return elem.getAttribute( "href", 2 );
                            },
                            "type": function( elem ) {
                                return elem.getAttribute("type");
                            }
                        },

                    find: {
                        "ID": assertGetIdNotName ?
                            function( id, context, xml ) {
                                if ( typeof context.getElementById !== strundefined && !xml ) {
                                    var m = context.getElementById( id );
                                    // Check parentNode to catch when Blackberry 4.6 returns
                                    // nodes that are no longer in the document #6963
                                    return m && m.parentNode ? [m] : [];
                                }
                            } :
                            function( id, context, xml ) {
                                if ( typeof context.getElementById !== strundefined && !xml ) {
                                    var m = context.getElementById( id );

                                    return m ?
                                        m.id === id || typeof m.getAttributeNode !== strundefined && m.getAttributeNode("id").value === id ?
                                            [m] :
                                            undefined :
                                        [];
                                }
                            },

                        "TAG": assertTagNameNoComments ?
                            function( tag, context ) {
                                if ( typeof context.getElementsByTagName !== strundefined ) {
                                    return context.getElementsByTagName( tag );
                                }
                            } :
                            function( tag, context ) {
                                var results = context.getElementsByTagName( tag );

                                // Filter out possible comments
                                if ( tag === "*" ) {
                                    var elem,
                                        tmp = [],
                                        i = 0;

                                    for ( ; (elem = results[i]); i++ ) {
                                        if ( elem.nodeType === 1 ) {
                                            tmp.push( elem );
                                        }
                                    }

                                    return tmp;
                                }
                                return results;
                            },

                        "NAME": assertUsableName && function( tag, context ) {
                            if ( typeof context.getElementsByName !== strundefined ) {
                                return context.getElementsByName( name );
                            }
                        },

                        "CLASS": assertUsableClassName && function( className, context, xml ) {
                            if ( typeof context.getElementsByClassName !== strundefined && !xml ) {
                                return context.getElementsByClassName( className );
                            }
                        }
                    },

                    relative: {
                        ">": { dir: "parentNode", first: true },
                        " ": { dir: "parentNode" },
                        "+": { dir: "previousSibling", first: true },
                        "~": { dir: "previousSibling" }
                    },

                    preFilter: {
                        "ATTR": function( match ) {
                            match[1] = match[1].replace( rbackslash, "" );

                            // Move the given value to match[3] whether quoted or unquoted
                            match[3] = ( match[4] || match[5] || "" ).replace( rbackslash, "" );

                            if ( match[2] === "~=" ) {
                                match[3] = " " + match[3] + " ";
                            }

                            return match.slice( 0, 4 );
                        },

                        "CHILD": function( match ) {
                            /* matches from matchExpr["CHILD"]
                             1 type (only|nth|...)
                             2 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
                             3 xn-component of xn+y argument ([+-]?\d*n|)
                             4 sign of xn-component
                             5 x of xn-component
                             6 sign of y-component
                             7 y of y-component
                             */
                            match[1] = match[1].toLowerCase();

                            if ( match[1] === "nth" ) {
                                // nth-child requires argument
                                if ( !match[2] ) {
                                    Sizzle.error( match[0] );
                                }

                                // numeric x and y parameters for Expr.filter.CHILD
                                // remember that false/true cast respectively to 0/1
                                match[3] = +( match[3] ? match[4] + (match[5] || 1) : 2 * ( match[2] === "even" || match[2] === "odd" ) );
                                match[4] = +( ( match[6] + match[7] ) || match[2] === "odd" );

                                // other types prohibit arguments
                            } else if ( match[2] ) {
                                Sizzle.error( match[0] );
                            }

                            return match;
                        },

                        "PSEUDO": function( match ) {
                            var unquoted, excess;
                            if ( matchExpr["CHILD"].test( match[0] ) ) {
                                return null;
                            }

                            if ( match[3] ) {
                                match[2] = match[3];
                            } else if ( (unquoted = match[4]) ) {
                                // Only check arguments that contain a pseudo
                                if ( rpseudo.test(unquoted) &&
                                    // Get excess from tokenize (recursively)
                                    (excess = tokenize( unquoted, true )) &&
                                    // advance to the next closing parenthesis
                                    (excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

                                    // excess is a negative index
                                    unquoted = unquoted.slice( 0, excess );
                                    match[0] = match[0].slice( 0, excess );
                                }
                                match[2] = unquoted;
                            }

                            // Return only captures needed by the pseudo filter method (type and argument)
                            return match.slice( 0, 3 );
                        }
                    },

                    filter: {
                        "ID": assertGetIdNotName ?
                            function( id ) {
                                id = id.replace( rbackslash, "" );
                                return function( elem ) {
                                    return elem.getAttribute("id") === id;
                                };
                            } :
                            function( id ) {
                                id = id.replace( rbackslash, "" );
                                return function( elem ) {
                                    var node = typeof elem.getAttributeNode !== strundefined && elem.getAttributeNode("id");
                                    return node && node.value === id;
                                };
                            },

                        "TAG": function( nodeName ) {
                            if ( nodeName === "*" ) {
                                return function() { return true; };
                            }
                            nodeName = nodeName.replace( rbackslash, "" ).toLowerCase();

                            return function( elem ) {
                                return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
                            };
                        },

                        "CLASS": function( className ) {
                            var pattern = classCache[ expando ][ className + " " ];

                            return pattern ||
                                (pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
                                classCache( className, function( elem ) {
                                    return pattern.test( elem.className || (typeof elem.getAttribute !== strundefined && elem.getAttribute("class")) || "" );
                                });
                        },

                        "ATTR": function( name, operator, check ) {
                            return function( elem, context ) {
                                var result = Sizzle.attr( elem, name );

                                if ( result == null ) {
                                    return operator === "!=";
                                }
                                if ( !operator ) {
                                    return true;
                                }

                                result += "";

                                return operator === "=" ? result === check :
                                    operator === "!=" ? result !== check :
                                        operator === "^=" ? check && result.indexOf( check ) === 0 :
                                            operator === "*=" ? check && result.indexOf( check ) > -1 :
                                                operator === "$=" ? check && result.substr( result.length - check.length ) === check :
                                                    operator === "~=" ? ( " " + result + " " ).indexOf( check ) > -1 :
                                                        operator === "|=" ? result === check || result.substr( 0, check.length + 1 ) === check + "-" :
                                                            false;
                            };
                        },

                        "CHILD": function( type, argument, first, last ) {

                            if ( type === "nth" ) {
                                return function( elem ) {
                                    var node, diff,
                                        parent = elem.parentNode;

                                    if ( first === 1 && last === 0 ) {
                                        return true;
                                    }

                                    if ( parent ) {
                                        diff = 0;
                                        for ( node = parent.firstChild; node; node = node.nextSibling ) {
                                            if ( node.nodeType === 1 ) {
                                                diff++;
                                                if ( elem === node ) {
                                                    break;
                                                }
                                            }
                                        }
                                    }

                                    // Incorporate the offset (or cast to NaN), then check against cycle size
                                    diff -= last;
                                    return diff === first || ( diff % first === 0 && diff / first >= 0 );
                                };
                            }

                            return function( elem ) {
                                var node = elem;

                                switch ( type ) {
                                    case "only":
                                    case "first":
                                        while ( (node = node.previousSibling) ) {
                                            if ( node.nodeType === 1 ) {
                                                return false;
                                            }
                                        }

                                        if ( type === "first" ) {
                                            return true;
                                        }

                                        node = elem;

                                    /* falls through */
                                    case "last":
                                        while ( (node = node.nextSibling) ) {
                                            if ( node.nodeType === 1 ) {
                                                return false;
                                            }
                                        }

                                        return true;
                                }
                            };
                        },

                        "PSEUDO": function( pseudo, argument ) {
                            // pseudo-class names are case-insensitive
                            // http://www.w3.org/TR/selectors/#pseudo-classes
                            // Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
                            // Remember that setFilters inherits from pseudos
                            var args,
                                fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
                                    Sizzle.error( "unsupported pseudo: " + pseudo );

                            // The user may use createPseudo to indicate that
                            // arguments are needed to create the filter function
                            // just as Sizzle does
                            if ( fn[ expando ] ) {
                                return fn( argument );
                            }

                            // But maintain support for old signatures
                            if ( fn.length > 1 ) {
                                args = [ pseudo, pseudo, "", argument ];
                                return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
                                    markFunction(function( seed, matches ) {
                                        var idx,
                                            matched = fn( seed, argument ),
                                            i = matched.length;
                                        while ( i-- ) {
                                            idx = indexOf.call( seed, matched[i] );
                                            seed[ idx ] = !( matches[ idx ] = matched[i] );
                                        }
                                    }) :
                                    function( elem ) {
                                        return fn( elem, 0, args );
                                    };
                            }

                            return fn;
                        }
                    },

                    pseudos: {
                        "not": markFunction(function( selector ) {
                            // Trim the selector passed to compile
                            // to avoid treating leading and trailing
                            // spaces as combinators
                            var input = [],
                                results = [],
                                matcher = compile( selector.replace( rtrim, "$1" ) );

                            return matcher[ expando ] ?
                                markFunction(function( seed, matches, context, xml ) {
                                    var elem,
                                        unmatched = matcher( seed, null, xml, [] ),
                                        i = seed.length;

                                    // Match elements unmatched by `matcher`
                                    while ( i-- ) {
                                        if ( (elem = unmatched[i]) ) {
                                            seed[i] = !(matches[i] = elem);
                                        }
                                    }
                                }) :
                                function( elem, context, xml ) {
                                    input[0] = elem;
                                    matcher( input, null, xml, results );
                                    return !results.pop();
                                };
                        }),

                        "has": markFunction(function( selector ) {
                            return function( elem ) {
                                return Sizzle( selector, elem ).length > 0;
                            };
                        }),

                        "contains": markFunction(function( text ) {
                            return function( elem ) {
                                return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
                            };
                        }),

                        "enabled": function( elem ) {
                            return elem.disabled === false;
                        },

                        "disabled": function( elem ) {
                            return elem.disabled === true;
                        },

                        "checked": function( elem ) {
                            // In CSS3, :checked should return both checked and selected elements
                            // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
                            var nodeName = elem.nodeName.toLowerCase();
                            return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
                        },

                        "selected": function( elem ) {
                            // Accessing this property makes selected-by-default
                            // options in Safari work properly
                            if ( elem.parentNode ) {
                                elem.parentNode.selectedIndex;
                            }

                            return elem.selected === true;
                        },

                        "parent": function( elem ) {
                            return !Expr.pseudos["empty"]( elem );
                        },

                        "empty": function( elem ) {
                            // http://www.w3.org/TR/selectors/#empty-pseudo
                            // :empty is only affected by element nodes and content nodes(including text(3), cdata(4)),
                            //   not comment, processing instructions, or others
                            // Thanks to Diego Perini for the nodeName shortcut
                            //   Greater than "@" means alpha characters (specifically not starting with "#" or "?")
                            var nodeType;
                            elem = elem.firstChild;
                            while ( elem ) {
                                if ( elem.nodeName > "@" || (nodeType = elem.nodeType) === 3 || nodeType === 4 ) {
                                    return false;
                                }
                                elem = elem.nextSibling;
                            }
                            return true;
                        },

                        "header": function( elem ) {
                            return rheader.test( elem.nodeName );
                        },

                        "text": function( elem ) {
                            var type, attr;
                            // IE6 and 7 will map elem.type to 'text' for new HTML5 types (search, etc)
                            // use getAttribute instead to test this case
                            return elem.nodeName.toLowerCase() === "input" &&
                                (type = elem.type) === "text" &&
                                ( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === type );
                        },

                        // Input types
                        "radio": createInputPseudo("radio"),
                        "checkbox": createInputPseudo("checkbox"),
                        "file": createInputPseudo("file"),
                        "password": createInputPseudo("password"),
                        "image": createInputPseudo("image"),

                        "submit": createButtonPseudo("submit"),
                        "reset": createButtonPseudo("reset"),

                        "button": function( elem ) {
                            var name = elem.nodeName.toLowerCase();
                            return name === "input" && elem.type === "button" || name === "button";
                        },

                        "input": function( elem ) {
                            return rinputs.test( elem.nodeName );
                        },

                        "focus": function( elem ) {
                            var doc = elem.ownerDocument;
                            return elem === doc.activeElement && (!doc.hasFocus || doc.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
                        },

                        "active": function( elem ) {
                            return elem === elem.ownerDocument.activeElement;
                        },

                        // Positional types
                        "first": createPositionalPseudo(function() {
                            return [ 0 ];
                        }),

                        "last": createPositionalPseudo(function( matchIndexes, length ) {
                            return [ length - 1 ];
                        }),

                        "eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
                            return [ argument < 0 ? argument + length : argument ];
                        }),

                        "even": createPositionalPseudo(function( matchIndexes, length ) {
                            for ( var i = 0; i < length; i += 2 ) {
                                matchIndexes.push( i );
                            }
                            return matchIndexes;
                        }),

                        "odd": createPositionalPseudo(function( matchIndexes, length ) {
                            for ( var i = 1; i < length; i += 2 ) {
                                matchIndexes.push( i );
                            }
                            return matchIndexes;
                        }),

                        "lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
                            for ( var i = argument < 0 ? argument + length : argument; --i >= 0; ) {
                                matchIndexes.push( i );
                            }
                            return matchIndexes;
                        }),

                        "gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
                            for ( var i = argument < 0 ? argument + length : argument; ++i < length; ) {
                                matchIndexes.push( i );
                            }
                            return matchIndexes;
                        })
                    }
                };

                function siblingCheck( a, b, ret ) {
                    if ( a === b ) {
                        return ret;
                    }

                    var cur = a.nextSibling;

                    while ( cur ) {
                        if ( cur === b ) {
                            return -1;
                        }

                        cur = cur.nextSibling;
                    }

                    return 1;
                }

                sortOrder = docElem.compareDocumentPosition ?
                    function( a, b ) {
                        if ( a === b ) {
                            hasDuplicate = true;
                            return 0;
                        }

                        return ( !a.compareDocumentPosition || !b.compareDocumentPosition ?
                                a.compareDocumentPosition :
                                a.compareDocumentPosition(b) & 4
                        ) ? -1 : 1;
                    } :
                    function( a, b ) {
                        // The nodes are identical, we can exit early
                        if ( a === b ) {
                            hasDuplicate = true;
                            return 0;

                            // Fallback to using sourceIndex (in IE) if it's available on both nodes
                        } else if ( a.sourceIndex && b.sourceIndex ) {
                            return a.sourceIndex - b.sourceIndex;
                        }

                        var al, bl,
                            ap = [],
                            bp = [],
                            aup = a.parentNode,
                            bup = b.parentNode,
                            cur = aup;

                        // If the nodes are siblings (or identical) we can do a quick check
                        if ( aup === bup ) {
                            return siblingCheck( a, b );

                            // If no parents were found then the nodes are disconnected
                        } else if ( !aup ) {
                            return -1;

                        } else if ( !bup ) {
                            return 1;
                        }

                        // Otherwise they're somewhere else in the tree so we need
                        // to build up a full list of the parentNodes for comparison
                        while ( cur ) {
                            ap.unshift( cur );
                            cur = cur.parentNode;
                        }

                        cur = bup;

                        while ( cur ) {
                            bp.unshift( cur );
                            cur = cur.parentNode;
                        }

                        al = ap.length;
                        bl = bp.length;

                        // Start walking down the tree looking for a discrepancy
                        for ( var i = 0; i < al && i < bl; i++ ) {
                            if ( ap[i] !== bp[i] ) {
                                return siblingCheck( ap[i], bp[i] );
                            }
                        }

                        // We ended someplace up the tree so do a sibling check
                        return i === al ?
                            siblingCheck( a, bp[i], -1 ) :
                            siblingCheck( ap[i], b, 1 );
                    };

// Always assume the presence of duplicates if sort doesn't
// pass them to our comparison function (as in Google Chrome).
                [0, 0].sort( sortOrder );
                baseHasDuplicate = !hasDuplicate;

// Document sorting and removing duplicates
                Sizzle.uniqueSort = function( results ) {
                    var elem,
                        duplicates = [],
                        i = 1,
                        j = 0;

                    hasDuplicate = baseHasDuplicate;
                    results.sort( sortOrder );

                    if ( hasDuplicate ) {
                        for ( ; (elem = results[i]); i++ ) {
                            if ( elem === results[ i - 1 ] ) {
                                j = duplicates.push( i );
                            }
                        }
                        while ( j-- ) {
                            results.splice( duplicates[ j ], 1 );
                        }
                    }

                    return results;
                };

                Sizzle.error = function( msg ) {
                    throw new Error( "Syntax error, unrecognized expression: " + msg );
                };

                function tokenize( selector, parseOnly ) {
                    var matched, match, tokens, type,
                        soFar, groups, preFilters,
                        cached = tokenCache[ expando ][ selector + " " ];

                    if ( cached ) {
                        return parseOnly ? 0 : cached.slice( 0 );
                    }

                    soFar = selector;
                    groups = [];
                    preFilters = Expr.preFilter;

                    while ( soFar ) {

                        // Comma and first run
                        if ( !matched || (match = rcomma.exec( soFar )) ) {
                            if ( match ) {
                                // Don't consume trailing commas as valid
                                soFar = soFar.slice( match[0].length ) || soFar;
                            }
                            groups.push( tokens = [] );
                        }

                        matched = false;

                        // Combinators
                        if ( (match = rcombinators.exec( soFar )) ) {
                            tokens.push( matched = new Token( match.shift() ) );
                            soFar = soFar.slice( matched.length );

                            // Cast descendant combinators to space
                            matched.type = match[0].replace( rtrim, " " );
                        }

                        // Filters
                        for ( type in Expr.filter ) {
                            if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
                                (match = preFilters[ type ]( match ))) ) {

                                tokens.push( matched = new Token( match.shift() ) );
                                soFar = soFar.slice( matched.length );
                                matched.type = type;
                                matched.matches = match;
                            }
                        }

                        if ( !matched ) {
                            break;
                        }
                    }

                    // Return the length of the invalid excess
                    // if we're just parsing
                    // Otherwise, throw an error or return tokens
                    return parseOnly ?
                        soFar.length :
                        soFar ?
                            Sizzle.error( selector ) :
                            // Cache the tokens
                            tokenCache( selector, groups ).slice( 0 );
                }

                function addCombinator( matcher, combinator, base ) {
                    var dir = combinator.dir,
                        checkNonElements = base && combinator.dir === "parentNode",
                        doneName = done++;

                    return combinator.first ?
                        // Check against closest ancestor/preceding element
                        function( elem, context, xml ) {
                            while ( (elem = elem[ dir ]) ) {
                                if ( checkNonElements || elem.nodeType === 1  ) {
                                    return matcher( elem, context, xml );
                                }
                            }
                        } :

                        // Check against all ancestor/preceding elements
                        function( elem, context, xml ) {
                            // We can't set arbitrary data on XML nodes, so they don't benefit from dir caching
                            if ( !xml ) {
                                var cache,
                                    dirkey = dirruns + " " + doneName + " ",
                                    cachedkey = dirkey + cachedruns;
                                while ( (elem = elem[ dir ]) ) {
                                    if ( checkNonElements || elem.nodeType === 1 ) {
                                        if ( (cache = elem[ expando ]) === cachedkey ) {
                                            return elem.sizset;
                                        } else if ( typeof cache === "string" && cache.indexOf(dirkey) === 0 ) {
                                            if ( elem.sizset ) {
                                                return elem;
                                            }
                                        } else {
                                            elem[ expando ] = cachedkey;
                                            if ( matcher( elem, context, xml ) ) {
                                                elem.sizset = true;
                                                return elem;
                                            }
                                            elem.sizset = false;
                                        }
                                    }
                                }
                            } else {
                                while ( (elem = elem[ dir ]) ) {
                                    if ( checkNonElements || elem.nodeType === 1 ) {
                                        if ( matcher( elem, context, xml ) ) {
                                            return elem;
                                        }
                                    }
                                }
                            }
                        };
                }

                function elementMatcher( matchers ) {
                    return matchers.length > 1 ?
                        function( elem, context, xml ) {
                            var i = matchers.length;
                            while ( i-- ) {
                                if ( !matchers[i]( elem, context, xml ) ) {
                                    return false;
                                }
                            }
                            return true;
                        } :
                        matchers[0];
                }

                function condense( unmatched, map, filter, context, xml ) {
                    var elem,
                        newUnmatched = [],
                        i = 0,
                        len = unmatched.length,
                        mapped = map != null;

                    for ( ; i < len; i++ ) {
                        if ( (elem = unmatched[i]) ) {
                            if ( !filter || filter( elem, context, xml ) ) {
                                newUnmatched.push( elem );
                                if ( mapped ) {
                                    map.push( i );
                                }
                            }
                        }
                    }

                    return newUnmatched;
                }

                function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
                    if ( postFilter && !postFilter[ expando ] ) {
                        postFilter = setMatcher( postFilter );
                    }
                    if ( postFinder && !postFinder[ expando ] ) {
                        postFinder = setMatcher( postFinder, postSelector );
                    }
                    return markFunction(function( seed, results, context, xml ) {
                        var temp, i, elem,
                            preMap = [],
                            postMap = [],
                            preexisting = results.length,

                            // Get initial elements from seed or context
                            elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

                            // Prefilter to get matcher input, preserving a map for seed-results synchronization
                            matcherIn = preFilter && ( seed || !selector ) ?
                                condense( elems, preMap, preFilter, context, xml ) :
                                elems,

                            matcherOut = matcher ?
                                // If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
                                postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

                                    // ...intermediate processing is necessary
                                    [] :

                                    // ...otherwise use results directly
                                    results :
                                matcherIn;

                        // Find primary matches
                        if ( matcher ) {
                            matcher( matcherIn, matcherOut, context, xml );
                        }

                        // Apply postFilter
                        if ( postFilter ) {
                            temp = condense( matcherOut, postMap );
                            postFilter( temp, [], context, xml );

                            // Un-match failing elements by moving them back to matcherIn
                            i = temp.length;
                            while ( i-- ) {
                                if ( (elem = temp[i]) ) {
                                    matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
                                }
                            }
                        }

                        if ( seed ) {
                            if ( postFinder || preFilter ) {
                                if ( postFinder ) {
                                    // Get the final matcherOut by condensing this intermediate into postFinder contexts
                                    temp = [];
                                    i = matcherOut.length;
                                    while ( i-- ) {
                                        if ( (elem = matcherOut[i]) ) {
                                            // Restore matcherIn since elem is not yet a final match
                                            temp.push( (matcherIn[i] = elem) );
                                        }
                                    }
                                    postFinder( null, (matcherOut = []), temp, xml );
                                }

                                // Move matched elements from seed to results to keep them synchronized
                                i = matcherOut.length;
                                while ( i-- ) {
                                    if ( (elem = matcherOut[i]) &&
                                        (temp = postFinder ? indexOf.call( seed, elem ) : preMap[i]) > -1 ) {

                                        seed[temp] = !(results[temp] = elem);
                                    }
                                }
                            }

                            // Add elements to results, through postFinder if defined
                        } else {
                            matcherOut = condense(
                                matcherOut === results ?
                                    matcherOut.splice( preexisting, matcherOut.length ) :
                                    matcherOut
                            );
                            if ( postFinder ) {
                                postFinder( null, results, matcherOut, xml );
                            } else {
                                push.apply( results, matcherOut );
                            }
                        }
                    });
                }

                function matcherFromTokens( tokens ) {
                    var checkContext, matcher, j,
                        len = tokens.length,
                        leadingRelative = Expr.relative[ tokens[0].type ],
                        implicitRelative = leadingRelative || Expr.relative[" "],
                        i = leadingRelative ? 1 : 0,

                        // The foundational matcher ensures that elements are reachable from top-level context(s)
                        matchContext = addCombinator( function( elem ) {
                            return elem === checkContext;
                        }, implicitRelative, true ),
                        matchAnyContext = addCombinator( function( elem ) {
                            return indexOf.call( checkContext, elem ) > -1;
                        }, implicitRelative, true ),
                        matchers = [ function( elem, context, xml ) {
                            return ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
                                    (checkContext = context).nodeType ?
                                        matchContext( elem, context, xml ) :
                                        matchAnyContext( elem, context, xml ) );
                        } ];

                    for ( ; i < len; i++ ) {
                        if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
                            matchers = [ addCombinator( elementMatcher( matchers ), matcher ) ];
                        } else {
                            matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

                            // Return special upon seeing a positional matcher
                            if ( matcher[ expando ] ) {
                                // Find the next relative operator (if any) for proper handling
                                j = ++i;
                                for ( ; j < len; j++ ) {
                                    if ( Expr.relative[ tokens[j].type ] ) {
                                        break;
                                    }
                                }
                                return setMatcher(
                                    i > 1 && elementMatcher( matchers ),
                                    i > 1 && tokens.slice( 0, i - 1 ).join("").replace( rtrim, "$1" ),
                                    matcher,
                                    i < j && matcherFromTokens( tokens.slice( i, j ) ),
                                    j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
                                    j < len && tokens.join("")
                                );
                            }
                            matchers.push( matcher );
                        }
                    }

                    return elementMatcher( matchers );
                }

                function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
                    var bySet = setMatchers.length > 0,
                        byElement = elementMatchers.length > 0,
                        superMatcher = function( seed, context, xml, results, expandContext ) {
                            var elem, j, matcher,
                                setMatched = [],
                                matchedCount = 0,
                                i = "0",
                                unmatched = seed && [],
                                outermost = expandContext != null,
                                contextBackup = outermostContext,
                                // We must always have either seed elements or context
                                elems = seed || byElement && Expr.find["TAG"]( "*", expandContext && context.parentNode || context ),
                                // Nested matchers should use non-integer dirruns
                                dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.E);

                            if ( outermost ) {
                                outermostContext = context !== document && context;
                                cachedruns = superMatcher.el;
                            }

                            // Add elements passing elementMatchers directly to results
                            for ( ; (elem = elems[i]) != null; i++ ) {
                                if ( byElement && elem ) {
                                    for ( j = 0; (matcher = elementMatchers[j]); j++ ) {
                                        if ( matcher( elem, context, xml ) ) {
                                            results.push( elem );
                                            break;
                                        }
                                    }
                                    if ( outermost ) {
                                        dirruns = dirrunsUnique;
                                        cachedruns = ++superMatcher.el;
                                    }
                                }

                                // Track unmatched elements for set filters
                                if ( bySet ) {
                                    // They will have gone through all possible matchers
                                    if ( (elem = !matcher && elem) ) {
                                        matchedCount--;
                                    }

                                    // Lengthen the array for every element, matched or not
                                    if ( seed ) {
                                        unmatched.push( elem );
                                    }
                                }
                            }

                            // Apply set filters to unmatched elements
                            matchedCount += i;
                            if ( bySet && i !== matchedCount ) {
                                for ( j = 0; (matcher = setMatchers[j]); j++ ) {
                                    matcher( unmatched, setMatched, context, xml );
                                }

                                if ( seed ) {
                                    // Reintegrate element matches to eliminate the need for sorting
                                    if ( matchedCount > 0 ) {
                                        while ( i-- ) {
                                            if ( !(unmatched[i] || setMatched[i]) ) {
                                                setMatched[i] = pop.call( results );
                                            }
                                        }
                                    }

                                    // Discard index placeholder values to get only actual matches
                                    setMatched = condense( setMatched );
                                }

                                // Add matches to results
                                push.apply( results, setMatched );

                                // Seedless set matches succeeding multiple successful matchers stipulate sorting
                                if ( outermost && !seed && setMatched.length > 0 &&
                                    ( matchedCount + setMatchers.length ) > 1 ) {

                                    Sizzle.uniqueSort( results );
                                }
                            }

                            // Override manipulation of globals by nested matchers
                            if ( outermost ) {
                                dirruns = dirrunsUnique;
                                outermostContext = contextBackup;
                            }

                            return unmatched;
                        };

                    superMatcher.el = 0;
                    return bySet ?
                        markFunction( superMatcher ) :
                        superMatcher;
                }

                compile = Sizzle.compile = function( selector, group /* Internal Use Only */ ) {
                    var i,
                        setMatchers = [],
                        elementMatchers = [],
                        cached = compilerCache[ expando ][ selector + " " ];

                    if ( !cached ) {
                        // Generate a function of recursive functions that can be used to check each element
                        if ( !group ) {
                            group = tokenize( selector );
                        }
                        i = group.length;
                        while ( i-- ) {
                            cached = matcherFromTokens( group[i] );
                            if ( cached[ expando ] ) {
                                setMatchers.push( cached );
                            } else {
                                elementMatchers.push( cached );
                            }
                        }

                        // Cache the compiled function
                        cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );
                    }
                    return cached;
                };

                function multipleContexts( selector, contexts, results ) {
                    var i = 0,
                        len = contexts.length;
                    for ( ; i < len; i++ ) {
                        Sizzle( selector, contexts[i], results );
                    }
                    return results;
                }

                function select( selector, context, results, seed, xml ) {
                    var i, tokens, token, type, find,
                        match = tokenize( selector ),
                        j = match.length;

                    if ( !seed ) {
                        // Try to minimize operations if there is only one group
                        if ( match.length === 1 ) {

                            // Take a shortcut and set the context if the root selector is an ID
                            tokens = match[0] = match[0].slice( 0 );
                            if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
                                context.nodeType === 9 && !xml &&
                                Expr.relative[ tokens[1].type ] ) {

                                context = Expr.find["ID"]( token.matches[0].replace( rbackslash, "" ), context, xml )[0];
                                if ( !context ) {
                                    return results;
                                }

                                selector = selector.slice( tokens.shift().length );
                            }

                            // Fetch a seed set for right-to-left matching
                            for ( i = matchExpr["POS"].test( selector ) ? -1 : tokens.length - 1; i >= 0; i-- ) {
                                token = tokens[i];

                                // Abort if we hit a combinator
                                if ( Expr.relative[ (type = token.type) ] ) {
                                    break;
                                }
                                if ( (find = Expr.find[ type ]) ) {
                                    // Search, expanding context for leading sibling combinators
                                    if ( (seed = find(
                                            token.matches[0].replace( rbackslash, "" ),
                                            rsibling.test( tokens[0].type ) && context.parentNode || context,
                                            xml
                                        )) ) {

                                        // If seed is empty or no tokens remain, we can return early
                                        tokens.splice( i, 1 );
                                        selector = seed.length && tokens.join("");
                                        if ( !selector ) {
                                            push.apply( results, slice.call( seed, 0 ) );
                                            return results;
                                        }

                                        break;
                                    }
                                }
                            }
                        }
                    }

                    // Compile and execute a filtering function
                    // Provide `match` to avoid retokenization if we modified the selector above
                    compile( selector, match )(
                        seed,
                        context,
                        xml,
                        results,
                        rsibling.test( selector )
                    );
                    return results;
                }

                if ( document.querySelectorAll ) {
                    (function() {
                        var disconnectedMatch,
                            oldSelect = select,
                            rescape = /'|\\/g,
                            rattributeQuotes = /\=[\x20\t\r\n\f]*([^'"\]]*)[\x20\t\r\n\f]*\]/g,

                            // qSa(:focus) reports false when true (Chrome 21), no need to also add to buggyMatches since matches checks buggyQSA
                            // A support test would require too much code (would include document ready)
                            rbuggyQSA = [ ":focus" ],

                            // matchesSelector(:active) reports false when true (IE9/Opera 11.5)
                            // A support test would require too much code (would include document ready)
                            // just skip matchesSelector for :active
                            rbuggyMatches = [ ":active" ],
                            matches = docElem.matchesSelector ||
                                docElem.mozMatchesSelector ||
                                docElem.webkitMatchesSelector ||
                                docElem.oMatchesSelector ||
                                docElem.msMatchesSelector;

                        // Build QSA regex
                        // Regex strategy adopted from Diego Perini
                        assert(function( div ) {
                            // Select is set to empty string on purpose
                            // This is to test IE's treatment of not explictly
                            // setting a boolean content attribute,
                            // since its presence should be enough
                            // http://bugs.jquery.com/ticket/12359
                            div.innerHTML = "<select><option selected=''></option></select>";

                            // IE8 - Some boolean attributes are not treated correctly
                            if ( !div.querySelectorAll("[selected]").length ) {
                                rbuggyQSA.push( "\\[" + whitespace + "*(?:checked|disabled|ismap|multiple|readonly|selected|value)" );
                            }

                            // Webkit/Opera - :checked should return selected option elements
                            // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
                            // IE8 throws error here (do not put tests after this one)
                            if ( !div.querySelectorAll(":checked").length ) {
                                rbuggyQSA.push(":checked");
                            }
                        });

                        assert(function( div ) {

                            // Opera 10-12/IE9 - ^= $= *= and empty values
                            // Should not select anything
                            div.innerHTML = "<p test=''></p>";
                            if ( div.querySelectorAll("[test^='']").length ) {
                                rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:\"\"|'')" );
                            }

                            // FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
                            // IE8 throws error here (do not put tests after this one)
                            div.innerHTML = "<input type='hidden'/>";
                            if ( !div.querySelectorAll(":enabled").length ) {
                                rbuggyQSA.push(":enabled", ":disabled");
                            }
                        });

                        // rbuggyQSA always contains :focus, so no need for a length check
                        rbuggyQSA = /* rbuggyQSA.length && */ new RegExp( rbuggyQSA.join("|") );

                        select = function( selector, context, results, seed, xml ) {
                            // Only use querySelectorAll when not filtering,
                            // when this is not xml,
                            // and when no QSA bugs apply
                            if ( !seed && !xml && !rbuggyQSA.test( selector ) ) {
                                var groups, i,
                                    old = true,
                                    nid = expando,
                                    newContext = context,
                                    newSelector = context.nodeType === 9 && selector;

                                // qSA works strangely on Element-rooted queries
                                // We can work around this by specifying an extra ID on the root
                                // and working up from there (Thanks to Andrew Dupont for the technique)
                                // IE 8 doesn't work on object elements
                                if ( context.nodeType === 1 && context.nodeName.toLowerCase() !== "object" ) {
                                    groups = tokenize( selector );

                                    if ( (old = context.getAttribute("id")) ) {
                                        nid = old.replace( rescape, "\\$&" );
                                    } else {
                                        context.setAttribute( "id", nid );
                                    }
                                    nid = "[id='" + nid + "'] ";

                                    i = groups.length;
                                    while ( i-- ) {
                                        groups[i] = nid + groups[i].join("");
                                    }
                                    newContext = rsibling.test( selector ) && context.parentNode || context;
                                    newSelector = groups.join(",");
                                }

                                if ( newSelector ) {
                                    try {
                                        push.apply( results, slice.call( newContext.querySelectorAll(
                                            newSelector
                                        ), 0 ) );
                                        return results;
                                    } catch(qsaError) {
                                    } finally {
                                        if ( !old ) {
                                            context.removeAttribute("id");
                                        }
                                    }
                                }
                            }

                            return oldSelect( selector, context, results, seed, xml );
                        };

                        if ( matches ) {
                            assert(function( div ) {
                                // Check to see if it's possible to do matchesSelector
                                // on a disconnected node (IE 9)
                                disconnectedMatch = matches.call( div, "div" );

                                // This should fail with an exception
                                // Gecko does not error, returns false instead
                                try {
                                    matches.call( div, "[test!='']:sizzle" );
                                    rbuggyMatches.push( "!=", pseudos );
                                } catch ( e ) {}
                            });

                            // rbuggyMatches always contains :active and :focus, so no need for a length check
                            rbuggyMatches = /* rbuggyMatches.length && */ new RegExp( rbuggyMatches.join("|") );

                            Sizzle.matchesSelector = function( elem, expr ) {
                                // Make sure that attribute selectors are quoted
                                expr = expr.replace( rattributeQuotes, "='$1']" );

                                // rbuggyMatches always contains :active, so no need for an existence check
                                if ( !isXML( elem ) && !rbuggyMatches.test( expr ) && !rbuggyQSA.test( expr ) ) {
                                    try {
                                        var ret = matches.call( elem, expr );

                                        // IE 9's matchesSelector returns false on disconnected nodes
                                        if ( ret || disconnectedMatch ||
                                            // As well, disconnected nodes are said to be in a document
                                            // fragment in IE 9
                                            elem.document && elem.document.nodeType !== 11 ) {
                                            return ret;
                                        }
                                    } catch(e) {}
                                }

                                return Sizzle( expr, null, null, [ elem ] ).length > 0;
                            };
                        }
                    })();
                }

// Deprecated
                Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Back-compat
                function setFilters() {}
                Expr.filters = setFilters.prototype = Expr.pseudos;
                Expr.setFilters = new setFilters();

// Override sizzle attribute retrieval
                Sizzle.attr = jQuery.attr;
                jQuery.find = Sizzle;
                jQuery.expr = Sizzle.selectors;
                jQuery.expr[":"] = jQuery.expr.pseudos;
                jQuery.unique = Sizzle.uniqueSort;
                jQuery.text = Sizzle.getText;
                jQuery.isXMLDoc = Sizzle.isXML;
                jQuery.contains = Sizzle.contains;


            })( window );
            var runtil = /Until$/,
                rparentsprev = /^(?:parents|prev(?:Until|All))/,
                isSimple = /^.[^:#\[\.,]*$/,
                rneedsContext = jQuery.expr.match.needsContext,
                // methods guaranteed to produce a unique set when starting from a unique set
                guaranteedUnique = {
                    children: true,
                    contents: true,
                    next: true,
                    prev: true
                };

            jQuery.fn.extend({
                find: function( selector ) {
                    var i, l, length, n, r, ret,
                        self = this;

                    if ( typeof selector !== "string" ) {
                        return jQuery( selector ).filter(function() {
                            for ( i = 0, l = self.length; i < l; i++ ) {
                                if ( jQuery.contains( self[ i ], this ) ) {
                                    return true;
                                }
                            }
                        });
                    }

                    ret = this.pushStack( "", "find", selector );

                    for ( i = 0, l = this.length; i < l; i++ ) {
                        length = ret.length;
                        jQuery.find( selector, this[i], ret );

                        if ( i > 0 ) {
                            // Make sure that the results are unique
                            for ( n = length; n < ret.length; n++ ) {
                                for ( r = 0; r < length; r++ ) {
                                    if ( ret[r] === ret[n] ) {
                                        ret.splice(n--, 1);
                                        break;
                                    }
                                }
                            }
                        }
                    }

                    return ret;
                },

                has: function( target ) {
                    var i,
                        targets = jQuery( target, this ),
                        len = targets.length;

                    return this.filter(function() {
                        for ( i = 0; i < len; i++ ) {
                            if ( jQuery.contains( this, targets[i] ) ) {
                                return true;
                            }
                        }
                    });
                },

                not: function( selector ) {
                    return this.pushStack( winnow(this, selector, false), "not", selector);
                },

                filter: function( selector ) {
                    return this.pushStack( winnow(this, selector, true), "filter", selector );
                },

                is: function( selector ) {
                    return !!selector && (
                            typeof selector === "string" ?
                                // If this is a positional/relative selector, check membership in the returned set
                                // so $("p:first").is("p:last") won't return true for a doc with two "p".
                                rneedsContext.test( selector ) ?
                                    jQuery( selector, this.context ).index( this[0] ) >= 0 :
                                    jQuery.filter( selector, this ).length > 0 :
                                this.filter( selector ).length > 0 );
                },

                closest: function( selectors, context ) {
                    var cur,
                        i = 0,
                        l = this.length,
                        ret = [],
                        pos = rneedsContext.test( selectors ) || typeof selectors !== "string" ?
                            jQuery( selectors, context || this.context ) :
                            0;

                    for ( ; i < l; i++ ) {
                        cur = this[i];

                        while ( cur && cur.ownerDocument && cur !== context && cur.nodeType !== 11 ) {
                            if ( pos ? pos.index(cur) > -1 : jQuery.find.matchesSelector(cur, selectors) ) {
                                ret.push( cur );
                                break;
                            }
                            cur = cur.parentNode;
                        }
                    }

                    ret = ret.length > 1 ? jQuery.unique( ret ) : ret;

                    return this.pushStack( ret, "closest", selectors );
                },

                // Determine the position of an element within
                // the matched set of elements
                index: function( elem ) {

                    // No argument, return index in parent
                    if ( !elem ) {
                        return ( this[0] && this[0].parentNode ) ? this.prevAll().length : -1;
                    }

                    // index in selector
                    if ( typeof elem === "string" ) {
                        return jQuery.inArray( this[0], jQuery( elem ) );
                    }

                    // Locate the position of the desired element
                    return jQuery.inArray(
                        // If it receives a jQuery object, the first element is used
                        elem.jquery ? elem[0] : elem, this );
                },

                add: function( selector, context ) {
                    var set = typeof selector === "string" ?
                            jQuery( selector, context ) :
                            jQuery.makeArray( selector && selector.nodeType ? [ selector ] : selector ),
                        all = jQuery.merge( this.get(), set );

                    return this.pushStack( isDisconnected( set[0] ) || isDisconnected( all[0] ) ?
                        all :
                        jQuery.unique( all ) );
                },

                addBack: function( selector ) {
                    return this.add( selector == null ?
                        this.prevObject : this.prevObject.filter(selector)
                    );
                }
            });

            jQuery.fn.andSelf = jQuery.fn.addBack;

// A painfully simple check to see if an element is disconnected
// from a document (should be improved, where feasible).
            function isDisconnected( node ) {
                return !node || !node.parentNode || node.parentNode.nodeType === 11;
            }

            function sibling( cur, dir ) {
                do {
                    cur = cur[ dir ];
                } while ( cur && cur.nodeType !== 1 );

                return cur;
            }

            jQuery.each({
                parent: function( elem ) {
                    var parent = elem.parentNode;
                    return parent && parent.nodeType !== 11 ? parent : null;
                },
                parents: function( elem ) {
                    return jQuery.dir( elem, "parentNode" );
                },
                parentsUntil: function( elem, i, until ) {
                    return jQuery.dir( elem, "parentNode", until );
                },
                next: function( elem ) {
                    return sibling( elem, "nextSibling" );
                },
                prev: function( elem ) {
                    return sibling( elem, "previousSibling" );
                },
                nextAll: function( elem ) {
                    return jQuery.dir( elem, "nextSibling" );
                },
                prevAll: function( elem ) {
                    return jQuery.dir( elem, "previousSibling" );
                },
                nextUntil: function( elem, i, until ) {
                    return jQuery.dir( elem, "nextSibling", until );
                },
                prevUntil: function( elem, i, until ) {
                    return jQuery.dir( elem, "previousSibling", until );
                },
                siblings: function( elem ) {
                    return jQuery.sibling( ( elem.parentNode || {} ).firstChild, elem );
                },
                children: function( elem ) {
                    return jQuery.sibling( elem.firstChild );
                },
                contents: function( elem ) {
                    return jQuery.nodeName( elem, "iframe" ) ?
                        elem.contentDocument || elem.contentWindow.document :
                        jQuery.merge( [], elem.childNodes );
                }
            }, function( name, fn ) {
                jQuery.fn[ name ] = function( until, selector ) {
                    var ret = jQuery.map( this, fn, until );

                    if ( !runtil.test( name ) ) {
                        selector = until;
                    }

                    if ( selector && typeof selector === "string" ) {
                        ret = jQuery.filter( selector, ret );
                    }

                    ret = this.length > 1 && !guaranteedUnique[ name ] ? jQuery.unique( ret ) : ret;

                    if ( this.length > 1 && rparentsprev.test( name ) ) {
                        ret = ret.reverse();
                    }

                    return this.pushStack( ret, name, core_slice.call( arguments ).join(",") );
                };
            });

            jQuery.extend({
                filter: function( expr, elems, not ) {
                    if ( not ) {
                        expr = ":not(" + expr + ")";
                    }

                    return elems.length === 1 ?
                        jQuery.find.matchesSelector(elems[0], expr) ? [ elems[0] ] : [] :
                        jQuery.find.matches(expr, elems);
                },

                dir: function( elem, dir, until ) {
                    var matched = [],
                        cur = elem[ dir ];

                    while ( cur && cur.nodeType !== 9 && (until === undefined || cur.nodeType !== 1 || !jQuery( cur ).is( until )) ) {
                        if ( cur.nodeType === 1 ) {
                            matched.push( cur );
                        }
                        cur = cur[dir];
                    }
                    return matched;
                },

                sibling: function( n, elem ) {
                    var r = [];

                    for ( ; n; n = n.nextSibling ) {
                        if ( n.nodeType === 1 && n !== elem ) {
                            r.push( n );
                        }
                    }

                    return r;
                }
            });

// Implement the identical functionality for filter and not
            function winnow( elements, qualifier, keep ) {

                // Can't pass null or undefined to indexOf in Firefox 4
                // Set to 0 to skip string check
                qualifier = qualifier || 0;

                if ( jQuery.isFunction( qualifier ) ) {
                    return jQuery.grep(elements, function( elem, i ) {
                        var retVal = !!qualifier.call( elem, i, elem );
                        return retVal === keep;
                    });

                } else if ( qualifier.nodeType ) {
                    return jQuery.grep(elements, function( elem, i ) {
                        return ( elem === qualifier ) === keep;
                    });

                } else if ( typeof qualifier === "string" ) {
                    var filtered = jQuery.grep(elements, function( elem ) {
                        return elem.nodeType === 1;
                    });

                    if ( isSimple.test( qualifier ) ) {
                        return jQuery.filter(qualifier, filtered, !keep);
                    } else {
                        qualifier = jQuery.filter( qualifier, filtered );
                    }
                }

                return jQuery.grep(elements, function( elem, i ) {
                    return ( jQuery.inArray( elem, qualifier ) >= 0 ) === keep;
                });
            }
            function createSafeFragment( document ) {
                var list = nodeNames.split( "|" ),
                    safeFrag = document.createDocumentFragment();

                if ( safeFrag.createElement ) {
                    while ( list.length ) {
                        safeFrag.createElement(
                            list.pop()
                        );
                    }
                }
                return safeFrag;
            }

            var nodeNames = "abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|" +
                    "header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",
                rinlinejQuery = / jQuery\d+="(?:null|\d+)"/g,
                rleadingWhitespace = /^\s+/,
                rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
                rtagName = /<([\w:]+)/,
                rtbody = /<tbody/i,
                rhtml = /<|&#?\w+;/,
                rnoInnerhtml = /<(?:script|style|link)/i,
                rnocache = /<(?:script|object|embed|option|style)/i,
                rnoshimcache = new RegExp("<(?:" + nodeNames + ")[\\s/>]", "i"),
                rcheckableType = /^(?:checkbox|radio)$/,
                // checked="checked" or checked
                rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
                rscriptType = /\/(java|ecma)script/i,
                rcleanScript = /^\s*<!(?:\[CDATA\[|\-\-)|[\]\-]{2}>\s*$/g,
                wrapMap = {
                    option: [ 1, "<select multiple='multiple'>", "</select>" ],
                    legend: [ 1, "<fieldset>", "</fieldset>" ],
                    thead: [ 1, "<table>", "</table>" ],
                    tr: [ 2, "<table><tbody>", "</tbody></table>" ],
                    td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],
                    col: [ 2, "<table><tbody></tbody><colgroup>", "</colgroup></table>" ],
                    area: [ 1, "<map>", "</map>" ],
                    _default: [ 0, "", "" ]
                },
                safeFragment = createSafeFragment( document ),
                fragmentDiv = safeFragment.appendChild( document.createElement("div") );

            wrapMap.optgroup = wrapMap.option;
            wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
            wrapMap.th = wrapMap.td;

// IE6-8 can't serialize link, script, style, or any html5 (NoScope) tags,
// unless wrapped in a div with non-breaking characters in front of it.
            if ( !jQuery.support.htmlSerialize ) {
                wrapMap._default = [ 1, "X<div>", "</div>" ];
            }

            jQuery.fn.extend({
                text: function( value ) {
                    return jQuery.access( this, function( value ) {
                        return value === undefined ?
                            jQuery.text( this ) :
                            this.empty().append( ( this[0] && this[0].ownerDocument || document ).createTextNode( value ) );
                    }, null, value, arguments.length );
                },

                wrapAll: function( html ) {
                    if ( jQuery.isFunction( html ) ) {
                        return this.each(function(i) {
                            jQuery(this).wrapAll( html.call(this, i) );
                        });
                    }

                    if ( this[0] ) {
                        // The elements to wrap the target around
                        var wrap = jQuery( html, this[0].ownerDocument ).eq(0).clone(true);

                        if ( this[0].parentNode ) {
                            wrap.insertBefore( this[0] );
                        }

                        wrap.map(function() {
                            var elem = this;

                            while ( elem.firstChild && elem.firstChild.nodeType === 1 ) {
                                elem = elem.firstChild;
                            }

                            return elem;
                        }).append( this );
                    }

                    return this;
                },

                wrapInner: function( html ) {
                    if ( jQuery.isFunction( html ) ) {
                        return this.each(function(i) {
                            jQuery(this).wrapInner( html.call(this, i) );
                        });
                    }

                    return this.each(function() {
                        var self = jQuery( this ),
                            contents = self.contents();

                        if ( contents.length ) {
                            contents.wrapAll( html );

                        } else {
                            self.append( html );
                        }
                    });
                },

                wrap: function( html ) {
                    var isFunction = jQuery.isFunction( html );

                    return this.each(function(i) {
                        jQuery( this ).wrapAll( isFunction ? html.call(this, i) : html );
                    });
                },

                unwrap: function() {
                    return this.parent().each(function() {
                        if ( !jQuery.nodeName( this, "body" ) ) {
                            jQuery( this ).replaceWith( this.childNodes );
                        }
                    }).end();
                },

                append: function() {
                    return this.domManip(arguments, true, function( elem ) {
                        if ( this.nodeType === 1 || this.nodeType === 11 ) {
                            this.appendChild( elem );
                        }
                    });
                },

                prepend: function() {
                    return this.domManip(arguments, true, function( elem ) {
                        if ( this.nodeType === 1 || this.nodeType === 11 ) {
                            this.insertBefore( elem, this.firstChild );
                        }
                    });
                },

                before: function() {
                    if ( !isDisconnected( this[0] ) ) {
                        return this.domManip(arguments, false, function( elem ) {
                            this.parentNode.insertBefore( elem, this );
                        });
                    }

                    if ( arguments.length ) {
                        var set = jQuery.clean( arguments );
                        return this.pushStack( jQuery.merge( set, this ), "before", this.selector );
                    }
                },

                after: function() {
                    if ( !isDisconnected( this[0] ) ) {
                        return this.domManip(arguments, false, function( elem ) {
                            this.parentNode.insertBefore( elem, this.nextSibling );
                        });
                    }

                    if ( arguments.length ) {
                        var set = jQuery.clean( arguments );
                        return this.pushStack( jQuery.merge( this, set ), "after", this.selector );
                    }
                },

                // keepData is for internal use only--do not document
                remove: function( selector, keepData ) {
                    var elem,
                        i = 0;

                    for ( ; (elem = this[i]) != null; i++ ) {
                        if ( !selector || jQuery.filter( selector, [ elem ] ).length ) {
                            if ( !keepData && elem.nodeType === 1 ) {
                                jQuery.cleanData( elem.getElementsByTagName("*") );
                                jQuery.cleanData( [ elem ] );
                            }

                            if ( elem.parentNode ) {
                                elem.parentNode.removeChild( elem );
                            }
                        }
                    }

                    return this;
                },

                empty: function() {
                    var elem,
                        i = 0;

                    for ( ; (elem = this[i]) != null; i++ ) {
                        // Remove element nodes and prevent memory leaks
                        if ( elem.nodeType === 1 ) {
                            jQuery.cleanData( elem.getElementsByTagName("*") );
                        }

                        // Remove any remaining nodes
                        while ( elem.firstChild ) {
                            elem.removeChild( elem.firstChild );
                        }
                    }

                    return this;
                },

                clone: function( dataAndEvents, deepDataAndEvents ) {
                    dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
                    deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

                    return this.map( function () {
                        return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
                    });
                },

                html: function( value ) {
                    return jQuery.access( this, function( value ) {
                        var elem = this[0] || {},
                            i = 0,
                            l = this.length;

                        if ( value === undefined ) {
                            return elem.nodeType === 1 ?
                                elem.innerHTML.replace( rinlinejQuery, "" ) :
                                undefined;
                        }

                        // See if we can take a shortcut and just use innerHTML
                        if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
                            ( jQuery.support.htmlSerialize || !rnoshimcache.test( value )  ) &&
                            ( jQuery.support.leadingWhitespace || !rleadingWhitespace.test( value ) ) &&
                            !wrapMap[ ( rtagName.exec( value ) || ["", ""] )[1].toLowerCase() ] ) {

                            value = value.replace( rxhtmlTag, "<$1></$2>" );

                            try {
                                for (; i < l; i++ ) {
                                    // Remove element nodes and prevent memory leaks
                                    elem = this[i] || {};
                                    if ( elem.nodeType === 1 ) {
                                        jQuery.cleanData( elem.getElementsByTagName( "*" ) );
                                        elem.innerHTML = value;
                                    }
                                }

                                elem = 0;

                                // If using innerHTML throws an exception, use the fallback method
                            } catch(e) {}
                        }

                        if ( elem ) {
                            this.empty().append( value );
                        }
                    }, null, value, arguments.length );
                },

                replaceWith: function( value ) {
                    if ( !isDisconnected( this[0] ) ) {
                        // Make sure that the elements are removed from the DOM before they are inserted
                        // this can help fix replacing a parent with child elements
                        if ( jQuery.isFunction( value ) ) {
                            return this.each(function(i) {
                                var self = jQuery(this), old = self.html();
                                self.replaceWith( value.call( this, i, old ) );
                            });
                        }

                        if ( typeof value !== "string" ) {
                            value = jQuery( value ).detach();
                        }

                        return this.each(function() {
                            var next = this.nextSibling,
                                parent = this.parentNode;

                            jQuery( this ).remove();

                            if ( next ) {
                                jQuery(next).before( value );
                            } else {
                                jQuery(parent).append( value );
                            }
                        });
                    }

                    return this.length ?
                        this.pushStack( jQuery(jQuery.isFunction(value) ? value() : value), "replaceWith", value ) :
                        this;
                },

                detach: function( selector ) {
                    return this.remove( selector, true );
                },

                domManip: function( args, table, callback ) {

                    // Flatten any nested arrays
                    args = [].concat.apply( [], args );

                    var results, first, fragment, iNoClone,
                        i = 0,
                        value = args[0],
                        scripts = [],
                        l = this.length;

                    // We can't cloneNode fragments that contain checked, in WebKit
                    if ( !jQuery.support.checkClone && l > 1 && typeof value === "string" && rchecked.test( value ) ) {
                        return this.each(function() {
                            jQuery(this).domManip( args, table, callback );
                        });
                    }

                    if ( jQuery.isFunction(value) ) {
                        return this.each(function(i) {
                            var self = jQuery(this);
                            args[0] = value.call( this, i, table ? self.html() : undefined );
                            self.domManip( args, table, callback );
                        });
                    }

                    if ( this[0] ) {
                        results = jQuery.buildFragment( args, this, scripts );
                        fragment = results.fragment;
                        first = fragment.firstChild;

                        if ( fragment.childNodes.length === 1 ) {
                            fragment = first;
                        }

                        if ( first ) {
                            table = table && jQuery.nodeName( first, "tr" );

                            // Use the original fragment for the last item instead of the first because it can end up
                            // being emptied incorrectly in certain situations (#8070).
                            // Fragments from the fragment cache must always be cloned and never used in place.
                            for ( iNoClone = results.cacheable || l - 1; i < l; i++ ) {
                                callback.call(
                                    table && jQuery.nodeName( this[i], "table" ) ?
                                        findOrAppend( this[i], "tbody" ) :
                                        this[i],
                                    i === iNoClone ?
                                        fragment :
                                        jQuery.clone( fragment, true, true )
                                );
                            }
                        }

                        // Fix #11809: Avoid leaking memory
                        fragment = first = null;

                        if ( scripts.length ) {
                            jQuery.each( scripts, function( i, elem ) {
                                if ( elem.src ) {
                                    if ( jQuery.ajax ) {
                                        jQuery.ajax({
                                            url: elem.src,
                                            type: "GET",
                                            dataType: "script",
                                            async: false,
                                            global: false,
                                            "throws": true
                                        });
                                    } else {
                                        jQuery.error("no ajax");
                                    }
                                } else {
                                    jQuery.globalEval( ( elem.text || elem.textContent || elem.innerHTML || "" ).replace( rcleanScript, "" ) );
                                }

                                if ( elem.parentNode ) {
                                    elem.parentNode.removeChild( elem );
                                }
                            });
                        }
                    }

                    return this;
                }
            });

            function findOrAppend( elem, tag ) {
                return elem.getElementsByTagName( tag )[0] || elem.appendChild( elem.ownerDocument.createElement( tag ) );
            }

            function cloneCopyEvent( src, dest ) {

                if ( dest.nodeType !== 1 || !jQuery.hasData( src ) ) {
                    return;
                }

                var type, i, l,
                    oldData = jQuery._data( src ),
                    curData = jQuery._data( dest, oldData ),
                    events = oldData.events;

                if ( events ) {
                    delete curData.handle;
                    curData.events = {};

                    for ( type in events ) {
                        for ( i = 0, l = events[ type ].length; i < l; i++ ) {
                            jQuery.event.add( dest, type, events[ type ][ i ] );
                        }
                    }
                }

                // make the cloned public data object a copy from the original
                if ( curData.data ) {
                    curData.data = jQuery.extend( {}, curData.data );
                }
            }

            function cloneFixAttributes( src, dest ) {
                var nodeName;

                // We do not need to do anything for non-Elements
                if ( dest.nodeType !== 1 ) {
                    return;
                }

                // clearAttributes removes the attributes, which we don't want,
                // but also removes the attachEvent events, which we *do* want
                if ( dest.clearAttributes ) {
                    dest.clearAttributes();
                }

                // mergeAttributes, in contrast, only merges back on the
                // original attributes, not the events
                if ( dest.mergeAttributes ) {
                    dest.mergeAttributes( src );
                }

                nodeName = dest.nodeName.toLowerCase();

                if ( nodeName === "object" ) {
                    // IE6-10 improperly clones children of object elements using classid.
                    // IE10 throws NoModificationAllowedError if parent is null, #12132.
                    if ( dest.parentNode ) {
                        dest.outerHTML = src.outerHTML;
                    }

                    // This path appears unavoidable for IE9. When cloning an object
                    // element in IE9, the outerHTML strategy above is not sufficient.
                    // If the src has innerHTML and the destination does not,
                    // copy the src.innerHTML into the dest.innerHTML. #10324
                    if ( jQuery.support.html5Clone && (src.innerHTML && !jQuery.trim(dest.innerHTML)) ) {
                        dest.innerHTML = src.innerHTML;
                    }

                } else if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
                    // IE6-8 fails to persist the checked state of a cloned checkbox
                    // or radio button. Worse, IE6-7 fail to give the cloned element
                    // a checked appearance if the defaultChecked value isn't also set

                    dest.defaultChecked = dest.checked = src.checked;

                    // IE6-7 get confused and end up setting the value of a cloned
                    // checkbox/radio button to an empty string instead of "on"
                    if ( dest.value !== src.value ) {
                        dest.value = src.value;
                    }

                    // IE6-8 fails to return the selected option to the default selected
                    // state when cloning options
                } else if ( nodeName === "option" ) {
                    dest.selected = src.defaultSelected;

                    // IE6-8 fails to set the defaultValue to the correct value when
                    // cloning other types of input fields
                } else if ( nodeName === "input" || nodeName === "textarea" ) {
                    dest.defaultValue = src.defaultValue;

                    // IE blanks contents when cloning scripts
                } else if ( nodeName === "script" && dest.text !== src.text ) {
                    dest.text = src.text;
                }

                // Event data gets referenced instead of copied if the expando
                // gets copied too
                dest.removeAttribute( jQuery.expando );
            }

            jQuery.buildFragment = function( args, context, scripts ) {
                var fragment, cacheable, cachehit,
                    first = args[ 0 ];

                // Set context from what may come in as undefined or a jQuery collection or a node
                // Updated to fix #12266 where accessing context[0] could throw an exception in IE9/10 &
                // also doubles as fix for #8950 where plain objects caused createDocumentFragment exception
                context = context || document;
                context = !context.nodeType && context[0] || context;
                context = context.ownerDocument || context;

                // Only cache "small" (1/2 KB) HTML strings that are associated with the main document
                // Cloning options loses the selected state, so don't cache them
                // IE 6 doesn't like it when you put <object> or <embed> elements in a fragment
                // Also, WebKit does not clone 'checked' attributes on cloneNode, so don't cache
                // Lastly, IE6,7,8 will not correctly reuse cached fragments that were created from unknown elems #10501
                if ( args.length === 1 && typeof first === "string" && first.length < 512 && context === document &&
                    first.charAt(0) === "<" && !rnocache.test( first ) &&
                    (jQuery.support.checkClone || !rchecked.test( first )) &&
                    (jQuery.support.html5Clone || !rnoshimcache.test( first )) ) {

                    // Mark cacheable and look for a hit
                    cacheable = true;
                    fragment = jQuery.fragments[ first ];
                    cachehit = fragment !== undefined;
                }

                if ( !fragment ) {
                    fragment = context.createDocumentFragment();
                    jQuery.clean( args, context, fragment, scripts );

                    // Update the cache, but only store false
                    // unless this is a second parsing of the same content
                    if ( cacheable ) {
                        jQuery.fragments[ first ] = cachehit && fragment;
                    }
                }

                return { fragment: fragment, cacheable: cacheable };
            };

            jQuery.fragments = {};

            jQuery.each({
                appendTo: "append",
                prependTo: "prepend",
                insertBefore: "before",
                insertAfter: "after",
                replaceAll: "replaceWith"
            }, function( name, original ) {
                jQuery.fn[ name ] = function( selector ) {
                    var elems,
                        i = 0,
                        ret = [],
                        insert = jQuery( selector ),
                        l = insert.length,
                        parent = this.length === 1 && this[0].parentNode;

                    if ( (parent == null || parent && parent.nodeType === 11 && parent.childNodes.length === 1) && l === 1 ) {
                        insert[ original ]( this[0] );
                        return this;
                    } else {
                        for ( ; i < l; i++ ) {
                            elems = ( i > 0 ? this.clone(true) : this ).get();
                            jQuery( insert[i] )[ original ]( elems );
                            ret = ret.concat( elems );
                        }

                        return this.pushStack( ret, name, insert.selector );
                    }
                };
            });

            function getAll( elem ) {
                if ( typeof elem.getElementsByTagName !== "undefined" ) {
                    return elem.getElementsByTagName( "*" );

                } else if ( typeof elem.querySelectorAll !== "undefined" ) {
                    return elem.querySelectorAll( "*" );

                } else {
                    return [];
                }
            }

// Used in clean, fixes the defaultChecked property
            function fixDefaultChecked( elem ) {
                if ( rcheckableType.test( elem.type ) ) {
                    elem.defaultChecked = elem.checked;
                }
            }

            jQuery.extend({
                clone: function( elem, dataAndEvents, deepDataAndEvents ) {
                    var srcElements,
                        destElements,
                        i,
                        clone;

                    if ( jQuery.support.html5Clone || jQuery.isXMLDoc(elem) || !rnoshimcache.test( "<" + elem.nodeName + ">" ) ) {
                        clone = elem.cloneNode( true );

                        // IE<=8 does not properly clone detached, unknown element nodes
                    } else {
                        fragmentDiv.innerHTML = elem.outerHTML;
                        fragmentDiv.removeChild( clone = fragmentDiv.firstChild );
                    }

                    if ( (!jQuery.support.noCloneEvent || !jQuery.support.noCloneChecked) &&
                        (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem) ) {
                        // IE copies events bound via attachEvent when using cloneNode.
                        // Calling detachEvent on the clone will also remove the events
                        // from the original. In order to get around this, we use some
                        // proprietary methods to clear the events. Thanks to MooTools
                        // guys for this hotness.

                        cloneFixAttributes( elem, clone );

                        // Using Sizzle here is crazy slow, so we use getElementsByTagName instead
                        srcElements = getAll( elem );
                        destElements = getAll( clone );

                        // Weird iteration because IE will replace the length property
                        // with an element if you are cloning the body and one of the
                        // elements on the page has a name or id of "length"
                        for ( i = 0; srcElements[i]; ++i ) {
                            // Ensure that the destination node is not null; Fixes #9587
                            if ( destElements[i] ) {
                                cloneFixAttributes( srcElements[i], destElements[i] );
                            }
                        }
                    }

                    // Copy the events from the original to the clone
                    if ( dataAndEvents ) {
                        cloneCopyEvent( elem, clone );

                        if ( deepDataAndEvents ) {
                            srcElements = getAll( elem );
                            destElements = getAll( clone );

                            for ( i = 0; srcElements[i]; ++i ) {
                                cloneCopyEvent( srcElements[i], destElements[i] );
                            }
                        }
                    }

                    srcElements = destElements = null;

                    // Return the cloned set
                    return clone;
                },

                clean: function( elems, context, fragment, scripts ) {
                    var i, j, elem, tag, wrap, depth, div, hasBody, tbody, len, handleScript, jsTags,
                        safe = context === document && safeFragment,
                        ret = [];

                    // Ensure that context is a document
                    if ( !context || typeof context.createDocumentFragment === "undefined" ) {
                        context = document;
                    }

                    // Use the already-created safe fragment if context permits
                    for ( i = 0; (elem = elems[i]) != null; i++ ) {
                        if ( typeof elem === "number" ) {
                            elem += "";
                        }

                        if ( !elem ) {
                            continue;
                        }

                        // Convert html string into DOM nodes
                        if ( typeof elem === "string" ) {
                            if ( !rhtml.test( elem ) ) {
                                elem = context.createTextNode( elem );
                            } else {
                                // Ensure a safe container in which to render the html
                                safe = safe || createSafeFragment( context );
                                div = context.createElement("div");
                                safe.appendChild( div );

                                // Fix "XHTML"-style tags in all browsers
                                elem = elem.replace(rxhtmlTag, "<$1></$2>");

                                // Go to html and back, then peel off extra wrappers
                                tag = ( rtagName.exec( elem ) || ["", ""] )[1].toLowerCase();
                                wrap = wrapMap[ tag ] || wrapMap._default;
                                depth = wrap[0];
                                div.innerHTML = wrap[1] + elem + wrap[2];

                                // Move to the right depth
                                while ( depth-- ) {
                                    div = div.lastChild;
                                }

                                // Remove IE's autoinserted <tbody> from table fragments
                                if ( !jQuery.support.tbody ) {

                                    // String was a <table>, *may* have spurious <tbody>
                                    hasBody = rtbody.test(elem);
                                    tbody = tag === "table" && !hasBody ?
                                        div.firstChild && div.firstChild.childNodes :

                                        // String was a bare <thead> or <tfoot>
                                        wrap[1] === "<table>" && !hasBody ?
                                            div.childNodes :
                                            [];

                                    for ( j = tbody.length - 1; j >= 0 ; --j ) {
                                        if ( jQuery.nodeName( tbody[ j ], "tbody" ) && !tbody[ j ].childNodes.length ) {
                                            tbody[ j ].parentNode.removeChild( tbody[ j ] );
                                        }
                                    }
                                }

                                // IE completely kills leading whitespace when innerHTML is used
                                if ( !jQuery.support.leadingWhitespace && rleadingWhitespace.test( elem ) ) {
                                    div.insertBefore( context.createTextNode( rleadingWhitespace.exec(elem)[0] ), div.firstChild );
                                }

                                elem = div.childNodes;

                                // Take out of fragment container (we need a fresh div each time)
                                div.parentNode.removeChild( div );
                            }
                        }

                        if ( elem.nodeType ) {
                            ret.push( elem );
                        } else {
                            jQuery.merge( ret, elem );
                        }
                    }

                    // Fix #11356: Clear elements from safeFragment
                    if ( div ) {
                        elem = div = safe = null;
                    }

                    // Reset defaultChecked for any radios and checkboxes
                    // about to be appended to the DOM in IE 6/7 (#8060)
                    if ( !jQuery.support.appendChecked ) {
                        for ( i = 0; (elem = ret[i]) != null; i++ ) {
                            if ( jQuery.nodeName( elem, "input" ) ) {
                                fixDefaultChecked( elem );
                            } else if ( typeof elem.getElementsByTagName !== "undefined" ) {
                                jQuery.grep( elem.getElementsByTagName("input"), fixDefaultChecked );
                            }
                        }
                    }

                    // Append elements to a provided document fragment
                    if ( fragment ) {
                        // Special handling of each script element
                        handleScript = function( elem ) {
                            // Check if we consider it executable
                            if ( !elem.type || rscriptType.test( elem.type ) ) {
                                // Detach the script and store it in the scripts array (if provided) or the fragment
                                // Return truthy to indicate that it has been handled
                                return scripts ?
                                    scripts.push( elem.parentNode ? elem.parentNode.removeChild( elem ) : elem ) :
                                    fragment.appendChild( elem );
                            }
                        };

                        for ( i = 0; (elem = ret[i]) != null; i++ ) {
                            // Check if we're done after handling an executable script
                            if ( !( jQuery.nodeName( elem, "script" ) && handleScript( elem ) ) ) {
                                // Append to fragment and handle embedded scripts
                                fragment.appendChild( elem );
                                if ( typeof elem.getElementsByTagName !== "undefined" ) {
                                    // handleScript alters the DOM, so use jQuery.merge to ensure snapshot iteration
                                    jsTags = jQuery.grep( jQuery.merge( [], elem.getElementsByTagName("script") ), handleScript );

                                    // Splice the scripts into ret after their former ancestor and advance our index beyond them
                                    ret.splice.apply( ret, [i + 1, 0].concat( jsTags ) );
                                    i += jsTags.length;
                                }
                            }
                        }
                    }

                    return ret;
                },

                cleanData: function( elems, /* internal */ acceptData ) {
                    var data, id, elem, type,
                        i = 0,
                        internalKey = jQuery.expando,
                        cache = jQuery.cache,
                        deleteExpando = jQuery.support.deleteExpando,
                        special = jQuery.event.special;

                    for ( ; (elem = elems[i]) != null; i++ ) {

                        if ( acceptData || jQuery.acceptData( elem ) ) {

                            id = elem[ internalKey ];
                            data = id && cache[ id ];

                            if ( data ) {
                                if ( data.events ) {
                                    for ( type in data.events ) {
                                        if ( special[ type ] ) {
                                            jQuery.event.remove( elem, type );

                                            // This is a shortcut to avoid jQuery.event.remove's overhead
                                        } else {
                                            jQuery.removeEvent( elem, type, data.handle );
                                        }
                                    }
                                }

                                // Remove cache only if it was not already removed by jQuery.event.remove
                                if ( cache[ id ] ) {

                                    delete cache[ id ];

                                    // IE does not allow us to delete expando properties from nodes,
                                    // nor does it have a removeAttribute function on Document nodes;
                                    // we must handle all of these cases
                                    if ( deleteExpando ) {
                                        delete elem[ internalKey ];

                                    } else if ( elem.removeAttribute ) {
                                        elem.removeAttribute( internalKey );

                                    } else {
                                        elem[ internalKey ] = null;
                                    }

                                    jQuery.deletedIds.push( id );
                                }
                            }
                        }
                    }
                }
            });
// Limit scope pollution from any deprecated API
            (function() {

                var matched, browser;

// Use of jQuery.browser is frowned upon.
// More details: http://api.jquery.com/jQuery.browser
// jQuery.uaMatch maintained for back-compat
                jQuery.uaMatch = function( ua ) {
                    ua = ua.toLowerCase();

                    var match = /(chrome)[ \/]([\w.]+)/.exec( ua ) ||
                        /(webkit)[ \/]([\w.]+)/.exec( ua ) ||
                        /(opera)(?:.*version|)[ \/]([\w.]+)/.exec( ua ) ||
                        /(msie) ([\w.]+)/.exec( ua ) ||
                        ua.indexOf("compatible") < 0 && /(mozilla)(?:.*? rv:([\w.]+)|)/.exec( ua ) ||
                        [];

                    return {
                        browser: match[ 1 ] || "",
                        version: match[ 2 ] || "0"
                    };
                };

                matched = jQuery.uaMatch( navigator.userAgent );
                browser = {};

                if ( matched.browser ) {
                    browser[ matched.browser ] = true;
                    browser.version = matched.version;
                }

// Chrome is Webkit, but Webkit is also Safari.
                if ( browser.chrome ) {
                    browser.webkit = true;
                } else if ( browser.webkit ) {
                    browser.safari = true;
                }

                jQuery.browser = browser;

                jQuery.sub = function() {
                    function jQuerySub( selector, context ) {
                        return new jQuerySub.fn.init( selector, context );
                    }
                    jQuery.extend( true, jQuerySub, this );
                    jQuerySub.superclass = this;
                    jQuerySub.fn = jQuerySub.prototype = this();
                    jQuerySub.fn.constructor = jQuerySub;
                    jQuerySub.sub = this.sub;
                    jQuerySub.fn.init = function init( selector, context ) {
                        if ( context && context instanceof jQuery && !(context instanceof jQuerySub) ) {
                            context = jQuerySub( context );
                        }

                        return jQuery.fn.init.call( this, selector, context, rootjQuerySub );
                    };
                    jQuerySub.fn.init.prototype = jQuerySub.fn;
                    var rootjQuerySub = jQuerySub(document);
                    return jQuerySub;
                };

            })();
            var curCSS, iframe, iframeDoc,
                ralpha = /alpha\([^)]*\)/i,
                ropacity = /opacity=([^)]*)/,
                rposition = /^(top|right|bottom|left)$/,
                // swappable if display is none or starts with table except "table", "table-cell", or "table-caption"
                // see here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
                rdisplayswap = /^(none|table(?!-c[ea]).+)/,
                rmargin = /^margin/,
                rnumsplit = new RegExp( "^(" + core_pnum + ")(.*)$", "i" ),
                rnumnonpx = new RegExp( "^(" + core_pnum + ")(?!px)[a-z%]+$", "i" ),
                rrelNum = new RegExp( "^([-+])=(" + core_pnum + ")", "i" ),
                elemdisplay = { BODY: "block" },

                cssShow = { position: "absolute", visibility: "hidden", display: "block" },
                cssNormalTransform = {
                    letterSpacing: 0,
                    fontWeight: 400
                },

                cssExpand = [ "Top", "Right", "Bottom", "Left" ],
                cssPrefixes = [ "Webkit", "O", "Moz", "ms" ],

                eventsToggle = jQuery.fn.toggle;

// return a css property mapped to a potentially vendor prefixed property
            function vendorPropName( style, name ) {

                // shortcut for names that are not vendor prefixed
                if ( name in style ) {
                    return name;
                }

                // check for vendor prefixed names
                var capName = name.charAt(0).toUpperCase() + name.slice(1),
                    origName = name,
                    i = cssPrefixes.length;

                while ( i-- ) {
                    name = cssPrefixes[ i ] + capName;
                    if ( name in style ) {
                        return name;
                    }
                }

                return origName;
            }

            function isHidden( elem, el ) {
                elem = el || elem;
                return jQuery.css( elem, "display" ) === "none" || !jQuery.contains( elem.ownerDocument, elem );
            }

            function showHide( elements, show ) {
                var elem, display,
                    values = [],
                    index = 0,
                    length = elements.length;

                for ( ; index < length; index++ ) {
                    elem = elements[ index ];
                    if ( !elem.style ) {
                        continue;
                    }
                    values[ index ] = jQuery._data( elem, "olddisplay" );
                    if ( show ) {
                        // Reset the inline display of this element to learn if it is
                        // being hidden by cascaded rules or not
                        if ( !values[ index ] && elem.style.display === "none" ) {
                            elem.style.display = "";
                        }

                        // Set elements which have been overridden with display: none
                        // in a stylesheet to whatever the default browser style is
                        // for such an element
                        if ( elem.style.display === "" && isHidden( elem ) ) {
                            values[ index ] = jQuery._data( elem, "olddisplay", css_defaultDisplay(elem.nodeName) );
                        }
                    } else {
                        display = curCSS( elem, "display" );

                        if ( !values[ index ] && display !== "none" ) {
                            jQuery._data( elem, "olddisplay", display );
                        }
                    }
                }

                // Set the display of most of the elements in a second loop
                // to avoid the constant reflow
                for ( index = 0; index < length; index++ ) {
                    elem = elements[ index ];
                    if ( !elem.style ) {
                        continue;
                    }
                    if ( !show || elem.style.display === "none" || elem.style.display === "" ) {
                        elem.style.display = show ? values[ index ] || "" : "none";
                    }
                }

                return elements;
            }

            jQuery.fn.extend({
                css: function( name, value ) {
                    return jQuery.access( this, function( elem, name, value ) {
                        return value !== undefined ?
                            jQuery.style( elem, name, value ) :
                            jQuery.css( elem, name );
                    }, name, value, arguments.length > 1 );
                },
                show: function() {
                    return showHide( this, true );
                },
                hide: function() {
                    return showHide( this );
                },
                toggle: function( state, fn2 ) {
                    var bool = typeof state === "boolean";

                    if ( jQuery.isFunction( state ) && jQuery.isFunction( fn2 ) ) {
                        return eventsToggle.apply( this, arguments );
                    }

                    return this.each(function() {
                        if ( bool ? state : isHidden( this ) ) {
                            jQuery( this ).show();
                        } else {
                            jQuery( this ).hide();
                        }
                    });
                }
            });

            jQuery.extend({
                // Add in style property hooks for overriding the default
                // behavior of getting and setting a style property
                cssHooks: {
                    opacity: {
                        get: function( elem, computed ) {
                            if ( computed ) {
                                // We should always get a number back from opacity
                                var ret = curCSS( elem, "opacity" );
                                return ret === "" ? "1" : ret;

                            }
                        }
                    }
                },

                // Exclude the following css properties to add px
                cssNumber: {
                    "fillOpacity": true,
                    "fontWeight": true,
                    "lineHeight": true,
                    "opacity": true,
                    "orphans": true,
                    "widows": true,
                    "zIndex": true,
                    "zoom": true
                },

                // Add in properties whose names you wish to fix before
                // setting or getting the value
                cssProps: {
                    // normalize float css property
                    "float": jQuery.support.cssFloat ? "cssFloat" : "styleFloat"
                },

                // Get and set the style property on a DOM Node
                style: function( elem, name, value, extra ) {
                    // Don't set styles on text and comment nodes
                    if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
                        return;
                    }

                    // Make sure that we're working with the right name
                    var ret, type, hooks,
                        origName = jQuery.camelCase( name ),
                        style = elem.style;

                    name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( style, origName ) );

                    // gets hook for the prefixed version
                    // followed by the unprefixed version
                    hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

                    // Check if we're setting a value
                    if ( value !== undefined ) {
                        type = typeof value;

                        // convert relative number strings (+= or -=) to relative numbers. #7345
                        if ( type === "string" && (ret = rrelNum.exec( value )) ) {
                            value = ( ret[1] + 1 ) * ret[2] + parseFloat( jQuery.css( elem, name ) );
                            // Fixes bug #9237
                            type = "number";
                        }

                        // Make sure that NaN and null values aren't set. See: #7116
                        if ( value == null || type === "number" && isNaN( value ) ) {
                            return;
                        }

                        // If a number was passed in, add 'px' to the (except for certain CSS properties)
                        if ( type === "number" && !jQuery.cssNumber[ origName ] ) {
                            value += "px";
                        }

                        // If a hook was provided, use that value, otherwise just set the specified value
                        if ( !hooks || !("set" in hooks) || (value = hooks.set( elem, value, extra )) !== undefined ) {
                            // Wrapped to prevent IE from throwing errors when 'invalid' values are provided
                            // Fixes bug #5509
                            try {
                                style[ name ] = value;
                            } catch(e) {}
                        }

                    } else {
                        // If a hook was provided get the non-computed value from there
                        if ( hooks && "get" in hooks && (ret = hooks.get( elem, false, extra )) !== undefined ) {
                            return ret;
                        }

                        // Otherwise just get the value from the style object
                        return style[ name ];
                    }
                },

                css: function( elem, name, numeric, extra ) {
                    var val, num, hooks,
                        origName = jQuery.camelCase( name );

                    // Make sure that we're working with the right name
                    name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( elem.style, origName ) );

                    // gets hook for the prefixed version
                    // followed by the unprefixed version
                    hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

                    // If a hook was provided get the computed value from there
                    if ( hooks && "get" in hooks ) {
                        val = hooks.get( elem, true, extra );
                    }

                    // Otherwise, if a way to get the computed value exists, use that
                    if ( val === undefined ) {
                        val = curCSS( elem, name );
                    }

                    //convert "normal" to computed value
                    if ( val === "normal" && name in cssNormalTransform ) {
                        val = cssNormalTransform[ name ];
                    }

                    // Return, converting to number if forced or a qualifier was provided and val looks numeric
                    if ( numeric || extra !== undefined ) {
                        num = parseFloat( val );
                        return numeric || jQuery.isNumeric( num ) ? num || 0 : val;
                    }
                    return val;
                },

                // A method for quickly swapping in/out CSS properties to get correct calculations
                swap: function( elem, options, callback ) {
                    var ret, name,
                        old = {};

                    // Remember the old values, and insert the new ones
                    for ( name in options ) {
                        old[ name ] = elem.style[ name ];
                        elem.style[ name ] = options[ name ];
                    }

                    ret = callback.call( elem );

                    // Revert the old values
                    for ( name in options ) {
                        elem.style[ name ] = old[ name ];
                    }

                    return ret;
                }
            });

// NOTE: To any future maintainer, we've window.getComputedStyle
// because jsdom on node.js will break without it.
            if ( window.getComputedStyle ) {
                curCSS = function( elem, name ) {
                    var ret, width, minWidth, maxWidth,
                        computed = window.getComputedStyle( elem, null ),
                        style = elem.style;

                    if ( computed ) {

                        // getPropertyValue is only needed for .css('filter') in IE9, see #12537
                        ret = computed.getPropertyValue( name ) || computed[ name ];

                        if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
                            ret = jQuery.style( elem, name );
                        }

                        // A tribute to the "awesome hack by Dean Edwards"
                        // Chrome < 17 and Safari 5.0 uses "computed value" instead of "used value" for margin-right
                        // Safari 5.1.7 (at least) returns percentage for a larger set of values, but width seems to be reliably pixels
                        // this is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values
                        if ( rnumnonpx.test( ret ) && rmargin.test( name ) ) {
                            width = style.width;
                            minWidth = style.minWidth;
                            maxWidth = style.maxWidth;

                            style.minWidth = style.maxWidth = style.width = ret;
                            ret = computed.width;

                            style.width = width;
                            style.minWidth = minWidth;
                            style.maxWidth = maxWidth;
                        }
                    }

                    return ret;
                };
            } else if ( document.documentElement.currentStyle ) {
                curCSS = function( elem, name ) {
                    var left, rsLeft,
                        ret = elem.currentStyle && elem.currentStyle[ name ],
                        style = elem.style;

                    // Avoid setting ret to empty string here
                    // so we don't default to auto
                    if ( ret == null && style && style[ name ] ) {
                        ret = style[ name ];
                    }

                    // From the awesome hack by Dean Edwards
                    // http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291

                    // If we're not dealing with a regular pixel number
                    // but a number that has a weird ending, we need to convert it to pixels
                    // but not position css attributes, as those are proportional to the parent element instead
                    // and we can't measure the parent instead because it might trigger a "stacking dolls" problem
                    if ( rnumnonpx.test( ret ) && !rposition.test( name ) ) {

                        // Remember the original values
                        left = style.left;
                        rsLeft = elem.runtimeStyle && elem.runtimeStyle.left;

                        // Put in the new values to get a computed value out
                        if ( rsLeft ) {
                            elem.runtimeStyle.left = elem.currentStyle.left;
                        }
                        style.left = name === "fontSize" ? "1em" : ret;
                        ret = style.pixelLeft + "px";

                        // Revert the changed values
                        style.left = left;
                        if ( rsLeft ) {
                            elem.runtimeStyle.left = rsLeft;
                        }
                    }

                    return ret === "" ? "auto" : ret;
                };
            }

            function setPositiveNumber( elem, value, subtract ) {
                var matches = rnumsplit.exec( value );
                return matches ?
                    Math.max( 0, matches[ 1 ] - ( subtract || 0 ) ) + ( matches[ 2 ] || "px" ) :
                    value;
            }

            function augmentWidthOrHeight( elem, name, extra, isBorderBox ) {
                var i = extra === ( isBorderBox ? "border" : "content" ) ?
                        // If we already have the right measurement, avoid augmentation
                        4 :
                        // Otherwise initialize for horizontal or vertical properties
                        name === "width" ? 1 : 0,

                    val = 0;

                for ( ; i < 4; i += 2 ) {
                    // both box models exclude margin, so add it if we want it
                    if ( extra === "margin" ) {
                        // we use jQuery.css instead of curCSS here
                        // because of the reliableMarginRight CSS hook!
                        val += jQuery.css( elem, extra + cssExpand[ i ], true );
                    }

                    // From this point on we use curCSS for maximum performance (relevant in animations)
                    if ( isBorderBox ) {
                        // border-box includes padding, so remove it if we want content
                        if ( extra === "content" ) {
                            val -= parseFloat( curCSS( elem, "padding" + cssExpand[ i ] ) ) || 0;
                        }

                        // at this point, extra isn't border nor margin, so remove border
                        if ( extra !== "margin" ) {
                            val -= parseFloat( curCSS( elem, "border" + cssExpand[ i ] + "Width" ) ) || 0;
                        }
                    } else {
                        // at this point, extra isn't content, so add padding
                        val += parseFloat( curCSS( elem, "padding" + cssExpand[ i ] ) ) || 0;

                        // at this point, extra isn't content nor padding, so add border
                        if ( extra !== "padding" ) {
                            val += parseFloat( curCSS( elem, "border" + cssExpand[ i ] + "Width" ) ) || 0;
                        }
                    }
                }

                return val;
            }

            function getWidthOrHeight( elem, name, extra ) {

                // Start with offset property, which is equivalent to the border-box value
                var val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
                    valueIsBorderBox = true,
                    isBorderBox = jQuery.support.boxSizing && jQuery.css( elem, "boxSizing" ) === "border-box";

                // some non-html elements return undefined for offsetWidth, so check for null/undefined
                // svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
                // MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
                if ( val <= 0 || val == null ) {
                    // Fall back to computed then uncomputed css if necessary
                    val = curCSS( elem, name );
                    if ( val < 0 || val == null ) {
                        val = elem.style[ name ];
                    }

                    // Computed unit is not pixels. Stop here and return.
                    if ( rnumnonpx.test(val) ) {
                        return val;
                    }

                    // we need the check for style in case a browser which returns unreliable values
                    // for getComputedStyle silently falls back to the reliable elem.style
                    valueIsBorderBox = isBorderBox && ( jQuery.support.boxSizingReliable || val === elem.style[ name ] );

                    // Normalize "", auto, and prepare for extra
                    val = parseFloat( val ) || 0;
                }

                // use the active box-sizing model to add/subtract irrelevant styles
                return ( val +
                        augmentWidthOrHeight(
                            elem,
                            name,
                            extra || ( isBorderBox ? "border" : "content" ),
                            valueIsBorderBox
                        )
                    ) + "px";
            }


// Try to determine the default display value of an element
            function css_defaultDisplay( nodeName ) {
                if ( elemdisplay[ nodeName ] ) {
                    return elemdisplay[ nodeName ];
                }

                var elem = jQuery( "<" + nodeName + ">" ).appendTo( document.body ),
                    display = elem.css("display");
                elem.remove();

                // If the simple way fails,
                // get element's real default display by attaching it to a temp iframe
                if ( display === "none" || display === "" ) {
                    // Use the already-created iframe if possible
                    iframe = document.body.appendChild(
                        iframe || jQuery.extend( document.createElement("iframe"), {
                            frameBorder: 0,
                            width: 0,
                            height: 0
                        })
                    );

                    // Create a cacheable copy of the iframe document on first call.
                    // IE and Opera will allow us to reuse the iframeDoc without re-writing the fake HTML
                    // document to it; WebKit & Firefox won't allow reusing the iframe document.
                    if ( !iframeDoc || !iframe.createElement ) {
                        iframeDoc = ( iframe.contentWindow || iframe.contentDocument ).document;
                        iframeDoc.write("<!doctype html><html><body>");
                        iframeDoc.close();
                    }

                    elem = iframeDoc.body.appendChild( iframeDoc.createElement(nodeName) );

                    display = curCSS( elem, "display" );
                    document.body.removeChild( iframe );
                }

                // Store the correct default display
                elemdisplay[ nodeName ] = display;

                return display;
            }

            jQuery.each([ "height", "width" ], function( i, name ) {
                jQuery.cssHooks[ name ] = {
                    get: function( elem, computed, extra ) {
                        if ( computed ) {
                            // certain elements can have dimension info if we invisibly show them
                            // however, it must have a current display style that would benefit from this
                            if ( elem.offsetWidth === 0 && rdisplayswap.test( curCSS( elem, "display" ) ) ) {
                                return jQuery.swap( elem, cssShow, function() {
                                    return getWidthOrHeight( elem, name, extra );
                                });
                            } else {
                                return getWidthOrHeight( elem, name, extra );
                            }
                        }
                    },

                    set: function( elem, value, extra ) {
                        return setPositiveNumber( elem, value, extra ?
                            augmentWidthOrHeight(
                                elem,
                                name,
                                extra,
                                jQuery.support.boxSizing && jQuery.css( elem, "boxSizing" ) === "border-box"
                            ) : 0
                        );
                    }
                };
            });

            if ( !jQuery.support.opacity ) {
                jQuery.cssHooks.opacity = {
                    get: function( elem, computed ) {
                        // IE uses filters for opacity
                        return ropacity.test( (computed && elem.currentStyle ? elem.currentStyle.filter : elem.style.filter) || "" ) ?
                            ( 0.01 * parseFloat( RegExp.$1 ) ) + "" :
                            computed ? "1" : "";
                    },

                    set: function( elem, value ) {
                        var style = elem.style,
                            currentStyle = elem.currentStyle,
                            opacity = jQuery.isNumeric( value ) ? "alpha(opacity=" + value * 100 + ")" : "",
                            filter = currentStyle && currentStyle.filter || style.filter || "";

                        // IE has trouble with opacity if it does not have layout
                        // Force it by setting the zoom level
                        style.zoom = 1;

                        // if setting opacity to 1, and no other filters exist - attempt to remove filter attribute #6652
                        if ( value >= 1 && jQuery.trim( filter.replace( ralpha, "" ) ) === "" &&
                            style.removeAttribute ) {

                            // Setting style.filter to null, "" & " " still leave "filter:" in the cssText
                            // if "filter:" is present at all, clearType is disabled, we want to avoid this
                            // style.removeAttribute is IE Only, but so apparently is this code path...
                            style.removeAttribute( "filter" );

                            // if there there is no filter style applied in a css rule, we are done
                            if ( currentStyle && !currentStyle.filter ) {
                                return;
                            }
                        }

                        // otherwise, set new filter values
                        style.filter = ralpha.test( filter ) ?
                            filter.replace( ralpha, opacity ) :
                            filter + " " + opacity;
                    }
                };
            }

// These hooks cannot be added until DOM ready because the support test
// for it is not run until after DOM ready
            jQuery(function() {
                if ( !jQuery.support.reliableMarginRight ) {
                    jQuery.cssHooks.marginRight = {
                        get: function( elem, computed ) {
                            // WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
                            // Work around by temporarily setting element display to inline-block
                            return jQuery.swap( elem, { "display": "inline-block" }, function() {
                                if ( computed ) {
                                    return curCSS( elem, "marginRight" );
                                }
                            });
                        }
                    };
                }

                // Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
                // getComputedStyle returns percent when specified for top/left/bottom/right
                // rather than make the css module depend on the offset module, we just check for it here
                if ( !jQuery.support.pixelPosition && jQuery.fn.position ) {
                    jQuery.each( [ "top", "left" ], function( i, prop ) {
                        jQuery.cssHooks[ prop ] = {
                            get: function( elem, computed ) {
                                if ( computed ) {
                                    var ret = curCSS( elem, prop );
                                    // if curCSS returns percentage, fallback to offset
                                    return rnumnonpx.test( ret ) ? jQuery( elem ).position()[ prop ] + "px" : ret;
                                }
                            }
                        };
                    });
                }

            });

            if ( jQuery.expr && jQuery.expr.filters ) {
                jQuery.expr.filters.hidden = function( elem ) {
                    return ( elem.offsetWidth === 0 && elem.offsetHeight === 0 ) || (!jQuery.support.reliableHiddenOffsets && ((elem.style && elem.style.display) || curCSS( elem, "display" )) === "none");
                };

                jQuery.expr.filters.visible = function( elem ) {
                    return !jQuery.expr.filters.hidden( elem );
                };
            }

// These hooks are used by animate to expand properties
            jQuery.each({
                margin: "",
                padding: "",
                border: "Width"
            }, function( prefix, suffix ) {
                jQuery.cssHooks[ prefix + suffix ] = {
                    expand: function( value ) {
                        var i,

                            // assumes a single number if not a string
                            parts = typeof value === "string" ? value.split(" ") : [ value ],
                            expanded = {};

                        for ( i = 0; i < 4; i++ ) {
                            expanded[ prefix + cssExpand[ i ] + suffix ] =
                                parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
                        }

                        return expanded;
                    }
                };

                if ( !rmargin.test( prefix ) ) {
                    jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
                }
            });
            var r20 = /%20/g,
                rbracket = /\[\]$/,
                rCRLF = /\r?\n/g,
                rinput = /^(?:color|date|datetime|datetime-local|email|hidden|month|number|password|range|search|tel|text|time|url|week)$/i,
                rselectTextarea = /^(?:select|textarea)/i;

            jQuery.fn.extend({
                serialize: function() {
                    return jQuery.param( this.serializeArray() );
                },
                serializeArray: function() {
                    return this.map(function(){
                        return this.elements ? jQuery.makeArray( this.elements ) : this;
                    })
                        .filter(function(){
                            return this.name && !this.disabled &&
                                ( this.checked || rselectTextarea.test( this.nodeName ) ||
                                rinput.test( this.type ) );
                        })
                        .map(function( i, elem ){
                            var val = jQuery( this ).val();

                            return val == null ?
                                null :
                                jQuery.isArray( val ) ?
                                    jQuery.map( val, function( val, i ){
                                        return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
                                    }) :
                                    { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
                        }).get();
                }
            });

//Serialize an array of form elements or a set of
//key/values into a query string
            jQuery.param = function( a, traditional ) {
                var prefix,
                    s = [],
                    add = function( key, value ) {
                        // If value is a function, invoke it and return its value
                        value = jQuery.isFunction( value ) ? value() : ( value == null ? "" : value );
                        s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
                    };

                // Set traditional to true for jQuery <= 1.3.2 behavior.
                if ( traditional === undefined ) {
                    traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
                }

                // If an array was passed in, assume that it is an array of form elements.
                if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {
                    // Serialize the form elements
                    jQuery.each( a, function() {
                        add( this.name, this.value );
                    });

                } else {
                    // If traditional, encode the "old" way (the way 1.3.2 or older
                    // did it), otherwise encode params recursively.
                    for ( prefix in a ) {
                        buildParams( prefix, a[ prefix ], traditional, add );
                    }
                }

                // Return the resulting serialization
                return s.join( "&" ).replace( r20, "+" );
            };

            function buildParams( prefix, obj, traditional, add ) {
                var name;

                if ( jQuery.isArray( obj ) ) {
                    // Serialize array item.
                    jQuery.each( obj, function( i, v ) {
                        if ( traditional || rbracket.test( prefix ) ) {
                            // Treat each array item as a scalar.
                            add( prefix, v );

                        } else {
                            // If array item is non-scalar (array or object), encode its
                            // numeric index to resolve deserialization ambiguity issues.
                            // Note that rack (as of 1.0.0) can't currently deserialize
                            // nested arrays properly, and attempting to do so may cause
                            // a server error. Possible fixes are to modify rack's
                            // deserialization algorithm or to provide an option or flag
                            // to force array serialization to be shallow.
                            buildParams( prefix + "[" + ( typeof v === "object" ? i : "" ) + "]", v, traditional, add );
                        }
                    });

                } else if ( !traditional && jQuery.type( obj ) === "object" ) {
                    // Serialize object item.
                    for ( name in obj ) {
                        buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
                    }

                } else {
                    // Serialize scalar item.
                    add( prefix, obj );
                }
            }
            var
                // Document location
                ajaxLocParts,
                ajaxLocation,

                rhash = /#.*$/,
                rheaders = /^(.*?):[ \t]*([^\r\n]*)\r?$/mg, // IE leaves an \r character at EOL
                // #7653, #8125, #8152: local protocol detection
                rlocalProtocol = /^(?:about|app|app\-storage|.+\-extension|file|res|widget):$/,
                rnoContent = /^(?:GET|HEAD)$/,
                rprotocol = /^\/\//,
                rquery = /\?/,
                rscript = /<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi,
                rts = /([?&])_=[^&]*/,
                rurl = /^([\w\+\.\-]+:)(?:\/\/([^\/?#:]*)(?::(\d+)|)|)/,

                // Keep a copy of the old load method
                _load = jQuery.fn.load,

                /* Prefilters
                 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
                 * 2) These are called:
                 *    - BEFORE asking for a transport
                 *    - AFTER param serialization (s.data is a string if s.processData is true)
                 * 3) key is the dataType
                 * 4) the catchall symbol "*" can be used
                 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
                 */
                prefilters = {},

                /* Transports bindings
                 * 1) key is the dataType
                 * 2) the catchall symbol "*" can be used
                 * 3) selection will start with transport dataType and THEN go to "*" if needed
                 */
                transports = {},

                // Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
                allTypes = ["*/"] + ["*"];

// #8138, IE may throw an exception when accessing
// a field from window.location if document.domain has been set
            try {
                ajaxLocation = location.href;
            } catch( e ) {
                // Use the href attribute of an A element
                // since IE will modify it given document.location
                ajaxLocation = document.createElement( "a" );
                ajaxLocation.href = "";
                ajaxLocation = ajaxLocation.href;
            }

// Segment location into parts
            ajaxLocParts = rurl.exec( ajaxLocation.toLowerCase() ) || [];

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
            function addToPrefiltersOrTransports( structure ) {

                // dataTypeExpression is optional and defaults to "*"
                return function( dataTypeExpression, func ) {

                    if ( typeof dataTypeExpression !== "string" ) {
                        func = dataTypeExpression;
                        dataTypeExpression = "*";
                    }

                    var dataType, list, placeBefore,
                        dataTypes = dataTypeExpression.toLowerCase().split( core_rspace ),
                        i = 0,
                        length = dataTypes.length;

                    if ( jQuery.isFunction( func ) ) {
                        // For each dataType in the dataTypeExpression
                        for ( ; i < length; i++ ) {
                            dataType = dataTypes[ i ];
                            // We control if we're asked to add before
                            // any existing element
                            placeBefore = /^\+/.test( dataType );
                            if ( placeBefore ) {
                                dataType = dataType.substr( 1 ) || "*";
                            }
                            list = structure[ dataType ] = structure[ dataType ] || [];
                            // then we add to the structure accordingly
                            list[ placeBefore ? "unshift" : "push" ]( func );
                        }
                    }
                };
            }

// Base inspection function for prefilters and transports
            function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR,
                                                    dataType /* internal */, inspected /* internal */ ) {

                dataType = dataType || options.dataTypes[ 0 ];
                inspected = inspected || {};

                inspected[ dataType ] = true;

                var selection,
                    list = structure[ dataType ],
                    i = 0,
                    length = list ? list.length : 0,
                    executeOnly = ( structure === prefilters );

                for ( ; i < length && ( executeOnly || !selection ); i++ ) {
                    selection = list[ i ]( options, originalOptions, jqXHR );
                    // If we got redirected to another dataType
                    // we try there if executing only and not done already
                    if ( typeof selection === "string" ) {
                        if ( !executeOnly || inspected[ selection ] ) {
                            selection = undefined;
                        } else {
                            options.dataTypes.unshift( selection );
                            selection = inspectPrefiltersOrTransports(
                                structure, options, originalOptions, jqXHR, selection, inspected );
                        }
                    }
                }
                // If we're only executing or nothing was selected
                // we try the catchall dataType if not done already
                if ( ( executeOnly || !selection ) && !inspected[ "*" ] ) {
                    selection = inspectPrefiltersOrTransports(
                        structure, options, originalOptions, jqXHR, "*", inspected );
                }
                // unnecessary when only executing (prefilters)
                // but it'll be ignored by the caller in that case
                return selection;
            }

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
            function ajaxExtend( target, src ) {
                var key, deep,
                    flatOptions = jQuery.ajaxSettings.flatOptions || {};
                for ( key in src ) {
                    if ( src[ key ] !== undefined ) {
                        ( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
                    }
                }
                if ( deep ) {
                    jQuery.extend( true, target, deep );
                }
            }

            jQuery.fn.load = function( url, params, callback ) {
                if ( typeof url !== "string" && _load ) {
                    return _load.apply( this, arguments );
                }

                // Don't do a request if no elements are being requested
                if ( !this.length ) {
                    return this;
                }

                var selector, type, response,
                    self = this,
                    off = url.indexOf(" ");

                if ( off >= 0 ) {
                    selector = url.slice( off, url.length );
                    url = url.slice( 0, off );
                }

                // If it's a function
                if ( jQuery.isFunction( params ) ) {

                    // We assume that it's the callback
                    callback = params;
                    params = undefined;

                    // Otherwise, build a param string
                } else if ( params && typeof params === "object" ) {
                    type = "POST";
                }

                // Request the remote document
                jQuery.ajax({
                    url: url,

                    // if "type" variable is undefined, then "GET" method will be used
                    type: type,
                    dataType: "html",
                    data: params,
                    complete: function( jqXHR, status ) {
                        if ( callback ) {
                            self.each( callback, response || [ jqXHR.responseText, status, jqXHR ] );
                        }
                    }
                }).done(function( responseText ) {

                    // Save response for use in complete callback
                    response = arguments;

                    // See if a selector was specified
                    self.html( selector ?

                        // Create a dummy div to hold the results
                        jQuery("<div>")

                        // inject the contents of the document in, removing the scripts
                        // to avoid any 'Permission Denied' errors in IE
                            .append( responseText.replace( rscript, "" ) )

                            // Locate the specified elements
                            .find( selector ) :

                        // If not, just inject the full result
                        responseText );

                });

                return this;
            };

// Attach a bunch of functions for handling common AJAX events
            jQuery.each( "ajaxStart ajaxStop ajaxComplete ajaxError ajaxSuccess ajaxSend".split( " " ), function( i, o ){
                jQuery.fn[ o ] = function( f ){
                    return this.on( o, f );
                };
            });

            jQuery.each( [ "get", "post" ], function( i, method ) {
                jQuery[ method ] = function( url, data, callback, type ) {
                    // shift arguments if data argument was omitted
                    if ( jQuery.isFunction( data ) ) {
                        type = type || callback;
                        callback = data;
                        data = undefined;
                    }

                    return jQuery.ajax({
                        type: method,
                        url: url,
                        data: data,
                        success: callback,
                        dataType: type
                    });
                };
            });

            jQuery.extend({

                getScript: function( url, callback ) {
                    return jQuery.get( url, undefined, callback, "script" );
                },

                getJSON: function( url, data, callback ) {
                    return jQuery.get( url, data, callback, "json" );
                },

                // Creates a full fledged settings object into target
                // with both ajaxSettings and settings fields.
                // If target is omitted, writes into ajaxSettings.
                ajaxSetup: function( target, settings ) {
                    if ( settings ) {
                        // Building a settings object
                        ajaxExtend( target, jQuery.ajaxSettings );
                    } else {
                        // Extending ajaxSettings
                        settings = target;
                        target = jQuery.ajaxSettings;
                    }
                    ajaxExtend( target, settings );
                    return target;
                },

                ajaxSettings: {
                    url: ajaxLocation,
                    isLocal: rlocalProtocol.test( ajaxLocParts[ 1 ] ),
                    global: true,
                    type: "GET",
                    contentType: "application/x-www-form-urlencoded; charset=UTF-8",
                    processData: true,
                    async: true,
                    /*
                     timeout: 0,
                     data: null,
                     dataType: null,
                     username: null,
                     password: null,
                     cache: null,
                     throws: false,
                     traditional: false,
                     headers: {},
                     */

                    accepts: {
                        xml: "application/xml, text/xml",
                        html: "text/html",
                        text: "text/plain",
                        json: "application/json, text/javascript",
                        "*": allTypes
                    },

                    contents: {
                        xml: /xml/,
                        html: /html/,
                        json: /json/
                    },

                    responseFields: {
                        xml: "responseXML",
                        text: "responseText"
                    },

                    // List of data converters
                    // 1) key format is "source_type destination_type" (a single space in-between)
                    // 2) the catchall symbol "*" can be used for source_type
                    converters: {

                        // Convert anything to text
                        "* text": window.String,

                        // Text to html (true = no transformation)
                        "text html": true,

                        // Evaluate text as a json expression
                        "text json": jQuery.parseJSON,

                        // Parse text as xml
                        "text xml": jQuery.parseXML
                    },

                    // For options that shouldn't be deep extended:
                    // you can add your own custom options here if
                    // and when you create one that shouldn't be
                    // deep extended (see ajaxExtend)
                    flatOptions: {
                        context: true,
                        url: true
                    }
                },

                ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
                ajaxTransport: addToPrefiltersOrTransports( transports ),

                // Main method
                ajax: function( url, options ) {

                    // If url is an object, simulate pre-1.5 signature
                    if ( typeof url === "object" ) {
                        options = url;
                        url = undefined;
                    }

                    // Force options to be an object
                    options = options || {};

                    var // ifModified key
                        ifModifiedKey,
                        // Response headers
                        responseHeadersString,
                        responseHeaders,
                        // transport
                        transport,
                        // timeout handle
                        timeoutTimer,
                        // Cross-domain detection vars
                        parts,
                        // To know if global events are to be dispatched
                        fireGlobals,
                        // Loop variable
                        i,
                        // Create the final options object
                        s = jQuery.ajaxSetup( {}, options ),
                        // Callbacks context
                        callbackContext = s.context || s,
                        // Context for global events
                        // It's the callbackContext if one was provided in the options
                        // and if it's a DOM node or a jQuery collection
                        globalEventContext = callbackContext !== s &&
                        ( callbackContext.nodeType || callbackContext instanceof jQuery ) ?
                            jQuery( callbackContext ) : jQuery.event,
                        // Deferreds
                        deferred = jQuery.Deferred(),
                        completeDeferred = jQuery.Callbacks( "once memory" ),
                        // Status-dependent callbacks
                        statusCode = s.statusCode || {},
                        // Headers (they are sent all at once)
                        requestHeaders = {},
                        requestHeadersNames = {},
                        // The jqXHR state
                        state = 0,
                        // Default abort message
                        strAbort = "canceled",
                        // Fake xhr
                        jqXHR = {

                            readyState: 0,

                            // Caches the header
                            setRequestHeader: function( name, value ) {
                                if ( !state ) {
                                    var lname = name.toLowerCase();
                                    name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
                                    requestHeaders[ name ] = value;
                                }
                                return this;
                            },

                            // Raw string
                            getAllResponseHeaders: function() {
                                return state === 2 ? responseHeadersString : null;
                            },

                            // Builds headers hashtable if needed
                            getResponseHeader: function( key ) {
                                var match;
                                if ( state === 2 ) {
                                    if ( !responseHeaders ) {
                                        responseHeaders = {};
                                        while( ( match = rheaders.exec( responseHeadersString ) ) ) {
                                            responseHeaders[ match[1].toLowerCase() ] = match[ 2 ];
                                        }
                                    }
                                    match = responseHeaders[ key.toLowerCase() ];
                                }
                                return match === undefined ? null : match;
                            },

                            // Overrides response content-type header
                            overrideMimeType: function( type ) {
                                if ( !state ) {
                                    s.mimeType = type;
                                }
                                return this;
                            },

                            // Cancel the request
                            abort: function( statusText ) {
                                statusText = statusText || strAbort;
                                if ( transport ) {
                                    transport.abort( statusText );
                                }
                                done( 0, statusText );
                                return this;
                            }
                        };

                    // Callback for when everything is done
                    // It is defined here because jslint complains if it is declared
                    // at the end of the function (which would be more logical and readable)
                    function done( status, nativeStatusText, responses, headers ) {
                        var isSuccess, success, error, response, modified,
                            statusText = nativeStatusText;

                        // Called once
                        if ( state === 2 ) {
                            return;
                        }

                        // State is "done" now
                        state = 2;

                        // Clear timeout if it exists
                        if ( timeoutTimer ) {
                            clearTimeout( timeoutTimer );
                        }

                        // Dereference transport for early garbage collection
                        // (no matter how long the jqXHR object will be used)
                        transport = undefined;

                        // Cache response headers
                        responseHeadersString = headers || "";

                        // Set readyState
                        jqXHR.readyState = status > 0 ? 4 : 0;

                        // Get response data
                        if ( responses ) {
                            response = ajaxHandleResponses( s, jqXHR, responses );
                        }

                        // If successful, handle type chaining
                        if ( status >= 200 && status < 300 || status === 304 ) {

                            // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
                            if ( s.ifModified ) {

                                modified = jqXHR.getResponseHeader("Last-Modified");
                                if ( modified ) {
                                    jQuery.lastModified[ ifModifiedKey ] = modified;
                                }
                                modified = jqXHR.getResponseHeader("Etag");
                                if ( modified ) {
                                    jQuery.etag[ ifModifiedKey ] = modified;
                                }
                            }

                            // If not modified
                            if ( status === 304 ) {

                                statusText = "notmodified";
                                isSuccess = true;

                                // If we have data
                            } else {

                                isSuccess = ajaxConvert( s, response );
                                statusText = isSuccess.state;
                                success = isSuccess.data;
                                error = isSuccess.error;
                                isSuccess = !error;
                            }
                        } else {
                            // We extract error from statusText
                            // then normalize statusText and status for non-aborts
                            error = statusText;
                            if ( !statusText || status ) {
                                statusText = "error";
                                if ( status < 0 ) {
                                    status = 0;
                                }
                            }
                        }

                        // Set data for the fake xhr object
                        jqXHR.status = status;
                        jqXHR.statusText = ( nativeStatusText || statusText ) + "";

                        // Success/Error
                        if ( isSuccess ) {
                            deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
                        } else {
                            deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
                        }

                        // Status-dependent callbacks
                        jqXHR.statusCode( statusCode );
                        statusCode = undefined;

                        if ( fireGlobals ) {
                            globalEventContext.trigger( "ajax" + ( isSuccess ? "Success" : "Error" ),
                                [ jqXHR, s, isSuccess ? success : error ] );
                        }

                        // Complete
                        completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

                        if ( fireGlobals ) {
                            globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );
                            // Handle the global AJAX counter
                            if ( !( --jQuery.active ) ) {
                                jQuery.event.trigger( "ajaxStop" );
                            }
                        }
                    }

                    // Attach deferreds
                    deferred.promise( jqXHR );
                    jqXHR.success = jqXHR.done;
                    jqXHR.error = jqXHR.fail;
                    jqXHR.complete = completeDeferred.add;

                    // Status-dependent callbacks
                    jqXHR.statusCode = function( map ) {
                        if ( map ) {
                            var tmp;
                            if ( state < 2 ) {
                                for ( tmp in map ) {
                                    statusCode[ tmp ] = [ statusCode[tmp], map[tmp] ];
                                }
                            } else {
                                tmp = map[ jqXHR.status ];
                                jqXHR.always( tmp );
                            }
                        }
                        return this;
                    };

                    // Remove hash character (#7531: and string promotion)
                    // Add protocol if not provided (#5866: IE7 issue with protocol-less urls)
                    // We also use the url parameter if available
                    s.url = ( ( url || s.url ) + "" ).replace( rhash, "" ).replace( rprotocol, ajaxLocParts[ 1 ] + "//" );

                    // Extract dataTypes list
                    s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().split( core_rspace );

                    // A cross-domain request is in order when we have a protocol:host:port mismatch
                    if ( s.crossDomain == null ) {
                        parts = rurl.exec( s.url.toLowerCase() );
                        s.crossDomain = !!( parts &&
                            ( parts[ 1 ] !== ajaxLocParts[ 1 ] || parts[ 2 ] !== ajaxLocParts[ 2 ] ||
                            ( parts[ 3 ] || ( parts[ 1 ] === "http:" ? 80 : 443 ) ) !=
                            ( ajaxLocParts[ 3 ] || ( ajaxLocParts[ 1 ] === "http:" ? 80 : 443 ) ) )
                        );
                    }

                    // Convert data if not already a string
                    if ( s.data && s.processData && typeof s.data !== "string" ) {
                        s.data = jQuery.param( s.data, s.traditional );
                    }

                    // Apply prefilters
                    inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

                    // If request was aborted inside a prefilter, stop there
                    if ( state === 2 ) {
                        return jqXHR;
                    }

                    // We can fire global events as of now if asked to
                    fireGlobals = s.global;

                    // Uppercase the type
                    s.type = s.type.toUpperCase();

                    // Determine if request has content
                    s.hasContent = !rnoContent.test( s.type );

                    // Watch for a new set of requests
                    if ( fireGlobals && jQuery.active++ === 0 ) {
                        jQuery.event.trigger( "ajaxStart" );
                    }

                    // More options handling for requests with no content
                    if ( !s.hasContent ) {

                        // If data is available, append data to url
                        if ( s.data ) {
                            s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.data;
                            // #9682: remove data so that it's not used in an eventual retry
                            delete s.data;
                        }

                        // Get ifModifiedKey before adding the anti-cache parameter
                        ifModifiedKey = s.url;

                        // Add anti-cache in url if needed
                        if ( s.cache === false ) {

                            var ts = jQuery.now(),
                                // try replacing _= if it is there
                                ret = s.url.replace( rts, "$1_=" + ts );

                            // if nothing was replaced, add timestamp to the end
                            s.url = ret + ( ( ret === s.url ) ? ( rquery.test( s.url ) ? "&" : "?" ) + "_=" + ts : "" );
                        }
                    }

                    // Set the correct header, if data is being sent
                    if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
                        jqXHR.setRequestHeader( "Content-Type", s.contentType );
                    }

                    // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
                    if ( s.ifModified ) {
                        ifModifiedKey = ifModifiedKey || s.url;
                        if ( jQuery.lastModified[ ifModifiedKey ] ) {
                            jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ ifModifiedKey ] );
                        }
                        if ( jQuery.etag[ ifModifiedKey ] ) {
                            jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ ifModifiedKey ] );
                        }
                    }

                    // Set the Accepts header for the server, depending on the dataType
                    jqXHR.setRequestHeader(
                        "Accept",
                        s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[0] ] ?
                            s.accepts[ s.dataTypes[0] ] + ( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
                            s.accepts[ "*" ]
                    );

                    // Check for headers option
                    for ( i in s.headers ) {
                        jqXHR.setRequestHeader( i, s.headers[ i ] );
                    }

                    // Allow custom headers/mimetypes and early abort
                    if ( s.beforeSend && ( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {
                        // Abort if not done already and return
                        return jqXHR.abort();

                    }

                    // aborting is no longer a cancellation
                    strAbort = "abort";

                    // Install callbacks on deferreds
                    for ( i in { success: 1, error: 1, complete: 1 } ) {
                        jqXHR[ i ]( s[ i ] );
                    }

                    // Get transport
                    transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

                    // If no transport, we auto-abort
                    if ( !transport ) {
                        done( -1, "No Transport" );
                    } else {
                        jqXHR.readyState = 1;
                        // Send global event
                        if ( fireGlobals ) {
                            globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
                        }
                        // Timeout
                        if ( s.async && s.timeout > 0 ) {
                            timeoutTimer = setTimeout( function(){
                                jqXHR.abort( "timeout" );
                            }, s.timeout );
                        }

                        try {
                            state = 1;
                            transport.send( requestHeaders, done );
                        } catch (e) {
                            // Propagate exception as error if not done
                            if ( state < 2 ) {
                                done( -1, e );
                                // Simply rethrow otherwise
                            } else {
                                throw e;
                            }
                        }
                    }

                    return jqXHR;
                },

                // Counter for holding the number of active queries
                active: 0,

                // Last-Modified header cache for next request
                lastModified: {},
                etag: {}

            });

            /* Handles responses to an ajax request:
             * - sets all responseXXX fields accordingly
             * - finds the right dataType (mediates between content-type and expected dataType)
             * - returns the corresponding response
             */
            function ajaxHandleResponses( s, jqXHR, responses ) {

                var ct, type, finalDataType, firstDataType,
                    contents = s.contents,
                    dataTypes = s.dataTypes,
                    responseFields = s.responseFields;

                // Fill responseXXX fields
                for ( type in responseFields ) {
                    if ( type in responses ) {
                        jqXHR[ responseFields[type] ] = responses[ type ];
                    }
                }

                // Remove auto dataType and get content-type in the process
                while( dataTypes[ 0 ] === "*" ) {
                    dataTypes.shift();
                    if ( ct === undefined ) {
                        ct = s.mimeType || jqXHR.getResponseHeader( "content-type" );
                    }
                }

                // Check if we're dealing with a known content-type
                if ( ct ) {
                    for ( type in contents ) {
                        if ( contents[ type ] && contents[ type ].test( ct ) ) {
                            dataTypes.unshift( type );
                            break;
                        }
                    }
                }

                // Check to see if we have a response for the expected dataType
                if ( dataTypes[ 0 ] in responses ) {
                    finalDataType = dataTypes[ 0 ];
                } else {
                    // Try convertible dataTypes
                    for ( type in responses ) {
                        if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[0] ] ) {
                            finalDataType = type;
                            break;
                        }
                        if ( !firstDataType ) {
                            firstDataType = type;
                        }
                    }
                    // Or just use first one
                    finalDataType = finalDataType || firstDataType;
                }

                // If we found a dataType
                // We add the dataType to the list if needed
                // and return the corresponding response
                if ( finalDataType ) {
                    if ( finalDataType !== dataTypes[ 0 ] ) {
                        dataTypes.unshift( finalDataType );
                    }
                    return responses[ finalDataType ];
                }
            }

// Chain conversions given the request and the original response
            function ajaxConvert( s, response ) {

                var conv, conv2, current, tmp,
                    // Work with a copy of dataTypes in case we need to modify it for conversion
                    dataTypes = s.dataTypes.slice(),
                    prev = dataTypes[ 0 ],
                    converters = {},
                    i = 0;

                // Apply the dataFilter if provided
                if ( s.dataFilter ) {
                    response = s.dataFilter( response, s.dataType );
                }

                // Create converters map with lowercased keys
                if ( dataTypes[ 1 ] ) {
                    for ( conv in s.converters ) {
                        converters[ conv.toLowerCase() ] = s.converters[ conv ];
                    }
                }

                // Convert to each sequential dataType, tolerating list modification
                for ( ; (current = dataTypes[++i]); ) {

                    // There's only work to do if current dataType is non-auto
                    if ( current !== "*" ) {

                        // Convert response if prev dataType is non-auto and differs from current
                        if ( prev !== "*" && prev !== current ) {

                            // Seek a direct converter
                            conv = converters[ prev + " " + current ] || converters[ "* " + current ];

                            // If none found, seek a pair
                            if ( !conv ) {
                                for ( conv2 in converters ) {

                                    // If conv2 outputs current
                                    tmp = conv2.split(" ");
                                    if ( tmp[ 1 ] === current ) {

                                        // If prev can be converted to accepted input
                                        conv = converters[ prev + " " + tmp[ 0 ] ] ||
                                            converters[ "* " + tmp[ 0 ] ];
                                        if ( conv ) {
                                            // Condense equivalence converters
                                            if ( conv === true ) {
                                                conv = converters[ conv2 ];

                                                // Otherwise, insert the intermediate dataType
                                            } else if ( converters[ conv2 ] !== true ) {
                                                current = tmp[ 0 ];
                                                dataTypes.splice( i--, 0, current );
                                            }

                                            break;
                                        }
                                    }
                                }
                            }

                            // Apply converter (if not an equivalence)
                            if ( conv !== true ) {

                                // Unless errors are allowed to bubble, catch and return them
                                if ( conv && s["throws"] ) {
                                    response = conv( response );
                                } else {
                                    try {
                                        response = conv( response );
                                    } catch ( e ) {
                                        return { state: "parsererror", error: conv ? e : "No conversion from " + prev + " to " + current };
                                    }
                                }
                            }
                        }

                        // Update prev for next iteration
                        prev = current;
                    }
                }

                return { state: "success", data: response };
            }
            var oldCallbacks = [],
                rquestion = /\?/,
                rjsonp = /(=)\?(?=&|$)|\?\?/,
                nonce = jQuery.now();

// Default jsonp settings
            jQuery.ajaxSetup({
                jsonp: "callback",
                jsonpCallback: function() {
                    var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
                    this[ callback ] = true;
                    return callback;
                }
            });

// Detect, normalize options and install callbacks for jsonp requests
            jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

                var callbackName, overwritten, responseContainer,
                    data = s.data,
                    url = s.url,
                    hasCallback = s.jsonp !== false,
                    replaceInUrl = hasCallback && rjsonp.test( url ),
                    replaceInData = hasCallback && !replaceInUrl && typeof data === "string" &&
                        !( s.contentType || "" ).indexOf("application/x-www-form-urlencoded") &&
                        rjsonp.test( data );

                // Handle iff the expected data type is "jsonp" or we have a parameter to set
                if ( s.dataTypes[ 0 ] === "jsonp" || replaceInUrl || replaceInData ) {

                    // Get callback name, remembering preexisting value associated with it
                    callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
                        s.jsonpCallback() :
                        s.jsonpCallback;
                    overwritten = window[ callbackName ];

                    // Insert callback into url or form data
                    if ( replaceInUrl ) {
                        s.url = url.replace( rjsonp, "$1" + callbackName );
                    } else if ( replaceInData ) {
                        s.data = data.replace( rjsonp, "$1" + callbackName );
                    } else if ( hasCallback ) {
                        s.url += ( rquestion.test( url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
                    }

                    // Use data converter to retrieve json after script execution
                    s.converters["script json"] = function() {
                        if ( !responseContainer ) {
                            jQuery.error( callbackName + " was not called" );
                        }
                        return responseContainer[ 0 ];
                    };

                    // force json dataType
                    s.dataTypes[ 0 ] = "json";

                    // Install callback
                    window[ callbackName ] = function() {
                        responseContainer = arguments;
                    };

                    // Clean-up function (fires after converters)
                    jqXHR.always(function() {
                        // Restore preexisting value
                        window[ callbackName ] = overwritten;

                        // Save back as free
                        if ( s[ callbackName ] ) {
                            // make sure that re-using the options doesn't screw things around
                            s.jsonpCallback = originalSettings.jsonpCallback;

                            // save the callback name for future use
                            oldCallbacks.push( callbackName );
                        }

                        // Call if it was a function and we have a response
                        if ( responseContainer && jQuery.isFunction( overwritten ) ) {
                            overwritten( responseContainer[ 0 ] );
                        }

                        responseContainer = overwritten = undefined;
                    });

                    // Delegate to script
                    return "script";
                }
            });
// Install script dataType
            jQuery.ajaxSetup({
                accepts: {
                    script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
                },
                contents: {
                    script: /javascript|ecmascript/
                },
                converters: {
                    "text script": function( text ) {
                        jQuery.globalEval( text );
                        return text;
                    }
                }
            });

// Handle cache's special case and global
            jQuery.ajaxPrefilter( "script", function( s ) {
                if ( s.cache === undefined ) {
                    s.cache = false;
                }
                if ( s.crossDomain ) {
                    s.type = "GET";
                    s.global = false;
                }
            });

// Bind script tag hack transport
            jQuery.ajaxTransport( "script", function(s) {

                // This transport only deals with cross domain requests
                if ( s.crossDomain ) {

                    var script,
                        head = document.head || document.getElementsByTagName( "head" )[0] || document.documentElement;

                    return {

                        send: function( _, callback ) {

                            script = document.createElement( "script" );

                            script.async = "async";

                            if ( s.scriptCharset ) {
                                script.charset = s.scriptCharset;
                            }

                            script.src = s.url;

                            // Attach handlers for all browsers
                            script.onload = script.onreadystatechange = function( _, isAbort ) {

                                if ( isAbort || !script.readyState || /loaded|complete/.test( script.readyState ) ) {

                                    // Handle memory leak in IE
                                    script.onload = script.onreadystatechange = null;

                                    // Remove the script
                                    if ( head && script.parentNode ) {
                                        head.removeChild( script );
                                    }

                                    // Dereference the script
                                    script = undefined;

                                    // Callback if not abort
                                    if ( !isAbort ) {
                                        callback( 200, "success" );
                                    }
                                }
                            };
                            // Use insertBefore instead of appendChild  to circumvent an IE6 bug.
                            // This arises when a base node is used (#2709 and #4378).
                            head.insertBefore( script, head.firstChild );
                        },

                        abort: function() {
                            if ( script ) {
                                script.onload( 0, 1 );
                            }
                        }
                    };
                }
            });
            var xhrCallbacks,
                // #5280: Internet Explorer will keep connections alive if we don't abort on unload
                xhrOnUnloadAbort = window.ActiveXObject ? function() {
                        // Abort all pending requests
                        for ( var key in xhrCallbacks ) {
                            xhrCallbacks[ key ]( 0, 1 );
                        }
                    } : false,
                xhrId = 0;

// Functions to create xhrs
            function createStandardXHR() {
                try {
                    return new window.XMLHttpRequest();
                } catch( e ) {}
            }

            function createActiveXHR() {
                try {
                    return new window.ActiveXObject( "Microsoft.XMLHTTP" );
                } catch( e ) {}
            }

// Create the request object
// (This is still attached to ajaxSettings for backward compatibility)
            jQuery.ajaxSettings.xhr = window.ActiveXObject ?
                /* Microsoft failed to properly
                 * implement the XMLHttpRequest in IE7 (can't request local files),
                 * so we use the ActiveXObject when it is available
                 * Additionally XMLHttpRequest can be disabled in IE7/IE8 so
                 * we need a fallback.
                 */
                function() {
                    return !this.isLocal && createStandardXHR() || createActiveXHR();
                } :
                // For all other browsers, use the standard XMLHttpRequest object
                createStandardXHR;

// Determine support properties
            (function( xhr ) {
                jQuery.extend( jQuery.support, {
                    ajax: !!xhr,
                    cors: !!xhr && ( "withCredentials" in xhr )
                });
            })( jQuery.ajaxSettings.xhr() );

// Create transport if the browser can provide an xhr
            if ( jQuery.support.ajax ) {

                jQuery.ajaxTransport(function( s ) {
                    // Cross domain only allowed if supported through XMLHttpRequest
                    if ( !s.crossDomain || jQuery.support.cors ) {

                        var callback;

                        return {
                            send: function( headers, complete ) {

                                // Get a new xhr
                                var handle, i,
                                    xhr = s.xhr();

                                // Open the socket
                                // Passing null username, generates a login popup on Opera (#2865)
                                if ( s.username ) {
                                    xhr.open( s.type, s.url, s.async, s.username, s.password );
                                } else {
                                    xhr.open( s.type, s.url, s.async );
                                }

                                // Apply custom fields if provided
                                if ( s.xhrFields ) {
                                    for ( i in s.xhrFields ) {
                                        xhr[ i ] = s.xhrFields[ i ];
                                    }
                                }

                                // Override mime type if needed
                                if ( s.mimeType && xhr.overrideMimeType ) {
                                    xhr.overrideMimeType( s.mimeType );
                                }

                                // X-Requested-With header
                                // For cross-domain requests, seeing as conditions for a preflight are
                                // akin to a jigsaw puzzle, we simply never set it to be sure.
                                // (it can always be set on a per-request basis or even using ajaxSetup)
                                // For same-domain requests, won't change header if already provided.
                                if ( !s.crossDomain && !headers["X-Requested-With"] ) {
                                    headers[ "X-Requested-With" ] = "XMLHttpRequest";
                                }

                                // Need an extra try/catch for cross domain requests in Firefox 3
                                try {
                                    for ( i in headers ) {
                                        xhr.setRequestHeader( i, headers[ i ] );
                                    }
                                } catch( _ ) {}

                                // Do send the request
                                // This may raise an exception which is actually
                                // handled in jQuery.ajax (so no try/catch here)
                                xhr.send( ( s.hasContent && s.data ) || null );

                                // Listener
                                callback = function( _, isAbort ) {

                                    var status,
                                        statusText,
                                        responseHeaders,
                                        responses,
                                        xml;

                                    // Firefox throws exceptions when accessing properties
                                    // of an xhr when a network error occurred
                                    // http://helpful.knobs-dials.com/index.php/Component_returned_failure_code:_0x80040111_(NS_ERROR_NOT_AVAILABLE)
                                    try {

                                        // Was never called and is aborted or complete
                                        if ( callback && ( isAbort || xhr.readyState === 4 ) ) {

                                            // Only called once
                                            callback = undefined;

                                            // Do not keep as active anymore
                                            if ( handle ) {
                                                xhr.onreadystatechange = jQuery.noop;
                                                if ( xhrOnUnloadAbort ) {
                                                    delete xhrCallbacks[ handle ];
                                                }
                                            }

                                            // If it's an abort
                                            if ( isAbort ) {
                                                // Abort it manually if needed
                                                if ( xhr.readyState !== 4 ) {
                                                    xhr.abort();
                                                }
                                            } else {
                                                status = xhr.status;
                                                responseHeaders = xhr.getAllResponseHeaders();
                                                responses = {};
                                                xml = xhr.responseXML;

                                                // Construct response list
                                                if ( xml && xml.documentElement /* #4958 */ ) {
                                                    responses.xml = xml;
                                                }

                                                // When requesting binary data, IE6-9 will throw an exception
                                                // on any attempt to access responseText (#11426)
                                                try {
                                                    responses.text = xhr.responseText;
                                                } catch( e ) {
                                                }

                                                // Firefox throws an exception when accessing
                                                // statusText for faulty cross-domain requests
                                                try {
                                                    statusText = xhr.statusText;
                                                } catch( e ) {
                                                    // We normalize with Webkit giving an empty statusText
                                                    statusText = "";
                                                }

                                                // Filter status for non standard behaviors

                                                // If the request is local and we have data: assume a success
                                                // (success with no data won't get notified, that's the best we
                                                // can do given current implementations)
                                                if ( !status && s.isLocal && !s.crossDomain ) {
                                                    status = responses.text ? 200 : 404;
                                                    // IE - #1450: sometimes returns 1223 when it should be 204
                                                } else if ( status === 1223 ) {
                                                    status = 204;
                                                }
                                            }
                                        }
                                    } catch( firefoxAccessException ) {
                                        if ( !isAbort ) {
                                            complete( -1, firefoxAccessException );
                                        }
                                    }

                                    // Call complete if needed
                                    if ( responses ) {
                                        complete( status, statusText, responses, responseHeaders );
                                    }
                                };

                                if ( !s.async ) {
                                    // if we're in sync mode we fire the callback
                                    callback();
                                } else if ( xhr.readyState === 4 ) {
                                    // (IE6 & IE7) if it's in cache and has been
                                    // retrieved directly we need to fire the callback
                                    setTimeout( callback, 0 );
                                } else {
                                    handle = ++xhrId;
                                    if ( xhrOnUnloadAbort ) {
                                        // Create the active xhrs callbacks list if needed
                                        // and attach the unload handler
                                        if ( !xhrCallbacks ) {
                                            xhrCallbacks = {};
                                            jQuery( window ).unload( xhrOnUnloadAbort );
                                        }
                                        // Add to list of active xhrs callbacks
                                        xhrCallbacks[ handle ] = callback;
                                    }
                                    xhr.onreadystatechange = callback;
                                }
                            },

                            abort: function() {
                                if ( callback ) {
                                    callback(0,1);
                                }
                            }
                        };
                    }
                });
            }
            var fxNow, timerId,
                rfxtypes = /^(?:toggle|show|hide)$/,
                rfxnum = new RegExp( "^(?:([-+])=|)(" + core_pnum + ")([a-z%]*)$", "i" ),
                rrun = /queueHooks$/,
                animationPrefilters = [ defaultPrefilter ],
                tweeners = {
                    "*": [function( prop, value ) {
                        var end, unit,
                            tween = this.createTween( prop, value ),
                            parts = rfxnum.exec( value ),
                            target = tween.cur(),
                            start = +target || 0,
                            scale = 1,
                            maxIterations = 20;

                        if ( parts ) {
                            end = +parts[2];
                            unit = parts[3] || ( jQuery.cssNumber[ prop ] ? "" : "px" );

                            // We need to compute starting value
                            if ( unit !== "px" && start ) {
                                // Iteratively approximate from a nonzero starting point
                                // Prefer the current property, because this process will be trivial if it uses the same units
                                // Fallback to end or a simple constant
                                start = jQuery.css( tween.elem, prop, true ) || end || 1;

                                do {
                                    // If previous iteration zeroed out, double until we get *something*
                                    // Use a string for doubling factor so we don't accidentally see scale as unchanged below
                                    scale = scale || ".5";

                                    // Adjust and apply
                                    start = start / scale;
                                    jQuery.style( tween.elem, prop, start + unit );

                                    // Update scale, tolerating zero or NaN from tween.cur()
                                    // And breaking the loop if scale is unchanged or perfect, or if we've just had enough
                                } while ( scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations );
                            }

                            tween.unit = unit;
                            tween.start = start;
                            // If a +=/-= token was provided, we're doing a relative animation
                            tween.end = parts[1] ? start + ( parts[1] + 1 ) * end : end;
                        }
                        return tween;
                    }]
                };

// Animations created synchronously will run synchronously
            function createFxNow() {
                setTimeout(function() {
                    fxNow = undefined;
                }, 0 );
                return ( fxNow = jQuery.now() );
            }

            function createTweens( animation, props ) {
                jQuery.each( props, function( prop, value ) {
                    var collection = ( tweeners[ prop ] || [] ).concat( tweeners[ "*" ] ),
                        index = 0,
                        length = collection.length;
                    for ( ; index < length; index++ ) {
                        if ( collection[ index ].call( animation, prop, value ) ) {

                            // we're done with this property
                            return;
                        }
                    }
                });
            }

            function Animation( elem, properties, options ) {
                var result,
                    index = 0,
                    tweenerIndex = 0,
                    length = animationPrefilters.length,
                    deferred = jQuery.Deferred().always( function() {
                        // don't match elem in the :animated selector
                        delete tick.elem;
                    }),
                    tick = function() {
                        var currentTime = fxNow || createFxNow(),
                            remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),
                            // archaic crash bug won't allow us to use 1 - ( 0.5 || 0 ) (#12497)
                            temp = remaining / animation.duration || 0,
                            percent = 1 - temp,
                            index = 0,
                            length = animation.tweens.length;

                        for ( ; index < length ; index++ ) {
                            animation.tweens[ index ].run( percent );
                        }

                        deferred.notifyWith( elem, [ animation, percent, remaining ]);

                        if ( percent < 1 && length ) {
                            return remaining;
                        } else {
                            deferred.resolveWith( elem, [ animation ] );
                            return false;
                        }
                    },
                    animation = deferred.promise({
                        elem: elem,
                        props: jQuery.extend( {}, properties ),
                        opts: jQuery.extend( true, { specialEasing: {} }, options ),
                        originalProperties: properties,
                        originalOptions: options,
                        startTime: fxNow || createFxNow(),
                        duration: options.duration,
                        tweens: [],
                        createTween: function( prop, end, easing ) {
                            var tween = jQuery.Tween( elem, animation.opts, prop, end,
                                animation.opts.specialEasing[ prop ] || animation.opts.easing );
                            animation.tweens.push( tween );
                            return tween;
                        },
                        stop: function( gotoEnd ) {
                            var index = 0,
                                // if we are going to the end, we want to run all the tweens
                                // otherwise we skip this part
                                length = gotoEnd ? animation.tweens.length : 0;

                            for ( ; index < length ; index++ ) {
                                animation.tweens[ index ].run( 1 );
                            }

                            // resolve when we played the last frame
                            // otherwise, reject
                            if ( gotoEnd ) {
                                deferred.resolveWith( elem, [ animation, gotoEnd ] );
                            } else {
                                deferred.rejectWith( elem, [ animation, gotoEnd ] );
                            }
                            return this;
                        }
                    }),
                    props = animation.props;

                propFilter( props, animation.opts.specialEasing );

                for ( ; index < length ; index++ ) {
                    result = animationPrefilters[ index ].call( animation, elem, props, animation.opts );
                    if ( result ) {
                        return result;
                    }
                }

                createTweens( animation, props );

                if ( jQuery.isFunction( animation.opts.start ) ) {
                    animation.opts.start.call( elem, animation );
                }

                jQuery.fx.timer(
                    jQuery.extend( tick, {
                        anim: animation,
                        queue: animation.opts.queue,
                        elem: elem
                    })
                );

                // attach callbacks from options
                return animation.progress( animation.opts.progress )
                    .done( animation.opts.done, animation.opts.complete )
                    .fail( animation.opts.fail )
                    .always( animation.opts.always );
            }

            function propFilter( props, specialEasing ) {
                var index, name, easing, value, hooks;

                // camelCase, specialEasing and expand cssHook pass
                for ( index in props ) {
                    name = jQuery.camelCase( index );
                    easing = specialEasing[ name ];
                    value = props[ index ];
                    if ( jQuery.isArray( value ) ) {
                        easing = value[ 1 ];
                        value = props[ index ] = value[ 0 ];
                    }

                    if ( index !== name ) {
                        props[ name ] = value;
                        delete props[ index ];
                    }

                    hooks = jQuery.cssHooks[ name ];
                    if ( hooks && "expand" in hooks ) {
                        value = hooks.expand( value );
                        delete props[ name ];

                        // not quite $.extend, this wont overwrite keys already present.
                        // also - reusing 'index' from above because we have the correct "name"
                        for ( index in value ) {
                            if ( !( index in props ) ) {
                                props[ index ] = value[ index ];
                                specialEasing[ index ] = easing;
                            }
                        }
                    } else {
                        specialEasing[ name ] = easing;
                    }
                }
            }

            jQuery.Animation = jQuery.extend( Animation, {

                tweener: function( props, callback ) {
                    if ( jQuery.isFunction( props ) ) {
                        callback = props;
                        props = [ "*" ];
                    } else {
                        props = props.split(" ");
                    }

                    var prop,
                        index = 0,
                        length = props.length;

                    for ( ; index < length ; index++ ) {
                        prop = props[ index ];
                        tweeners[ prop ] = tweeners[ prop ] || [];
                        tweeners[ prop ].unshift( callback );
                    }
                },

                prefilter: function( callback, prepend ) {
                    if ( prepend ) {
                        animationPrefilters.unshift( callback );
                    } else {
                        animationPrefilters.push( callback );
                    }
                }
            });

            function defaultPrefilter( elem, props, opts ) {
                var index, prop, value, length, dataShow, toggle, tween, hooks, oldfire,
                    anim = this,
                    style = elem.style,
                    orig = {},
                    handled = [],
                    hidden = elem.nodeType && isHidden( elem );

                // handle queue: false promises
                if ( !opts.queue ) {
                    hooks = jQuery._queueHooks( elem, "fx" );
                    if ( hooks.unqueued == null ) {
                        hooks.unqueued = 0;
                        oldfire = hooks.empty.fire;
                        hooks.empty.fire = function() {
                            if ( !hooks.unqueued ) {
                                oldfire();
                            }
                        };
                    }
                    hooks.unqueued++;

                    anim.always(function() {
                        // doing this makes sure that the complete handler will be called
                        // before this completes
                        anim.always(function() {
                            hooks.unqueued--;
                            if ( !jQuery.queue( elem, "fx" ).length ) {
                                hooks.empty.fire();
                            }
                        });
                    });
                }

                // height/width overflow pass
                if ( elem.nodeType === 1 && ( "height" in props || "width" in props ) ) {
                    // Make sure that nothing sneaks out
                    // Record all 3 overflow attributes because IE does not
                    // change the overflow attribute when overflowX and
                    // overflowY are set to the same value
                    opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

                    // Set display property to inline-block for height/width
                    // animations on inline elements that are having width/height animated
                    if ( jQuery.css( elem, "display" ) === "inline" &&
                        jQuery.css( elem, "float" ) === "none" ) {

                        // inline-level elements accept inline-block;
                        // block-level elements need to be inline with layout
                        if ( !jQuery.support.inlineBlockNeedsLayout || css_defaultDisplay( elem.nodeName ) === "inline" ) {
                            style.display = "inline-block";

                        } else {
                            style.zoom = 1;
                        }
                    }
                }

                if ( opts.overflow ) {
                    style.overflow = "hidden";
                    if ( !jQuery.support.shrinkWrapBlocks ) {
                        anim.done(function() {
                            style.overflow = opts.overflow[ 0 ];
                            style.overflowX = opts.overflow[ 1 ];
                            style.overflowY = opts.overflow[ 2 ];
                        });
                    }
                }


                // show/hide pass
                for ( index in props ) {
                    value = props[ index ];
                    if ( rfxtypes.exec( value ) ) {
                        delete props[ index ];
                        toggle = toggle || value === "toggle";
                        if ( value === ( hidden ? "hide" : "show" ) ) {
                            continue;
                        }
                        handled.push( index );
                    }
                }

                length = handled.length;
                if ( length ) {
                    dataShow = jQuery._data( elem, "fxshow" ) || jQuery._data( elem, "fxshow", {} );
                    if ( "hidden" in dataShow ) {
                        hidden = dataShow.hidden;
                    }

                    // store state if its toggle - enables .stop().toggle() to "reverse"
                    if ( toggle ) {
                        dataShow.hidden = !hidden;
                    }
                    if ( hidden ) {
                        jQuery( elem ).show();
                    } else {
                        anim.done(function() {
                            jQuery( elem ).hide();
                        });
                    }
                    anim.done(function() {
                        var prop;
                        jQuery.removeData( elem, "fxshow", true );
                        for ( prop in orig ) {
                            jQuery.style( elem, prop, orig[ prop ] );
                        }
                    });
                    for ( index = 0 ; index < length ; index++ ) {
                        prop = handled[ index ];
                        tween = anim.createTween( prop, hidden ? dataShow[ prop ] : 0 );
                        orig[ prop ] = dataShow[ prop ] || jQuery.style( elem, prop );

                        if ( !( prop in dataShow ) ) {
                            dataShow[ prop ] = tween.start;
                            if ( hidden ) {
                                tween.end = tween.start;
                                tween.start = prop === "width" || prop === "height" ? 1 : 0;
                            }
                        }
                    }
                }
            }

            function Tween( elem, options, prop, end, easing ) {
                return new Tween.prototype.init( elem, options, prop, end, easing );
            }
            jQuery.Tween = Tween;

            Tween.prototype = {
                constructor: Tween,
                init: function( elem, options, prop, end, easing, unit ) {
                    this.elem = elem;
                    this.prop = prop;
                    this.easing = easing || "swing";
                    this.options = options;
                    this.start = this.now = this.cur();
                    this.end = end;
                    this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
                },
                cur: function() {
                    var hooks = Tween.propHooks[ this.prop ];

                    return hooks && hooks.get ?
                        hooks.get( this ) :
                        Tween.propHooks._default.get( this );
                },
                run: function( percent ) {
                    var eased,
                        hooks = Tween.propHooks[ this.prop ];

                    if ( this.options.duration ) {
                        this.pos = eased = jQuery.easing[ this.easing ](
                            percent, this.options.duration * percent, 0, 1, this.options.duration
                        );
                    } else {
                        this.pos = eased = percent;
                    }
                    this.now = ( this.end - this.start ) * eased + this.start;

                    if ( this.options.step ) {
                        this.options.step.call( this.elem, this.now, this );
                    }

                    if ( hooks && hooks.set ) {
                        hooks.set( this );
                    } else {
                        Tween.propHooks._default.set( this );
                    }
                    return this;
                }
            };

            Tween.prototype.init.prototype = Tween.prototype;

            Tween.propHooks = {
                _default: {
                    get: function( tween ) {
                        var result;

                        if ( tween.elem[ tween.prop ] != null &&
                            (!tween.elem.style || tween.elem.style[ tween.prop ] == null) ) {
                            return tween.elem[ tween.prop ];
                        }

                        // passing any value as a 4th parameter to .css will automatically
                        // attempt a parseFloat and fallback to a string if the parse fails
                        // so, simple values such as "10px" are parsed to Float.
                        // complex values such as "rotate(1rad)" are returned as is.
                        result = jQuery.css( tween.elem, tween.prop, false, "" );
                        // Empty strings, null, undefined and "auto" are converted to 0.
                        return !result || result === "auto" ? 0 : result;
                    },
                    set: function( tween ) {
                        // use step hook for back compat - use cssHook if its there - use .style if its
                        // available and use plain properties where available
                        if ( jQuery.fx.step[ tween.prop ] ) {
                            jQuery.fx.step[ tween.prop ]( tween );
                        } else if ( tween.elem.style && ( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null || jQuery.cssHooks[ tween.prop ] ) ) {
                            jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
                        } else {
                            tween.elem[ tween.prop ] = tween.now;
                        }
                    }
                }
            };

// Remove in 2.0 - this supports IE8's panic based approach
// to setting things on disconnected nodes

            Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
                set: function( tween ) {
                    if ( tween.elem.nodeType && tween.elem.parentNode ) {
                        tween.elem[ tween.prop ] = tween.now;
                    }
                }
            };

            jQuery.each([ "toggle", "show", "hide" ], function( i, name ) {
                var cssFn = jQuery.fn[ name ];
                jQuery.fn[ name ] = function( speed, easing, callback ) {
                    return speed == null || typeof speed === "boolean" ||
                    // special check for .toggle( handler, handler, ... )
                    ( !i && jQuery.isFunction( speed ) && jQuery.isFunction( easing ) ) ?
                        cssFn.apply( this, arguments ) :
                        this.animate( genFx( name, true ), speed, easing, callback );
                };
            });

            jQuery.fn.extend({
                fadeTo: function( speed, to, easing, callback ) {

                    // show any hidden elements after setting opacity to 0
                    return this.filter( isHidden ).css( "opacity", 0 ).show()

                    // animate to the value specified
                        .end().animate({ opacity: to }, speed, easing, callback );
                },
                animate: function( prop, speed, easing, callback ) {
                    var empty = jQuery.isEmptyObject( prop ),
                        optall = jQuery.speed( speed, easing, callback ),
                        doAnimation = function() {
                            // Operate on a copy of prop so per-property easing won't be lost
                            var anim = Animation( this, jQuery.extend( {}, prop ), optall );

                            // Empty animations resolve immediately
                            if ( empty ) {
                                anim.stop( true );
                            }
                        };

                    return empty || optall.queue === false ?
                        this.each( doAnimation ) :
                        this.queue( optall.queue, doAnimation );
                },
                stop: function( type, clearQueue, gotoEnd ) {
                    var stopQueue = function( hooks ) {
                        var stop = hooks.stop;
                        delete hooks.stop;
                        stop( gotoEnd );
                    };

                    if ( typeof type !== "string" ) {
                        gotoEnd = clearQueue;
                        clearQueue = type;
                        type = undefined;
                    }
                    if ( clearQueue && type !== false ) {
                        this.queue( type || "fx", [] );
                    }

                    return this.each(function() {
                        var dequeue = true,
                            index = type != null && type + "queueHooks",
                            timers = jQuery.timers,
                            data = jQuery._data( this );

                        if ( index ) {
                            if ( data[ index ] && data[ index ].stop ) {
                                stopQueue( data[ index ] );
                            }
                        } else {
                            for ( index in data ) {
                                if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
                                    stopQueue( data[ index ] );
                                }
                            }
                        }

                        for ( index = timers.length; index--; ) {
                            if ( timers[ index ].elem === this && (type == null || timers[ index ].queue === type) ) {
                                timers[ index ].anim.stop( gotoEnd );
                                dequeue = false;
                                timers.splice( index, 1 );
                            }
                        }

                        // start the next in the queue if the last step wasn't forced
                        // timers currently will call their complete callbacks, which will dequeue
                        // but only if they were gotoEnd
                        if ( dequeue || !gotoEnd ) {
                            jQuery.dequeue( this, type );
                        }
                    });
                }
            });

// Generate parameters to create a standard animation
            function genFx( type, includeWidth ) {
                var which,
                    attrs = { height: type },
                    i = 0;

                // if we include width, step value is 1 to do all cssExpand values,
                // if we don't include width, step value is 2 to skip over Left and Right
                includeWidth = includeWidth? 1 : 0;
                for( ; i < 4 ; i += 2 - includeWidth ) {
                    which = cssExpand[ i ];
                    attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
                }

                if ( includeWidth ) {
                    attrs.opacity = attrs.width = type;
                }

                return attrs;
            }

// Generate shortcuts for custom animations
            jQuery.each({
                slideDown: genFx("show"),
                slideUp: genFx("hide"),
                slideToggle: genFx("toggle"),
                fadeIn: { opacity: "show" },
                fadeOut: { opacity: "hide" },
                fadeToggle: { opacity: "toggle" }
            }, function( name, props ) {
                jQuery.fn[ name ] = function( speed, easing, callback ) {
                    return this.animate( props, speed, easing, callback );
                };
            });

            jQuery.speed = function( speed, easing, fn ) {
                var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
                        complete: fn || !fn && easing ||
                        jQuery.isFunction( speed ) && speed,
                        duration: speed,
                        easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
                    };

                opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration :
                        opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;

                // normalize opt.queue - true/undefined/null -> "fx"
                if ( opt.queue == null || opt.queue === true ) {
                    opt.queue = "fx";
                }

                // Queueing
                opt.old = opt.complete;

                opt.complete = function() {
                    if ( jQuery.isFunction( opt.old ) ) {
                        opt.old.call( this );
                    }

                    if ( opt.queue ) {
                        jQuery.dequeue( this, opt.queue );
                    }
                };

                return opt;
            };

            jQuery.easing = {
                linear: function( p ) {
                    return p;
                },
                swing: function( p ) {
                    return 0.5 - Math.cos( p*Math.PI ) / 2;
                }
            };

            jQuery.timers = [];
            jQuery.fx = Tween.prototype.init;
            jQuery.fx.tick = function() {
                var timer,
                    timers = jQuery.timers,
                    i = 0;

                fxNow = jQuery.now();

                for ( ; i < timers.length; i++ ) {
                    timer = timers[ i ];
                    // Checks the timer has not already been removed
                    if ( !timer() && timers[ i ] === timer ) {
                        timers.splice( i--, 1 );
                    }
                }

                if ( !timers.length ) {
                    jQuery.fx.stop();
                }
                fxNow = undefined;
            };

            jQuery.fx.timer = function( timer ) {
                if ( timer() && jQuery.timers.push( timer ) && !timerId ) {
                    timerId = setInterval( jQuery.fx.tick, jQuery.fx.interval );
                }
            };

            jQuery.fx.interval = 13;

            jQuery.fx.stop = function() {
                clearInterval( timerId );
                timerId = null;
            };

            jQuery.fx.speeds = {
                slow: 600,
                fast: 200,
                // Default speed
                _default: 400
            };

// Back Compat <1.8 extension point
            jQuery.fx.step = {};

            if ( jQuery.expr && jQuery.expr.filters ) {
                jQuery.expr.filters.animated = function( elem ) {
                    return jQuery.grep(jQuery.timers, function( fn ) {
                        return elem === fn.elem;
                    }).length;
                };
            }
            var rroot = /^(?:body|html)$/i;

            jQuery.fn.offset = function( options ) {
                if ( arguments.length ) {
                    return options === undefined ?
                        this :
                        this.each(function( i ) {
                            jQuery.offset.setOffset( this, options, i );
                        });
                }

                var docElem, body, win, clientTop, clientLeft, scrollTop, scrollLeft,
                    box = { top: 0, left: 0 },
                    elem = this[ 0 ],
                    doc = elem && elem.ownerDocument;

                if ( !doc ) {
                    return;
                }

                if ( (body = doc.body) === elem ) {
                    return jQuery.offset.bodyOffset( elem );
                }

                docElem = doc.documentElement;

                // Make sure it's not a disconnected DOM node
                if ( !jQuery.contains( docElem, elem ) ) {
                    return box;
                }

                // If we don't have gBCR, just use 0,0 rather than error
                // BlackBerry 5, iOS 3 (original iPhone)
                if ( typeof elem.getBoundingClientRect !== "undefined" ) {
                    box = elem.getBoundingClientRect();
                }
                win = getWindow( doc );
                clientTop  = docElem.clientTop  || body.clientTop  || 0;
                clientLeft = docElem.clientLeft || body.clientLeft || 0;
                scrollTop  = win.pageYOffset || docElem.scrollTop;
                scrollLeft = win.pageXOffset || docElem.scrollLeft;
                return {
                    top: box.top  + scrollTop  - clientTop,
                    left: box.left + scrollLeft - clientLeft
                };
            };

            jQuery.offset = {

                bodyOffset: function( body ) {
                    var top = body.offsetTop,
                        left = body.offsetLeft;

                    if ( jQuery.support.doesNotIncludeMarginInBodyOffset ) {
                        top  += parseFloat( jQuery.css(body, "marginTop") ) || 0;
                        left += parseFloat( jQuery.css(body, "marginLeft") ) || 0;
                    }

                    return { top: top, left: left };
                },

                setOffset: function( elem, options, i ) {
                    var position = jQuery.css( elem, "position" );

                    // set position first, in-case top/left are set even on static elem
                    if ( position === "static" ) {
                        elem.style.position = "relative";
                    }

                    var curElem = jQuery( elem ),
                        curOffset = curElem.offset(),
                        curCSSTop = jQuery.css( elem, "top" ),
                        curCSSLeft = jQuery.css( elem, "left" ),
                        calculatePosition = ( position === "absolute" || position === "fixed" ) && jQuery.inArray("auto", [curCSSTop, curCSSLeft]) > -1,
                        props = {}, curPosition = {}, curTop, curLeft;

                    // need to be able to calculate position if either top or left is auto and position is either absolute or fixed
                    if ( calculatePosition ) {
                        curPosition = curElem.position();
                        curTop = curPosition.top;
                        curLeft = curPosition.left;
                    } else {
                        curTop = parseFloat( curCSSTop ) || 0;
                        curLeft = parseFloat( curCSSLeft ) || 0;
                    }

                    if ( jQuery.isFunction( options ) ) {
                        options = options.call( elem, i, curOffset );
                    }

                    if ( options.top != null ) {
                        props.top = ( options.top - curOffset.top ) + curTop;
                    }
                    if ( options.left != null ) {
                        props.left = ( options.left - curOffset.left ) + curLeft;
                    }

                    if ( "using" in options ) {
                        options.using.call( elem, props );
                    } else {
                        curElem.css( props );
                    }
                }
            };


            jQuery.fn.extend({

                position: function() {
                    if ( !this[0] ) {
                        return;
                    }

                    var elem = this[0],

                        // Get *real* offsetParent
                        offsetParent = this.offsetParent(),

                        // Get correct offsets
                        offset       = this.offset(),
                        parentOffset = rroot.test(offsetParent[0].nodeName) ? { top: 0, left: 0 } : offsetParent.offset();

                    // Subtract element margins
                    // note: when an element has margin: auto the offsetLeft and marginLeft
                    // are the same in Safari causing offset.left to incorrectly be 0
                    offset.top  -= parseFloat( jQuery.css(elem, "marginTop") ) || 0;
                    offset.left -= parseFloat( jQuery.css(elem, "marginLeft") ) || 0;

                    // Add offsetParent borders
                    parentOffset.top  += parseFloat( jQuery.css(offsetParent[0], "borderTopWidth") ) || 0;
                    parentOffset.left += parseFloat( jQuery.css(offsetParent[0], "borderLeftWidth") ) || 0;

                    // Subtract the two offsets
                    return {
                        top:  offset.top  - parentOffset.top,
                        left: offset.left - parentOffset.left
                    };
                },

                offsetParent: function() {
                    return this.map(function() {
                        var offsetParent = this.offsetParent || document.body;
                        while ( offsetParent && (!rroot.test(offsetParent.nodeName) && jQuery.css(offsetParent, "position") === "static") ) {
                            offsetParent = offsetParent.offsetParent;
                        }
                        return offsetParent || document.body;
                    });
                }
            });


// Create scrollLeft and scrollTop methods
            jQuery.each( {scrollLeft: "pageXOffset", scrollTop: "pageYOffset"}, function( method, prop ) {
                var top = /Y/.test( prop );

                jQuery.fn[ method ] = function( val ) {
                    return jQuery.access( this, function( elem, method, val ) {
                        var win = getWindow( elem );

                        if ( val === undefined ) {
                            return win ? (prop in win) ? win[ prop ] :
                                    win.document.documentElement[ method ] :
                                elem[ method ];
                        }

                        if ( win ) {
                            win.scrollTo(
                                !top ? val : jQuery( win ).scrollLeft(),
                                top ? val : jQuery( win ).scrollTop()
                            );

                        } else {
                            elem[ method ] = val;
                        }
                    }, method, val, arguments.length, null );
                };
            });

            function getWindow( elem ) {
                return jQuery.isWindow( elem ) ?
                    elem :
                    elem.nodeType === 9 ?
                        elem.defaultView || elem.parentWindow :
                        false;
            }
// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
            jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
                jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name }, function( defaultExtra, funcName ) {
                    // margin is only for outerHeight, outerWidth
                    jQuery.fn[ funcName ] = function( margin, value ) {
                        var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
                            extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

                        return jQuery.access( this, function( elem, type, value ) {
                            var doc;

                            if ( jQuery.isWindow( elem ) ) {
                                // As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
                                // isn't a whole lot we can do. See pull request at this URL for discussion:
                                // https://github.com/jquery/jquery/pull/764
                                return elem.document.documentElement[ "client" + name ];
                            }

                            // Get document width or height
                            if ( elem.nodeType === 9 ) {
                                doc = elem.documentElement;

                                // Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height], whichever is greatest
                                // unfortunately, this causes bug #3838 in IE6/8 only, but there is currently no good, small way to fix it.
                                return Math.max(
                                    elem.body[ "scroll" + name ], doc[ "scroll" + name ],
                                    elem.body[ "offset" + name ], doc[ "offset" + name ],
                                    doc[ "client" + name ]
                                );
                            }

                            return value === undefined ?
                                // Get width or height on the element, requesting but not forcing parseFloat
                                jQuery.css( elem, type, value, extra ) :

                                // Set width or height on the element
                                jQuery.style( elem, type, value, extra );
                        }, type, chainable ? margin : undefined, chainable, null );
                    };
                });
            });
// Expose jQuery to the global object
            window.jQuery = window.$ = jQuery;

// Expose jQuery as an AMD module, but only for AMD loaders that
// understand the issues with loading multiple versions of jQuery
// in a page that all might call define(). The loader will indicate
// they have special allowances for multiple jQuery versions by
// specifying define.amd.jQuery = true. Register as a named module,
// since jQuery can be concatenated with other files that may use define,
// but not use a proper concatenation script that understands anonymous
// AMD modules. A named AMD is safest and most robust way to register.
// Lowercase jquery is used because AMD module names are derived from
// file names, and jQuery is normally delivered in a lowercase file name.
// Do this after creating the global so that if an AMD module wants to call
// noConflict to hide this version of jQuery, it will work.
            if ( typeof define === "function" && define.amd && define.amd.jQuery ) {
                define( "jquery", [], function () { return jQuery; } );
            }

        })( window );

        var HazmatBuilder = function(_,root) {
            // Actual Hazmat Code
            // top level module
            var Hazmat  = function(config) {
                this.config = config || {};
                if(!_.isObject(this.config)) {
                    throw new Error('Hazmat is not initialized properly');
                }
                this.fail = _.isFunction(this.config.fail) ? this.config.fail : Hazmat.fail;
                this.warn = _.isFunction(this.config.warn) ? this.config.warn : Hazmat.warn;
                this.log = _.isFunction(this.config.log) ? this.config.log : Hazmat.log;
            };

            _.extend(Hazmat, {

                // constants
                ID_REGEX : /^[\_\-A-Za-z0-9]+$/,

                // factory
                create : function(config) {
                    return new Hazmat(config);
                },

                // noConflict
                noConflict : function() {
                    root.Hazmat = Hazmat.original;
                    return Hazmat;
                },

                // default log function
                log : function() {
                    if(window.console && _.isFunction(window.console.log)) {
                        window.console.log.apply(window.console, arguments);
                    }
                },

                // default fail function
                fail : function(_reason, _data) {
                    var reason = _reason || "", data = _data || {};
                    Hazmat.log('Hazmat Failure::', reason, data);
                    throw new Error('Hazmat Failure '+reason.toString());
                },

                // default warn function
                warn : function(_reason, _data) {
                    var reason = _reason || "", data = _data || {};
                    Hazmat.log('Hazmat Warning::', reason, data);
                },

                // global fixers
                fixDomId : function(_value) {
                    if(_.isString(_value) && _value.length > 0) {
                        return _value.replace(/[^A-Za-z0-9\_]/g,'');
                    } else {
                        return null;
                    }
                },

                // global testers
                isDomId : function(value) {
                    return _.isString(value) && value.match(Hazmat.ID_REGEX);
                },


                __placeholder : true
            });

            _.extend(Hazmat.prototype, {
                _safeValue : function(name, value, fallback, type) {
                    // make fallback safe and eat exceptions
                    var _fallback = fallback;
                    if(_.isFunction(fallback)) {
                        fallback = _.once(function() {
                            try {
                                return _fallback.apply(this, arguments);
                            } catch(e) {
                            }
                        });
                    }

                    if(type.checker(value)) {
                        return value;
                    } else if(type.evalFallback && _.isFunction(fallback) && type.checker(fallback(value))){
                        this.warn('Expected valid '+type.name+' for '+name+' but was able to sanitize it:', [value, fallback(value)]);
                        return fallback(value);
                    } else if(type.checker(_fallback)){
                        this.warn('Expected valid '+type.name+' for '+name+' but was able to fallback to default value:', [value, _fallback]);
                        return _fallback;
                    } else {
                        this.fail('Expected valid '+type.name+' for '+name+' but received:', value);
                    }
                },

                safeString : function(name, value, fallback) {
                    return this._safeValue(name, value, fallback, {name: 'String', checker: _.isString, evalFallback:true});
                },

                safeStringOrNull : function(name, value, fallback) {
                    if(value == null) {
                        return value;
                    } else {
                        return this._safeValue(name, value, fallback, {name: 'String', checker: _.isString, evalFallback:true});
                    }
                },

                safeDomId : function(name, value, fallback) {
                    return this._safeValue(name, value, fallback, {name: 'DOM ID', checker: Hazmat.isDomId, evalFallback:true});
                },

                safeFunction : function(name, value, fallback) {
                    return this._safeValue(name, value, fallback, {name: 'Function', checker: _.isFunction, evalFallback:false});
                },

                safeFunctionOrNull : function(name, value, fallback) {
                    if(value == null) {
                        return value;
                    } else {
                        return this._safeValue(name, value, fallback, {name: 'Function', checker: _.isFunction, evalFallback:false});
                    }
                },

                safeObject : function(name, value, fallback) {
                    return this._safeValue(name, value, fallback, {name: 'Object', checker: _.isObject, evalFallback:false});
                },

                safeObjectOrNull : function(name, value, fallback) {
                    if(value == null) {
                        return value;
                    } else {
                        return this._safeValue(name, value, fallback, {name: 'Object', checker: _.isObject, evalFallback:false});
                    }
                },

                safeArray : function(name, value, fallback) {
                    return this._safeValue(name, value, fallback, {name: 'Array', checker: _.isArray, evalFallback:false});
                },

                safeArrayOfElements : function(name, value, elementValidator, fallback) {
                    var safeArray = this._safeValue(name, value, fallback, {name: 'Array', checker: _.isArray, evalFallback:false});
                    return _.map(safeArray, elementValidator);
                },

                __placeholder:true
            });

            return Hazmat;
        };

// Integration with Node.js/Browser
        if(typeof window !== 'undefined' && typeof window._ !== 'undefined') {
            var hazmat = HazmatBuilder(window._, window);
            hazmat.original = window.Hazmat;
            window.Hazmat = hazmat;
        } else {
            var _ = require('underscore');
            var hazmat = HazmatBuilder(_);
            _.extend(exports,hazmat);
        }

        /* A JavaScript implementation of the SHA family of hashes, as defined in FIPS
         * PUB 180-2 as well as the corresponding HMAC implementation as defined in
         * FIPS PUB 198a
         *
         * Version 1.31 Copyright Brian Turek 2008-2012
         * Distributed under the BSD License
         * See http://caligatio.github.com/jsSHA/ for more information
         *
         * Several functions taken from Paul Johnson
         */
        (function ()
        {
            var charSize = 8,
                b64pad = "",
                hexCase = 0,

                str2binb = function (str)
                {
                    var bin = [], mask = (1 << charSize) - 1,
                        length = str.length * charSize, i;

                    for (i = 0; i < length; i += charSize)
                    {
                        bin[i >> 5] |= (str.charCodeAt(i / charSize) & mask) <<
                            (32 - charSize - (i % 32));
                    }

                    return bin;
                },

                hex2binb = function (str)
                {
                    var bin = [], length = str.length, i, num;

                    for (i = 0; i < length; i += 2)
                    {
                        num = parseInt(str.substr(i, 2), 16);
                        if (!isNaN(num))
                        {
                            bin[i >> 3] |= num << (24 - (4 * (i % 8)));
                        }
                        else
                        {
                            return "INVALID HEX STRING";
                        }
                    }

                    return bin;
                },

                binb2hex = function (binarray)
                {
                    var hex_tab = (hexCase) ? "0123456789ABCDEF" : "0123456789abcdef",
                        str = "", length = binarray.length * 4, i, srcByte;

                    for (i = 0; i < length; i += 1)
                    {
                        srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);
                        str += hex_tab.charAt((srcByte >> 4) & 0xF) +
                            hex_tab.charAt(srcByte & 0xF);
                    }

                    return str;
                },

                binb2b64 = function (binarray)
                {
                    var tab = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz" +
                            "0123456789+/", str = "", length = binarray.length * 4, i, j,
                        triplet;

                    for (i = 0; i < length; i += 3)
                    {
                        triplet = (((binarray[i >> 2] >> 8 * (3 - i % 4)) & 0xFF) << 16) |
                            (((binarray[i + 1 >> 2] >> 8 * (3 - (i + 1) % 4)) & 0xFF) << 8) |
                            ((binarray[i + 2 >> 2] >> 8 * (3 - (i + 2) % 4)) & 0xFF);
                        for (j = 0; j < 4; j += 1)
                        {
                            if (i * 8 + j * 6 <= binarray.length * 32)
                            {
                                str += tab.charAt((triplet >> 6 * (3 - j)) & 0x3F);
                            }
                            else
                            {
                                str += b64pad;
                            }
                        }
                    }
                    return str;
                },

                rotr = function (x, n)
                {
                    return (x >>> n) | (x << (32 - n));
                },

                shr = function (x, n)
                {
                    return x >>> n;
                },

                ch = function (x, y, z)
                {
                    return (x & y) ^ (~x & z);
                },

                maj = function (x, y, z)
                {
                    return (x & y) ^ (x & z) ^ (y & z);
                },

                sigma0 = function (x)
                {
                    return rotr(x, 2) ^ rotr(x, 13) ^ rotr(x, 22);
                },

                sigma1 = function (x)
                {
                    return rotr(x, 6) ^ rotr(x, 11) ^ rotr(x, 25);
                },

                gamma0 = function (x)
                {
                    return rotr(x, 7) ^ rotr(x, 18) ^ shr(x, 3);
                },

                gamma1 = function (x)
                {
                    return rotr(x, 17) ^ rotr(x, 19) ^ shr(x, 10);
                },

                safeAdd_2 = function (x, y)
                {
                    var lsw = (x & 0xFFFF) + (y & 0xFFFF),
                        msw = (x >>> 16) + (y >>> 16) + (lsw >>> 16);

                    return ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);
                },

                safeAdd_4 = function (a, b, c, d)
                {
                    var lsw = (a & 0xFFFF) + (b & 0xFFFF) + (c & 0xFFFF) + (d & 0xFFFF),
                        msw = (a >>> 16) + (b >>> 16) + (c >>> 16) + (d >>> 16) +
                            (lsw >>> 16);

                    return ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);
                },

                safeAdd_5 = function (a, b, c, d, e)
                {
                    var lsw = (a & 0xFFFF) + (b & 0xFFFF) + (c & 0xFFFF) + (d & 0xFFFF) +
                            (e & 0xFFFF),
                        msw = (a >>> 16) + (b >>> 16) + (c >>> 16) + (d >>> 16) +
                            (e >>> 16) + (lsw >>> 16);

                    return ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);
                },

                coreSHA2 = function (message, messageLen, variant)
                {
                    var a, b, c, d, e, f, g, h, T1, T2, H, lengthPosition, i, t, K, W = [],
                        appendedMessageLength;

                    if (variant === "SHA-224" || variant === "SHA-256")
                    {
                        lengthPosition = (((messageLen + 65) >> 9) << 4) + 15;
                        K = [
                            0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,
                            0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,
                            0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,
                            0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,
                            0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,
                            0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,
                            0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,
                            0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,
                            0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,
                            0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,
                            0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,
                            0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,
                            0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,
                            0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,
                            0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,
                            0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2
                        ];

                        if (variant === "SHA-224")
                        {
                            H = [
                                0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
                                0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4
                            ];
                        }
                        else
                        {
                            H = [
                                0x6A09E667, 0xBB67AE85, 0x3C6EF372, 0xA54FF53A,
                                0x510E527F, 0x9B05688C, 0x1F83D9AB, 0x5BE0CD19
                            ];
                        }
                    }

                    message[messageLen >> 5] |= 0x80 << (24 - messageLen % 32);
                    message[lengthPosition] = messageLen;

                    appendedMessageLength = message.length;

                    for (i = 0; i < appendedMessageLength; i += 16)
                    {
                        a = H[0];
                        b = H[1];
                        c = H[2];
                        d = H[3];
                        e = H[4];
                        f = H[5];
                        g = H[6];
                        h = H[7];

                        for (t = 0; t < 64; t += 1)
                        {
                            if (t < 16)
                            {
                                W[t] = message[t + i];
                            }
                            else
                            {
                                W[t] = safeAdd_4(
                                    gamma1(W[t - 2]), W[t - 7],
                                    gamma0(W[t - 15]), W[t - 16]
                                );
                            }

                            T1 = safeAdd_5(h, sigma1(e), ch(e, f, g), K[t], W[t]);
                            T2 = safeAdd_2(sigma0(a), maj(a, b, c));
                            h = g;
                            g = f;
                            f = e;
                            e = safeAdd_2(d, T1);
                            d = c;
                            c = b;
                            b = a;
                            a = safeAdd_2(T1, T2);
                        }

                        H[0] = safeAdd_2(a, H[0]);
                        H[1] = safeAdd_2(b, H[1]);
                        H[2] = safeAdd_2(c, H[2]);
                        H[3] = safeAdd_2(d, H[3]);
                        H[4] = safeAdd_2(e, H[4]);
                        H[5] = safeAdd_2(f, H[5]);
                        H[6] = safeAdd_2(g, H[6]);
                        H[7] = safeAdd_2(h, H[7]);
                    }

                    switch (variant)
                    {
                        case "SHA-224":
                            return [
                                H[0], H[1], H[2], H[3],
                                H[4], H[5], H[6]
                            ];
                        case "SHA-256":
                            return H;
                        default:
                            return [];
                    }
                },

                jsSHA = function (srcString, inputFormat)
                {

                    this.sha224 = null;
                    this.sha256 = null;

                    this.strBinLen = null;
                    this.strToHash = null;

                    if ("HEX" === inputFormat)
                    {
                        if (0 !== (srcString.length % 2))
                        {
                            return "TEXT MUST BE IN BYTE INCREMENTS";
                        }
                        this.strBinLen = srcString.length * 4;
                        this.strToHash = hex2binb(srcString);
                    }
                    else if (("ASCII" === inputFormat) ||
                        ('undefined' === typeof(inputFormat)))
                    {
                        this.strBinLen = srcString.length * charSize;
                        this.strToHash = str2binb(srcString);
                    }
                    else
                    {
                        return "UNKNOWN TEXT INPUT TYPE";
                    }
                };

            jsSHA.prototype = {
                getHash : function (variant, format)
                {
                    var formatFunc = null, message = this.strToHash.slice();

                    switch (format)
                    {
                        case "HEX":
                            formatFunc = binb2hex;
                            break;
                        case "B64":
                            formatFunc = binb2b64;
                            break;
                        default:
                            return "FORMAT NOT RECOGNIZED";
                    }

                    switch (variant)
                    {
                        case "SHA-224":
                            if (null === this.sha224)
                            {
                                this.sha224 = coreSHA2(message, this.strBinLen, variant);
                            }
                            return formatFunc(this.sha224);
                        case "SHA-256":
                            if (null === this.sha256)
                            {
                                this.sha256 = coreSHA2(message, this.strBinLen, variant);
                            }
                            return formatFunc(this.sha256);
                        default:
                            return "HASH NOT RECOGNIZED";
                    }
                },

                getHMAC : function (key, inputFormat, variant, outputFormat)
                {
                    var formatFunc, keyToUse, i, retVal, keyBinLen, hashBitSize,
                        keyWithIPad = [], keyWithOPad = [];

                    switch (outputFormat)
                    {
                        case "HEX":
                            formatFunc = binb2hex;
                            break;
                        case "B64":
                            formatFunc = binb2b64;
                            break;
                        default:
                            return "FORMAT NOT RECOGNIZED";
                    }

                    switch (variant)
                    {
                        case "SHA-224":
                            hashBitSize = 224;
                            break;
                        case "SHA-256":
                            hashBitSize = 256;
                            break;
                        default:
                            return "HASH NOT RECOGNIZED";
                    }

                    if ("HEX" === inputFormat)
                    {
                        if (0 !== (key.length % 2))
                        {
                            return "KEY MUST BE IN BYTE INCREMENTS";
                        }
                        keyToUse = hex2binb(key);
                        keyBinLen = key.length * 4;
                    }
                    else if ("ASCII" === inputFormat)
                    {
                        keyToUse = str2binb(key);
                        keyBinLen = key.length * charSize;
                    }
                    else
                    {
                        return "UNKNOWN KEY INPUT TYPE";
                    }

                    if (64 < (keyBinLen / 8))
                    {
                        keyToUse = coreSHA2(keyToUse, keyBinLen, variant);
                        keyToUse[15] &= 0xFFFFFF00;
                    }
                    else if (64 > (keyBinLen / 8))
                    {
                        keyToUse[15] &= 0xFFFFFF00;
                    }

                    for (i = 0; i <= 15; i += 1)
                    {
                        keyWithIPad[i] = keyToUse[i] ^ 0x36363636;
                        keyWithOPad[i] = keyToUse[i] ^ 0x5C5C5C5C;
                    }

                    retVal = coreSHA2(
                        keyWithIPad.concat(this.strToHash),
                        512 + this.strBinLen, variant);
                    retVal = coreSHA2(
                        keyWithOPad.concat(retVal),
                        512 + hashBitSize, variant);

                    return (formatFunc(retVal));
                }
            };

            window.jsSHA = jsSHA;
        }());

        window.LZW = {
            // LZW-compress a string
            encode: function (s) {
                var dict = {};
                var data = (s + "").split("");
                var out = [];
                var currChar;
                var phrase = data[0];
                var code = 256;
                for (var i=1; i<data.length; i++) {
                    currChar=data[i];
                    if (dict[phrase + currChar] != null) {
                        phrase += currChar;
                    }
                    else {
                        out.push(phrase.length > 1 ? dict[phrase] : phrase.charCodeAt(0));
                        dict[phrase + currChar] = code;
                        code++;
                        phrase=currChar;
                    }
                }
                out.push(phrase.length > 1 ? dict[phrase] : phrase.charCodeAt(0));
                for (var i=0; i<out.length; i++) {
                    out[i] = String.fromCharCode(out[i]);
                }
                return out.join("");
            },

            // Decompress an LZW-encoded string
            decode: function (s) {
                var dict = {};
                var data = (s + "").split("");
                var currChar = data[0];
                var oldPhrase = currChar;
                var out = [currChar];
                var code = 256;
                var phrase;
                for (var i=1; i<data.length; i++) {
                    var currCode = data[i].charCodeAt(0);
                    if (currCode < 256) {
                        phrase = data[i];
                    }
                    else {
                        phrase = dict[currCode] ? dict[currCode] : (oldPhrase + currChar);
                    }
                    out.push(phrase);
                    currChar = phrase.charAt(0);
                    dict[code] = oldPhrase + currChar;
                    code++;
                    oldPhrase = phrase;
                }
                return out.join("");
            }

        };
        /* base64 encode/decode compatible with window.btoa/atob
         *
         * window.atob/btoa is a Firefox extension to convert binary data (the "b")
         * to base64 (ascii, the "a").
         *
         * It is also found in Safari and Chrome.  It is not available in IE.
         *
         * if (!window.btoa) window.btoa = base64.encode
         * if (!window.atob) window.atob = base64.decode
         *
         * The original spec's for atob/btoa are a bit lacking
         * https://developer.mozilla.org/en/DOM/window.atob
         * https://developer.mozilla.org/en/DOM/window.btoa
         *
         * window.btoa and base64.encode takes a string where charCodeAt is [0,255]
         * If any character is not [0,255], then an DOMException(5) is thrown.
         *
         * window.atob and base64.decode take a base64-encoded string
         * If the input length is not a multiple of 4, or contains invalid characters
         *   then an DOMException(5) is thrown.
         */

        (function () {
            var base64 = {};
            base64.PADCHAR = '=';
            base64.ALPHA = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

            base64.makeDOMException = function() {
                // sadly in FF,Safari,Chrome you can't make a DOMException
                var e, tmp;

                try {
                    return new DOMException(DOMException.INVALID_CHARACTER_ERR);
                } catch (tmp) {
                    // not available, just passback a duck-typed equiv
                    // https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/Error
                    // https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/Error/prototype
                    var ex = new Error("DOM Exception 5");

                    // ex.number and ex.description is IE-specific.
                    ex.code = ex.number = 5;
                    ex.name = ex.description = "INVALID_CHARACTER_ERR";

                    // Safari/Chrome output format
                    ex.toString = function() { return 'Error: ' + ex.name + ': ' + ex.message; };
                    return ex;
                }
            }

            base64.getbyte64 = function(s,i) {
                // This is oddly fast, except on Chrome/V8.
                //  Minimal or no improvement in performance by using a
                //   object with properties mapping chars to value (eg. 'A': 0)
                var idx = base64.ALPHA.indexOf(s.charAt(i));
                if (idx === -1) {
                    throw base64.makeDOMException();
                }
                return idx;
            }

            base64.decode = function(s) {
                // convert to string
                s = '' + s;
                var getbyte64 = base64.getbyte64;
                var pads, i, b10;
                var imax = s.length
                if (imax === 0) {
                    return s;
                }

                if (imax % 4 !== 0) {
                    throw base64.makeDOMException();
                }

                pads = 0
                if (s.charAt(imax - 1) === base64.PADCHAR) {
                    pads = 1;
                    if (s.charAt(imax - 2) === base64.PADCHAR) {
                        pads = 2;
                    }
                    // either way, we want to ignore this last block
                    imax -= 4;
                }

                var x = [];
                for (i = 0; i < imax; i += 4) {
                    b10 = (getbyte64(s,i) << 18) | (getbyte64(s,i+1) << 12) |
                        (getbyte64(s,i+2) << 6) | getbyte64(s,i+3);
                    x.push(String.fromCharCode(b10 >> 16, (b10 >> 8) & 0xff, b10 & 0xff));
                }

                switch (pads) {
                    case 1:
                        b10 = (getbyte64(s,i) << 18) | (getbyte64(s,i+1) << 12) | (getbyte64(s,i+2) << 6);
                        x.push(String.fromCharCode(b10 >> 16, (b10 >> 8) & 0xff));
                        break;
                    case 2:
                        b10 = (getbyte64(s,i) << 18) | (getbyte64(s,i+1) << 12);
                        x.push(String.fromCharCode(b10 >> 16));
                        break;
                }
                return x.join('');
            }

            base64.getbyte = function(s,i) {
                var x = s.charCodeAt(i);
                if (x > 255) {
                    throw base64.makeDOMException();
                }
                return x;
            }

            base64.encode = function(s) {
                if (arguments.length !== 1) {
                    throw new SyntaxError("Not enough arguments");
                }
                var padchar = base64.PADCHAR;
                var alpha   = base64.ALPHA;
                var getbyte = base64.getbyte;

                var i, b10;
                var x = [];

                // convert to string
                s = '' + s;

                var imax = s.length - s.length % 3;

                if (s.length === 0) {
                    return s;
                }
                for (i = 0; i < imax; i += 3) {
                    b10 = (getbyte(s,i) << 16) | (getbyte(s,i+1) << 8) | getbyte(s,i+2);
                    x.push(alpha.charAt(b10 >> 18));
                    x.push(alpha.charAt((b10 >> 12) & 0x3F));
                    x.push(alpha.charAt((b10 >> 6) & 0x3f));
                    x.push(alpha.charAt(b10 & 0x3f));
                }
                switch (s.length - imax) {
                    case 1:
                        b10 = getbyte(s,i) << 16;
                        x.push(alpha.charAt(b10 >> 18) + alpha.charAt((b10 >> 12) & 0x3F) +
                            padchar + padchar);
                        break;
                    case 2:
                        b10 = (getbyte(s,i) << 16) | (getbyte(s,i+1) << 8);
                        x.push(alpha.charAt(b10 >> 18) + alpha.charAt((b10 >> 12) & 0x3F) +
                            alpha.charAt((b10 >> 6) & 0x3f) + padchar);
                        break;
                }
                return x.join('');
            }

            window.base64 = base64;
        }());

        (function(OO) {
            // Resolve all 3rd parties conflicts
            // Beyond this point we can use OO._ for underscore and OO.$ for zepto
            OO._ = window._.noConflict();
            OO.$ = window.$.noConflict(true);

            var hazmatConfig = {};
            // 'debugHazmat' flag needs to be set before plugins are loaded. If we added
            // this flag to the OO namespace, it would be overriden during plugin initalization,
            // so we need to use a global var instead
            if (!window.debugHazmat) {
                hazmatConfig = {
                    warn: function() { return; }
                };
            }

            OO.HM = window.Hazmat.noConflict().create(hazmatConfig);

            OO.jsSHA = window.jsSHA;

            OO.LZW = window.LZW;

            if(!window.console || !window.console.log) {
                window.console = window.console || {};
                window.console.log = function() {};
            }

        }(OO));

        (function(OO,_,HM) {
            // Ensure playerParams exists
            OO.playerParams = HM.safeObject('environment.playerParams', OO.playerParams,{});

            // Init publisher's OO.playerParams via player parameter object
            OO.configurePublisher = function(parameters) {
                OO.playerParams.pcode = parameters.pcode || OO.playerParams.pcode || '';
                OO.playerParams.playerBrandingId = parameters.playerBrandingId || OO.playerParams.playerBrandingId || '';
                OO.playerParams.debug = parameters.debug || OO.playerParams.debug || '';
            };

            OO.isPublisherConfigured = function() {
                return !!(OO.playerParams.pcode && OO.playerParams.playerBrandingId);
            };

            // Set API end point environment
            OO.setServerHost = function(parameters) {
                OO.playerParams.api_ssl_server = parameters.api_ssl_server || OO.playerParams.api_ssl_server || null;
                OO.playerParams.api_server = parameters.api_server || OO.playerParams.api_server || null;
                OO.playerParams.auth_ssl_server = parameters.auth_ssl_server || OO.playerParams.auth_ssl_server || null;
                OO.playerParams.auth_server = parameters.auth_server || OO.playerParams.auth_server || null;
                OO.playerParams.analytics_ssl_server = parameters.analytics_ssl_server || OO.playerParams.analytics_ssl_server || null;
                OO.playerParams.analytics_server = parameters.analytics_server || OO.playerParams.analytics_server || null;

                updateServerHost();
            };

            var updateServerHost = function () {
                OO.SERVER =
                    {
                        API: OO.isSSL ? OO.playerParams.api_ssl_server || "https://player.ooyala.com" :
                            OO.playerParams.api_server || "http://player.ooyala.com",
                        AUTH: OO.isSSL ? OO.playerParams.auth_ssl_server || "https://player.ooyala.com/sas" :
                            OO.playerParams.auth_server || "http://player.ooyala.com/sas",
                        ANALYTICS: OO.isSSL ? OO.playerParams.analytics_ssl_server || "https://player.ooyala.com" :
                            OO.playerParams.analytics_server || "http://player.ooyala.com"
                    };
            }

            // process tweaks
            // tweaks is optional. Hazmat takes care of this but throws an undesirable warning.
            OO.playerParams.tweaks = OO.playerParams.tweaks || '';
            OO.playerParams.tweaks = HM.safeString('environment.playerParams.tweaks', OO.playerParams.tweaks,'');
            OO.playerParams.tweaks = OO.playerParams.tweaks.split(',');

            // explicit list of supported tweaks
            OO.tweaks = {};
            OO.tweaks["android-enable-hls"] = _.contains(OO.playerParams.tweaks, 'android-enable-hls');
            OO.tweaks["html5-force-mp4"] = _.contains(OO.playerParams.tweaks, 'html5-force-mp4');

            // Max timeout for fetching ads metadata, default to 3 seconds.
            OO.playerParams.maxAdsTimeout = OO.playerParams.maxAdsTimeout || 5;
            // max wrapper ads depth we look, we will only look up to 3 level until we get vast inline ads
            OO.playerParams.maxVastWrapperDepth = OO.playerParams.maxVastWrapperDepth || 3;
            OO.playerParams.minLiveSeekWindow = OO.playerParams.minLiveSeekWindow || 10;

            // Ripped from: http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript
            OO.guid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
                var r = Math.random()*16|0, v = c == 'x' ? r : (r&0x3|0x8);
                return v.toString(16);
            });
            OO.playerCount = 0;

            // Check environment to see if this is prod
            OO.isProd = !!(OO.playerParams.environment &&
            OO.playerParams.environment.match(/^prod/i));

            // Environment invariant.
            OO.platform = window.navigator.platform;
            OO.os = window.navigator.appVersion;
            OO.supportsVideo = !!document.createElement('video').canPlayType;

            OO.browserSupportsCors = (function() {
                try {
                    return _.has(new XMLHttpRequest(), "withCredentials") ||
                        _.has(XMLHttpRequest.prototype, "withCredentials");
                } catch(e) {
                    return false;
                }
            }());

            OO.isWindows = (function() {
                return !!OO.platform.match(/Win/);
            }());

            OO.isIos = (function() {
                return !!OO.platform.match(/iPhone|iPad|iPod/);
            }());

            OO.isIphone = (function() {
                return !!OO.platform.match(/iPhone|iPod/);
            }());

            OO.isIpad = (function() {
                return !!OO.platform.match(/iPad/);
            }());

            OO.iosMajorVersion = (function() {
                try {
                    if (OO.isIos) {
                        return parseInt(window.navigator.userAgent.match(/OS (\d+)/)[1], 10);
                    } else {
                        return null;
                    }
                } catch(err) {
                    return null;
                }
            }());

            OO.isAndroid = (function() {
                return !!(OO.os.match(/Android/) && !OO.os.match(/Windows Phone/));
            }());

            OO.isAndroid4Plus = (function() {
                var version = OO.os.match(/Android [\d\.]*;/);
                if (version && version.length > 0) {
                    version = parseInt(version[0].substring(version[0].indexOf(' ') + 1,
                        version[0].search('[\.\;]')));
                }
                return OO.isAndroid && version >= 4;
            }());

            OO.isRimDevice = (function() {
                return !!(OO.os.match(/BlackBerry/) || OO.os.match(/PlayBook/));
            }());

            OO.isFirefox = (function() {
                return !!window.navigator.userAgent.match(/Firefox/);
            }());

            OO.isChrome = (function () {
                return (!!window.navigator.userAgent.match(/Chrome/) && !window.navigator.userAgent.match(/Edge/));
            }());

            OO.isSafari = (function () {
                return (!!window.navigator.userAgent.match(/AppleWebKit/) &&
                !window.navigator.userAgent.match(/Chrome/) &&
                !window.navigator.userAgent.match(/like iPhone/));
            }());

            OO.chromeMajorVersion = (function () {
                try {
                    return parseInt(window.navigator.userAgent.match(/Chrome.([0-9]*)/)[1], 10);
                } catch(err) {
                    return null;
                }
            }());

            OO.isIE = (function(){
                return !!window.navigator.userAgent.match(/MSIE/) || !!window.navigator.userAgent.match(/Trident/);
            }());

            OO.isEdge = (function(){
                return !!window.navigator.userAgent.match(/Edge/);
            }());

            OO.isIE11Plus = (function(){
                // check if IE
                if (!window.navigator.userAgent.match(/Trident/)) {
                    return false;
                }

                // extract version number
                var ieVersionMatch = window.navigator.userAgent.match(/rv:(\d*)/);
                var ieVersion = ieVersionMatch && ieVersionMatch[1];
                return ieVersion >= 11;
            }());

            OO.isWinPhone = (function(){
                return !!OO.os.match(/Windows Phone/) || !!OO.os.match(/ZuneWP/) || !!OO.os.match(/XBLWP/);
            }());

            OO.isSmartTV = (function(){
                return (!!window.navigator.userAgent.match(/SmartTV/) ||
                !!window.navigator.userAgent.match(/NetCast/));
            }());

            OO.isMacOs = (function() {
                return !OO.isIos && !!OO.os.match(/Mac/) && !window.navigator.userAgent.match(/like iPhone/);
            }());

            OO.isMacOsLionOrLater = (function() {
                // TODO: revisit for Firefox when possible/necessary
                var macOs = OO.os.match(/Mac OS X ([0-9]+)_([0-9]+)/);
                if (macOs == null || macOs.length < 3) { return false; }
                return (parseInt(macOs[1],10) >= 10 && parseInt(macOs[2],10) >= 7);
            }());

            OO.macOsSafariVersion = (function() {
                try {
                    if (OO.isMacOs && OO.isSafari) {
                        return parseInt(window.navigator.userAgent.match(/Version\/(\d+)/)[1], 10);
                    } else {
                        return null;
                    }
                } catch(err) {
                    return null;
                }
            }());

            OO.isKindleHD = (function(){
                return !!OO.os.match(/Silk\/2/);
            }());

            OO.supportMSE = (function() {
                return 'MediaSource' in window || 'WebKitMediaSource' in window || 'mozMediaSource' in window || 'msMediaSource' in window;
            }());

            OO.supportAds = (function() {
                // We are disabling ads for Android 2/3 device, the reason is that main video is not resuming after
                // ads finish. Util we can figure out a work around, we will keep ads disabled.
                return !OO.isWinPhone && !OO.os.match(/Android [23]/);
            }());

            OO.allowGesture = (function() {
                return OO.isIos;
            }());

            OO.allowAutoPlay = (function() {
                return !OO.isIos && !OO.isAndroid;
            }());

            OO.supportTouch = (function() {
                // IE8- doesn't support JS functions on DOM elements
                if (document.documentElement.hasOwnProperty && document.documentElement.hasOwnProperty("ontouchstart")) { return true; }
                return false;
            }());

            OO.docDomain = (function() {
                var domain = null;
                try {
                    domain = document.domain;
                } catch(e) {}
                if (!OO._.isEmpty(domain)) { return domain; }
                if (OO.isSmartTV) { return 'SmartTV'; }
                return 'unknown';
            }());

            OO.uiParadigm = (function() {
                var paradigm = 'tablet';

                // The below code attempts to decide whether or not we are running in 'mobile' mode
                // Meaning that no controls are displayed, chrome is minimized and only fullscreen playback is allowed
                // Unfortunately there is no clean way to figure out whether the device is tablet or phone
                // or even to properly detect device screen size http://tripleodeon.com/2011/12/first-understand-your-screen/
                // So there is a bunch of heuristics for doing just that
                // Anything that is not explicitly detected as mobile defaults to desktop
                // so worst case they get ugly chrome instead of unworking player
                if(OO.isAndroid4Plus && OO.tweaks["android-enable-hls"]) {
                    // special case for Android 4+ running HLS
                    paradigm = 'tablet';
                } else if(OO.isIphone) {
                    paradigm = 'mobile-native';
                } else if(OO.os.match(/BlackBerry/)) {
                    paradigm = 'mobile-native';
                } else if(OO.os.match(/iPad/)) {
                    paradigm = 'tablet';
                } else if(OO.isKindleHD) {
                    // Kindle Fire HD
                    paradigm = 'mobile-native';
                } else if(OO.os.match(/Silk/)) {
                    // Kindle Fire
                    paradigm = 'mobile';
                } else if(OO.os.match(/Android 2/)) {
                    // On Android 2+ only window.outerWidth is reliable, so we are using that and window.orientation
                    if((window.orientation % 180) == 0 &&  (window.outerWidth / window.devicePixelRatio) <= 480 ) {
                        // portrait mode
                        paradigm = 'mobile';
                    } else if((window.outerWidth / window.devicePixelRatio) <= 560 ) {
                        // landscape mode
                        paradigm = 'mobile';
                    }
                } else if(OO.os.match(/Android/)) {
                    paradigm = 'tablet';
                } else if (OO.isWinPhone) {
                    // Windows Phone is mobile only for now, tablets not yet released
                    paradigm = 'mobile';
                } else if(!!OO.platform.match(/Mac/)    // Macs
                    || !!OO.platform.match(/Win/)  // Winboxes
                    || !!OO.platform.match(/Linux/)) {    // Linux
                    paradigm = 'desktop';
                }

                return paradigm;
            }());

            /**
             * Determines if a single video element should be used.<br/>
             * <ul><li>Use single video element on iOS, all versions</li>
             *     <li>Use single video element on Android, all versions</li></ul>
             * 01/11/17 Previous JSDoc for Android - to be removed once fix is confirmed and there is no regression:<br />
             * <ul><li>Use single video element on Android < v4.0</li>
             *     <li>Use single video element on Android with Chrome < v40<br/>
             *       (note, it might work on earlier versions but don't know which ones! Does not work on v18)</li></ul>
             *
             * @private
             * @returns {boolean} True if a single video element is required
             */
            OO.requiresSingleVideoElement = (function() {
                return OO.isIos || OO.isAndroid;
                // 01/11/17 - commenting out, but not removing three lines below pending QA, we may need to restore this logic
                //var iosRequireSingleElement = OO.isIos;
                //var androidRequireSingleElement = OO.isAndroid && (!OO.isAndroid4Plus || OO.chromeMajorVersion < 40);
                // return iosRequireSingleElement || androidRequireSingleElement;
            }());

            // TODO(jj): need to make this more comprehensive
            // Note(jj): only applies to mp4 videos for now
            OO.supportedVideoProfiles = (function() {
                // iOS only supports baseline profile
                if (OO.isIos || OO.isAndroid) {
                    return "baseline";
                }
                return null;
            }());

            // TODO(bz): add flash for device when we decide to use stream data from sas
            // TODO(jj): add AppleTV and other devices as necessary
            OO.device = (function() {
                var device = 'html5';
                if (OO.isIphone) { device = 'iphone-html5'; }
                else if (OO.isIpad) { device = 'ipad-html5'; }
                else if (OO.isAndroid) { device = 'android-html5'; }
                else if (OO.isRimDevice) { device = 'rim-html5'; }
                else if (OO.isWinPhone) { device = 'winphone-html5'; }
                else if (OO.isSmartTV) { device = 'smarttv-html5'; }
                return device;
            }());

            // list of environment-specific modules needed by the environment or empty to include all
            // Note: should never be empty because of html5
            OO.environmentRequiredFeatures = (function(){
                var features = [];

                if (OO.os.match(/Android 2/)) {  // safari android
                    features.push('html5-playback');
                } else { // normal html5
                    features.push('html5-playback');
                    if (OO.supportAds) { features.push('ads'); }
                }

                return _.reduce(features, function(memo, feature) {return memo+feature+' ';}, '');
            }());

            OO.supportMidRollAds = (function() {
                return (OO.uiParadigm === "desktop" && !OO.isIos && !OO.isRimDevice);
            }());

            OO.supportCookies = (function() {
                document.cookie = "ooyala_cookie_test=true";
                var cookiesSupported = document.cookie.indexOf("ooyala_cookie_test=true") >= 0;
                document.cookie = "ooyala_cookie_test=; expires=Thu, 01 Jan 1970 00:00:00 GMT";
                return cookiesSupported;
            }());

            OO.isSSL = document.location.protocol == "https:";

            updateServerHost();

            // returns true iff environment-specific feature is required to run in current environment
            OO.requiredInEnvironment = OO.featureEnabled = function(feature) {
                return !!OO.environmentRequiredFeatures.match(new RegExp(feature));
            };

            // Detect Chrome Extension. We will recieve an acknowledgement from the content script, which will prompt us to start sending logs
            OO.chromeExtensionEnabled = document.getElementById('ooyala-extension-installed') ? true : false;

            // Locale Getter and Setter
            OO.locale = "";
            OO.setLocale = function(locale) {
                OO.locale = locale.toUpperCase();
            };
            OO.getLocale = function() {
                return (OO.locale || document.documentElement.lang || navigator.language ||
                navigator.userLanguage || "en").substr(0,2).toUpperCase();
            };
        }(OO, OO._, OO.HM));

        (function(OO, $, _){
            /*
             *  extend jquery lib
             */

            // add support for ie8/9 cross domain requests to jquery
            // see more here: http://bugs.jquery.com/ticket/8283
            // and here: https://github.com/jaubourg/ajaxHooks/blob/master/src/xdr.js
            if (window.XDomainRequest) {
                OO.$.ajaxTransport(function(s) {
                    if (s.crossDomain && s.async) {
                        if (s.timeout) {
                            s.xdrTimeout = s.timeout;
                            delete s.timeout;
                        }
                        var xdr;
                        return {
                            send: function(_, complete) {
                                function callback(status, statusText, responses, responseHeaders) {
                                    xdr.onload = xdr.onerror = xdr.ontimeout = OO.$.noop;
                                    xdr = undefined;
                                    complete(status, statusText, responses, responseHeaders);
                                }
                                xdr = new XDomainRequest();
                                xdr.open(s.type, s.url);
                                xdr.onload = function() {
                                    callback(200, "OK", {
                                        text: xdr.responseText
                                    }, "Content-Type: " + xdr.contentType);
                                };
                                xdr.onerror = function() {
                                    callback(404, "Not Found");
                                };
                                xdr.onprogress = function() {};
                                if (s.xdrTimeout) {
                                    xdr.ontimeout = function() {
                                        callback(0, "timeout");
                                    };
                                    xdr.timeout = s.xdrTimeout;
                                }
                                xdr.send((s.hasContent && s.data) || null);
                            },
                            abort: function() {
                                if (xdr) {
                                    xdr.onerror = OO.$.noop();
                                    xdr.abort();
                                }
                            }
                        };
                    }
                });
            }


            $.getScriptRetry = function (url, callback, options) {
                options = options || {};
                var errorCallBack = options.error;
                var removeOptions = ['error', 'dataType', 'success'];
                _.each(removeOptions, function(k) { delete(options[k]); });

                // default settings; may be overridden by passing options
                var settings = {
                    'url': url,
                    'type': 'get',
                    'dataType': 'script',
                    'success': callback,
                    'cache': true,
                    'timeout': 5000,
                    'tryCount': 0,
                    'retryLimit': 1,
                    'warning': false,
                    'warningMessage': 'Can not load URL',
                    'error': function () {
                        if (this.tryCount < this.retryLimit) {
                            this.tryCount++;
                            $.ajax(this);
                        } else {
                            if (this.warning) {
                                alert(this.warningMessage);
                            }
                            if (errorCallBack) { errorCallBack.apply(null, arguments); }
                        }
                    }
                }

                _.extend(settings, options);

                $.ajax(settings);
            };


        }(OO, OO.$, OO._));

        /**
         * @public
         * @namespace OO
         */
        (function(OO,_){

            // External States
            /**
             * @public
             * @description The Ooyala Player run-time states apply to an Ooyala player while it is running. These states apply equally to both HTML5 and Flash players.
             * State changes occur either through user interaction (for example, the user clickes the PLAY button), or programmatically via API calls. For more information,
             * see <a href="http://support.ooyala.com/developers/documentation/api/pbv4_api_events.html" target="target">Player Message Bus Events</a>.
             * @summary Represents the Ooyala Player run-time states.
             * @namespace OO.STATE
             */
            OO.STATE = {
                /**
                 * The embed code has been set. The movie and its metadata is currently being loaded into the player.
                 * @public
                 */
                LOADING : 'loading',
                /**
                 * One of the following applies:
                 * <ul>
                 *   <li>All of the necessary data is loaded in the player. Playback of the movie can begin.</li>
                 *   <li>Playback of the asset has finished and is ready to restart from the beginning.</li>
                 * </ul>
                 * @public
                 */
                READY : 'ready',
                /**
                 * The player is currently playing video content.
                 * @public
                 */
                PLAYING : 'playing',
                /**
                 * The player has currently paused after playback had begun.
                 * @public
                 */
                PAUSED : 'paused',

                /**
                 * Playback has currently stopped because it doesn't have enough movie data to continue and is downloading more.
                 * @public
                 */
                BUFFERING : 'buffering',
                /** The player has encountered an error that prevents playback of the asset. The error could be due to many reasons,
                 * such as video format, syndication rules, or the asset being disabled. Refer to the list of errors for details.
                 * The error code for the root cause of the error is available from the [OO.Player.getErrorCode()]{@link OO.Player#getErrorCode} method.
                 * @public
                 */
                ERROR : 'error',
                /**
                 * The player has been destroyed via its [OO.Player.destroy(<i>callback</i>)]{@link OO.Player#destroy} method.
                 * @public
                 */
                DESTROYED : 'destroyed',

                __end_marker : true
            };

            // All Events Constants
            /**
             * @description The Ooyala Player events are default events that are published by the event bus.Your modules can subscribe to any and all of these events.
             * Use message bus events to subscribe to or publish player events from video to ad playback. For more information,
             * see <a href="http://support.ooyala.com/developers/documentation/api/pbv4_api_events.html" target="target">Player Message Bus Events</a>.
             * @summary Represents the Ooyala Player events.
             * @namespace OO.EVENTS
             * @public
             */
            OO.EVENTS = {

                /**
                 * A player was created. This is the first event that is sent after player creation.
                 * This event provides the opportunity for any other modules to perform their own initialization.
                 * The handler is called with the query string parameters.
                 * The DOM has been created at this point, and plugins may make changes or additions to the DOM.<br/><br/>
                 *
                 *
                 * @event OO.EVENTS#PLAYER_CREATED
                 * @public
                 */
                PLAYER_CREATED : 'playerCreated',

                PLAYER_EMBEDDED: 'playerEmbedded',

                /**
                 * An attempt has been made to set the embed code.
                 * If you are developing a plugin, reset the internal state since the player is switching to a new asset.
                 * Depending on the context, the handler is called with:
                 *   <ul>
                 *     <li>The ID (embed code) of the asset.</li>
                 *     <li>The ID (embed code) of the asset, with options.</li>
                 *   </ul>
                 *
                 *
                 * @event OO.EVENTS#SET_EMBED_CODE
                 * @public
                 */
                SET_EMBED_CODE : 'setEmbedCode',

                /**
                 * An attempt has been made to set the embed code by Ooyala Ads.
                 * If you are developing a plugin, reset the internal state since the player is switching to a new asset.
                 * Depending on the context, the handler is called with:
                 *   <ul>
                 *     <li>The ID (embed code) of the asset.</li>
                 *     <li>The ID (embed code) of the asset, with options.</li>
                 *   </ul>
                 *
                 *
                 * @event OO.EVENTS#SET_EMBED_CODE_AFTER_OOYALA_AD
                 * @private
                 */
                SET_EMBED_CODE_AFTER_OOYALA_AD : 'setEmbedCodeAfterOoyalaAd',

                /**
                 * An attempt has been made to set a new asset.
                 * If you are developing a plugin, reset the internal state since the player is switching to a new asset.
                 * Depending on the context, the handler is called with:
                 *   <ul>
                 *     <li>The asset Object</li>
                 *     <li>The asset Object, with options.</li>
                 *   </ul>
                 *
                 * <h5>Compatibility: </h5>
                 * <p style="text-indent: 1em;">HTML5, Flash</p>
                 *
                 * @event OO.EVENTS#SET_ASSET
                 */
                SET_ASSET: 'setAsset',

                /**
                 * A new asset has been specified to for playback and has basic passed validation.
                 * The handler will be called with an object representing the new asset.
                 * The object will have the following structure:
                 *   <ul>
                 *     <li>{
       *           Content:
       *           <ul>
       *                 <li>title: String,</li>
       *                 <li>description: String,</li>
       *                 <li>duration: Number,</li>
       *                 <li>posterImages: Array,</li>
       *                 <li>streams: Array,</li>
       *                 <li>captions: Array</li>
       *           </ul>
       *     }</li>
                 *
                 *   </ul>
                 *
                 * <h5>Compatibility: </h5>
                 * <p style="text-indent: 1em;">HTML5, Flash</p>
                 *
                 * @event OO.EVENTS#ASSET_CHANGED
                 */
                ASSET_CHANGED: 'assetChanged',

                /**
                 * The player's embed code has changed. The handler is called with two parameters:
                 * <ul>
                 *    <li>The ID (embed code) of the asset.</li>
                 *    <li>The options JSON object.</li>
                 * </ul>
                 *
                 *
                 * @event OO.EVENTS#EMBED_CODE_CHANGED
                 * @public
                 */
                EMBED_CODE_CHANGED : 'embedCodeChanged',
                /**
                 * The player's embed code has been changed by an Ooyala Ad. The handler is called with two parameters:
                 * <ul>
                 *    <li>The ID (embed code) of the asset.</li>
                 *    <li>The options JSON object.</li>
                 * </ul>
                 *
                 *
                 * @event OO.EVENTS#EMBED_CODE_CHANGED_AFTER_OOYALA_AD
                 * @private
                 */
                EMBED_CODE_CHANGED_AFTER_OOYALA_AD : 'embedCodeChangedAfterOoyalaAd',

                /**
                 * An <code>AUTH_TOKEN_CHANGED</code> event is triggered when an authorization token is issued by the Player Authorization API.<br/>
                 * For example, in device registration, an authorization token is issued, as described in
                 * <a href="http://support.ooyala.com/developers/documentation/concepts/device_registration.html" target="target">Device Registration</a>.
                 * The handler is called with a new value for the authorization token.<br/><br/>
                 *
                 *
                 * @event OO.EVENTS#AUTH_TOKEN_CHANGED
                 * @public
                 */
                AUTH_TOKEN_CHANGED: "authTokenChanged",

                /**
                 * The GUID has been set. The handler is called with the GUID.
                 * <p>This event notifies plugin or page developers that a unique ID has been either generated or loaded for the current user's browser.
                 * This is useful for analytics.</p>
                 * <p>In HTML5, Flash, and Chromecast environments, a unique user is identified by local storage or a cookie. </p>
                 * <p>To generate the GUID, Flash players use the timestamp indicating when the GUID is generated, and append random data to it.
                 * The string is then converted to base64.</p>
                 * <p>To generate the GUID, HTML5 players use the current time, browser
                 * information, and random data and hash it and convert it to base64.</p>
                 * <p>Within the same browser on the desktop, once a GUID is set by one platform
                 * it is used for both platforms for the user. If a user clears their browser cache, that user's (device's) ID will be regenerated the next time
                 * they watch video. Incognito modes will track a user for a single session, but once the browser is closed the GUID is erased.</p>
                 * <p>For more information, see <b>unique user</b> <a href="http://support.ooyala.com/users/users/documentation/reference/glossary.html" target="target">Glossary</a>.</p>
                 *
                 *
                 * @event OO.EVENTS#GUID_SET
                 * @public
                 */
                GUID_SET: 'guidSet',

                WILL_FETCH_PLAYER_XML: 'willFetchPlayerXml',
                PLAYER_XML_FETCHED: 'playerXmlFetched',
                WILL_FETCH_CONTENT_TREE: 'willFetchContentTree',

                SAVE_PLAYER_SETTINGS: 'savePlayerSettings',

                /**
                 * A content tree was fetched. The handler is called with a JSON object that represents the content data for the current asset.<br/><br/>
                 *
                 *
                 * <h5>Analytics:</h5>
                 * <p style="text-indent: 1em;">Records a <code>display</code> event. For more information see
                 * <a href="http://support.ooyala.com/developers/documentation/concepts/analytics_plays-and-displays.html" target="target">Displays, Plays, and Play Starts</a>.</p>
                 *
                 * @event OO.EVENTS#CONTENT_TREE_FETCHED
                 * @public
                 */
                CONTENT_TREE_FETCHED: 'contentTreeFetched',

                WILL_FETCH_METADATA: 'willFetchMetadata',

                /**
                 * The metadata, which is typically set in Backlot, has been retrieved.
                 * The handler is called with the JSON object containing all metadata associated with the current asset.
                 * The metadata includes page-level, asset-level, player-level, and account-level metadata, in addition to
                 * metadata specific to 3rd party plugins. This is typically used for ad and anlytics plugins, but can be used
                 * wherever you need specific logic based on the asset type.<br/><br/>
                 *
                 *
                 * @event OO.EVENTS#METADATA_FETCHED
                 * @public
                 */
                METADATA_FETCHED: 'metadataFetched',

                /**
                 * The skin metadata, which is set in Backlot, has been retrieved.
                 * The handler is called with the JSON object containing metadata set in Backlot for the current asset.
                 * This is used by the skin plug-in to deep merge with the embedded skin config.<br/><br/>
                 *
                 * @event OO.EVENTS#SKIN_METADATA_FETCHED
                 */
                SKIN_METADATA_FETCHED: 'skinMetadataFetched',

                /**
                 * The attributes from the metadata API call have been retrieved.
                 * The handler is called with the JSON object containing metadata for the current asset.
                 * This is used by the skin plug-in to apply logic based on attribute values.<br/><br/>
                 *
                 * @event OO.EVENTS#ATTRIBUTES_FETCHED
                 */
                ATTRIBUTES_FETCHED: 'attributesFetched',

                /**
                 * The thumbnail metadata needed for thumbnail previews while seeking has been fetched and will be
                 * passed through to the event handlers subscribing to this event.
                 * Thumbnail metadata will have the following structure:
                 * {
          data: {
            available_time_slices: [10],  //times that have thumbnails available
            available_widths: [100],       //widths of thumbnails available
            thumbnails: {
                  10: {100: {url: http://test.com, height: 100, width: 100}}
            }
          }
        }
                 * <br/><br/>
                 *
                 *
                 * @event OO.EVENTS#THUMBNAILS_FETCHED
                 * @public
                 */
                THUMBNAILS_FETCHED: 'thumbnailsFetched',

                WILL_FETCH_AUTHORIZATION: 'willFetchAuthorization',

                /**
                 * Playback was authorized. The handler is called with an object containing the entire SAS response, and includes the value of <code>video_bitrate</code>.
                 * <p>For more information see
                 * <a href="http://support.ooyala.com/developers/documentation/concepts/encodingsettings_videobitrate.html" target="target">Video Bit Rate</a>.</p>
                 *
                 *
                 * @event OO.EVENTS#AUTHORIZATION_FETCHED
                 * @public
                 */
                AUTHORIZATION_FETCHED: 'authorizationFetched',

                WILL_FETCH_AD_AUTHORIZATION: 'willFetchAdAuthorization',
                AD_AUTHORIZATION_FETCHED: 'adAuthorizationFetched',

                /**
                 * An attempt has been made to update current asset for cms-less player.
                 * The handler is called with:
                 *   <ul>
                 *     <li>The asset Object, with optional fields populated</li>
                 *   </ul>
                 *
                 *
                 * @event OO.EVENTS#UPDATE_ASSET
                 * @public
                 */
                UPDATE_ASSET: 'updateAsset',

                /**
                 * New asset parameters were specified for playback and have passed basic validation.
                 * The handler will be called with an object representing the new parameters.
                 * The object will have the following structure:
                 *   <ul> {
       *     <li> id: String </li>
       *     <li> content:
       *           <ul>
       *                 <li>title: String,</li>
       *                 <li>description: String,</li>
       *                 <li>duration: Number,</li>
       *                 <li>posterImages: Array,</li>
       *                 <li>streams: Array,</li>
       *                 <li>captions: Array</li>
       *           </ul>
       *     </li>
       *     <li> relatedVideos:
       *           <ul>
       *                 <li>title: String,</li>
       *                 <li>description: String,</li>
       *                 <li>thumbnailUrl: String,</li>
       *                 <li>asset: Object</li>
       *           </ul>
       *     </li>
       *   }</ul>
                 *
                 * <h5>Compatibility: </h5>
                 * <p style="text-indent: 1em;">HTML5, Flash</p>
                 *
                 * @event OO.EVENTS#ASSET_UPDATED
                 */
                ASSET_UPDATED: 'assetUpdated',


                CAN_SEEK: 'canSeek',
                WILL_RESUME_MAIN_VIDEO: 'willResumeMainVideo',

                /**
                 * The player has indicated that it is in a playback-ready state.
                 * All preparations are complete, and the player is ready to receive playback commands
                 * such as play, seek, and so on. The default UI shows the <b>Play</b> button,
                 * displaying the non-clickable spinner before this point. <br/><br/>
                 *
                 *
                 * @event OO.EVENTS#PLAYBACK_READY
                 * @public
                 */
                PLAYBACK_READY: 'playbackReady',

                /**
                 * Play has been called for the first time. <br/><br/>
                 *
                 *
                 * @event OO.EVENTS#INITIAL_PLAY
                 * @public
                 */
                INITIAL_PLAY: "initialPlay", // when play is called for the very first time ( in start screen )

                /**
                 * Indicates that the video framework is ready to accept play commands
                 *
                 *
                 * @event OO.EVENTS#CAN_PLAY
                 */
                CAN_PLAY: 'canPlay',
                WILL_PLAY : 'willPlay',


                /** The user has restarted the playback after the playback finished.
                 * The handler is called with the following optional argument:
                 * <ul>
                 *   <li>[optional] The time to restart video from, in seconds. </li>
                 * </ul>
                 *
                 * If no argument is provided, playback restarts from the beginning.
                 *
                 * @event OO.EVENTS#REPLAY
                 */
                REPLAY : 'replay',

                /**
                 * The playhead time changed. The handler is called with the following arguments:
                 * <ul>
                 *   <li>The current time.</li>
                 *   <li>The duration.</li>
                 *   <li>The name of the buffer.</li>
                 *   <li>The seek range.</li>
                 *   <li>The id of the video (as defined by the module that controls it).</li>
                 * </ul>
                 *
                 *
                 * <h5>Analytics:</h5>
                 * <p style="text-indent: 1em;">The first event is <code>video start</code>. Other instances of the event feed the <code>% completed data points</code>.</p>
                 * <p style="text-indent: 1em;">For more information, see <a href="http://support.ooyala.com/developers/documentation/concepts/analytics_plays-and-displays.html">Displays, Plays, and Play Starts</a>.</p>
                 *
                 * @event OO.EVENTS#PLAYHEAD_TIME_CHANGED
                 * @public
                 */
                PLAYHEAD_TIME_CHANGED: 'playheadTimeChanged',

                /**
                 * The player is buffering the data stream.
                 * The handler is called with the following arguments:
                 * <ul>
                 *   <li>The url of the video that is buffering.</li>
                 *   <li>The id of the video that is buffering (as defined by the module that controls it).</li>
                 * </ul><br/><br/>
                 *
                 *
                 * @event OO.EVENTS#BUFFERING
                 * @public
                 */
                BUFFERING: 'buffering', // playing stops because player is buffering

                /**
                 * Play resumes because the player has completed buffering. The handler is called with the URL of the stream.
                 * The handler is called with the following arguments:
                 * <ul>
                 *   <li>The url of the video that has buffered.</li>
                 *   <li>The id of the video that has buffered (as defined by the module that controls it).</li>
                 * </ul><br/><br/>
                 *
                 *
                 * @event OO.EVENTS#BUFFERED
                 * @public
                 */
                BUFFERED: 'buffered',

                /**
                 * The player is downloading content (it can play while downloading).
                 * The handler is called with the following arguments:
                 * <ul>
                 *   <li>The current time.</li>
                 *   <li>The duration.</li>
                 *   <li>The name of the buffer.</li>
                 *   <li>The seek range.</li>
                 *   <li>The id of the video (as defined by the module that controls it).</li>
                 * </ul>
                 * <br/><br/>
                 *
                 *
                 * @event OO.EVENTS#DOWNLOADING
                 * @public
                 */
                DOWNLOADING:  'downloading', // player is downloading content (could be playing while downloading)

                /**
                 * Lists the available bitrate information. The handler is called with an array containing the available streams,
                 * each object must include the following and only the following:
                 *   <ul>
                 *     <li>bitrate: The bitrate in bits per second. (number)</li>
                 *     <li>height: The vertical resolution of the stream. (number)</li>
                 *     <li>width: The horizontal resolution of the stream. (number)</li>
                 *     <li>id: A unique identifier for the stream. (string)</li>
                 *   </ul>
                 * If The video plugin supports automatic ABR, one stream will have an ID of "auto" and a bitrate of 0.
                 *
                 * <p>For more information see
                 * <a href="http://support.ooyala.com/developers/documentation/concepts/encodingsettings_videobitrate.html" target="target">Video Bit Rate</a>.</p>
                 * @event OO.EVENTS#BITRATE_INFO_AVAILABLE
                 * @public
                 */
                BITRATE_INFO_AVAILABLE: 'bitrateInfoAvailable',

                /**
                 * A request to set a specific stream bitrate has occurred.
                 * The event is published with parameter containing a string ID of the bitrate to change to.
                 * This will be an ID from one of the stream objects published in BITRATE_INFO_AVAILABLE.
                 * To use automatic ABR, the ID will be "auto".
                 *
                 * @event OO.EVENTS#SET_TARGET_BITRATE
                 */
                SET_TARGET_BITRATE: 'setTargetBitrate',

                /**
                 * The current playing bitrate has changed. The handler is called with the stream object
                 * which includes the following and only the following:
                 *   <ul>
                 *     <li>bitrate: The bitrate in bits per second. (number)</li>
                 *     <li>height: The vertical resolution of the stream. (number)</li>
                 *     <li>width: The horizontal resolution of the stream. (number)</li>
                 *     <li>id: A unique identifier for the stream. (string).</li>
                 *   </ul>
                 * If the player is using automatic ABR, it should publish a stream object with an ID of "auto" and bitrate set to 0.
                 *
                 * <p>For more information see
                 * <a href="http://support.ooyala.com/developers/documentation/concepts/encodingsettings_videobitrate.html" target="target">Video Bit Rate</a>.</p>
                 * @event OO.EVENTS#BITRATE_CHANGED
                 * @public
                 */
                BITRATE_CHANGED: 'bitrateChanged',

                /**
                 * The current playing bitrate has changed. The handler is called with the stream object
                 *
                 * <p>For more information see
                 * <a href="http://support.ooyala.com/developers/documentation/concepts/encodingsettings_videobitrate.html" target="target">Video Bit Rate</a>.</p>
                 * @event OO.EVENTS#SEND_QUALITY_CHANGE
                 * @public
                 */
                SEND_QUALITY_CHANGE : 'receiveVideoQualityChangeEvent',

                /**
                 * Lists the available closed caption information including languages and locale.
                 *
                 * Provide the following arguments:
                 * <ul>
                 *   <li>object containing:
                 *     <ul>
                 *       <li><code>languages</code>: (array) a list of available languages.</li>
                 *       <li><code>locale</code>: (object) contains language names by id. For example, <code>{en:"English", fr:"FranÃ§ais", sp:"EspaÃ±ol"}</code>.</li>
                 *     </ul>
                 *   </li>
                 * </ul>
                 *
                 * @event OO.EVENTS#CLOSED_CAPTIONS_INFO_AVAILABLE
                 * @public
                 */
                CLOSED_CAPTIONS_INFO_AVAILABLE: 'closedCaptionsInfoAvailable',

                /**
                 * Sets the closed captions language to use.  To remove captions, specify <code>"none"</code> as the language.
                 *
                 * Provide the following arguments:
                 * <ul>
                 *   <li>string specifying the language in which the captions appear.
                 *   </li>
                 * </ul>
                 *
                 * @event OO.EVENTS#SET_CLOSED_CAPTIONS_LANGUAGE
                 * @public
                 */
                SET_CLOSED_CAPTIONS_LANGUAGE: 'setClosedCaptionsLanguage',


                /**
                 * Raised when closed caption text is changed at a point in time.
                 *
                 * Provide the following arguments:
                 * <ul>
                 *   <li>TBD
                 *   </li>
                 * </ul>
                 *
                 * @event OO.EVENTS#CLOSED_CAPTION_CUE_CHANGED
                 * @private
                 */
                CLOSED_CAPTION_CUE_CHANGED: 'closedCaptionCueChanged',


                /**
                 * Raised when asset dimensions become available.
                 *
                 * Provide the following arguments in an object:
                 * <ul>
                 *   <li>width: the width of the asset (number)
                 *   </li>
                 *   <li>height: the height of the asset (number)
                 *   </li>
                 *   <li>videoId: the id of the video (string)
                 *   </li>
                 * </ul>
                 *
                 * @event OO.EVENTS#ASSET_DIMENSION
                 * @public
                 */
                ASSET_DIMENSION: 'assetDimension',

                SCRUBBING: 'scrubbing',
                SCRUBBED: 'scrubbed',

                /**
                 * A request to perform a seek has occurred. The playhead is requested to move to
                 * a specific location, specified in milliseconds. The handler is called with the position to which to seek.<br/><br/>
                 *
                 *
                 * @event OO.EVENTS#SEEK
                 * @public
                 */
                SEEK: 'seek',

                /**
                 * The player has finished seeking the main video to the requested position.
                 * The handler is called with the following arguments:
                 * <ul>
                 *   <li>The current time of the video after seeking.</li>
                 * </ul>
                 *
                 *
                 * @event OO.EVENTS#SEEKED
                 * @public
                 */
                SEEKED: 'seeked',

                /**
                 * A request to perform a seek to the live point has occurred. The playhead is requested to move to
                 * the live point location. The handler is called as a seek with the position to seek equal to the video duration.<br/><br/>
                 *
                 *
                 * @event OO.EVENTS#LIVE_BUTTON_CLICKED
                 * @public
                 */
                LIVE_BUTTON_CLICKED : 'liveButtonClicked',

                /**
                 * A playback request has been made. <br/><br/>
                 *
                 *
                 * @event OO.EVENTS#PLAY
                 * @public
                 */
                PLAY: 'play',

                PLAYING: 'playing',
                PLAY_FAILED: 'playFailed',

                /**
                 * A player pause has been requested. <br/><br/>
                 *
                 *
                 * @event OO.EVENTS#PAUSE
                 * @public
                 */
                PAUSE: 'pause',

                /**
                 * The player was paused. If a PAUSE event is fired by the Ad Manager,
                 * the <code>"pauseForAdPlayback"</code> parameter is included as an argument.<br/><br/>
                 *
                 *
                 * @event OO.EVENTS#PAUSED
                 * @public
                 */
                PAUSED: 'paused',

                /**
                 * The video and asset were played. The handler is called with the arguments that were passed.<br/><br/>
                 *
                 *
                 * @event OO.EVENTS#PLAYED
                 * @public
                 */
                PLAYED: 'played',

                SHOULD_DISPLAY_CUE_POINTS: 'shouldDisplayCuePoints',
                INSERT_CUE_POINT: 'insertCuePoint',
                RESET_CUE_POINTS: 'resetCuePoints',

                /**
                 * This event is triggered before a change is made to the full screen setting of the player.
                 * The handler is called with <code>true</code> if the full screen setting will be enabled,
                 * and is called with <code>false</code> if the full screen setting will be disabled.
                 *
                 *
                 * @event OO.EVENTS#WILL_CHANGE_FULLSCREEN
                 * @public
                 */
                WILL_CHANGE_FULLSCREEN: 'willChangeFullscreen',

                /**
                 * The fullscreen state has changed. Depending on the context, the handler is called with:
                 * <ul>
                 *   <li><code>isFullscreen</code> and <code>paused</code>:</li>
                 *     <ul>
                 *       <li><code>isFullscreen</code> is set to <code>true</code> or <code>false</code>.</li>
                 *       <li><code>isFullscreen</code> and <code>paused</code> are each set to <code>true</code> or <code>false</code>.</li>
                 *     </ul>
                 *   </li>
                 *   <li>The id of the video that has entered fullscreen (as defined by the module that controls it).
                 * </ul>
                 *
                 *
                 * @event OO.EVENTS#FULLSCREEN_CHANGED
                 * @public
                 */
                FULLSCREEN_CHANGED: 'fullscreenChanged',

                /**
                 * The screen size has changed. This event can also be triggered by a screen orientation change for handheld devices.
                 * Depending on the context, the handler is called with:
                 *   <ul>
                 *     <li>The width of the player.</li>
                 *     <li>The height of the player.</li>
                 *   </ul>
                 *
                 *
                 * @event OO.EVENTS#SIZE_CHANGED
                 * @public
                 */
                SIZE_CHANGED: 'sizeChanged',

                /**
                 * A request to change volume has been made.
                 * The handler is called with the following arguments:
                 * <ul>
                 *   <li>The desired volume of the video element.</li>
                 *   <li>The id of the video on which to change the volume (as defined by the module that controls it).
                 *        If null or undefined, all video elements volume will be changed</li>
                 * </ul>
                 *
                 *
                 * @event OO.EVENTS#CHANGE_VOLUME
                 * @public
                 */
                CHANGE_VOLUME: 'changeVolume',

                /**
                 * The volume has changed. The handler is called with the current volume, which has a value between 0 and 1, inclusive.<br/><br/>
                 *
                 *
                 * @event OO.EVENTS#VOLUME_CHANGED
                 * @public
                 */
                VOLUME_CHANGED: 'volumeChanged',

                /**
                 * Controls are shown.<br/><br/>
                 *
                 *
                 * @event OO.EVENTS#CONTROLS_SHOWN
                 * @public
                 */
                CONTROLS_SHOWN: 'controlsShown',

                /**
                 * Controls are hidden.<br/><br/>
                 *
                 *
                 * @event OO.EVENTS#CONTROLS_HIDDEN
                 * @public
                 */
                CONTROLS_HIDDEN: 'controlsHidden',
                END_SCREEN_SHOWN: 'endScreenShown',

                /**
                 * Request change to closed caption language.<br/><br/>
                 *
                 *
                 * @event OO.EVENTS#CHANGE_CLOSED_CAPTION_LANGUAGE
                 * @public
                 */
                CHANGE_CLOSED_CAPTION_LANGUAGE: 'changeClosedCaptionLanguage',

                /**
                 * An error has occurred. The handler is called with a JSON object that always includes an error code field,
                 * and may also include other error-specific fields.<br/><br/>
                 *
                 *
                 * @event OO.EVENTS#ERROR
                 * @public
                 */
                ERROR: 'error',

                /**
                 * The player is currently being destroyed, and anything created by your module must also be deleted.
                 * After the destruction is complete, there is nothing left to send an event.
                 * Any plugin that creates or has initialized any long-living logic should listen to this event and clean up that logic.
                 * <br/><br/>
                 *
                 *
                 * @event OO.EVENTS#DESTROY
                 * @public
                 */
                DESTROY: 'destroy',

                WILL_PLAY_FROM_BEGINNING: 'willPlayFromBeginning',

                DISABLE_PLAYBACK_CONTROLS: 'disablePlaybackControls',
                ENABLE_PLAYBACK_CONTROLS: 'enablePlaybackControls',


                // Video Controller action events

                /**
                 * Denotes that the video controller is ready for playback to be triggered.
                 * @event OO.EVENTS#VC_READY
                 * @public
                 */
                VC_READY: 'videoControllerReady',

                /**
                 * Commands the video controller to create a video element.
                 * Provide the following arguments:
                 * <ul>
                 *   <li><code>videoId (string)</code>
                 *   </li>
                 *   <li>streams (object) containing:
                 *     <ul>
                 *       <li>Encoding type (string) as key defined in OO.VIDEO.ENCODINGS
                 *       </li>
                 *       <li>Key-value pair (object) as value containing:
                 *         <ul>
                 *           <li>url (string): Url of the stream</li>
                 *           <li>drm (object): Denoted by type of DRM with data as value object containing:
                 *             <ul>
                 *               <li>Type of DRM (string) as key (ex. "widevine", "fairplay", "playready")</li>
                 *               <li>DRM specific data (object) as value</li>
                 *             </ul>
                 *           </li>
                 *         </ul>
                 *       </li>
                 *     </ul>
                 *   </li>
                 *   <li>parentContainer of the element. This is a jquery element. (object)
                 *   </li>
                 *   <li>optional params object (object) containing:
                 *     <ul>
                 *       <li><code>closedCaptions</code>: (object) The possible closed captions available on this video. Permitted values: <code>null (default), closedCaptions</code>.</li>
                 *       <li><code>crossorigin</code>: The crossorigin attribute value to set on the video. Permitted values: <code>null (default), "anonymous"</code>.</li>
                 *       <li><code>technology</code>: The core video technology required (string) (ex. OO.VIDEO.TECHNOLOGY.HTML5)</li>
                 *       <li><code>features</code>: The video plugin features required (string) (ex. OO.VIDEO.FEATURE.CLOSED_CAPTIONS)</li>
                 *     </ul>
                 *   </li>
                 * </ul>
                 * @event OO.EVENTS#VC_CREATE_VIDEO_ELEMENT
                 * @public
                 */
                VC_CREATE_VIDEO_ELEMENT: 'videoControllerCreateVideoElement',

                /**
                 * A message to be interpreted by the Video Controller to update the URL of the stream for an element.
                 * The handler is called with the following arguments:
                 * <ul>
                 *   <li>The name of the element who's URL is being altered</li>
                 *   <li>The new url to be used</li>
                 * </ul>
                 * @event OO.EVENTS#VC_UPDATE_ELEMENT_STREAM
                 * @public
                 */
                VC_UPDATE_ELEMENT_STREAM: 'videoControllerUpdateElementStream',

                /**
                 * The Video Controller has created the desired video element, as denoted by id (string).
                 * The handler is called with the following arguments:
                 * <ul>
                 *   <li>Object containing:
                 *     <ul>
                 *       <li><code>videoId</code>: The id of the video as defined by the module that controls it.</li>
                 *       <li><code>encodings</code>: The encoding types supported by the new video element.</li>
                 *       <li><code>parent</code>: The parent element of the video element.</li>
                 *       <li><code>domId</code>: The DOM id of the video element.</li>
                 *       <li><code>videoElement</code>: The video element or its wrapper as created by the video plugin.</li>
                 *     </ul>
                 *   </li>
                 * </ul>
                 * @event OO.EVENTS#VC_VIDEO_ELEMENT_CREATED
                 * @public
                 */
                VC_VIDEO_ELEMENT_CREATED: 'videoControllerVideoElementCreated',

                /**
                 * Commands the Video Controller to bring a video element into the visible range given the video element id (string).
                 * The handler is called with the following arguments:
                 * <ul>
                 *   <li>The id of the video to focus (as defined by the module that controls it).</li>
                 * </ul>
                 * @event OO.EVENTS#VC_FOCUS_VIDEO_ELEMENT
                 * @public
                 */
                VC_FOCUS_VIDEO_ELEMENT: 'videoControllerFocusVideoElement',

                /**
                 * The Video Controller has moved a video element (string) into focus.
                 * The handler is called with the following arguments:
                 * <ul>
                 *   <li>The id of the video that is in focus (as defined by the module that controls it).</li>
                 * </ul>
                 * @event OO.EVENTS#VC_VIDEO_ELEMENT_IN_FOCUS
                 * @public
                 */
                VC_VIDEO_ELEMENT_IN_FOCUS: 'videoControllerVideoElementInFocus',

                /**
                 * The Video Controller has removed a video element (string) from focus.
                 * The handler is called with the following arguments:
                 * <ul>
                 *   <li>The id of the video that lost focus (as defined by the module that controls it).</li>
                 * </ul>
                 * @event OO.EVENTS#VC_VIDEO_ELEMENT_LOST_FOCUS
                 * @public
                 */
                VC_VIDEO_ELEMENT_LOST_FOCUS: 'videoControllerVideoElementLostFocus',

                /**
                 * Commands the Video Controller to dispose a video element given the video element id (string).
                 * @event OO.EVENTS#VC_DISPOSE_VIDEO_ELEMENT
                 * @public
                 */
                VC_DISPOSE_VIDEO_ELEMENT: 'videoControllerDisposeVideoElement',

                /**
                 * The Video Controller has disposed the denoted video element (string).
                 * The handler is called with the following arguments:
                 * <ul>
                 *   <li>The id of the video that was disposed (as defined by the module that controls it).</li>
                 * </ul>
                 * @event OO.EVENTS#VC_VIDEO_ELEMENT_DISPOSED
                 * @public
                 */
                VC_VIDEO_ELEMENT_DISPOSED: 'videoControllerVideoElementDisposed',

                /**
                 * Commands the video controller to set the stream for a video element.
                 * It should be given the video element name (string) and an object of streams denoted by encoding type (object).
                 * @event OO.EVENTS#VC_SET_VIDEO_STREAMS
                 * @public
                 */
                VC_SET_VIDEO_STREAMS: 'videoControllerSetVideoStreams',

                /**
                 * The Video Controller has encountered an error attempting to configure video elements.
                 * The handler is called with the following arguments:
                 * <ul>
                 *   <li>The id of the video that encountered the error (as defined by the module that controls it).</li>
                 *   <li>The error details (object) containing an error code.</li>
                 * @event OO.EVENTS#VC_ERROR
                 * @public
                 */
                VC_ERROR: 'videoControllerError',


                // Video Player action events

                /**
                 * Sets the video element's initial playback time.
                 * @event OO.EVENTS#VC_SET_INITIAL_TIME
                 * @public
                 */
                VC_SET_INITIAL_TIME: 'videoSetInitialTime',

                /**
                 * Commands the video element to play.
                 * The handler is called with the following arguments:
                 * <ul>
                 *   <li>The id of the video to play (as defined by the module that controls it).</li>
                 * </ul>
                 * @event OO.EVENTS#VC_PLAY
                 * @public
                 */
                VC_PLAY: 'videoPlay',

                /**
                 * The video element has been initialized and deferred command to play is unblocked
                 * The handler is called with the following arguments:
                 * <ul>
                 *   <li>The id of the video that is will be played (as defined by the module that controls it).</li>
                 * </ul>
                 * @event OO.EVENTS#VC_CAN_PLAY
                 * @public
                 */
                VC_CAN_PLAY: 'videoCanPlay',

                /**
                 * The video element has detected a command to play and will begin playback.
                 * The handler is called with the following arguments:
                 * <ul>
                 *   <li>The id of the video to seek (as defined by the module that controls it).</li>
                 *   <li>The url of the video that will play.</li>
                 * </ul>
                 * @event OO.EVENTS#VC_WILL_PLAY
                 * @public
                 */
                VC_WILL_PLAY: 'videoWillPlay',

                /**
                 * The video element has detected playback in progress.
                 * The handler is called with the following arguments:
                 * <ul>
                 *   <li>The id of the video that is playing (as defined by the module that controls it).</li>
                 * </ul>
                 * @event OO.EVENTS#VC_PLAYING
                 * @public
                 */
                VC_PLAYING: 'videoPlaying',

                /**
                 * The video element has detected playback completion.
                 * The handler is called with the following arguments:
                 * <ul>
                 *   <li>The id of the video that has played (as defined by the module that controls it).</li>
                 * </ul>
                 * @event OO.EVENTS#VC_PLAYED
                 * @public
                 */
                VC_PLAYED: 'videoPlayed',

                /**
                 * The video element has detected playback failure.
                 * The handler is called with the following arguments:
                 * <ul>
                 *   <li>The id of the video that has played (as defined by the module that controls it).</li>
                 *   <li>The error code of the failure (string).</li>
                 * </ul>
                 * @event OO.EVENTS#VC_PLAY_FAILED
                 * @public
                 */
                VC_PLAY_FAILED: 'videoPlayFailed',

                /**
                 * Commands the video element to pause.
                 * The handler is called with the following arguments:
                 * <ul>
                 *   <li>The id of the video to pause (as defined by the module that controls it).</li>
                 *   <li>Optional string indicating the reason for the pause.  Supported values include:
                 *     <ul>
                 *       <li>"transition" indicates that a pause was triggered because a video is going into or out of focus.</li>
                 *       <li>null or undefined for all other cases.</li>
                 *     </ul>
                 *   </li>
                 * </ul>
                 * @event OO.EVENTS#VC_PAUSE
                 * @public
                 */
                VC_PAUSE: 'videoPause',

                /**
                 * The video element has detected video state change to paused.
                 * The handler is called with the following arguments:
                 * <ul>
                 *   <li>The id of the video that has paused (as defined by the module that controls it).</li>
                 * </ul>
                 * @event OO.EVENTS#VC_PAUSED
                 * @public
                 */
                VC_PAUSED: 'videoPaused',

                /**
                 * Commands the video element to seek.
                 * The handler is called with the following arguments:
                 * <ul>
                 *   <li>The id of the video to seek (as defined by the module that controls it).</li>
                 *   <li>The time position to seek to (in seconds).</li>
                 * </ul>
                 * @event OO.EVENTS#VC_SEEK
                 * @public
                 */
                VC_SEEK: 'videoSeek',

                /**
                 * The video element has detected seeking.
                 * The handler is called with the following arguments:
                 * <ul>
                 *   <li>The id of the video that is seeking (as defined by the module that controls it).</li>
                 * </ul>
                 * @event OO.EVENTS#VC_SEEKING
                 * @public
                 */
                VC_SEEKING: 'videoSeeking',

                /**
                 * The video element has detected seeked.
                 * The handler is called with the following arguments:
                 * <ul>
                 *   <li>The id of the video that has seeked (as defined by the module that controls it).</li>
                 *   <li>The current time of the video after seeking.</li>
                 * </ul>
                 * @event OO.EVENTS#VC_SEEKED
                 * @public
                 */
                VC_SEEKED: 'videoSeeked',

                /**
                 * Commands the video element to preload.
                 * @event OO.EVENTS#VC_PRELOAD
                 * @public
                 */
                VC_PRELOAD: 'videoPreload',

                /**
                 * Commands the video element to reload.
                 * @event OO.EVENTS#VC_RELOAD
                 * @public
                 */
                VC_RELOAD: 'videoReload',

                /**
                 * Commands the video controller to prepare all video elements for playback.  This event should be
                 * called on a click event and used to enable api-control on html5-based video elements.
                 * @event OO.EVENTS#VC_PRIME_VIDEOS
                 * @public
                 */
                VC_PRIME_VIDEOS: 'videoPrimeVideos',

                /**
                 * Notifies the player of tags (such as ID3) encountered during video playback.
                 * The handler is called with the following arguments:
                 * <ul>
                 *   <li>The id of the video that has paused (as defined by the module that controls it). (string)</li>
                 *   <li>The type of metadata tag found, such as ID3. (string)</li>
                 *   <li>The metadata. (string|object)</li>
                 * </ul>
                 * @event OO.EVENTS#VC_TAG_FOUND
                 * @public
                 */
                VC_TAG_FOUND: 'videoTagFound',

                WILL_FETCH_ADS: 'willFetchAds',
                DISABLE_SEEKING: 'disableSeeking',
                ENABLE_SEEKING: 'enableSeeking',

                /**
                 * This event is triggered before an ad is played. Depending on the context, the handler is called with:
                 *   <ul>
                 *     <li>The duration of the ad.</li>
                 *     <li>The ID of the ad.</li>
                 *   </ul>
                 *
                 *
                 * <h5>Analytics:</h5>
                 * <p style="text-indent: 1em;"Triggers an <b>Ad Analytics</b> <code>AD_IMPRESSION</code> event.</p>
                 *
                 * @event OO.EVENTS#WILL_PLAY_ADS
                 * @public
                 */
                WILL_PLAY_ADS: 'willPlayAds',
                WILL_PLAY_SINGLE_AD: 'willPlaySingleAd',
                WILL_PAUSE_ADS: 'willPauseAds',
                WILL_RESUME_ADS: 'willResumeAds',

                /**
                 * This event is triggered to indicate that a non-linear ad will be played.  The handler is called with:
                 *   <ul>
                 *     <li>An object representing the ad.  For a definition, see class 'Ad' from the ad manager framework.</li>
                 *   </ul>
                 *
                 * @event OO.EVENTS#WILL_PLAY_NONLINEAR_AD
                 */
                WILL_PLAY_NONLINEAR_AD: 'willPlayNonlinearAd',

                /**
                 * A non-linear ad will play now.  The handler is called with:
                 *   <ul>
                 *     <li>An object containing the following fields:</li>
                 *     <ul>
                 *       <li>ad: An object representing the ad.  For a definition, see class 'Ad' from the ad manager framework.</li>
                 *       <li>url: [optional] The url of the nonlinear ad.</li>
                 *     </ul>
                 *   </ul>
                 *
                 * @event OO.EVENTS#PLAY_NONLINEAR_AD
                 */
                PLAY_NONLINEAR_AD: 'playNonlinearAd',

                /**
                 * A set of ads have been played. Depending on the context, the handler is called with:
                 *   <ul>
                 *     <li>The duration of the ad.</li>
                 *     <li>The ID of the item to play.</li>
                 *   </ul>
                 *
                 *
                 * @event OO.EVENTS#ADS_PLAYED
                 * @public
                 */
                ADS_PLAYED: 'adsPlayed',

                SINGLE_AD_PLAYED: 'singleAdPlayed',

                /**
                 * This event is triggered when an error has occurred with an ad. <br/><br/>
                 *
                 *
                 * @event OO.EVENTS#ADS_ERROR
                 * @public
                 */
                ADS_ERROR: 'adsError',

                /**
                 * This event is triggered when an ad has been clicked. <br/><br/>
                 *
                 *
                 * @event OO.EVENTS#ADS_CLICKED
                 * @public
                 */
                ADS_CLICKED: 'adsClicked',

                FIRST_AD_FETCHED: "firstAdFetched",
                AD_CONFIG_READY: "adConfigReady",

                /**
                 * This event is triggered before the companion ads are shown.
                 * Companion ads are displayed on a customer page and are not displayed in the player.
                 * This event notifies the page handler to display the specified ad, and is the only means by which companion ads can appear.
                 * If the page does not handle this event, companion ads will not appear.
                 * Depending on the context, the handler is called with:
                 *   <ul>
                 *     <li>The ID of all companion ads.</li>
                 *     <li>The ID of a single companion ad.</li>
                 *   </ul>
                 *
                 *
                 * <h5>Analytics:</h5>
                 * <p style="text-indent: 1em;"Triggers an <b>Ad Analytics</b> <code>AD_IMPRESSION</code> event.</p>
                 *
                 * @event OO.EVENTS#WILL_SHOW_COMPANION_ADS
                 * @public
                 */
                WILL_SHOW_COMPANION_ADS: "willShowCompanionAds",
                AD_FETCH_FAILED: "adFetchFailed",

                MIDROLL_PLAY_FAILED: "midrollPlayFailed",
                SKIP_AD: "skipAd",
                UPDATE_AD_COUNTDOWN: "updateAdCountdown",

                // this player is part of these experimental variations
                REPORT_EXPERIMENT_VARIATIONS: "reportExperimentVariations",

                FETCH_STYLE: "fetchStyle",
                STYLE_FETCHED: "styleFetched",
                SET_STYLE: "setStyle",

                USE_SERVER_SIDE_HLS_ADS: "useServerSideHlsAds",

                LOAD_ALL_VAST_ADS: "loadAllVastAds",
                ADS_FILTERED: "adsFiltered",
                ADS_MANAGER_HANDLING_ADS: "adsManagerHandlingAds",
                ADS_MANAGER_FINISHED_ADS: "adsManagerFinishedAds",

                // This event contains the information AMC need to know to place the overlay in the correct position.
                OVERLAY_RENDERING: "overlayRendering",

                /**
                 * Event for signaling Ad Marquee rendering:
                 *   <ul>
                 *     <li>Boolean parameter, 'false' to not show ad marquee, 'true' to show ad marquee based on skin config</li>
                 *   </ul>
                 *
                 *
                 * @event OO.EVENTS#SHOW_AD_MARQUEE
                 */
                SHOW_AD_MARQUEE: "showAdMarquee",

                // Window published beforeUnload event. It's still user cancellable.
                /**
                 * The window, document, and associated resources are being unloaded.
                 * The handler is called with <code>true</code> if a page unload has been requested, <code>false</code> otherwise.
                 * This event may be required since some browsers perform asynchronous page loading while the current page is still active,
                 * meaning that the end user loads a page with the Ooyala player, plays an asset, then redirects the page to a new URL they have specified.
                 * Some browsers will start loading the new data while still displaying the player, which will result in an error since the networking has already been reset.
                 * To prevent such false errors, listen to this event and ignore any errors raised after such actions have occurred.
                 * <br/><br/>
                 *
                 *
                 * @event OO.EVENTS#PAGE_UNLOAD_REQUESTED
                 * @public
                 */
                PAGE_UNLOAD_REQUESTED: "pageUnloadRequested",
                // Either 1) The page is refreshing (almost certain) or 2) The user tried to refresh
                // the page, the embedding page had an "Are you sure?" prompt, the user clicked
                // on "stay", and a real error was produced due to another reason during the
                // following few seconds. The real error, if any, will be received in some seconds.
                // If we are certain it has unloaded, it's too late to be useful.
                PAGE_PROBABLY_UNLOADING: "pageProbablyUnloading",

                // DiscoveryApi publishes these, OoyalaAnalytics listens for them and propagates to reporter.js
                REPORT_DISCOVERY_IMPRESSION: "reportDiscoveryImpression",
                REPORT_DISCOVERY_CLICK: "reportDiscoveryClick",

                /**
                 * Denotes that the playlist plugin is ready and has configured the playlist Pod(s).
                 * @event OO.EVENTS#PLAYLISTS_READY
                 * @public
                 */
                PLAYLISTS_READY: 'playlistReady',

                /**
                 * The UI layer has finished its initial render. The handler is called with an object
                 * of the following structure:
                 *
                 * <ul>
                 *   <li>videoWrapperClass: The class name of the element containing the UI layer</li>
                 *   <li>pluginsClass: The class name of the element into which the plugins content should be inserted</li>
                 * </ul>
                 *
                 * If the UI layer doesn't require any special handling, the values for these two keys will be null.
                 *
                 * @event OO.EVENTS#UI_READY
                 */
                UI_READY: "uiReady",

                __end_marker : true
            };

            /**
             * @description Represents the Ooyala V4 Player Errors. Use message bus events to handle errors by subscribing to the <code>OO.EVENTS.ERROR</code> event.
             * For more information, see <a href="http://support.ooyala.com/developers/documentation/concepts/errors_overview.html" target="target">Errors and Error Handling Overview</a>.
             * @summary Represents the Ooyala V4 Player Errors.
             * @namespace OO.ERROR
             * @public
             */
            OO.ERROR = {
                /**
                 * @description Represents the <code>OO.ERROR.API</code> Ooyala V4 Player Errors. Use message bus events to handle errors by subscribing to the <code>OO.EVENTS.ERROR</code> event.
                 * For more information, see <a href="http://support.ooyala.com/developers/documentation/concepts/errors_overview.html" target="target">Errors and Error Handling Overview</a>.
                 * @summary Represents the <code>OO.ERROR.API</code> Ooyala V4 Player Errors.
                 * @namespace OO.ERROR.API
                 * @public
                 */
                API: {
                    /**
                     * @description <code>OO.ERROR.API.NETWORK ('network')</code>: Cannot contact the server.
                     * @constant OO.ERROR.API.NETWORK
                     * @type {string}
                     * @public
                     */
                    NETWORK:'network',
                    /**
                     * @description Represents the <code>OO.ERROR.API.SAS</code> Ooyala V4 Player Errors for the Stream Authorization Server.
                     * Use message bus events to handle errors by subscribing to the <code>OO.EVENTS.ERROR</code> event.
                     * For more information, see <a href="http://support.ooyala.com/developers/documentation/concepts/errors_overview.html" target="target">Errors and Error Handling Overview</a>.
                     * @summary Represents the <code>OO.ERROR.API.SAS</code> Ooyala V4 Player Errors.
                     * @namespace OO.ERROR.API.SAS
                     * @public
                     */
                    SAS: {
                        /**
                         * @description <code>OO.ERROR.API.SAS.GENERIC ('sas')</code>: Invalid authorization response.
                         * @constant OO.ERROR.API.SAS.GENERIC
                         * @type {string}
                         * @public
                         */
                        GENERIC:'sas',
                        /**
                         * @description <code>OO.ERROR.API.SAS.GEO ('geo')</code>: This video is not authorized for your location.
                         * @constant OO.ERROR.API.SAS.GEO
                         * @type {string}
                         * @public
                         */
                        GEO:'geo',
                        /**
                         * @description <code>OO.ERROR.API.SAS.DOMAIN ('domain')</code>: This video is not authorized for your domain.
                         * @constant OO.ERROR.API.SAS.DOMAIN
                         * @type {string}
                         * @public
                         */
                        DOMAIN:'domain',
                        /**
                         * @description <code>OO.ERROR.API.SAS.FUTURE ('future')</code>: This video will be available soon.
                         * @constant OO.ERROR.API.SAS.FUTURE
                         * @type {string}
                         * @public
                         */
                        FUTURE:'future',
                        /**
                         * @description <code>OO.ERROR.API.SAS.PAST ('past')</code>: This video is no longer available.
                         * @constant OO.ERROR.API.SAS.PAST
                         * @type {string}
                         * @public
                         */
                        PAST:'past',
                        /**
                         * @description <code>OO.ERROR.API.SAS.DEVICE ('device')</code>: This video is not authorized for playback on this device.
                         * @constant OO.ERROR.API.SAS.DEVICE
                         * @type {string}
                         * @public
                         */
                        DEVICE:'device',
                        /**
                         * @description <code>OO.ERROR.API.SAS.PROXY ('proxy')</code>: An anonymous proxy was detected. Please disable the proxy and retry.
                         * @constant OO.ERROR.API.SAS.PROXY
                         * @type {string}
                         * @public
                         */
                        PROXY:'proxy',
                        /**
                         * @description <code>OO.ERROR.API.SAS.CONCURRENT_STREAM ('concurrent_streams')S</code>: You have exceeded the maximum number of concurrent streams.
                         * @constant OO.ERROR.API.SAS.CONCURRENT_STREAMS
                         * @type {string}
                         * @public
                         */
                        CONCURRENT_STREAMS:'concurrent_streams',
                        /**
                         * @description <code>OO.ERROR.API.SAS.INVALID_HEARTBEAT ('invalid_heartbeat')</code>: Invalid heartbeat response.
                         * @constant OO.ERROR.API.SAS.INVALID_HEARTBEAT
                         * @type {string}
                         * @public
                         */
                        INVALID_HEARTBEAT:'invalid_heartbeat',
                        /**
                         * @description <code>OO.ERROR.API.SAS.ERROR_DEVICE_INVALID_AUTH_TOKEN ('device_invalid_auth_token')</code>: Invalid Ooyala Player token.
                         * @constant OO.ERROR.API.SAS.ERROR_DEVICE_INVALID_AUTH_TOKEN
                         * @type {string}
                         * @public
                         */
                        ERROR_DEVICE_INVALID_AUTH_TOKEN:'device_invalid_auth_token',
                        /**
                         * @description <code>OO.ERROR.API.SAS.ERROR_DEVICE_LIMIT_REACHED ('device_limit_reached')</code>: The device limit has been reached.
                         * The device limit is the maximum number of devices that can be registered with the viewer.
                         * When the number of registered devices exceeds the device limit for the account or provider, this error is displayed.
                         * @constant OO.ERROR.API.SAS.ERROR_DEVICE_LIMIT_REACHED
                         * @type {string}
                         * @public
                         */
                        ERROR_DEVICE_LIMIT_REACHED:'device_limit_reached',
                        /**
                         * @description <code>OO.ERROR.API.SAS.ERROR_DEVICE_BINDING_FAILED ('device_binding_failed')</code>: Device binding failed.
                         * If the number of devices registered is already equal to the number of devices that may be bound for the account,
                         * attempting to register a new device will result in this error.
                         * @constant OO.ERROR.API.SAS.ERROR_DEVICE_BINDING_FAILED
                         * @type {string}
                         * @public
                         */
                        ERROR_DEVICE_BINDING_FAILED:'device_binding_failed',
                        /**
                         * @description <code>OO.ERROR.API.SAS.ERROR_DEVICE_ID_TOO_LONG ('device_id_too_long')</code>: The device ID is too long.
                         * The length limit for the device ID is 1000 characters.
                         * @constant OO.ERROR.API.SAS.ERROR_DEVICE_ID_TOO_LONG
                         * @type {string}
                         * @public
                         */
                        ERROR_DEVICE_ID_TOO_LONG:'device_id_too_long',
                        /**
                         * @description <code>OO.ERROR.API.SAS.ERROR_DRM_RIGHTS_SERVER_ERROR ('drm_server_error')</code>: DRM server error.
                         * @constant OO.ERROR.API.SAS.ERROR_DRM_RIGHTS_SERVER_ERROR
                         * @type {string}
                         * @public
                         */
                        ERROR_DRM_RIGHTS_SERVER_ERROR:'drm_server_error',
                        /**
                         * @description <code>OO.ERROR.API.SAS.ERROR_DRM_GENERAL_FAILURE ('drm_general_failure')</code>: General error with acquiring license.
                         * @constant OO.ERROR.API.SAS.ERROR_DRM_GENERAL_FAILURE
                         * @type {string}
                         * @public
                         */
                        ERROR_DRM_GENERAL_FAILURE:'drm_general_failure',

                        /**
                         * @description <code>OO.ERROR.API.SAS.ERROR_INVALID_ENTITLEMENTS ('invalid_entitlements')</code>: User Entitlement Terminated - Stream No Longer Active for the User.
                         * @constant OO.ERROR.API.SAS.ERROR_INVALID_ENTITLEMENTS
                         * @type {string}
                         * @public
                         */
                        ERROR_INVALID_ENTITLEMENTS:'invalid_entitlements'
                    },
                    /**
                     * @description <code>OO.ERROR.API.CONTENT_TREE ('content_tree')</code>: Invalid Content.
                     * @constant OO.ERROR.API.CONTENT_TREE
                     * @type {string}
                     * @public
                     */
                    CONTENT_TREE:'content_tree',
                    /**
                     * @description <code>OO.ERROR.API.METADATA ('metadata')</code>: Invalid Metadata.
                     * @constant OO.ERROR.API.METADATA
                     * @type {string}
                     * @public
                     */
                    METADATA:'metadata'
                },
                /**
                 * @description Represents the <code>OO.ERROR.PLAYBACK</code> Ooyala V4 Player Errors. Use message bus events to handle errors by subscribing to the <code>OO.EVENTS.ERROR</code> event.
                 * For more information, see <a href="http://support.ooyala.com/developers/documentation/concepts/errors_overview.html" target="target">Errors and Error Handling Overview</a>.
                 * @summary Represents the <code>OO.ERROR.PLAYBACK</code> Ooyala V4 Player Errors.
                 * @namespace OO.ERROR.PLAYBACK
                 * @public
                 */
                PLAYBACK: {
                    /**
                     * @description <code>OO.ERROR.PLAYBACK.GENERIC ('playback')</code>: Could not play the content.
                     * @constant OO.ERROR.PLAYBACK.GENERIC
                     * @type {string}
                     * @public
                     */
                    GENERIC:'playback',
                    /**
                     * @description <code>OO.ERROR.PLAYBACK.STREAM ('stream')</code>: This video is not encoded for your device.
                     * @constant OO.ERROR.PLAYBACK.STREAM
                     * @type {string}
                     * @public
                     */
                    STREAM:'stream',
                    /**
                     * @description <code>OO.ERROR.PLAYBACK.LIVESTREAM ('livestream')</code>: Live stream is off air.
                     * @constant OO.ERROR.PLAYBACK.LIVESTREAM
                     * @type {string}
                     * @public
                     */
                    LIVESTREAM:'livestream',
                    /**
                     * @description <code>OO.ERROR.PLAYBACK.NETWORK ('network_error')</code>: The network connection was temporarily lost.
                     * @constant OO.ERROR.PLAYBACK.NETWORK
                     * @type {string}
                     * @public
                     */
                    NETWORK: 'network_error'
                },
                CHROMECAST: {
                    MANIFEST:'chromecast_manifest',
                    MEDIAKEYS:'chromecast_mediakeys',
                    NETWORK:'chromecast_network',
                    PLAYBACK:'chromecast_playback'
                },
                /**
                 * @description <code>OO.ERROR.UNPLAYABLE_CONTENT ('unplayable_content')</code>: This video is not playable on this player.
                 * @constant OO.ERROR.UNPLAYABLE_CONTENT
                 * @type {string}
                 * @public
                 */
                UNPLAYABLE_CONTENT:'unplayable_content',
                /**
                 * @description <code>OO.ERROR.INVALID_EXTERNAL_ID ('invalid_external_id')</code>: Invalid External ID.
                 * @constant OO.ERROR.INVALID_EXTERNAL_ID
                 * @type {string}
                 * @public
                 */
                INVALID_EXTERNAL_ID:'invalid_external_id',
                /**
                 * @description <code>OO.ERROR.EMPTY_CHANNEL ('empty_channel')</code>: This channel is empty.
                 * @constant OO.ERROR.EMPTY_CHANNEL
                 * @type {string}
                 * @public
                 */
                EMPTY_CHANNEL:'empty_channel',
                /**
                 * @description <code>OO.ERROR.EMPTY_CHANNEL_SET ('empty_channel_set')</code>: This channel set is empty.
                 * @constant OO.ERROR.EMPTY_CHANNEL_SET
                 * @type {string}
                 * @public
                 */
                EMPTY_CHANNEL_SET:'empty_channel_set',
                /**
                 * @description <code>OO.ERROR.CHANNEL_CONTENT ('channel_content')</code>: This channel is not playable at this time.
                 * @constant OO.ERROR.CHANNEL_CONTENT
                 * @type {string}
                 * @public
                 */
                CHANNEL_CONTENT:'channel_content',
                /**
                 * @description Represents the <code>OO.ERROR.VC</code> Ooyala V4 Player Errors for the Video Technology stack.
                 * Use message bus events to handle errors by subscribing to the <code>OO.EVENTS.ERROR</code> event.
                 * For more information, see <a href="http://support.ooyala.com/developers/documentation/concepts/errors_overview.html" target="target">Errors and Error Handling Overview</a>.
                 * @summary Represents the <code>OO.ERROR.VC</code> Ooyala V4 Player Errors.
                 * @namespace OO.ERROR.VC
                 */
                VC: {
                    /**
                     * @description <code>OO.ERROR.VC.UNSUPPORTED_ENCODING ('unsupported_encoding')</code>:
                     *    This device does not have an available decoder for this stream type.
                     * @constant OO.ERROR.VC.UNSUPPORTED_ENCODING
                     * @type {string}
                     */
                    UNSUPPORTED_ENCODING:'unsupported_encoding',

                    /**
                     * @description <code>OO.ERROR.VC.UNABLE_TO_CREATE_VIDEO_ELEMENT ('unable_to_create_video_element')</code>:
                     *    A video element to play the given stream could not be created.
                     * @constant OO.ERROR.VC.UNABLE_TO_CREATE_VIDEO_ELEMENT
                     * @type {string}
                     */
                    UNABLE_TO_CREATE_VIDEO_ELEMENT:'unable_to_create_video_element'
                }
            };

            // All Server-side URLS
            OO.URLS = {
                VAST_PROXY: _.template('http://player.ooyala.com/nuplayer/mobile_vast_ads_proxy?callback=<%=cb%>&embed_code=<%=embedCode%>&expires=<%=expires%>&tag_url=<%=tagUrl%>'),
                EXTERNAL_ID: _.template('<%=server%>/player_api/v1/content_tree/external_id/<%=pcode%>/<%=externalId%>'),
                CONTENT_TREE: _.template('<%=server%>/player_api/v1/content_tree/embed_code/<%=pcode%>/<%=embedCode%>'),
                METADATA: _.template('<%=server%>/player_api/v1/metadata/embed_code/<%=playerBrandingId%>/<%=embedCode%>?videoPcode=<%=pcode%>'),
                SAS: _.template('<%=server%>/player_api/v2/authorization/embed_code/<%=pcode%>/<%=embedCode%>'),
                ANALYTICS: _.template('<%=server%>/reporter.js'),
                THUMBNAILS: _.template('<%=server%>/api/v1/thumbnail_images/<%=embedCode%>'),
                __end_marker : true
            };

            OO.VIDEO = {
                MAIN: "main",
                ADS: "ads",

                /**
                 * @description Represents the <code>OO.VIDEO.ENCODING</code> encoding types.
                 * @summary Represents the <code>OO.VIDEO.ENCODING</code> encoding types.
                 * @namespace OO.VIDEO.ENCODING
                 */
                ENCODING: {
                    /**
                     * @description Represents DRM support for the encoding types.
                     * @summary Represents the <code>OO.VIDEO.ENCODING.DRM</code> encoding types.
                     * @namespace OO.VIDEO.ENCODING.DRM
                     */
                    DRM : {
                        /**
                         * @description <code>OO.VIDEO.ENCODING.DRM.HLS ('hls_drm')</code>:
                         *   An encoding type for drm HLS streams.
                         * @constant OO.VIDEO.ENCODING.DRM.HLS
                         * @type {string}
                         */
                        HLS: "hls_drm",

                        /**
                         * @description <code>OO.VIDEO.ENCODING.DRM.DASH ('dash_drm')</code>:
                         *   An encoding type for drm dash streams.
                         * @constant OO.VIDEO.ENCODING.DRM.DASH
                         * @type {string}
                         */
                        DASH: "dash_drm",
                    },
                    /**
                     * @description <code>OO.VIDEO.ENCODING.AUDIO ('audio')</code>:
                     *   An encoding type for non-drm audio streams.
                     * @constant OO.VIDEO.ENCODING.AUDIO
                     * @type {string}
                     */
                    AUDIO: "audio",

                    /**
                     * @description <code>OO.VIDEO.ENCODING.DASH ('dash')</code>:
                     *   An encoding type for non-drm dash streams (mpd extension).
                     * @constant OO.VIDEO.ENCODING.DASH
                     * @type {string}
                     */
                    DASH: "dash",

                    /**
                     * @description <code>OO.VIDEO.ENCODING.HDS ('hds')</code>:
                     *   An encoding type for non-drm hds streams (hds extension).
                     * @constant OO.VIDEO.ENCODING.HDS
                     * @type {string}
                     */
                    HDS: "hds",

                    /**
                     * @description <code>OO.VIDEO.ENCODING.HLS ('hls')</code>:
                     *   An encoding type for non-drm HLS streams (m3u8 extension).
                     * @constant OO.VIDEO.ENCODING.HLS
                     * @type {string}
                     */
                    HLS: "hls",

                    /**
                     * @description <code>OO.VIDEO.ENCODING.IMA ('ima')</code>:
                     *   A string that represents a video stream that is controlled and configured directly by IMA.
                     * @constant OO.VIDEO.ENCODING.IMA
                     * @type {string}
                     */
                    IMA: "ima",

                    /**
                     * @description <code>OO.VIDEO.ENCODING.PULSE ('pulse')</code>:
                     *   A string that represents a video stream that is controlled and configured directly by Pulse.
                     * @constant OO.VIDEO.ENCODING.PULSE
                     * @type {string}
                     */
                    PULSE: "pulse",

                    /**
                     * @description <code>OO.VIDEO.ENCODING.MP4 ('mp4')</code>:
                     *   An encoding type for non-drm mp4 streams (mp4 extension).
                     * @constant OO.VIDEO.ENCODING.MP4
                     * @type {string}
                     */
                    MP4: "mp4",

                    /**
                     * @description <code>OO.VIDEO.ENCODING.YOUTUBE ('youtube')</code>:
                     *   An encoding type for non-drm youtube streams.
                     * @constant OO.VIDEO.ENCODING.YOUTUBE
                     * @type {string}
                     */
                    YOUTUBE:"youtube",

                    /**
                     * @description <code>OO.VIDEO.ENCODING.RTMP ('rtmp')</code>:
                     *   An encoding type for non-drm rtmp streams.
                     * @constant OO.VIDEO.ENCODING.RTMP
                     * @type {string}
                     */
                    RTMP: "rtmp",

                    /**
                     * @description <code>OO.VIDEO.ENCODING.SMOOTH ('smooth')</code>:
                     *   An encoding type for non-drm smooth streams.
                     * @constant OO.VIDEO.ENCODING.SMOOTH
                     * @type {string}
                     */
                    SMOOTH: "smooth",

                    /**
                     * @description <code>OO.VIDEO.ENCODING.WEBM ('webm')</code>:
                     *   An encoding type for non-drm webm streams (webm extension).
                     * @constant OO.VIDEO.ENCODING.WEBM
                     * @type {string}
                     */
                    WEBM: "webm",

                    /**
                     * @description <code>OO.VIDEO.ENCODING.AKAMAI_HD_VOD ('akamai_hd_vod')</code>:
                     *   An encoding type for akamai hd vod streams.
                     * @constant OO.VIDEO.ENCODING.AKAMAI_HD_VOD
                     * @type {string}
                     */
                    AKAMAI_HD_VOD: "akamai_hd_vod",

                    /**
                     * @description <code>OO.VIDEO.ENCODING.AKAMAI_HD2_VOD_HLS ('akamai_hd2_vod_hls')</code>:
                     *   An encoding type for akamai hd2 vod hls streams.
                     * @constant OO.VIDEO.ENCODING.AKAMAI_HD2_VOD_HLS
                     * @type {string}
                     */
                    AKAMAI_HD2_VOD_HLS: "akamai_hd2_vod_hls",

                    /**
                     * @description <code>OO.VIDEO.ENCODING.AKAMAI_HD2_VOD_HDS ('akamai_hd2_vod_hds')</code>:
                     *   An encoding type for akamai hd2 vod hds streams.
                     * @constant OO.VIDEO.ENCODING.AKAMAI_HD2_VOD_HDS
                     * @type {string}
                     */
                    AKAMAI_HD2_VOD_HDS: "akamai_hd2_vod_hds",

                    /**
                     * @description <code>OO.VIDEO.ENCODING.AKAMAI_HD2_HDS ('akamai_hd2_hds')</code>:
                     *   An encoding type for akamai hd2 live/remote hds streams.
                     * @constant OO.VIDEO.ENCODING.AKAMAI_HD2_HDS
                     * @type {string}
                     */
                    AKAMAI_HD2_HDS: "akamai_hd2_hds",

                    /**
                     * @description <code>OO.VIDEO.ENCODING.AKAMAI_HD2_HLS ('akamai_hd2_hls')</code>:
                     *   An encoding type for akamai hd2 live hls streams.
                     * @constant OO.VIDEO.ENCODING.AKAMAI_HD2_HLS
                     * @type {string}
                     */
                    AKAMAI_HD2_HLS: "akamai_hd2_hls",

                    /**
                     * @description <code>OO.VIDEO.ENCODING.FAXS_HLS ('faxs_hls')</code>:
                     *   An encoding type for adobe faxs streams.
                     * @constant OO.VIDEO.ENCODING.FAXS_HLS
                     * @type {string}
                     */
                    FAXS_HLS: "faxs_hls",

                    /**
                     * @description <code>OO.VIDEO.ENCODING.WIDEVINE_HLS ('wv_hls')</code>:
                     *   An encoding type for widevine hls streams.
                     * @constant OO.VIDEO.ENCODING.WIDEVINE_HLS
                     * @type {string}
                     */
                    WIDEVINE_HLS: "wv_hls",

                    /**
                     * @description <code>OO.VIDEO.ENCODING.WIDEVINE_MP4 ('wv_mp4')</code>:
                     *   An encoding type for widevine mp4 streams.
                     * @constant OO.VIDEO.ENCODING.WIDEVINE_MP4
                     * @type {string}
                     */
                    WIDEVINE_MP4: "wv_mp4",

                    /**
                     * @description <code>OO.VIDEO.ENCODING.WIDEVINE_WVM ('wv_wvm')</code>:
                     *   An encoding type for widevine wvm streams.
                     * @constant OO.VIDEO.ENCODING.WIDEVINE_WVM
                     * @type {string}
                     */
                    WIDEVINE_WVM: "wv_wvm",

                    /**
                     * @description <code>OO.VIDEO.ENCODING.UNKNOWN ('unknown')</code>:
                     *   An encoding type for unknown streams.
                     * @constant OO.VIDEO.ENCODING.UNKNOWN
                     * @type {string}
                     */
                    UNKNOWN: "unknown"
                },

                /**
                 * @description Represents the <code>OO.VIDEO.FEATURE</code> feature list. Used to denote which
                 * features are supported by a video player.
                 * @summary Represents the <code>OO.VIDEO.FEATURE</code> feature list.
                 * @namespace OO.VIDEO.FEATURE
                 */
                FEATURE: {
                    /**
                     * @description <code>OO.VIDEO.FEATURE.CLOSED_CAPTIONS ('closedCaptions')</code>:
                     *   Closed captions parsed by the video element and sent to the player.
                     * @constant OO.VIDEO.FEATURE.CLOSED_CAPTIONS
                     * @type {string}
                     */
                    CLOSED_CAPTIONS: "closedCaptions",

                    /**
                     * @description <code>OO.VIDEO.FEATURE.VIDEO_OBJECT_SHARING_GIVE ('videoObjectSharingGive')</code>:
                     *   The video object is accessible and can be found by the player via the DOM element id.  Other
                     *   modules can use this video object if required.
                     * @constant OO.VIDEO.FEATURE.VIDEO_OBJECT_SHARING_GIVE
                     * @type {string}
                     */
                    VIDEO_OBJECT_SHARING_GIVE: "videoObjectSharingGive",

                    /**
                     * @description <code>OO.VIDEO.FEATURE.VIDEO_OBJECT_SHARING_TAKE ('videoObjectSharingTake')</code>:
                     *   The video object used can be created external from this video plugin.  This plugin will use the
                     *   existing video element as its own.
                     * @constant OO.VIDEO.FEATURE.VIDEO_OBJECT_SHARING_TAKE
                     * @type {string}
                     */
                    VIDEO_OBJECT_SHARING_TAKE: "videoObjectSharingTake",

                    /**
                     * @description <code>OO.VIDEO.FEATURE.BITRATE_CONTROL ('bitrateControl')</code>:
                     *   The video object allows the playing bitrate to be selected via the SET_TARGET_BITRATE event.
                     *   The video controller must publish BITRATE_INFO_AVAILABLE with a list of bitrate objects that can be selected.
                     *   The video controller must publish BITRATE_CHANGED events with the bitrate object that was switched to.
                     *   A bitrate object should at minimum contain height, width, and bitrate properties. Height and width
                     *   should be the vertical and horizontal resoluton of the stream and bitrate should be in bits per second.
                     * @constant OO.VIDEO.FEATURE.BITRATE_CONTROL
                     * @type {string}
                     */
                    BITRATE_CONTROL: "bitrateControl"
                },

                /**
                 * @description Represents the <code>OO.VIDEO.TECHNOLOGY</code> core video technology.
                 * @summary Represents the <code>OO.VIDEO.TECHNOLOGY</code> core technology of the video element.
                 * @namespace OO.VIDEO.TECHNOLOGY
                 */
                TECHNOLOGY: {
                    /**
                     * @description <code>OO.VIDEO.TECHNOLOGY.FLASH ('flash')</code>:
                     *   The core video technology is based on Adobe Flash.
                     * @constant OO.VIDEO.TECHNOLOGY.FLASH
                     * @type {string}
                     */
                    FLASH: "flash",

                    /**
                     * @description <code>OO.VIDEO.TECHNOLOGY.HTML5 ('html5')</code>:
                     *   The core video technology is based on the native html5 'video' tag.
                     * @constant OO.VIDEO.TECHNOLOGY.HTML5
                     * @type {string}
                     */
                    HTML5: "html5",

                    /**
                     * @description <code>OO.VIDEO.TECHNOLOGY.MIXED ('mixed')</code>:
                     *   The core video technology used may be based on any one of multiple core technologies.
                     * @constant OO.VIDEO.TECHNOLOGY.MIXED
                     * @type {string}
                     */
                    MIXED: "mixed",

                    /**
                     * @description <code>OO.VIDEO.TECHNOLOGY.OTHER ('other')</code>:
                     *   The video is based on a core video technology that doesn't fit into another classification
                     *   found in <code>OO.VIDEO.TECHNOLOGY</code>.
                     * @constant OO.VIDEO.TECHNOLOGY.OTHER
                     * @type {string}
                     */
                    OTHER: "other"
                }

            };

            OO.CSS = {
                VISIBLE_POSITION : "0px",
                INVISIBLE_POSITION : "-100000px",
                VISIBLE_DISPLAY : "block",
                INVISIBLE_DISPLAY : "none",
                VIDEO_Z_INDEX: 10000,
                SUPER_Z_INDEX: 20000,
                ALICE_SKIN_Z_INDEX: 11000,
                OVERLAY_Z_INDEX: 10500,
                TRANSPARENT_COLOR : "rgba(255, 255, 255, 0)",

                __end_marker : true
            };

            OO.TEMPLATES = {
                RANDOM_PLACE_HOLDER: ['[place_random_number_here]', '<now>', '[timestamp]', '<rand-num>', '[cache_buster]', '[random]'],
                REFERAK_PLACE_HOLDER: ['[referrer_url]', '[LR_URL]'],
                EMBED_CODE_PLACE_HOLDER: ['[oo_embedcode]'],
                MESSAGE : '\
                  <table width="100%" height="100%" bgcolor="black" style="padding-left:55px; padding-right:55px; \
                  background-color:black; color: white;">\
                  <tbody>\
                  <tr valign="middle">\
                  <td align="right"><span style="font-family:Arial; font-size:20px">\
                  <%= message %>\
                  </span></td></tr></tbody></table>\
                  ',
                __end_marker : true
            };

            OO.CONSTANTS = {
                // Ad frequency constants
                AD_PLAY_COUNT_KEY: "oo_ad_play_count",
                AD_ID_TO_PLAY_COUNT_DIVIDER: ":",
                AD_PLAY_COUNT_DIVIDER: "|",
                MAX_AD_PLAY_COUNT_HISTORY_LENGTH: 20,

                CONTROLS_BOTTOM_PADDING: 10,

                SEEK_TO_END_LIMIT: 4,

                CLOSED_CAPTIONS: {
                    SHOWING: "showing",
                    HIDDEN: "hidden",
                    DISABLED: "disabled"
                },

                OOYALA_PLAYER_SETTINGS_KEY: 'ooyala_player_settings',

                __end_marker : true
            };

        }(OO,OO._));

        (function(OO) {
            // place holder for all text resource key
            OO.TEXT = {
                ADS_COUNTDOWN: 'adsCountdown',
                ADS_COUNTDOWN_SECONDS: 'adsCountdownSeconds',
                LIVE: 'LIVE',

                __end_marker: true
            };

        }(OO));

        (function(OO) {
            OO.MESSAGES = {
                EN: {},
                ES: {},
                FR: {},
                JA: {}
            };

            var en = OO.MESSAGES.EN;
            var es = OO.MESSAGES.ES;
            var fr = OO.MESSAGES.FR;
            var ja = OO.MESSAGES.JA;

            // ENGLISH
            en[OO.ERROR.API.NETWORK] = "Cannot Contact Server";
            en[OO.ERROR.API.SAS.GENERIC] = "Invalid Authorization Response";
            en[OO.ERROR.API.SAS.GEO] = "This video is not authorized in your location";
            en[OO.ERROR.API.SAS.DOMAIN] = "This video is not authorized for your domain";
            en[OO.ERROR.API.SAS.FUTURE] = "This video will be available soon";
            en[OO.ERROR.API.SAS.PAST] = "This video is no longer available";
            en[OO.ERROR.API.SAS.DEVICE] = "This video is not authorized for playback on this device";
            en[OO.ERROR.API.SAS.PROXY] = "An anonymous proxy was detected. Please disable the proxy and retry.";
            en[OO.ERROR.API.SAS.CONCURRENT_STREAMS] = "You have exceeded the maximum number of concurrent streams";
            en[OO.ERROR.API.SAS.INVALID_HEARTBEAT] = "Invalid heartbeat response";
            en[OO.ERROR.API.SAS.ERROR_INVALID_ENTITLEMENTS] = "User Entitlement Terminated - Stream No Longer Active for the User";
            en[OO.ERROR.API.CONTENT_TREE] = "Invalid Content";
            en[OO.ERROR.API.METADATA] = "Invalid Metadata";
            en[OO.ERROR.PLAYBACK.GENERIC] = "Could not play the content";
            en[OO.ERROR.PLAYBACK.STREAM] = "This video isn't encoded for your device";
            en[OO.ERROR.PLAYBACK.LIVESTREAM] = "Live stream is off air";
            en[OO.ERROR.PLAYBACK.NETWORK] = "Network connection temporarily lost";
            en[OO.ERROR.UNPLAYABLE_CONTENT] = "This video is not playable on this player";
            en[OO.ERROR.INVALID_EXTERNAL_ID] = "Invalid External ID";
            en[OO.ERROR.EMPTY_CHANNEL] = "This channel is empty";
            en[OO.ERROR.EMPTY_CHANNEL_SET] = "This channel set is empty";
            en[OO.ERROR.CHANNEL_CONTENT] = "This channel is not playable at this time";
            en[OO.ERROR.VC_PLAY_FAILED] = "This video is not encoded for your device";
            en[OO.TEXT.ADS_COUNTDOWN] = "Advertisement: Your Video will resume shortly";
            en[OO.TEXT.ADS_COUNTDOWN_SECONDS] = "Advertisement: Your Video will resume in <%= time %> <%= seconds %>";
            en[OO.TEXT.LIVE] = "LIVE";

            // SPANISH
            es[OO.ERROR.API.NETWORK] = "No se puede contactar al servidor";
            es[OO.ERROR.API.SAS.GENERIC] = "Respuesta de autorizaciÃ³n no vÃ¡lida";
            es[OO.ERROR.API.SAS.GEO] = "El vÃ­deo no estÃ¡ autorizado en su ubicaciÃ³n";
            es[OO.ERROR.API.SAS.DOMAIN] = "El vÃ­deo no estÃ¡ autorizado para su dominio";
            es[OO.ERROR.API.SAS.FUTURE] = "El vÃ­deo estarÃ¡ disponible pronto";
            es[OO.ERROR.API.SAS.PAST] = "El vÃ­deo ya no estÃ¡ disponible";
            es[OO.ERROR.API.SAS.DEVICE] = "El vÃ­deo no estÃ¡ autorizado para reproducirse en este dispositivo";
            es[OO.ERROR.API.SAS.PROXY] = "Se detectÃ³ un proxy anÃ³nimo. Deshabilite el proxy e intente nuevamente.";
            es[OO.ERROR.API.SAS.CONCURRENT_STREAMS] = "Ha superado la cantidad mÃ¡xima de transmisiones concurrentes";
            es[OO.ERROR.API.SAS.INVALID_HEARTBEAT] = "Respuesta de pulso no vÃ¡lida";
            es[OO.ERROR.API.SAS.ERROR_INVALID_ENTITLEMENTS] = "La suscripciÃ³n del usuario a terminado - El video ya no estÃ¡ disponible para el usuario";
            es[OO.ERROR.API.CONTENT_TREE] = "Contenido no vÃ¡lido";
            es[OO.ERROR.API.METADATA] = "Metadatos no vÃ¡lidos";
            es[OO.ERROR.PLAYBACK.GENERIC] = "No se pudo reproducir el contenido";
            es[OO.ERROR.PLAYBACK.STREAM] = "El vÃ­deo no estÃ¡ codificado para su dispositivo";
            es[OO.ERROR.PLAYBACK.LIVESTREAM] = "La transmisiÃ³n en vivo estÃ¡ fuera del aire";
            es[OO.ERROR.PLAYBACK.NETWORK] = "La conexiÃ³n de red se halla temporalmente perdida";
            es[OO.ERROR.UNPLAYABLE_CONTENT] = "El vÃ­deo no se puede reproducir en este reproductor";
            es[OO.ERROR.INVALID_EXTERNAL_ID] = "ID externo no vÃ¡lido";
            es[OO.ERROR.EMPTY_CHANNEL] = "El canal estÃ¡ vacÃ­o";
            es[OO.ERROR.EMPTY_CHANNEL_SET] = "El conjunto de canales estÃ¡ vacÃ­o";
            es[OO.ERROR.CHANNEL_CONTENT] = "El canal no se puede reproducir en este momento";
            es[OO.ERROR.VC_PLAY_FAILED] = "El vÃ­deo no estÃ¡ codificado para su dispositivo";
            es[OO.TEXT.ADS_COUNTDOWN] = "Anuncio: el vÃ­deo se reanudarÃ¡ en breve";
            es[OO.TEXT.LIVE] = "EN VIVO";

            // FRENCH
            fr[OO.ERROR.API.NETWORK] = "Impossible de contacter le serveur";
            fr[OO.ERROR.API.SAS.GENERIC] = "RÃ©ponse d'autorisation non valide";
            fr[OO.ERROR.API.SAS.GEO] = "Cette vidÃ©o n'est pas autorisÃ©e dans votre pays";
            fr[OO.ERROR.API.SAS.DOMAIN] = "Cette vidÃ©o n'est pas autorisÃ©e pour votre domaine";
            fr[OO.ERROR.API.SAS.FUTURE] = "Cette vidÃ©o sera bientÃ´t disponible";
            fr[OO.ERROR.API.SAS.PAST] = "Cette vidÃ©o n'est plus disponible";
            fr[OO.ERROR.API.SAS.DEVICE] = "La lecture de cette vidÃ©o n'est pas autorisÃ©e sur cet appareil";
            fr[OO.ERROR.API.SAS.PROXY] = "Un proxy anonyme a Ã©tÃ© dÃ©tectÃ©. DÃ©sactivez le proxy, puis rÃ©essayez.";
            fr[OO.ERROR.API.SAS.CONCURRENT_STREAMS] = "Vous avez dÃ©passÃ© le nombre maximum de flux simultanÃ©s.";
            fr[OO.ERROR.API.SAS.INVALID_HEARTBEAT] = "RÃ©ponse du signal de pulsation ('heartbeat') non valide";
            fr[OO.ERROR.API.CONTENT_TREE] = "Contenu non valide";
            fr[OO.ERROR.API.METADATA] = "MÃ©tadonnÃ©es non valides";
            fr[OO.ERROR.PLAYBACK.GENERIC] = "Impossible de lire le contenu";
            fr[OO.ERROR.PLAYBACK.STREAM] = "Cette vidÃ©o n'est pas encodÃ©e pour votre appareil";
            fr[OO.ERROR.PLAYBACK.LIVESTREAM] = "Le flux direct a Ã©tÃ© interrompu";
            fr[OO.ERROR.PLAYBACK.NETWORK] = "Connexion au rÃ©seau temporairement interrompue";
            fr[OO.ERROR.UNPLAYABLE_CONTENT] = "Vous ne pouvez pas lire cette vidÃ©o sur ce lecteur";
            fr[OO.ERROR.INVALID_EXTERNAL_ID] = "Identifiant externe non valide";
            fr[OO.ERROR.EMPTY_CHANNEL] = "Cette chaÃ®ne est vide";
            fr[OO.ERROR.EMPTY_CHANNEL_SET] = "Ce groupe de chaÃ®nes est vide";
            fr[OO.ERROR.CHANNEL_CONTENT] = "Vous ne pouvez pas lire cette chaÃ®ne pour le moment";
            fr[OO.ERROR.VC_PLAY_FAILED] = "Cette vidÃ©o n'est pas encodÃ©e pour votre appareil";
            fr[OO.TEXT.ADS_COUNTDOWN] = "PublicitÃ© : votre vidÃ©o reprendra bientÃ´t";
            fr[OO.TEXT.LIVE] = "EN DIRECT";

            // JAPANESE
            ja[OO.ERROR.API.NETWORK] = "å¾Œã§ã”ç¢ºèªãã ã•ã„ã€‚";
            ja[OO.ERROR.API.SAS.GENERIC] = "ãƒ“ãƒ‡ã‚ªã‚’èªè¨¼ã§ãã¾ã›ã‚“ã€‚";
            ja[OO.ERROR.API.SAS.GEO] = "ã“ã®åœ°åŸŸã§ã¯ã“ã®ãƒ“ãƒ‡ã‚ªã¯è¨±å¯ã•ã‚Œã¦ã„ã¾ã›ã‚“ã€‚";
            ja[OO.ERROR.API.SAS.DOMAIN] = "ãŠä½¿ã„ã®ãƒ‰ãƒ¡ã‚¤ãƒ³ã§ã¯ã“ã®ãƒ“ãƒ‡ã‚ªã¯è¨±å¯ã•ã‚Œã¦ã„ã¾ã›ã‚“ã€‚";
            ja[OO.ERROR.API.SAS.FUTURE] = "ã“ã®ãƒ“ãƒ‡ã‚ªã¯ã—ã°ã‚‰ãã™ã‚‹ã¨å†ç”Ÿå¯èƒ½ã«ãªã‚Šã¾ã™ã€‚";
            ja[OO.ERROR.API.SAS.PAST] = "ã“ã®ãƒ“ãƒ‡ã‚ªã¯ã€æ—¢ã«å¾¡åˆ©ç”¨ã„ãŸã ã‘ã¾ã›ã‚“ã€‚";
            ja[OO.ERROR.API.SAS.DEVICE] = "ã“ã®ãƒ“ãƒ‡ã‚ªã¯ã€ã“ã®ãƒ‡ãƒã‚¤ã‚¹ã§ã®å†ç”Ÿã¯è¨±å¯ã•ã‚Œã¦ã„ã¾ã›ã‚“ã€‚";
            ja[OO.ERROR.API.SAS.CONCURRENT_STREAMS] = "æœ€å¤§åŒæ™‚æŽ¥ç¶šæ•°ã‚’è¶…ãˆã¦ã„ã¾ã™ã€‚";
            ja[OO.ERROR.API.SAS.INVALID_HEARTBEAT] = "åŒæ™‚å†ç”Ÿã‚¹ãƒˆãƒªãƒ¼ãƒ ã®æœ€å¤§æ•°ã«é”ã—ã¾ã—ãŸã€‚";
            ja[OO.ERROR.API.CONTENT_TREE] = "ä¸æ­£ãªã‚³ãƒ³ãƒ†ãƒ³ãƒ„ã§ã™ã€‚";
            ja[OO.ERROR.API.METADATA] = "ä¸æ­£ãªãƒ¡ã‚¿ãƒ‡ãƒ¼ã‚¿ã§ã™ã€‚";
            ja[OO.ERROR.PLAYBACK.GENERIC] = "ã“ã®ã‚³ãƒ³ãƒ†ãƒ³ãƒ„ã‚’å†ç”Ÿã§ãã¾ã›ã‚“ã§ã—ãŸã€‚";
            ja[OO.ERROR.PLAYBACK.STREAM] = "ã“ã®ãƒ“ãƒ‡ã‚ªã¯ã€ãŠä½¿ã„ã®ãƒ‡ãƒã‚¤ã‚¹å‘ã‘ã«ã‚¨ãƒ³ã‚³ãƒ¼ãƒ‰ã•ã‚Œã¦ã„ã¾ã›ã‚“ã€‚";
            ja[OO.ERROR.PLAYBACK.LIVESTREAM] = "ãƒ©ã‚¤ãƒ–é…ä¿¡ã¯ã•ã‚Œã¦ãŠã‚Šã¾ã›ã‚“ã€‚";
            ja[OO.ERROR.PLAYBACK.NETWORK] = "ãƒãƒƒãƒˆãƒ¯ãƒ¼ã‚¯ã«ä¸€æ™‚çš„ã«æŽ¥ç¶šã§ãã¾ã›ã‚“ã€‚";
            ja[OO.ERROR.UNPLAYABLE_CONTENT] = "ã“ã®ãƒ“ãƒ‡ã‚ªã¯ã€ã“ã®ãƒ—ãƒ¬ãƒ¼ãƒ¤ãƒ¼ã§ã¯å†ç”Ÿã§ãã¾ã›ã‚“ã€‚";
            ja[OO.ERROR.INVALID_EXTERNAL_ID] = "External IDãŒä¸æ­£ã§ã™ã€‚";
            ja[OO.ERROR.EMPTY_CHANNEL] = "ã“ã®ãƒãƒ£ãƒ³ãƒãƒ«ã¯ç©ºã§ã™ã€‚";
            ja[OO.ERROR.EMPTY_CHANNEL_SET] = "ã“ã®ãƒãƒ£ãƒ³ãƒãƒ«ã‚»ãƒƒãƒˆã¯ç©ºã§ã™ã€‚";
            ja[OO.ERROR.CHANNEL_CONTENT] = "ã“ã®ãƒãƒ£ãƒ³ãƒãƒ«ã¯ã€ç¾åœ¨å†ç”Ÿã§ãã¾ã›ã‚“ã€‚";
            ja[OO.ERROR.VC_PLAY_FAILED] = "ã“ã®ãƒ“ãƒ‡ã‚ªã¯ã€ãŠä½¿ã„ã®ãƒ‡ãƒã‚¤ã‚¹å‘ã‘ã«ã‚¨ãƒ³ã‚³ãƒ¼ãƒ‰ã•ã‚Œã¦ã„ã¾ã›ã‚“ã€‚";
            ja[OO.TEXT.ADS_COUNTDOWN] = "åºƒå‘Šï¼š";
            ja[OO.TEXT.ADS_COUNTDOWN_SECONDS] = "åºƒå‘Š: <%= time %>æ•°ç§’å¾Œã«ãƒ“ãƒ‡ã‚ªã®å†ç”ŸãŒé–‹å§‹ã—ã¾ã™";
            ja[OO.TEXT.LIVE] = "ãƒ©ã‚¤ãƒ–";
            OO.getLocalizedMessage = function(code) {
                var language = OO.getLocale();
                return (OO.MESSAGES[language] ? OO.MESSAGES[language][code] : undefined) ||
                    OO.MESSAGES.EN[code] ||
                    "";
            };
        }(OO));

        (function(OO) {
            OO.stylus_css = {
                'root.styl' : "#<%= elementId %>>div{width:0;height:0;position:relative;z-index:10000;overflow:hidden}#<%= elementId %> .innerWrapper{background:#000;text-align:left}#<%= elementId %> .innerWrapper:-webkit-full-screen{width:100%;height:100%}#<%= elementId %> .innerWrapper:-webkit-full-screen video{width:100%}#<%= elementId %> .innerWrapper.fullscreen{position:fixed;top:0;left:0;width:100%;height:100%;background:#fff}#<%= elementId %> .oo_playhead{-ms-touch-action:none}",
                __end_marker:1 };
        }(OO));

        OO.VERSION.core.rev='b92f1d4473bfa4b8108790762a600b7199e1929c';


        (function(OO) {
            OO.get_css = function(cssName) {
                if (!OO.stylus_css || !cssName) { return null; }
                return OO.stylus_css[cssName + ".styl"];
            };

        }(OO));
        (function(OO,_,$) {
            OO.getRandomString = function() { return Math.random().toString(36).substring(7); };

            OO.safeClone = function(source) {
                if (_.isNumber(source) || _.isString(source) || _.isBoolean(source) || _.isFunction(source) ||
                    _.isNull(source) || _.isUndefined(source)) {
                    return source;
                }
                var result = (source instanceof Array) ? [] : {};
                try {
                    $.extend(true, result, source);
                } catch(e) { OO.log("deep clone error", e); }
                return result;
            };

            OO.d = function() {
                if (OO.isDebug) { OO.log.apply(OO, arguments); }
                OO.$("#OOYALA_DEBUG_CONSOLE").append(JSON.stringify(OO.safeClone(arguments))+'<br>');
            };

            // Note: This inherit only for simple inheritance simulation, the Parennt class still has a this binding
            // to the parent class. so any variable initiated in the Parent Constructor, will not be available to the
            // Child Class, you need to copy paste constructor to Child Class to make it work.
            // coffeescript is doing a better job here by binding the this context to child in the constructor.
            // Until we switch to CoffeeScript, we need to be careful using this simplified inherit lib.
            OO.inherit = function(ParentClass, myConstructor) {
                if (typeof(ParentClass) !== "function") {
                    OO.log("invalid inherit, ParentClass need to be a class", ParentClass);
                    return null;
                }
                var SubClass = function() {
                    ParentClass.apply(this, arguments);
                    if (typeof(myConstructor) === "function") { myConstructor.apply(this, arguments); }
                };
                var parentClass = new ParentClass();
                OO._.extend(SubClass.prototype, parentClass);
                SubClass.prototype.parentClass = parentClass;
                return SubClass;
            };

            var styles = {}; // keep track of all styles added so we can remove them later if destroy is called

            OO.attachStyle = function(styleContent, playerId) {
                var s = $('<style type="text/css">' + styleContent + '</style>').appendTo("head");
                styles[playerId] = styles[playerId] || [];
                styles[playerId].push(s);
            };

            OO.removeStyles = function(playerId) {
                OO._.each(styles[playerId], function(style) {
                    style.remove();
                });
            };

            // object: object to get the inner property for, ex. {"mod":{"fw":{"data":{"key":"val"}}}}
            // keylist: list of keys to find, ex. ["mod", "fw", "data"]
            // example output: {"key":"val"}
            OO.getInnerProperty = function(object, keylist) {
                var innerObject = object;
                var list = keylist;
                while (list.length > 0) {
                    var key = list.shift();
                    // Note that function and arrays are objects
                    if (_.isNull(innerObject) || !_.isObject(innerObject) ||
                        _.isFunction(innerObject) || _.isArray(innerObject)) {
                        return null;
                    }
                    innerObject = innerObject[key];
                }
                return innerObject;
            };

            OO.formatSeconds = function(timeInSeconds) {
                var seconds = parseInt(timeInSeconds,10) % 60;
                var hours = parseInt(timeInSeconds / 3600, 10);
                var minutes = parseInt((timeInSeconds - hours * 3600) / 60, 10);


                if (hours < 10) {
                    hours = '0' + hours;
                }

                if (minutes < 10) {
                    minutes = '0' + minutes;
                }

                if (seconds < 10) {
                    seconds = '0' + seconds;
                }

                return (parseInt(hours,10) > 0) ? (hours + ":" + minutes + ":" + seconds) : (minutes + ":" + seconds);
            };

            OO.timeStringToSeconds = function(timeString) {
                var timeArray = (timeString || '').split(":");
                return _.reduce(timeArray, function(m, s) { return m * 60 + parseInt(s, 10); }, 0);
            };

            OO.leftPadding = function(num, totalChars) {
                var pad = '0';
                var numString = num ? num.toString() : '';
                while (numString.length < totalChars) {
                    numString = pad + numString;
                }
                return numString;
            };

            OO.getColorString = function(color) {
                return '#' + (OO.leftPadding(color.toString(16), 6)).toUpperCase();
            };

            OO.hexToRgb = function(hex) {
                var r = (hex & 0xFF0000) >> 16;
                var g = (hex & 0xFF00) >> 8;
                var b = (hex & 0xFF);
                return [r, g, b];
            };

            OO.changeColor = function(color, ratio, darker) {
                var minmax     = darker ? Math.max : Math.min;
                var boundary = darker ? 0 : 255;
                var difference = Math.round(ratio * 255) * (darker ? -1 : 1);
                var rgb = OO.hexToRgb(color);
                return [
                    OO.leftPadding(minmax(rgb[0] + difference, boundary).toString(16), 2),
                    OO.leftPadding(minmax(rgb[1] + difference, boundary).toString(16), 2),
                    OO.leftPadding(minmax(rgb[2] + difference, boundary).toString(16), 2)
                ].join('');
            };

            OO.decode64 = function(s) {
                s = s.replace(/\n/g,"");
                var results = "";
                var j, i = 0;
                var enc = [];
                var b64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";

                //shortcut for browsers with atob
                if (window.atob) {
                    return atob(s);
                }

                do {
                    for (j = 0; j < 4; j++) {
                        enc[j] = b64.indexOf(s.charAt(i++));
                    }
                    results += String.fromCharCode((enc[0] << 2) | (enc[1] >> 4),
                        enc[2] == 64 ? 0 : ((enc[1] & 15) << 4) | (enc[2] >> 2),
                        enc[3] == 64 ? 0 : ((enc[2] & 3) << 6) | enc[3]);
                } while (i < s.length);

                //trim tailing null characters
                return results.replace(/\0/g, "");
            };

            OO.pixelPing = function (url) {
                var img = new Image();
                img.onerror = img.onabort = function() { OO.d("onerror:", url); };
                img.src = OO.getNormalizedTagUrl(url);
            };

            // ping array of urls.
            OO.pixelPings = function (urls) {
                if (_.isEmpty(urls)) { return; }
                _.each(urls, function(url) {
                    OO.pixelPing(url);
                }, this);
            };

            // helper function to convert types to boolean
            // the (!!) trick only works to verify if a string isn't the empty string
            // therefore, we must use a special case for that
            OO.stringToBoolean = function(value) {
                if (typeof value === 'string') {
                    return (value.toLowerCase().indexOf("true") > -1 || value.toLowerCase().indexOf("yes") > -1);
                }
                return !!value;
            }

            OO.regexEscape = function(value) {
                var specials = /[<>()\[\]{}]/g;
                return value.replace(specials, "\\$&");
            };

            OO.getNormalizedTagUrl = function (url, embedCode) {
                var ts = new Date().getTime();
                var pageUrl = escape(document.URL);

                var placeHolderReplace = function (template, replaceValue) {
                    _.each(template, function (placeHolder) {
                        var regexSearchVal = new RegExp("(" +
                            OO.regexEscape(placeHolder) + ")", 'gi');
                        url = url.replace(regexSearchVal, replaceValue);
                    }, this);
                }

                // replace the timestamp and referrer_url placeholders
                placeHolderReplace(OO.TEMPLATES.RANDOM_PLACE_HOLDER, ts);
                placeHolderReplace(OO.TEMPLATES.REFERAK_PLACE_HOLDER, pageUrl);

                // first make sure that the embedCode exists, then replace the
                // oo_embedcode placeholder
                if (embedCode) {
                    placeHolderReplace(OO.TEMPLATES.EMBED_CODE_PLACE_HOLDER, embedCode);
                }
                return url;
            };

            OO.safeSeekRange = function(seekRange) {
                return {
                    start : seekRange.length > 0 ? seekRange.start(0) : 0,
                    end : seekRange.length > 0 ? seekRange.end(0) : 0
                };
            };

            OO.loadedJS = OO.loadedJS || {};

            OO.jsOnSuccessList = OO.jsOnSuccessList || {};

            OO.safeFuncCall = function(fn) {
                if (typeof fn !== "function") { return; }
                try {
                    fn.apply();
                } catch (e) {
                    OO.log("Can not invoke function!", e);
                }
            };

            OO.loadScriptOnce = function(jsSrc, successCallBack, errorCallBack, timeoutInMillis) {
                OO.jsOnSuccessList[jsSrc] = OO.jsOnSuccessList[jsSrc] || [];
                if (OO.loadedJS[jsSrc]) {
                    // invoke call back directly if loaded.
                    if (OO.loadedJS[jsSrc] === "loaded") {
                        OO.safeFuncCall(successCallBack);
                    } else if (OO.loadedJS[jsSrc] === "loading") {
                        OO.jsOnSuccessList[jsSrc].unshift(successCallBack);
                    }
                    return false;
                }
                OO.loadedJS[jsSrc] = "loading";
                $.ajax({
                    url: jsSrc,
                    type: 'GET',
                    cache: true,
                    dataType: 'script',
                    timeout: timeoutInMillis || 15000,
                    success: function() {
                        OO.loadedJS[jsSrc] = "loaded";
                        OO.jsOnSuccessList[jsSrc].unshift(successCallBack);
                        OO._.each(OO.jsOnSuccessList[jsSrc], function(fn) {
                            OO.safeFuncCall(fn);
                        }, this);
                        OO.jsOnSuccessList[jsSrc] = [];
                    },
                    error: function() {
                        OO.safeFuncCall(errorCallBack);
                    }
                });
                return true;
            };

            try {
                OO.localStorage = window.localStorage;
            } catch (err) {
                OO.log(err);
            }
            if (!OO.localStorage) {
                OO.localStorage = {
                    getItem: function (sKey) {
                        if (!sKey || !this.hasOwnProperty(sKey)) { return null; }
                        return unescape(document.cookie.replace(new RegExp("(?:^|.*;\\s*)" + escape(sKey).replace(/[\-\.\+\*]/g, "\\$&") + "\\s*\\=\\s*((?:[^;](?!;))*[^;]?).*"), "$1"));
                    },
                    key: function (nKeyId) {
                        return unescape(document.cookie.replace(/\s*\=(?:.(?!;))*$/, "").split(/\s*\=(?:[^;](?!;))*[^;]?;\s*/)[nKeyId]);
                    },
                    setItem: function (sKey, sValue) {
                        if(!sKey) { return; }
                        document.cookie = escape(sKey) + "=" + escape(sValue) + "; expires=Tue, 19 Jan 2038 03:14:07 GMT; path=/";
                        this.length = document.cookie.match(/\=/g).length;
                    },
                    length: 0,
                    removeItem: function (sKey) {
                        if (!sKey || !this.hasOwnProperty(sKey)) { return; }
                        document.cookie = escape(sKey) + "=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/";
                        this.length--;
                    },
                    hasOwnProperty: function (sKey) {
                        return (new RegExp("(?:^|;\\s*)" + escape(sKey).replace(/[\-\.\+\*]/g, "\\$&") + "\\s*\\=")).test(document.cookie);
                    }
                };
                OO.localStorage.length = (document.cookie.match(/\=/g) || OO.localStorage).length;
            }

            // A container to properly request OO.localStorage.setItem
            OO.setItem = function (sKey, sValue) {
                try {
                    OO.localStorage.setItem(sKey, sValue);
                } catch (err) {
                    OO.log(err);
                }
            };

            OO.JSON = window.JSON;

        }(OO, OO._, OO.$));

        (function(OO,_) {

            OO.Emitter  = function(messageBus){
                this.mb = messageBus;
                this._subscribers = {};
            };

            _.extend(OO.Emitter.prototype,  {
                on  : function(eventName, subscriber, callback){
                    this._subscribers[eventName] = this._subscribers[eventName]  || [];
                    this._subscribers[eventName].push({callback: callback, subscriber: subscriber});
                },

                off  : function(eventName, subscriber, callback){
                    this._subscribers[eventName] = _.reject(this._subscribers[eventName] || [], function(elem) {
                        return (elem.callback == callback || callback === undefined) && elem.subscriber === subscriber;
                    });
                },

                trigger  : function(eventName /* , args... */){
                    _.each(this._subscribers[eventName] || [], _.bind(this._triggerSubscriber, this, eventName, arguments));
                    _.each(this._subscribers['*'] || [], _.bind(this._triggerSubscriber, this, eventName, arguments));
                },

                _triggerSubscriber : function(eventName, params, subscriber) {
                    try {
                        subscriber.callback.apply(this,params);
                    } catch (e) {
                        var stack = e.stack || "unavailable";
                        OO.log('Uncaught exception', e, 'Stack', stack,'triggering subscriber', subscriber,
                            'with event',eventName, 'Parameters: ', params);
                    }
                },

                __placeholder:true
            });

        }(OO, OO._));

        (function(OO,_) {
            /**
             * @classdesc Represents the Ooyala V4 Player Message Bus. Use message bus events to subscribe to or publish player events from video to ad playback.
             * <p>When you create an {@link OO.Player} object (for example, <code>myplayer = OO.Player.create(...)</code> ), that object contains a Message Bus object named <code>mb</code>.
             * For example, you would access the <code><a href="#publish">publish()</a></code> method by calling <code>myplayer.mb.publish(...)</code>.</p>
             * @class
             * @public
             */
            OO.MessageBus = function() {
                this._emitter = new OO.Emitter(this);
                this._dependentEmitter = new OO.Emitter(this);
                this._interceptEmitter = new OO.Emitter(this);
                this._interceptArgs = {};
                this._dependentList = {};
                this._blockList = {};
                this._readyEventList = {};
                this._dispatching = false;   // whether message bus is currently dispatching published events
                this._publishingQueue = [];
                this.blockedEvent = {};
                this.blockedParams = {};

                // public properties
                this._messageHistory = [];
                this._tracer = _.bind(this._internalTracer, this);   // default internal tracer

                // add a random ID for debug
                this.MbId = OO.getRandomString();

                this.debug = false;
            };

            _.extend(OO.MessageBus.prototype,  {
                // Adds a tracer function, which will be fired for each published/executed event
                addTracer: function(newTracer) {
                    if(newTracer && _.isFunction(newTracer)) {
                        if(this._tracer) {
                            this._tracer = _.wrap(this._tracer, function(f) { newTracer.apply(this, _.rest(arguments)); });
                        } else {
                            this._tracer = newTracer;
                        }
                    }
                },

                _internalTracer: function() {
                    this._messageHistory.push(_.toArray(arguments));
                },

                messageTraceSnapshot: function() {
                    return _.toArray(this._messageHistory);
                },

                /*
                 * addDependent blocks eventName until dependentEvent fires, at which point onMergeParams will be
                 * called.  This means that eventName MUST be fired before dependentEvent.
                 */
                /**
                 * Enables you to send a publish or subscribe message that is dependent on a condition or event.
                 * For example, you might want to change the UI based on the location or time of day.
                 * This method blocks the event (<code>eventName</code>) until the dependent event (<code>dependentEvent</code>) fires.
                 * For more information and examples of usage, see
                 * <a href="http://support.ooyala.com/developers/documentation/reference/player_v3_dev_listenevent.html" target="target">Listening to a Message Bus Event</a>.
                 *
                 * @method addDependent
                 * @memberOf OO.MessageBus.prototype
                 * @param {String} eventName The name of the event.
                 * @param {String} dependentEvent The name of the event that triggers the specified event name.
                 * @param {String} subscriber The name of the subscriber to which the message bus will publish the event.
                 * @param {function} onMergeParams (Optional) A function used to pass data to the handler for the dependent event.
                 * This function is only necessary if need to complete a computation before passing data to the dependent event handler.
                 * This function can take up to four arguments and returns an array of arguments to be passed into the dependent event listener.
                 * @example
                 *        //  This blocks the PAUSED event from firing until
                 *        // the 'user_allowed_pause' event has fired
                 *        player.mb.addDependent(
                 *          OO.EVENTS.PAUSED,
                 *          'user_allowed_pause',
                 *          'example',
                 *          function(){}
                 *        );
                 * @public
                 */
                addDependent: function(eventName, dependentEvent, subscriber, onMergeParams){
                    // TODO, add a circular detectecion here.
                    if (!eventName || eventName == "" || !dependentEvent || dependentEvent == "") {
                        console.error("MB: addDependent called on message bus from subscriber " + subscriber + " with no event name given.");
                        return;
                    }

                    if (this.debug) {
                        OO.log("MB DEBUG: \'" + eventName + "\' depends on \'" + dependentEvent + "\'. Added by \'" + subscriber + "\'");
                    }

                    this._dependentList[eventName] = this._dependentList[eventName] || [];
                    this._dependentList[eventName].push(dependentEvent);
                    this._blockList[dependentEvent] = this._blockList[dependentEvent] || [];
                    this._blockList[dependentEvent].push(eventName);
                    this.blockedParams[eventName] = [];

                    var onSourceReady = OO._.bind(function(e) {
                        if (this.blockedEvent[e] != 1) {
                            return;
                        }

                        var args = OO.safeClone(_.flatten(arguments));
                        var origParams = OO.safeClone(this.blockedParams[eventName]);
                        args.shift(); origParams.shift();

                        var newArgs = onMergeParams && onMergeParams.apply(this, [eventName, dependentEvent, origParams, args]) || origParams;
                        newArgs = [e].concat(newArgs);
                        delete this.blockedEvent[e];
                        this.blockedParams[e] = [];

                        if (this.debug) {
                            OO.log("MB DEBUG: unblocking \'" + e + "\' because of \'" + dependentEvent + "\' with args ", newArgs);
                        }

                        this._publish.apply(this, newArgs);

                    }, this);

                    this._dependentEmitter.on(eventName, subscriber, onSourceReady);
                },

                /**
                 * Removes all dependencies on event 'source' by event 'target'
                 * @memberOf OO.MessageBus.prototype
                 * @param {string} source The depending event that is blocked
                 * @param {string} target The dependent event that is blocking
                 * @public
                 */
                removeDependent: function(source, target) {
                    if (!source || source == "" || !target || target == "") {
                        console.warn("MB: removeDependent called on message bus with no event name given.");
                        return;
                    }

                    if (this.debug) {
                        OO.log("MB DEBUG: \'" + source + "\' no longer depends on \'" + target + "\'");
                    }

                    this._clearDependent(source, target);
                },

                /**
                 * Enables you to publish events to the message bus.<br/>
                 *
                 * @method publish
                 * @memberOf OO.MessageBus.prototype
                 * @param {String} eventName The name of the event. Comma-separated arguments for the event may follow the event name as needed.
                 * @example myplayer.mb.publish(OO.EVENTS.PLAY);
                 * @example myplayer.mb.publish(OO.EVENTS.WILL_CHANGE_FULLSCREEN,true);
                 * @public
                 */
                publish: function() {
                    if (!arguments || !arguments[0] || arguments[0] == "") {
                        console.error("MB: publish called on message bus with no event name given.");
                        return;
                    }

                    var args = OO.safeClone(_.flatten(arguments));
                    this._publishingQueue.push(args);

                    if (this.debug) {
                        OO.log("MB DEBUG: queueing \'" + arguments[0] + "\' w\/ args", args);
                    }

                    if(!this._dispatching) {
                        this._dispatching = true;
                        var ev = this._publishingQueue.shift();
                        while(ev) {
                            this._publish.apply(this, ev);
                            ev = this._publishingQueue.shift();
                        }
                        this._dispatching = false;
                    }
                },


                _publish: function(eventName) {
                    // queue event here untill all dependency is cleared.
                    // also trigger queued event if there are blocked by this event.
                    this._readyEventList[eventName] = 1;
                    var args = OO.safeClone(_.flatten(arguments));

                    this._interceptEmitter.trigger.apply(this._interceptEmitter, args);
                    if (this._interceptArgs[eventName] === false) { this._interceptArgs[eventName] = true; return; }
                    if (this._interceptArgs[eventName]) {
                        args = _.flatten([eventName, this._interceptArgs[eventName]]);
                    }

                    if(this._tracer && _.isFunction(this._tracer)) {
                        var params = _.flatten(['publish'].concat(args));
                        this._tracer.apply(this._tracer, params);
                    }

                    if (this._noDependency(eventName)) {
                        if (this.debug) {
                            OO.log("MB DEBUG: publishing \'" + eventName + "\' w\/ args ", args);
                        }

                        this._emitter.trigger.apply(this._emitter, args);
                        _.each(this._blockList[eventName], function(e) {
                            this._clearDependent(e, eventName);
                            args[0] = e;
                            this._dependentEmitter.trigger.apply(this._dependentEmitter, args);
                        }, this);
                        delete this._blockList[eventName];
                    } else {
                        if (this.debug) {
                            OO.log("MB DEBUG: blocking \'" + eventName + "\' because of \'" + this._dependentList ? this._dependentList[eventName] : "[null]"  + "\'");
                        }
                        this.blockedEvent[eventName] = 1;
                        this.blockedParams[eventName] = args;
                    }
                },

                /*
                 * eventName is the event to intercept
                 * subscriber is the subscriber
                 * callback returns a list of arguments, not including the eventName
                 */
                /**
                 * Enables you to subscribe to events to the message bus using a callback function that
                 * allows you to manipulate the event payload and name. The returned list of arguments
                 * from the callback can be used in subsequent event triggers. For more information and examples of usage, see
                 * <a href="http://support.ooyala.com/developers/documentation/reference/player_v3_dev_listenevent.html" target="target">Listening to a Message Bus Event</a>.<br/>
                 *
                 * @method intercept
                 * @memberOf OO.MessageBus.prototype
                 * @param {String} eventName The name of the event to intercept.
                 * @param {String} subscriber The name of the subscriber to which the message bus will publish the event.
                 * @param {function} callback A function that returns a list of arguments used in subsequent event triggers.
                 * This allows you to manipulate the event payload and name. To cancel propagation of an event using an intercepter,
                 * return <code>false</code> instead of an array.
                 * @example In the following example we subscribe to the published message bus PLAY event,
                 * specify 'test-plugin' as the subscriber and specify a payload of 'hello'.
                 *
                 * We also include an intercept that swaps the string 'goodbye' into the payload
                 * so that when the message bus publishes the PLAY event, the console outputs 'goodbye' instead of 'hello':
                 *
                 * mb.subscribe(OO.EVENTS.PLAY, "test-plugin", function(eventName, payload) {
       *    console.log(eventName+": "+payload);
       * });
                 *
                 * mb.publish(OO.EVENTS.PLAY, "hello");
                 *
                 * // Console displays "play: hello"
                 *
                 * mb.intercept(OO.EVENTS.PLAY, "test-plugin", function(eventName, payload) {
       *     return ["goodbye"];
       * });
                 *
                 * //   Console displays "play: goodbye"
                 * @private
                 */
                intercept: function(eventName, subscriber, callback) {
                    this._interceptEmitter.on(eventName, subscriber, _.bind(function(e) {
                        if (!eventName || eventName == "") {
                            console.error("MB: intercept called on message bus from subscriber " + subscriber + " with no event name given.");
                            return;
                        }
                        var args = OO.safeClone(_.flatten(arguments));
                        if (this._interceptArgs[eventName] != false) {
                            this._interceptArgs[eventName] = callback.apply(this, args);
                        }
                    }, this));
                    this._interceptArgs[eventName] = [eventName];
                },

                /**
                 * Subscribe to an event published to the message bus.
                 *
                 * @method subscribe
                 * @memberOf OO.MessageBus.prototype
                 * @param {String} eventName The name of the event.
                 * @param {String} subscriber The name of the subscriber to which the message bus will publish the event.
                 * @param {Function} callback The function that will execute when the subscriber receives the event notification.
                 * @example myplayer.mb.subscribe(OO.EVENTS.METADATA_FETCHED, 'example', function(eventName) {});
                 * @example // Subscribes to all events published by the Message Bus
                 * messageBus.subscribe("*", 'example', function(eventName) {});
                 * @public
                 */
                subscribe: function(eventName, subscriber, callback) {
                    // TODO check if it is on the dependent queue, should not allow this action if a event is blocking
                    // other event.
                    if (!eventName || eventName == "") {
                        console.error("MB: subscribe called on message bus from subscriber " + subscriber + " with no event name given.");
                        return;
                    }
                    this._emitter.on(eventName, subscriber, callback);
                },

                /**
                 * Unsubscribes from an event published to the message bus.
                 *
                 * @method unsubscribe
                 * @memberOf OO.MessageBus.prototype
                 * @param {String} eventName The name of the event.
                 * @param {String} subscriber The name of the subscriber to which the message bus will unsubscribe from the event.
                 * @param {Function} callback The function that normally executes when the subscriber receives the event notification.
                 * @example messageBus.unsubscribe(OO.EVENTS.METADATA_FETCHED, 'example', function(eventName) {});
                 * @example // Unsubscribes from all events published by the Message Bus
                 * messageBus.unsubscribe("*", 'example', function(eventName) {});
                 * @public
                 */
                unsubscribe: function(eventName, subscriber, callback) {
                    if (!eventName || eventName == "") {
                        console.error("MB: unsubscribe called on message bus from subscriber " + subscriber + " with no event name given.");
                        return;
                    }
                    this._emitter.off(eventName, subscriber, callback);
                },

                // Start of the private member function, all internal used func will prefix with _

                _noDependency: function(eventName) {
                    if (!this._dependentList[eventName]) { return true; }
                    return (this._dependentList[eventName].length === 0);
                },

                _clearDependent: function(source, target) {
                    var depEvents = this._dependentList[source];
                    this._dependentList[source] = OO._.filter(depEvents, function(e){ return e !== target; }, this);
                },

                /////////////////////
                //// DEBUG TOOLS ////
                /////////////////////

                /**
                 * Start debugging the message bus messages. It will display when dependents are added,
                 * when they are removed, when messages get blocked, when messages are queued
                 * and when they actually get published.
                 *
                 * This is mainly intended to be used in the console when debugging.
                 * @private
                 * @return {string} Message that states debugging has started. (Mostly for console output)
                 */
                startDebug: function() {
                    this.debug = true;
                    return "MB DEBUGGING STARTED";
                },

                /**
                 * Stop debugging the message bus messages.
                 *
                 * This is mainly intended to be used in the console when debugging.
                 * @private
                 * @return {string} Message that states debugging has stopped. (Mostly for console output)
                 */
                stopDebug: function() {
                    this.debug = false;
                    return "MB DEBUGGING STOPPED";
                },

                /**
                 * Return a test formatted string of the dependent messages and which ones are
                 * currently blocked.
                 * @private
                 * @return {string} Formatted string of dependent messages and which ones are blocked.
                 */
                listDependencies: function() {
                    var output = "------------------------------------\n" +
                        "[blocked] Message --> Dependency\n" +
                        "------------------------------------\n"
                    var index;
                    if (this._dependentList) {
                        for (var eventName in this._dependentList) {
                            if (this._dependentList[eventName]) {
                                for (index = 0; index < this._dependentList[eventName].length; index++) {
                                    if (this.blockedEvent[eventName] == 1) {
                                        output += "[blocked]";
                                    }

                                    output += eventName + " --> " + this._dependentList[eventName] + "\n";
                                }
                            }
                        }
                    }

                    output += "------------------------------------";
                    return output;
                }

            });

        }(OO,OO._));

        (function (OO, _) {
            OO.StateMachine = {

                //Based on https://github.com/jakesgordon/javascript-state-machine
                create: function(_cfg) {
                    // validate parameters
                    var cfg = OO.HM.safeObject('statemachine.create.cfg', _cfg);
                    var initial = OO.HM.safeDomId('statemachine.create.cfg.initial', cfg.initial);
                    var fsm = OO.HM.safeObject('statemachine.create.cfg.target', cfg.target, {});
                    var events = OO.HM.safeArrayOfElements('statemachine.create.cfg.events', cfg.events, function(element){ return OO.HM.safeObject('statemachine.create.cfg.events[]', element); }, []);
                    var moduleName = OO.HM.safeString('statemachine.create.cfg.moduleName', cfg.moduleName,"");
                    var mb = OO.HM.safeObject('statemachine.create.cfg.messageBus', cfg.messageBus);

                    var map        = {};
                    var n;

                    fsm.debugTransitions = false;
                    var lastEvent = "";

                    OO.StateMachine.addToActiveList(cfg.moduleName, fsm);

                    var doCallback = function(name) {
                        var f = null;
                        var shortEventName = name.replace(/[^\/]*\//,'').match(/^(.)(.*)/);   // transform xxx/abc into ['abc','a','bc']
                        var shortMethodName = 'on'+shortEventName[1].toUpperCase() + shortEventName[2];
                        if(fsm[shortMethodName]) {
                            f = fsm[shortMethodName];
                        } else {
                            var fullEventName = name.replace(/\/.*/, '').match(/^(.)(.*)/);    // transform xyz/abc into ['xyz','x','yz']
                            var fullMethodName = 'on'+fullEventName[1].toUpperCase() + fullEventName[2] + shortEventName[1].toUpperCase() + shortEventName[2];
                            if(fsm[fullMethodName]) {
                                f = fsm[fullMethodName];
                            }
                        }

                        if (f) {
                            try {
                                var result = f.apply(fsm, arguments);
                                return (result !== false ? 'ok' : 'fail');
                            }
                            catch(e) {
                                OO.log(e);
                                if(OO.TEST_TEST_TEST) {
                                    throw e;  // rethrow in test environment
                                }
                                return 'fail';
                            }
                        }

                        // callback not found
                        return 'not_found';
                    };

                    var add = function(e) {
                        var from = (e.from instanceof Array) ? e.from : (e.from ? [e.from] : ['*']); // allow 'wildcard' transition if 'from' is not specified
                        var n;
                        map[e.name] = map[e.name] || {};
                        for (n = 0 ; n < from.length ; n++) {
                            map[e.name][from[n]] = e.to || from[n]; // allow no-op transition if 'to' is not specified
                        }
                    };

                    fsm.removeEvent = function(eventname) {
                        if (map[eventname]) map[eventname] = null;
                    }

                    fsm.destroyFsm = function() {
                        OO.StateMachine.removeFromActiveList(this.moduleName, this);
                        for (n in map) {
                            mb.unsubscribe(n.toString(), moduleName, fsm.receive);
                        }
                        cfg = null;
                        initial = null;
                        fsm = null;
                        events = null;
                        moduleName = null;
                        mb = null;
                        map = {};
                    };

                    var updateState = function(fsm, state) {
                        if (!fsm || state === "*") { return; } // no op  for * state
                        if (fsm.debugTransitions) {
                            OO.log( "Transition " + (moduleName ? moduleName : "") +
                                "\n  OldState: " + (fsm.currentState ? fsm.currentState : "") +
                                "\n  NewState: " + (state ? state : "") +
                                "\n  CausedBy: " + (lastEvent ? lastEvent : ""));
                        }
                        fsm.currentState = state;
                    };

                    fsm.canReceive = function(event) { return map[event] && (map[event].hasOwnProperty(fsm.currentState) || map[event].hasOwnProperty('*')); };

                    fsm.receive = function(event/*....arguments*/) {
                        //drop events not valid in current state
                        if (!fsm) {
                            return;
                        }
                        if (!fsm.canReceive(event)) {
                            //using arguments[0] instead of event because safari and iOS don't display this nicely in the console.
                            OO.log('dropped event \'' + arguments[0] + '\' for \'' + moduleName + '\' while in state \'' + fsm.currentState + '\' with map:',map);
                            return;
                        }

                        lastEvent = arguments[0];

                        var from  = fsm.currentState;
                        var to    = map[event][from] || map[event]['*'] || from;
                        var n;

                        //handle transition to same state
                        if (from === to) {
                            doCallback.apply(fsm, arguments);
                            return;
                        }

                        updateState(fsm, to);

                        var callbackResult = 'not_found';
                        if(to !== "*") { callbackResult = doCallback.apply(fsm, _.union([to], _.rest(arguments))); }
                        if(callbackResult==='not_found') { callbackResult = doCallback.apply(fsm, arguments); }

                        switch ( callbackResult )  {
                            case 'not_found':
                                OO.log('Module \'' + moduleName + '\' does not handle state \'' + to + '\' or event \'' + arguments[0] + '\'');
                                updateState(fsm, from);
                                break;
                            case 'fail':
                                updateState(fsm, from);
                                break;
                            case 'ok':
                                break;
                        }
                    };

                    for(n = 0 ; n < events.length ; n++) {
                        if(typeof(events[n]) == 'object') {
                            add(events[n]);
                        }
                    }

                    updateState(fsm, initial);
                    if (mb !== undefined) {
                        for(n in map) {
                            mb.subscribe(n.toString(), moduleName, fsm.receive);
                        }
                    }

                    return fsm;
                },

                activeStateMachines: {},

                /**
                 * Adds a StateMachine to the list of currently active state machines.
                 * @public
                 * @method StateMachine#addToActiveList
                 */
                addToActiveList: function(smName, sm)  {
                    if (!this.activeStateMachines[smName]) {
                        this.activeStateMachines[smName] = [];
                    }

                    this.activeStateMachines[smName].push(sm);
                },

                /**
                 * Remove the StateMachine from the list of curently active state machines.
                 * @public
                 * @method StateMachine#removeFromActiveList
                 */
                removeFromActiveList: function(smName, sm) {
                    var list = this.activeStateMachines[smName];
                    if (!list) {
                        return;
                    }

                    for (var index = 0; index < list.length; index++) {
                        if(list[index] === sm) {
                            list.splice(index, 1);
                            break;
                        }
                    }
                },

                /**
                 * Enable debugging state transitions for a particular state machine. If
                 * multiple of the same state machine are active, all of them have debugging
                 * enabled.
                 * @public
                 * @method StateMachine#startDebugTransitionsFor
                 * @return string Message stating whether debugging was succesfully started
                 *           (Mostly for debugging in the console)
                 */
                startDebugTransitionsFor: function(smName) {
                    var result = this.debugTransitionsHelper(smName, true)
                    var msg;
                    if (result) {
                        msg = "STATEMACHINE \'" + smName + "\' DEBUGGING STARTED";
                    } else {
                        msg = "Couldn't find \'" + smName +"\'";
                    }

                    return msg;
                },

                /**
                 * Disable debugging state transitions for a particular state machine. If
                 * multiple of the same state machine are active, all of them have debugging
                 * disabled.
                 * @public
                 * @method StateMachine#stopDebugTransitionsFor
                 * @return string Message stating whether debugging was succesfully stopped
                 *           (Mostly for debugging in the console)
                 */
                stopDebugTransitionsFor: function(smName) {
                    var result = this.debugTransitionsHelper(smName, false)
                    var msg;
                    if (result) {
                        msg = "STATEMACHINE \'" + smName + "\' DEBUGGING STOPPED";
                    } else {
                        msg = "Couldn't find \'" + smName +"\'";
                    }

                    return msg;
                },

                /**
                 * Helper function to enable/disable all statemachines with the specified name.
                 * @private
                 * @method StateMachine#debugTransitionsHelper
                 * @param string smName - name of the statemachine you want to debug
                 * @param boolean enable - whether to turn debugging on or off.
                 * @return boolean True if successfully at least 1 state machine found to enable/disable
                 */
                debugTransitionsHelper: function(smName, enable) {
                    var list = this.activeStateMachines[smName];
                    if (!list) {
                        return false;
                    }

                    for ( var i = 0; i < list.length; i++) {
                        list[i].debugTransitions = enable;
                    }

                    return true;
                },

                /**
                 * Returns a list of active state machines by name along with a count of
                 * how many instances are each state machine are active.
                 * @public
                 * @method StateMachine#getActiveList
                 * @return object An object who's keys are the names of the statemachines and
                 *           the value is the number of active instances of that statemachine.
                 */
                getActiveList: function() {
                    var list = {};
                    for (var smName in this.activeStateMachines) {
                        list[smName] = this.activeStateMachines[smName].length;
                    }
                    return list;
                },

                __end_marker : true,

            };

        }(OO, OO._));

        (function(OO,_, $) {
            /**
             * An array of all registered modules.
             * @field OO#modules
             * @public
             */
            OO.modules = [];

            /**
             * Registers a module to be instantiated with each player.
             * @method OO#registerModule
             * @public
             * @param {string} _moduleName The name of the module
             * @param {object} _moduleClassFacotry A factory for creating an instance of the module
             */
            OO.registerModule = function(_moduleName, _moduleFactoryMethod) {
                // validate params
                var moduleName = OO.HM.safeDomId('moduleName', _moduleName, OO.HM.fixDomId),
                    moduleFactoryMethod = OO.HM.safeFunction('moduleFactoryMethod', _moduleFactoryMethod);

                OO.modules.push({ name: moduleName, factory: moduleFactoryMethod});
            };

            /**
             * Registers a plugin to be instantiated with each player.
             * @method OO#plugin
             * @public
             * @param {string} moduleName The name of the module
             * @param {object} moduleClassFacotry A factory for creating an instance of the module
             */
            OO.plugin = function(moduleName, moduleClassFactory) {
                OO.log("Registered optional plugin: ", moduleName);
                OO.registerModule(moduleName, function(messageBus, id) {
                    // TODO, check if we need to catch any exception here.
                    var moduleClass = moduleClassFactory.apply({}, [OO, OO._, OO.$, window]);
                    var plugin = new moduleClass(messageBus, id);
                    return plugin;
                });
            };

            /**
             * Exposes an API object to the public scope.
             * @method OO#exposeStatieApi
             * @public
             * @param {string} _apiModule The route of the api module
             * @param {object} _apiObject The api object to expose
             */
            OO.exposeStaticApi = function(_apiModule, _apiObject) {
                // validate params
                var apiModule = OO.HM.safeDomId('apiModule', _apiModule),
                    apiObject = OO.HM.safeObject('apiObject', _apiObject);

                OO.publicApi[apiModule] = OO.publicApi[apiModule] || {};
                OO._.extend(OO.publicApi[apiModule], apiObject);
            };
        }(OO, OO._, OO.$));

        (function(OO,_, $) {
            OO.players  = {};

            /**
             * @classdesc Creates and destroys an instance of the Ooyala V4 Player.
             * @class OO.Player
             * @public
             * @param {string} _elementId The DOM id of the element that wraps the player
             * @param {string|object} _asset The asset's Ooyala id or metadata
             * @param {object} _parameters The session parameters
             */
            OO.Player = function(_elementId, _asset, _parameters) {
                // validate params
                // _parameters is optional. Hazmat takes care of this but throws an undesirable warning.
                _parameters = _parameters || {};

                var elementId = OO.HM.safeDomId('Player.create.elementId', _elementId),
                    parameters = OO.HM.safeObject('Player.create.parameters', _parameters, {}),
                    persistentSettings = {"closedCaptionOptions":{}};

                parameters.onCreate = OO.HM.safeFunctionOrNull('Player.create.parameters.onCreate', parameters.onCreate);

                //instance variables
                var mb = new OO.MessageBus();

                $("#" + elementId).html(''); // clear the container for player rendering.

                // Module initialziation
                var modules = OO._.map(OO.modules, function(moduleDefinition) {
                    var id = moduleDefinition.name + '-' + OO.getRandomString();
                    var module = {
                        name: moduleDefinition.name,
                        moduleId: id, // a random id to help debug
                        instance: moduleDefinition.factory(mb, id, parameters)   // Modules Only See MB directly, not the player
                    };
                    OO.log("Loaded plugin", module.moduleId, module);
                    return module;
                });

                // init persistent player settings from local storage
                var localSettings = OO.localStorage.getItem(OO.CONSTANTS.OOYALA_PLAYER_SETTINGS_KEY);
                if (localSettings) {
                    persistentSettings = JSON.parse(localSettings);
                }

                // Api setup
                var playerApi = new OO.PlayerApi(mb, _elementId, modules, parameters, persistentSettings);

                // Destroyal
                mb.subscribe(OO.EVENTS.DESTROY, 'player', _.bind(function(event, embedCode) {
                    $("#" + elementId).empty();
                    delete OO.players[elementId];
                    OO.removeStyles(elementId);

                    // [PBW-459] Call optional destory() callback after DESTROY is complete.
                    playerApi.triggerDestroyCallback();
                }, this));

                // give the creator a chance to initalize itself
                if(_.isFunction(parameters.onCreate)) {
                    parameters.onCreate(playerApi);
                }

                // announce player instance was created
                mb.publish(OO.EVENTS.PLAYER_CREATED, elementId, parameters, persistentSettings);

                /*
                 PARTITION THE FLOW TO CMS-LESS PLAYER. Prevent any setEmbedCode action to execute
                 */
                if (typeof _asset === 'object') {
                    _asset = OO.HM.safeObject('assetObject', _asset);
                    playerApi.setAsset(_asset, parameters);
                }
                // Normal CMS workflow. Initiate content loading
                else if (typeof _asset === 'string') {
                    _asset = OO.HM.safeStringOrNull('assetString', _asset);
                    playerApi.setEmbedCode(_asset, parameters);
                }

                return playerApi;
            };

            // Public Player API Class Methods
            OO.exposeStaticApi('Player', {
                /**
                 * Creates a player object and attaches it to the specified element.
                 * This is an asynchronous method and will return before the player is completely initialized.
                 * Listen for the <code>PLAYBACK_READY</code> event to determine whether the player is completely initialized.
                 *
                 * @public
                 * @method create
                 * @memberOf OO.Player
                 * @param {Number} elementId The ID of the element to which to attach the player object.
                 * @param {Number} asset The asset. The player will load the asset. Only a single video is supported.
                 * @param {Object} parameters The player parameters. These can be used to customize player ads and behavior, and can determine player styles.
                 * For more information, see <a href="http://support.ooyala.com/developers/documentation/api/player_v3_api_embedparams.html" target="target">Embedded Parameters</a>.
                 * @return {Object} The created player object.
                 */
                create: function(elementId, asset, parameters) {
                    parameters = parameters || {};
                    //Check and see if correct routing is with correct player version
                    if (!OO.playerParams['core_version'] || (OO.playerParams['core_version'] !== "4" && OO.playerParams['core_version'] !== 4)) {
                        //wrong routing with v4 player, so throw an error since v4 player doesn't accept non-v4 routing
                        console.error("Error: A v4 player has been specified using a mismatch route. v4 players can only be used with a v4 route.");
                        return null;
                    }

                    // extend Pcode, playerBrandingId and debug to playerParams
                    OO.configurePublisher(parameters);
                    if (!OO.isPublisherConfigured()) {
                        console.error("Error: pcode and playerBrandingId must be provided");
                        return null;
                    }

                    // Set player environment if provided in parameters
                    OO.setServerHost(parameters);

                    // will not allow OO.players create twice for the same embedding element.
                    if (!OO.players[elementId]) {
                        OO.playerCount++;
                        OO.players[elementId] = OO.Player(elementId, asset, parameters);
                    }

                    if (OO.DEBUG !== false && OO.DEBUG !== true) {
                        OO.DEBUG = (parameters.debug === true);
                        if (OO.DEBUG === true) {
                            this.exposeDebugApi(elementId, OO.players[elementId]);
                            //activate tools from the player params
                            this.enableDebugTools(elementId, parameters["enableDebugTools"]);
                        }
                    }

                    return OO.players[elementId];
                },

                /**
                 * Isolates the specified player for debugging. <code>debug.ooyala.com</code> automatically generates a valid V3 embedded player.
                 * When you call this on a player it automatically generates the corresponding <code>debug.ooyala.com</code> test page.
                 *
                 * @public
                 * @method isolate
                 * @memberOf OO.Player.prototype
                 * @param {String} targetPlayer The name of the <code>div</code> container in which to load the player.
                 * @return url The link to the isolated player.
                 */
                isolate:function(targetPlayer) {
                    var url = "http://debug.ooyala.com/?";

                    var pbid = OO.playerParams.playerBrandingId;
                    var p = null;

                    if (pbid) {
                        url += "pbid=" + pbid + "&";
                    }

                    // find the player
                    var player;
                    if (targetPlayer) {
                        player = OO.players[targetPlayer];
                    } else if (OO.playerCount > 1) {
                        console.log("More than one player to choose.  Please specify the target div of the intended player as a parameter");
                        console.log("Available players are: ", _.keys(OO.players));
                        return _.keys(OO.players);
                    } else if (OO.playerCount < 1) {
                        console.log("There are no players on the page to isolate");
                        return "";
                    } else {
                        // Get the only player available in the list
                        player = _.values(OO.players)[0];
                    }

                    var params = JSON.stringify(player.parameters);
                    var ec = player.embedCode;

                    if (params) {
                        url += "options=" + encodeURIComponent(params) + "&";
                    }

                    if (ec) {
                        url += "ec=" + ec + "&";
                    }


                    // If this isn't local development or default, then there is a version specified
                    if (OO.playerParams.environment !== "local-dev" && OO.playerParams.v3_version_source !== "default") {
                        url += "version=" + OO.playerParams.v3_version + "&";
                    }
                    //We need to check if it is suppose to play a html5 player or not, so we check if the platform doesn't have flash in the string
                    // and that if it doesn't then it is also not html5-fallback which would need to play the flash player.
                    var environmentRF = OO.environmentRequiredFeatures;
                    if (environmentRF.indexOf("html5-playback") > -1) {
                        url += "useHtml5=true" + "&";
                    }

                    console.log("If you are copying this link, do not highlight. right click and press 'copy link address'");
                    return url;
                },

                /**
                 * Private function that exposes the debug api to the public version of OO.
                 * @private
                 * @method player#exposeDebugApi
                 */
                exposeDebugApi: function(playerName, player) {
                    if(!OO.publicApi) {
                        return;
                    }

                    if(!OO.publicApi.DEBUG) {
                        OO.publicApi.DEBUG = {};
                    }

                    /* CONSOLE OUTPUT TOOLS */

                    /**
                     * Refer to OO.consoleOutput
                     * @method OO#DEBUG#consoleOutput
                     */
                    OO.publicApi.DEBUG.consoleOutput = OO.consoleOutput;

                    /**
                     * Refer to OO.startRecordingConsoleOutput.
                     * @method OO#DEBUG#startRecordingConsoleOutput
                     */
                    OO.publicApi.DEBUG.startRecordingConsoleOutput = OO.startRecordingConsoleOutput;

                    /**
                     * Refer to OO.stopRecordingConsoleOutput.
                     * @method OO#DEBUG#stopRecordingConsoleOutput
                     */
                    OO.publicApi.DEBUG.stopRecordingConsoleOutput = OO.stopRecordingConsoleOutput;

                    /**
                     * Refer to OO.clearRecordedConsoleOutput
                     * @method OO#DEBUG#clearRecordedConsoleOutput
                     */
                    OO.publicApi.DEBUG.clearRecordedConsoleOutput = OO.clearRecordedConsoleOutput;

                    /**
                     * Refer to OO.setMaxConsoleOutputLines
                     * @method OO#DEBUG#setMaxConsoleOutputLines
                     */
                    OO.publicApi.DEBUG.setMaxConsoleOutputLines = OO.setMaxConsoleOutputLines;


                    /* STATE MACHINE TOOLS */
                    /**
                     * Refer to StateMachine.getActiveList
                     * @method OO#DEBUG#listStateMachines
                     */
                    OO.publicApi.DEBUG.listStateMachines = OO._.bind(OO.StateMachine.getActiveList, OO.StateMachine);

                    /**
                     * Refer to StateMachine.startDebugTransitionsFor
                     * @method OO#DEBUG#startDebugStateMachine
                     */
                    OO.publicApi.DEBUG.startDebugStateMachine = OO._.bind(OO.StateMachine.startDebugTransitionsFor, OO.StateMachine);

                    /**
                     * Refer to StateMachine.stopDebugTransitionsFor
                     * @method OO#DEBUG#stopDebugStateMachine
                     */
                    OO.publicApi.DEBUG.stopDebugStateMachine = OO._.bind(OO.StateMachine.stopDebugTransitionsFor, OO.StateMachine);

                    /* MESSAGE BUS TOOLS */
                    OO.publicApi.DEBUG[playerName] = OO.publicApi.DEBUG[playerName] || {};

                    /**
                     * Refer to MessageBus.startDebug
                     * @method OO#DEBUG#[playerName]#startDebugMB
                     */
                    OO.publicApi.DEBUG[playerName].startDebugMB = OO._.bind(player.mb.startDebug, player.mb);

                    /**
                     * Refer to MessageBus.stopDebug
                     * @method OO#DEBUG#[playerName]#stopDebugMB
                     */
                    OO.publicApi.DEBUG[playerName].stopDebugMB = OO._.bind(player.mb.stopDebug, player.mb);

                    /**
                     * Refer to MessageBus.listDependencies
                     * @method OO#DEBUG#[playerName]#listMBDependencies
                     */
                    OO.publicApi.DEBUG[playerName].listMBDependencies = OO._.bind(player.mb.listDependencies, player.mb);

                    // Extend debug player apis with all debug tools defined within modules
                    $.extend(OO.publicApi.DEBUG[playerName], OO.debug_tools[playerName])
                },

                /**
                 * Private function that enables debug tools specified in the player creation parameters.
                 * The tools can only be enabled if debug is set to true. Here is an example playerparam
                 * usage of each possible command, with documentation for each:
                 * {
     *   "debug":true,
     *   "enableDebugTools":{
     *   "startRecordingConsoleOutput":"OldState.*Init",                 //this turns on recording console output. You can pass in a regex to filter out what output you actually want to record. You don't need the initial and ending '/'. Look up RegExp in javascript for more info.
     *   "setMaxConsoleOutputLines":100,                                 //set the max number of lines to record. It's FIFO so it dumps the oldest message when full.
     *   "startDebugStateMachine":"adManagerController,Api,something",   //specify which statemachines you care about recording. Use  "all" to turn it on for all statemachines
     *   "startDebugMB":true                                             //this turns on the detailed message bus debugging. You will know when a message is queue up to be sent out and when it actually gets propogated to listeners. You also see when messages create/remove dependents. Super verbose.
     *   }
     * }
                 *
                 * Two important things to note:
                 * 1. These features get turned on after the player is created. So this will not capture messages and debug output while the player is initializing.
                 * 2. If the console message isn't sent through OO.log, it won't get recorded.
                 * @private
                 * @method player#enableDebugTools
                 * @param {string} elementId The div in which the player lives
                 * @param {object} options The value of "enableDebugTools" inside the player params
                 */
                enableDebugTools: function(elementId, options) {
                    if(!OO.publicApi || !OO.publicApi.DEBUG || !options || !elementId) {
                        return;
                    }

                    if (options.hasOwnProperty("startRecordingConsoleOutput")) {
                        var filter = options["startRecordingConsoleOutput"];
                        OO.publicApi.DEBUG.startRecordingConsoleOutput(filter);
                    }

                    if (OO._.isFinite(options["setMaxConsoleOutputLines"])) {
                        OO.publicApi.DEBUG.setMaxConsoleOutputLines(options["setMaxConsoleOutputLines"]);
                    }

                    if (options.hasOwnProperty("startDebugStateMachine") && OO._.isString(options["startDebugStateMachine"])) {
                        var smList = [];
                        if (options["startDebugStateMachine"] === "all") {
                            smList = OO.publicApi.DEBUG.listStateMachines();
                            for (var smName in smList) {
                                if (smList.hasOwnProperty(smName)) {
                                    OO.publicApi.DEBUG.startDebugStateMachine(smName);
                                }
                            }
                        } else {
                            smList = options["startDebugStateMachine"].split(",");
                            for (var index in smList) {
                                if (smList.hasOwnProperty(index)) {
                                    var smName = smList[index].trim();
                                    OO.publicApi.DEBUG.startDebugStateMachine(smName);
                                }
                            }
                        }
                    }

                    if (options["startDebugMB"] === true ) {
                        OO.publicApi.DEBUG[elementId].startDebugMB();
                    }
                },

                __placeholder : 0
            });
        }(OO, OO._, OO.$));

        (function(OO,_, $) {
            /**
             * @classdesc API layer for the Ooyala Player.  This class takes no direct action on the player.  It stores
             *   player properties and provides an API layer for the player that interacts with the message bus.
             * @class OO.PlayerApi
             * @public
             * @param {object} _mb The player message bus
             * @param {string} _elementId The DOM id of the root player element
             * @param {string} _modules The module instances for the player
             * @param {string} _parameters The parameters for the first playback session
             * @property {object} mb The message bus instance for the player
             * @property {object} modules The module instances for the player
             * @property {object} parameters The parameters for the playback session
             * @property {object} persistentSettings The persistent settings for the player
             */
            OO.PlayerApi = function(_mb, _elementId, _modules, _parameters, _persistentSettings) {
                // player properties
                this.mb = _mb;
                this.modules = _modules;
                this.parameters = _parameters;
                this.persistentSettings = _persistentSettings;
                var elementId = _elementId;

                // video state
                var playbackReady = false;
                var isAdPlaying = false;
                var isPlaying = false;
                var playheadTime = -1;
                var isLive = false;
                var duration = -1;
                var adDuration = -1;
                var bufferLength = -1;
                var item = null;
                var authStartTime = -1;
                var closedCaptionsLanguages = {};
                var bitratesInfo = {};
                var error = null;
                var currentBitrate = null;
                var _playedOnce = false;
                var startTime = null;

                // session state
                var state = OO.STATE.LOADING;
                var clockOffset = 0;
                var fullscreen = false;
                var volume = 1;
                var _playQueued = false;
                var _atEndScreen = false;
                var destroyCallback = null;


                /*
                 * Helpers
                 */

                var updateStateOnPlay = function() {
                    _playedOnce = true;
                    _playQueued = false;
                    _atEndScreen = false;
                };

                var resetPlayState = function() {
                    playbackReady = false;
                    isAdPlaying = false;
                    isPlaying = false;
                    state = OO.STATE.LOADING;
                    playheadTime = -1;
                    isLive = false;
                    duration = -1;
                    adDuration = -1;
                    bufferLength = -1;
                    item = null;
                    authStartTime = -1;
                    closedCaptionsLanguages = {};
                    bitratesInfo = {};
                    error = null;
                    currentBitrate = null;
                    _playedOnce = false;
                    _atEndScreen = false;
                };


                /*
                 * State Tracking
                 */

                this.mb.subscribe(OO.EVENTS.PLAYBACK_READY, 'player', _.bind(function() {
                    state = OO.STATE.READY;
                    playbackReady = true;
                    if (_playQueued) { this.play(); }
                }, this));

                this.mb.subscribe(OO.EVENTS.REPLAY, 'player', _.bind(function() {
                    updateStateOnPlay();
                }, this));

                this.mb.subscribe(OO.EVENTS.PLAY, 'player', _.bind(function() {
                    updateStateOnPlay();
                }, this));

                this.mb.subscribe(OO.EVENTS.INITIAL_PLAY, 'player', _.bind(function() {
                    updateStateOnPlay();
                }, this));

                this.mb.subscribe(OO.EVENTS.PLAYING, 'player', _.bind(function() {
                    // initial time:
                    // TODO, w3c has introduced a new attribute for HTML 5 tag: initialTime
                    // http://www.w3.org/TR/2011/WD-html5-20110113/video.html#dom-media-initialtime
                    // Once it is widely supported, we can directly set this attribute instead.
                    if (state != OO.STATE.ERROR) {
                        state = OO.STATE.PLAYING;
                        _playedOnce = true;
                        isPlaying = true;
                    }
                    _atEndScreen = false;
                }, this));

                this.mb.subscribe(OO.EVENTS.PAUSED, 'player', _.bind(function() {
                    if (state != OO.STATE.ERROR) {
                        state = OO.STATE.PAUSED;
                    }
                    isPlaying = false;
                }, this));

                this.mb.subscribe(OO.EVENTS.BUFFERING, 'player', _.bind(function() {
                    if (state != OO.STATE.ERROR) {
                        state = OO.STATE.BUFFERING;
                    }
                }, this));

                this.mb.subscribe(OO.EVENTS.BUFFERED, 'player', _.bind(function() {
                    // If the video is still in a buffering state after we've finished buffering,
                    // Change it to either a playing or paused state
                    if (state === OO.STATE.BUFFERING) {
                        state = (isPlaying) ? OO.STATE.PLAYING : OO.STATE.PAUSED;
                    }
                }, this));

                this.mb.subscribe(OO.EVENTS.PLAYED, 'player', _.bind(function() {
                    state = OO.STATE.READY;
                    _atEndScreen = true;
                    isPlaying = false;
                }, this));

                this.mb.subscribe(OO.EVENTS.WILL_PLAY_ADS, 'player', _.bind(function(event, newAdDuration) {
                    adDuration = newAdDuration;
                    _playedOnce = true;
                    isAdPlaying = true;
                    _atEndScreen = false;
                }, this));

                this.mb.subscribe(OO.EVENTS.ADS_PLAYED, 'player', _.bind(function() {
                    adDuration = -1;
                    isAdPlaying = false;
                }, this));

                // listen for some events to keep a copy of metadata for APIs
                this.mb.subscribe(OO.EVENTS.CONTENT_TREE_FETCHED, 'player', _.bind(function(event, tree) {
                    // NOTE[jigish]: we do not support channels yet, so currentItem *is* the root item
                    item = tree;
                    if (!tree) { return; }
                    // Preset duration to what contentTree thinks it is. This will get updated once
                    // real duration is known
                    var treeDuration = Number(tree.duration);
                    if (!isNaN(treeDuration)) {
                        // Content tree duration is in milliseconds, convert to seconds
                        duration = treeDuration / 1000;
                    }
                }, this));

                this.mb.subscribe(OO.EVENTS.WILL_FETCH_AUTHORIZATION, 'player', _.bind(function(event) {
                    authStartTime = new Date().getTime();
                }, this));

                this.mb.subscribe(OO.EVENTS.AUTHORIZATION_FETCHED, 'player', _.bind(function(event, tree) {
                    if (!tree.debug_data || !tree.debug_data.user_info) { return; }
                    var currentTime = new Date().getTime();
                    var latency = (currentTime - authStartTime - tree.debug_data.server_latency) / 2;
                    clockOffset = (tree.debug_data.user_info.request_timestamp * 1000) + latency - currentTime;
                }, this));

                this.mb.subscribe(OO.EVENTS.VC_CREATE_VIDEO_ELEMENT, 'player', _.bind(function(event, videoId, streams, parentContainer, params) {
                    if (videoId === OO.VIDEO.MAIN) {
                        isLive = streams ? streams.isLive : false;
                    }
                }, this));

                this.mb.subscribe(OO.EVENTS.PLAYHEAD_TIME_CHANGED, 'player', _.bind(function(event, time, newDuration, buffer) {
                    playheadTime = time;
                    if (newDuration) {
                        duration = newDuration;
                    }
                    bufferLength = buffer;
                    if (!startTime) { startTime = new Date().getTime(); }
                }, this));

                this.mb.subscribe(OO.EVENTS.DOWNLOADING, 'player', _.bind(function(event, time, newDuration, buffer) {
                    playheadTime = time;
                    if (newDuration) {
                        duration = newDuration;
                    }
                    bufferLength = buffer;
                }, this));

                this.mb.subscribe(OO.EVENTS.FULLSCREEN_CHANGED, 'player', _.bind(function(event, state) {
                    fullscreen = state;
                }, this));

                this.mb.subscribe(OO.EVENTS.ERROR, 'player', _.bind(function(event, err) {
                    error = err;
                    state = OO.STATE.ERROR;
                    isPlaying = false;
                }, this));

                this.mb.subscribe(OO.EVENTS.VOLUME_CHANGED, 'player', _.bind(function(event, newVolume) {
                    volume = newVolume;
                }, this));

                // Copies player settings from skin UI (source) to current settings (destination).
                // Source settings will override properties of destination settings.
                // Mutated destination settings are then saved to local storage.
                this.mb.subscribe(OO.EVENTS.SAVE_PLAYER_SETTINGS, 'player', _.bind(function(event, sourceSettings) {
                    _.extend(this.persistentSettings.closedCaptionOptions, sourceSettings.closedCaptionOptions);
                    var newSettings = JSON.stringify(this.persistentSettings);
                    // save new settings to local storage
                    OO.setItem(OO.CONSTANTS.OOYALA_PLAYER_SETTINGS_KEY, newSettings);
                }, this));

                this.mb.subscribe(OO.EVENTS.SET_EMBED_CODE, 'player', _.bind(function(event, embedCode, options) {
                    // TODO: Should this be a replacement rather than an extend?  Some parameters do not live past the
                    // session, such as autoplay.
                    this.parameters = _.extend(this.parameters, options);
                    resetPlayState();
                }, this));

                this.mb.subscribe(OO.EVENTS.SET_ASSET, 'player', _.bind(function(event, asset, options) {
                    // TODO: Should this be a replacement rather than an extend?  Some parameters do not live past the
                    // session, such as autoplay.
                    this.parameters = _.extend(this.parameters, options);
                    resetPlayState();
                }, this));

                this.mb.subscribe(OO.EVENTS.ASSET_CHANGED, 'player', _.bind(function(event, asset) {
                    item = asset.content;
                    duration = item.duration;
                }, this));

                this.mb.subscribe(OO.EVENTS.DESTROY, 'player', _.bind(function(event, embedCode) {
                    state = OO.STATE.DESTROYED;
                }, this));

                this.mb.subscribe(OO.EVENTS.BITRATE_INFO_AVAILABLE, 'player', _.bind(function(event, info) {
                    bitratesInfo = info.bitrates;
                }, this));

                this.mb.subscribe(OO.EVENTS.BITRATE_CHANGED, 'player', _.bind(function(event, info) {
                    currentBitrate = info;
                }, this));

                this.mb.subscribe(OO.EVENTS.CLOSED_CAPTIONS_INFO_AVAILABLE, 'player', _.bind(function(event, info) {
                    closedCaptionsLanguages = info;
                }, this));


                /*
                 * Public Player API Instance Methods
                 *
                 * NOTE[jigish]: Some functions are aliased to maintain compatibility with the flash player. Others are
                 * aliased because they are Channel APIs and Channels are not supported yet.
                 *
                 * TODO[jigish]:
                 * setQueryStringParameters
                 */

                /**
                 * Sets the embed code for the current player. You may optionally specify an <code>options</code> object
                 * that enables you to dynamically assign an ad set or other asset-level options to the embed code.
                 * For example, you can set the initial position from which the player will start.
                 * This is an asynchronous method and may return before having completed the operation.
                 * If your logic depends on the completion of this operation, listen to the corresponding event.
                 *
                 * @public
                 * @method setEmbedCode
                 * @memberOf OO.Player.prototype
                 * @param {String} embedCode An embed code belonging to the same provider as the ad set code.
                 * @param {Object} options <b>(Optional)</b> An object containing a hash of key-value pairs representing the unique ad set code.
                 */
                this.setEmbedCode = function(embedCode, options) {
                    this.mb.publish(OO.EVENTS.SET_EMBED_CODE, embedCode, options || {});
                };

                /**
                 * Sets the asset streams for the current player. You may optionally specify an <code>options</code> object
                 * that enables you to dynamically assign an ad set or other asset-level options to the asset.
                 * For example, you can set the initial position from which the player will start.
                 * This is an asynchronous method and may return before having completed the operation.
                 * If your logic depends on the completion of this operation, listen to the corresponding event.
                 *
                 * @method setAsset
                 * @memberOf OO.Player.prototype
                 * @param {String} asset An object of content metadata
                 * @param {Object} options <b>(Optional)</b> An object containing a hash of key-value pairs representing playback configuration
                 */
                this.setAsset = function(asset, options) {
                    this.mb.publish(OO.EVENTS.SET_ASSET, asset, options || {});
                };

                /**
                 * Plays the current video and the entire asset including ads, or queues it for playback if the video is not ready.
                 * This is an asynchronous method and may return before having completed the operation.
                 * If your logic depends on the completion of this operation, listen to the corresponding event.
                 *
                 * @public
                 * @method play
                 * @memberOf OO.Player.prototype
                 */
                this.play = function() {
                    if (state == OO.STATE.ERROR) {
                        return;
                    } else if (!playbackReady) {
                        _playQueued = true;
                        return;
                    }

                    if (_atEndScreen) {
                        this.mb.publish(OO.EVENTS.REPLAY);
                    }
                    else {
                        if (_playedOnce) {
                            this.mb.publish(OO.EVENTS.PLAY);
                        }
                        else {
                            this.mb.publish(OO.EVENTS.INITIAL_PLAY, Date.now());
                        }
                    }
                };

                /**
                 * Pauses the current video playback.
                 * This is an asynchronous method and may return before having completed the operation.
                 * If your logic depends on the completion of this operation, listen to the corresponding event.
                 *
                 * @public
                 * @method pause
                 * @memberOf OO.Player.prototype
                 */
                this.pause = function() {
                    this.mb.publish(OO.EVENTS.PAUSE);
                };

                /**
                 * Seeks to the specified number of seconds from the beginning.
                 * This is an asynchronous method and may return before having completed the operation.
                 * If your logic depends on the completion of this operation, listen to the <code>BUFFERED</code> event.
                 *
                 * @public
                 * @method seek
                 * @memberOf OO.Player.prototype
                 * @param {Number} seconds The number of seconds from the beginning at which to begin playing the video.
                 */
                this.seek = function(seconds) {
                    if (_atEndScreen) {
                        this.mb.publish(OO.EVENTS.REPLAY, seconds);
                    }
                    else {
                        this.mb.publish(OO.EVENTS.SEEK, seconds);
                    }
                };

                /**
                 * Sets the current volume on a best-effort basis according to the underlying device limitations.
                 * This is an asynchronous method and may return before having completed the operation.
                 * If your logic depends on the completion of this operation, listen to the corresponding event.
                 *
                 * @public
                 * @method setVolume
                 * @memberOf OO.Player.prototype
                 * @param {Number} volume The volume. Specify a value between 0 and 1, inclusive.
                 */
                this.setVolume = function(volume) {
                    this.mb.publish(OO.EVENTS.CHANGE_VOLUME, volume);
                };

                /**
                 * Destroys the item. When this method is called, the player is removed, all activity is stopped, and any video is unloaded.
                 * This is an asynchronous method and may return before having completed the operation.
                 * If your logic depends on the completion of this operation, listen to the corresponding event.
                 *
                 * @public
                 * @method destroy
                 * @memberOf OO.Player.prototype
                 * @param {function} callback (<b>Optional</b>) A function callback used to notify a web page
                 * that the <code>destroy</code> method has completed destroying the HTML5 player.
                 */
                this.destroy = _.bind(function(callback) {
                    // [PBW-459] Save optional callback to be called after DESTROY event is unblocked.
                    if (callback && typeof callback === "function") {
                        destroyCallback = callback;
                    }
                    this.mb.publish(OO.EVENTS.DESTROY);
                }, this);

                this.triggerDestroyCallback = function() {
                    if (destroyCallback) {
                        destroyCallback();
                        destroyCallback = null;
                    }
                };

                /**
                 * Set related media for unbundled player.
                 *
                 * @public
                 * @method updateAsset
                 * @memberOf OO.Player.prototype
                 * @param {Object} Object with asset structure where id field should not be empty. Other fields will be updated if populated.
                 *
                 */
                this.updateAsset = function(updatedAsset) {
                    this.mb.publish(OO.EVENTS.UPDATE_ASSET, updatedAsset);
                };

                /* Getters */

                /**
                 * Retrieves the playhead position in seconds.
                 *
                 * @public
                 * @method getPlayheadTime
                 * @memberOf OO.Player.prototype
                 * @return {Number} The playhead position, in seconds.
                 */
                this.getPlayheadTime = function() {
                    return playheadTime;
                };

                this.getLiveTime = function() {
                    return new Date(startTime + (playheadTime * 1000) + clockOffset);
                };

                /**
                 * Retrieves the total duration, in seconds, of the video.
                 *
                 * @public
                 * @method getDuration
                 * @memberOf OO.Player.prototype
                 * @return {Number} The total duration of the video in seconds.
                 */
                this.getDuration = function() {
                    if (isLive) {
                        return Infinity;
                    } else {
                        return duration;
                    }
                };

                /**
                 * Retrieves the total duration, in milliseconds, of the videos.
                 *
                 * @public
                 * @method getAdDuration
                 * @memberOf OO.Player.prototype
                 * @return {Number} The total duration of the ad videos in milliseconds.
                 */
                this.getAdDuration = function() {
                    return adDuration;
                };

                /**
                 * Retrieves the current size of the buffer in seconds.<br/>
                 *
                 * @public
                 * @method getBufferLength
                 * @memberOf OO.Player.prototype
                 * @return {Number} The current size of the buffer in seconds when buffer length is supported; returns 0 otherwise.
                 */
                this.getBufferLength = function() {
                    return bufferLength;
                };

                /**
                 * Retrieves an object describing the current video.
                 *
                 * @public
                 * @method getItem
                 * @memberOf OO.Player.prototype
                 * @return {Object} The current video, described in an object containing the following attributes:
                 * <ul>
                 *    <li><code>embedCode</code></li>
                 *    <li><code>title</code></li>
                 *    <li><code>description</code></li>
                 *    <li><code>time</code> (play length in seconds)</li>
                 *    <li><code>lineup</code></li>
                 *    <li><code>promo</code></li>
                 *    <li><code>hostedAtURL</code></li>
                 * </ul>
                 */
                this.getItem = function() {
                    return item;
                };

                /**
                 * Retrieves the description of the current video. This function retrieves the description that was set
                 * in the the <b>Backlot Manage Details</b> tab or the equivalent manual setting.
                 *
                 * @public
                 * @method getDescription
                 * @memberOf OO.Player.prototype
                 * @return {String} The description of the current video. For example, <code>Season 22 Opening Game</code>.
                 */
                this.getDescription = function() {
                    if (!item) { return null; }
                    return item.description;
                };

                /**
                 * Retrieves the embed code for the current player.
                 *
                 * @public
                 * @method getEmbedCode
                 * @memberOf OO.Player.prototype
                 * @return {String} The embed code for the current player.
                 */
                this.getEmbedCode = function() {
                    if (!item) { return null; }
                    return item.embedCode || item.embed_code || ""; // it could be one or the other
                };

                /**
                 * Retrieves the title of the current video.
                 *
                 * @public
                 * @method getTitle
                 * @memberOf OO.Player.prototype
                 * @return {String} The title of the current video. For example, <code>My Snowboarding Channel</code>.
                 */
                this.getTitle = function() {
                    if (!item) { return null; }
                    return item.title;
                };

                /**
                 * Determines whether the player is in full screen mode.
                 *
                 * @public
                 * @method isFullscreen
                 * @memberOf OO.Player.prototype
                 * @return {Boolean} <code>true</code> if the player is in full screen mode, <code>false</code> otherwise.
                 */
                this.isFullscreen = function() {
                    return fullscreen;
                };

                /**
                 * Retrieves the current error code if it exists.
                 *
                 * @public
                 * @method getErrorCode
                 * @memberOf OO.Player.prototype
                 * @return {String} The error code, if it exists.
                 */
                this.getErrorCode = function() {
                    return error != null ? error.code : null;
                };

                /**
                 * Retrieves the current player state. See {@link OO.STATE} for descriptions of the states.
                 *
                 * @public
                 * @method getState
                 * @memberOf OO.Player.prototype
                 * @return {String} One of the following values:
                 * <ul>
                 *   <li><code>LOADING</code></li>
                 *   <li><code>READY</code></li>
                 *   <li><code>PLAYING</code></li>
                 *   <li><code>PAUSED</code></li>
                 *   <li><code>BUFFERING</code></li>
                 *   <li><code>ERROR</code></li>
                 *   <li><code>DESTROYED</code></li>
                 * </ul>
                 */
                this.getState = function() {
                    return state;
                };

                /**
                 * Retrieves the current volume on a best-effort basis according to underlying device limitations.
                 *
                 * @public
                 * @method getVolume
                 * @memberOf OO.Player.prototype
                 * @return {Number} The volume, whose value is between 0 and 1, inclusive.
                 */
                this.getVolume = function() {
                    return volume;
                };

                this.skipAd = function() {
                    this.mb.publish(OO.EVENTS.SKIP_AD);
                };

                /**
                 * Retrieves an array of available bitrate information object.
                 *
                 * @public
                 * @method getBitratesAvailable
                 * @memberOf OO.Player.prototype
                 * @return {Array} An array of available bitrate information object. The handler is called with an array containing the available streams, each object includes:
                 *   <ul>
                 *     <li>bitrate: The bitrate in bits per second. (number)</li>
                 *     <li>height: The vertical resolution of the stream. (number)</li>
                 *     <li>width: The horizontal resolution of the stream. (number)</li>
                 *     <li>id: A unique identifier for the stream. (string)</li>
                 *   </ul>
                 * If The video plugin supports automatic ABR, one stream will have an ID of "auto" and a bitrate of 0.
                 *
                 * @see getTargetBitrate
                 * @see setTargetBitrate
                 */
                this.getBitratesAvailable = function() {
                    return bitratesInfo;
                };

                /**
                 * Retrieves the current bitrate information object.
                 *
                 * @public
                 * @method getTargetBitrate
                 * @memberOf OO.Player.prototype
                 * @return {Object} The current bitrate information object. Each object includes:
                 *   <ul>
                 *     <li>bitrate: The bitrate in bits per second. (number|string)</li>
                 *     <li>height: The vertical resolution of the stream. (number)</li>
                 *     <li>width: The horizontal resolution of the stream. (number)</li>
                 *     <li>id: A unique identifier for the stream. (string)</li>
                 *   </ul>
                 * @see getBitratesAvailable
                 */
                this.getCurrentBitrate = function() {
                    return currentBitrate;
                };

                /**
                 * Sets the target bitrate. You must specify the ID of an available bitrate information object.
                 * To determine which bitrates are available, call <code>{@link getBitratesAvailable}()</code>.<br/><br/>
                 * <p><b><font color="red">NOTE: </font></b>This setting does not carry over to new asset.
                 * This is an asynchronous method and may return before having completed the operation.
                 * If your logic depends on the completion of this operation, listen to the corresponding event.
                 *
                 * @public
                 * @method setTargetBitrate
                 * @memberOf OO.Player.prototype
                 * @param {String} id ID of the stream to switch to. ID should correspond to an ID property from
                 *   one of the available bitrates.
                 * @see getBitratesAvailable
                 */
                this.setTargetBitrate = function(id) {
                    this.mb.publish(OO.EVENTS.SEND_QUALITY_CHANGE, id);
                    this.mb.publish(OO.EVENTS.SET_TARGET_BITRATE, id);
                };

                /**
                 * Retrieves a list of supported closed captions languages for the currently playing item.
                 * This list is derived from the closed captions XML (DFXP [now TTML]) file for this content, uploaded via Backlot.
                 * For more information about this file see
                 * <a href"http://support.ooyala.com/developers/documentation/tasks/api_closed_captions_upload.html" target="target">Uploading and Viewing a Closed Captions File</a>.
                 * If there is no DFXP (now TTML) file in place, this method returns an empty list. In live streaming mode,
                 * the closed caption languages are derived from the stream itself.
                 *
                 * @public
                 * @method getCurrentItemClosedCaptionsLanguages
                 * @memberOf OO.Player.prototype
                 * @return {Array} A list of supported closed captions languages for the currently playing item.
                 */
                this.getCurrentItemClosedCaptionsLanguages = function() {
                    return closedCaptionsLanguages;
                };

                /**
                 * Sets the language of the closed captions (CC) that will be shown in the player. If you do not upload the Closed Captions file,
                 * the content will play back without closed captions. In Live streaming mode, the closed caption languages are derived
                 * from the stream itself. Note that because of the way that closed captions are supported in iOS,
                 * we are not able to add closed caption data for IOS web for remote assets.<br/><br/>
                 * <p><b><font color="red">NOTE: </font></b> Because of the way that closed captions are supported in iOS,
                 * closed caption data cannot be added for IOS web for remote assets.</p><br/>
                 *
                 * @public
                 * @method setClosedCaptionsLanguage
                 * @memberOf OO.Player.prototype
                 * @param {String} language Specify the ISO 639-1 language code. For example, specify <code>"en"</code>, <code>"de"</code>, or <code>"ja"</code>
                 * for English, German, or Japanese.
                 * Use <code>"zh-hans"</code> for Simplified Chinese and <code>"zh-hant"</code> for Traditional Chinese.
                 * To show no closed captions, set the language to <code>"none"</code>.
                 */
                this.setClosedCaptionsLanguage = function(language) {
                    if(language) {
                        this.mb.publish(OO.EVENTS.CHANGE_CLOSED_CAPTION_LANGUAGE, language);
                    }
                };

                /**
                 * Subscribe to a specified event.
                 *
                 * @public
                 * @method subscribe
                 * @memberOf OO.Player.prototype
                 * @param {String} eventName The name of the event.
                 * @param {String} subscriber The name of the subscriber to which the message bus will publish the event.
                 * @param {Function} callback The function that will execute when the subscriber receives the event notification.
                 */
                this.subscribe = function(eventName, subscriber, callback) {
                    this.mb.subscribe(eventName, subscriber, function() {
                        var argsArray = _.toArray(arguments);
                        argsArray.unshift(callback);
                        _.defer.apply(this, argsArray);
                    } );
                };

                /**
                 * Retrieves the core player version.
                 *
                 * @public
                 * @method getVersion
                 * @memberOf OO.Player.prototype
                 * @return {String} The core player version.
                 */
                this.getVersion = function() {
                    return OO.VERSION.version;
                };

                /**
                 * Retrieves the ID of the DOM element the player was created inside.
                 *
                 * @public
                 * @method getElementId
                 * @memberOf OO.Player.prototype
                 * @return {String} The ID of the DOM element the player was created inside.
                 */
                this.getElementId = function() {
                    return elementId;
                };

                /**
                 * Determine if main content is currently playing
                 *
                 * @public
                 * @method isPlaying
                 * @memberOf OO.Player.prototype
                 * @return {Boolean} Whether or not the player is currently playing.
                 */
                this.isPlaying = function() {
                    return isPlaying;
                };

                /**
                 * Determine if an ad is currently playing
                 *
                 * @public
                 * @method isAdPlaying
                 * @memberOf OO.Player.prototype
                 * @return {Boolean} Whether or not the player is currently playing.
                 */
                this.isAdPlaying = function() {
                    return isAdPlaying;
                };
            }
        }(OO, OO._, OO.$));

        (function(OO,_,$) {
            //local constants
            var IFRAME_URL = _.template('<%=server%>/ooyala_storage.html')({ server: OO.SERVER.API });
            var DOMAIN = OO.SERVER.API;
            var IFRAME_LOAD_MESSAGE = "LOADED";
            var IFRAME_LOAD_TIMEOUT = 3000;
            var IFRAME_STATE_INIT = 0;
            var IFRAME_STATE_ERROR = 1;
            var IFRAME_STATE_READY = 2;

            var iframeState = IFRAME_STATE_INIT; //state of iframe
            var postMessageQueue = []; //messages waiting until iframe ready
            var callbacks = {}; //Store Callback functions
            var errorTimeout = null;

            //add iframe
            var iframe = document.createElement('iframe');
            iframe.style.display = "none";
            iframe.src = IFRAME_URL;

            $(document).ready(function() {
                document.body.appendChild(iframe);
                errorTimeout = setTimeout(function() {
                    onIframeLoaded(IFRAME_STATE_ERROR);
                }, IFRAME_LOAD_TIMEOUT);
            });

            //add event listener
            if (window.addEventListener) {
                window.addEventListener("message", onMessage, false);
            } else if (window.attachEvent) {
                window.attachEvent("onmessage", onMessage);
            }

            function onMessage(event) {
                if (event.origin !== DOMAIN) { return; }

                //listen for loaded message
                if (event.data === IFRAME_LOAD_MESSAGE) {
                    clearTimeout(errorTimeout);
                    onIframeLoaded(IFRAME_STATE_READY);
                    return;
                }
                var msg = null;
                try { msg = OO.JSON.parse(event.data); } catch(e) {} //do nothing, will be caught by next line

                if (!msg || !msg.callback) { return; } //result can be null

                if (callbacks[msg.callback]) {
                    callbacks[msg.callback](msg.result);
                    delete callbacks[msg.callback];
                }
            }

            function onIframeLoaded(state) {
                var a;
                iframeState = state;
                while((a = postMessageQueue.pop()) != undefined) {
                    callPostMessage(a[0], a[1], a[2]);
                }
            }

            function callPostMessage(method, args, callback) {
                if (iframeState === IFRAME_STATE_INIT) {
                    postMessageQueue.push(arguments);
                    return;
                }

                if (iframeState === IFRAME_STATE_ERROR || !iframe.contentWindow.postMessage) {
                    var result;
                    if (method == "setItem") {
                        result = OO[method].apply(OO.localStorage, args);
                    } else {
                        result = OO.localStorage[method].apply(OO.localStorage, args);
                    }
                    if(!!callback) {
                        callback(result);
                    }
                } else {
                    var msg = {
                        method: method,
                        arguments: args,
                        callback: Math.random().toString(36).substring(7) //random id
                    };
                    callbacks[msg.callback] = callback;
                    iframe.contentWindow.postMessage(JSON.stringify(msg), DOMAIN);
                }
            }

            OO.ooyalaStorage = {
                getItem: function(key, callback) {
                    callPostMessage("getItem", [key], callback);
                },
                key: function(keyId, callback) {
                    callPostMessage("key", [keyId], callback);
                },
                setItem: function(key, value, callback) {
                    callPostMessage("setItem", [key, value], callback);
                },
                removeItem: function(key, callback) {
                    callPostMessage("removeItem", [key], callback);
                },
                hasOwnProperty: function(key, callback) {
                    callPostMessage("hasOwnProperty", [key], callback);
                }
            };
            if (!!OO.TEST_TEST_TEST) {
                OO.ooyalaStorage._getIframeState = function() {
                    return iframeState;
                };
            }
        }(OO, OO._, OO.$));

        (function(OO,_,$) {
            callbackQueue = [];
            OO.GUID = undefined;

            OO.ooyalaStorage.getItem("ooyala_guid", _.bind(function(value) {
                if (value) {
                    OO.GUID = value;
                } else {
                    OO.GUID = generateDeviceId();
                    OO.ooyalaStorage.setItem("ooyala_guid", OO.GUID);
                }
                while((callback = callbackQueue.pop()) != undefined) {
                    callback(OO.GUID);
                }
            }), this);

            OO.publicApi.getGuid = OO.getGuid = function(callback) {
                if (OO.GUID) {
                    if (typeof callback === "function") {
                        try {
                            callback(OO.GUID);
                        } catch (e) {
                            //do nothing on error
                        }
                    }
                } else {
                    callbackQueue.push(callback);
                }
            };

            generateDeviceId = function() {
                var randomString = (new Date().getTime()) + window.navigator.userAgent + Math.random().toString(16).split(".")[1];
                return new OO.jsSHA(randomString, 'ASCII').getHash('SHA-256', 'B64');
            };

            OO.plugin("DeviceId", function(OO, _, $, W) {
                return function(mb, id) {
                    mb.subscribe(OO.EVENTS.PLAYER_CREATED, "DeviceId", function() {
                        OO.publicApi.getGuid(function(guid) {
                            mb.publish(OO.EVENTS.GUID_SET, guid);
                        });
                    });
                };
            });

        }(OO, OO._, OO.$));

        (function(OO, $, _){
            /*
             *  Defines a basic chromeless UI
             */
            var ChromelessUi = function(messageBus, id) {
                this.id = id;
                this.mb = messageBus;
                this.width = 0;
                this.height = 0;
                this.useCustomControls = !OO.uiParadigm.match(/mobile/);
                this.useNativeControls = !!OO.uiParadigm.match(/native/);
                this.originalZ = null;
                this.originalOverflow = null;
                this.playbackReady = false;

                OO.StateMachine.create({
                    initial:'Init',
                    messageBus:this.mb,
                    moduleName:'ChromelessUi',
                    target:this,
                    events:[
                        {name:OO.EVENTS.PLAYER_CREATED,         from:'Init',        to:'PlayerCreated'},
                        {name:OO.EVENTS.EMBED_CODE_CHANGED,                       from:'*',                                          to:'WaitingPlaybackReady'},
                        {name:OO.EVENTS.ASSET_CHANGED,                            from:'*',                                          to:'WaitingPlaybackReady'},
                        {name:OO.EVENTS.PLAYBACK_READY,                           from:'WaitingPlaybackReady',                       to:'Ready'},
                        {name:OO.EVENTS.INITIAL_PLAY,                             from:"*"},
                        {name:OO.EVENTS.WILL_PLAY,                                from:['Ready','Paused'],                           to:'StartingToPlay'},
                        {name:OO.EVENTS.PLAYING,                                  from:['StartingToPlay', 'Paused'],                 to:'Playing'},
                        {name:OO.EVENTS.ERROR,                  from:'*'},
                        {name:OO.EVENTS.PLAY,                   from:'*'},
                        {name:OO.EVENTS.WILL_CHANGE_FULLSCREEN, from:'*'},
                        {name:OO.EVENTS.FULLSCREEN_CHANGED,     from:'*'},
                        {name:OO.EVENTS.VC_PLAYING,             from:'*'},
                        {name:OO.EVENTS.INITIAL_PLAY,           from:'*'},
                        {name:OO.EVENTS.REPLAY,                 from:'*'},
                        {name:OO.EVENTS.WILL_PLAY_ADS,          from:'*'},
                        {name:OO.EVENTS.PLAY_MIDROLL_STREAM,    from:'*'},
                        {name:OO.EVENTS.PLAYING,                from:'*'},
                    ]
                });
            };

            _.extend(ChromelessUi.prototype, {

                onInitialPlay: function() {
                    if (!this.playbackReady) { return; }
                },

                onPlayerCreated: function(event, elementId, params) {
                    this.elementId = elementId;
                    this.topMostElement = $('#'+this.elementId);
                    this.topMostElement.append('<div class="innerWrapper" style="width:inherit; height:inherit"></div>');
                    this.rootElement = this.topMostElement.find("div.innerWrapper");
                    this.params = params;

                    // plugins placeholder
                    this.rootElement.append("<div class='plugins' style='position: absolute; width: 100%; height: 100%;'></div>");

                    // bind UI events.
                    var fullscreenEvents = ["fullscreenchange", "webkitfullscreenchange"];
                    var onBrowserOriginatedFullscreenChange = _.bind(this._onBrowserOriginatedFullscreenChange, this);
                    var rootElement = this.rootElement;
                    _.each(fullscreenEvents, function(e) { rootElement.on(e, onBrowserOriginatedFullscreenChange); });
                    // https://developer.mozilla.org/en/DOM/Using_full-screen_mode
                    // Mozilla is dispatching the fullscreen event to the document object instead of the dom object that
                    // change to full screen.
                    // TODO, keep an eye on the doc if they change the notification to the dom element instead.
                    $(document).on("mozfullscreenchange", onBrowserOriginatedFullscreenChange);
                    document.onwebkitfullscreenchange = onBrowserOriginatedFullscreenChange;
                    $(document).on("MSFullscreenChange", onBrowserOriginatedFullscreenChange);
                    //$(document).on("webkitfullscreenchange", onBrowserOriginatedFullscreenChange);
                    $(window).resize(_.bind(this._onResize, this));
                    rootElement.on("mresize",_.bind(this._onResize, this));

                    // BeforeUnload Event
                    $(window).on("beforeunload", _.bind(this._onBeforeUnload, this));

                    this.mb.publish(OO.EVENTS.PLAYER_EMBEDDED, {
                        videoWrapperClass: "innerWrapper",
                        pluginsClass: "plugins"
                    });
                },

                onEmbedCodeChanged: function() {
                    this._assetChanged();
                },

                onAssetChanged: function() {
                    this._assetChanged();
                },

                _assetChanged: function() {
                    this.playbackReady = false;
                },

                onPlaybackReady: function(event, playbackPackage) {
                    this.playbackReady = true;
                },

                _isFullscreen: function() {
                    if (this.rootElement.hasClass("fullscreen")) { return true; }
                    var isFullscreen = document.fullscreen || document.mozFullScreen || document.webkitIsFullScreen ||
                        document.webkitDisplayingFullscreen || document.msFullscreenElement;
                    return !!isFullscreen;
                },

                _onBrowserOriginatedFullscreenChange: function() {
                    OO.d('Fullscreen Changed',this._isFullscreen());
                    this.mb.publish(OO.EVENTS.SIZE_CHANGED, this.rootElement.innerWidth(), this.rootElement.innerHeight());
                    this.mb.publish(OO.EVENTS.FULLSCREEN_CHANGED, this._isFullscreen());
                },

                onFullscreenChanged: function(event, isFullscreen) {
                    if(isFullscreen && !this.originalZ && !this.originalOverflow) {
                        // increase the z-index of the player before going to fullscreen, to make sure it won't be behind other players
                        // some browsers unfortunately show through elements with higher z-index even when in fullscreen mode
                        this.originalZ = this.rootElement.css('z-index');
                        this.originalOverflow = this.rootElement.css('overflow');
                        this.rootElement.css('z-index', this.originalZ + 1000);
                        this.rootElement.css('overflow','visible');
                    } else if (!isFullscreen) {
                        // reset the z-index of the player before exiting fullscreen, to make sure it is back to same level as other players
                        // some browsers unfortunately show through elements with higher z-index even when in fullscreen mode
                        this.rootElement.css('z-index', "");
                        this.rootElement.css('overflow', this.originalOverflow);
                        this.originalZ = null;
                        this.originalOverflow = null;
                    }
                },

                _onResize: function() {
                    if (this.width != this.rootElement.innerWidth() || this.height != this.rootElement.innerHeight()) {
                        this.width = this.rootElement.innerWidth();
                        this.height = this.rootElement.innerHeight();
                        this.mb.publish(OO.EVENTS.SIZE_CHANGED, this.width, this.height);
                    }
                },

                onPlay: function() {
                    if(!this.useCustomControls && !this.useNativeControls) {
                        this.mb.publish(OO.EVENTS.WILL_CHANGE_FULLSCREEN, true);
                    }
                },

                onWillChangeFullscreen: function(event, shouldEnterFullscreen) {
                    if (!this.useNativeControls && !this.useCustomControls) { return; }
                    if (shouldEnterFullscreen) {
                        this._showFullscreen();
                    } else {
                        this._hideFullscreen();
                    }
                },

                _getActiveVideo: function() {
                    var mainVideo = this.rootElement.find("video.video");
                    var activeVideo = mainVideo.get(0);
                    var pluginVideo = this.rootElement.find("div.plugins video").get(0);
                    if ( pluginVideo && !this._isVideoDomVisible("video.video") ) {
                        activeVideo = pluginVideo;
                    }
                    return activeVideo;
                },

                _showFullscreen: function() {
                    var el = this.rootElement[0];
                    var activeVideo = this._getActiveVideo();
                    var fullscreenApi = el.requestFullScreen || el.requestFullscreen || el.mozRequestFullScreen ||
                        el.webkitRequestFullScreen || el.msRequestFullscreen;
                    if ((!fullscreenApi || (OO.isAndroid && !OO.isChrome)) && activeVideo && activeVideo.webkitEnterFullscreen) {
                        // this uglyness is cause mobile chrome on android claims to support full screen on divs (next method), but doesn't actually work
                        // however we still prefer to use div fullscreen on anything else so we only try this if android is detected
                        // update: Chrome on Android looks to properly support the fullscreen API for divs, so now we check
                        // specifically for the native browser which still does not.
                        activeVideo.isFullScreenMode = true;
                        activeVideo.webkitEnterFullscreen();
                    } else if (fullscreenApi) {
                        $(activeVideo).css("background-color","black");
                        fullscreenApi.call(el);
                    } else {
                        this.rootElement.addClass("fullscreen");
                    }
                    this.mb.publish(OO.EVENTS.FULLSCREEN_CHANGED, true);
                },

                _hideFullscreen: function() {
                    var activeVideo = this._getActiveVideo();
                    if (document.cancelFullScreen) {
                        document.cancelFullScreen();
                    } else if (document.mozCancelFullScreen) {
                        document.mozCancelFullScreen();
                    } else if (document.webkitCancelFullScreen) {
                        document.webkitCancelFullScreen();
                    } else if (activeVideo && activeVideo.webkitExitFullscreen) {
                        activeVideo.isFullScreenMode = false;
                        activeVideo.webkitExitFullscreen();
                    } else if (document.msExitFullscreen) {
                        document.msExitFullscreen();
                    } else {
                        this.rootElement.removeClass("fullscreen");
                    }

                    $(activeVideo).css("background-color","");
                    this.mb.publish(OO.EVENTS.FULLSCREEN_CHANGED, false);
                },

                _isVideoDomVisible: function(domSelector) {
                    return (this.rootElement.find(domSelector).css("display") == OO.CSS.VISIBLE_DISPLAY);
                },

                _onBeforeUnload: function(event) {
                    // A still user-cancellable page unload request has been made.
                    this.mb.publish(OO.EVENTS.PAGE_UNLOAD_REQUESTED, true);
                },

                __placeholder: true
            });

            OO.registerModule('chromeless_ui', function(messageBus, id) {
                return new ChromelessUi(messageBus, id);
            });
        }(OO, OO.$, OO._));

        /*
         * Asset Controller
         */

        (function(OO, _, $) {
            /**
             * @class AssetController
             * @classdesc The Asset controller main class.  This class is registered as a module with the player.
             * @private
             * @param {object} messageBus The player message bus
             * @param {string} id The ID of the player module
             */
            var AssetController = function(messageBus, id) {
                this.toString = function() {return 'asset-controller';};
                this.mb = messageBus;
                this.id = id;
                this.currentAssetId = "";

                this.mb.subscribe(OO.EVENTS.SET_ASSET, 'asset', _.bind(this.setAsset, this));
                this.mb.subscribe(OO.EVENTS.UPDATE_ASSET, 'asset', _.bind(this.updateAsset, this));
            };

            _.extend(AssetController.prototype, {
                /**
                 * Converts values from the asset JSON to what the player is expecting
                 * @method AssetController#normalizeAsset
                 * @private
                 * @param {object} asset The new asset metadata
                 */
                normalizeAsset: function(asset) {
                    asset.content.duration = asset.content.duration * 1000;
                },

                /**
                 * Called when the asset is changed.  Verify asset object satisfy required parameters
                 * @method AssetController#setAsset
                 * @private
                 * @param {string} eventname The name of the event raised
                 * @param {object} asset The new asset metadata
                 * @param {object} params The player parameters
                 * @fires OO.EVENTS.PLAYBACK_READY
                 */
                setAsset: function(eventname, asset, params) {
                    // Verify if asset object satisfy required settings (Required settings are TBD)
                    if (this.validate(asset)) {
                        this.normalizeAsset(asset);
                        this.currentAssetId = asset.id;
                        _.defer(_.bind(function() {
                            this.mb.publish(OO.EVENTS.ASSET_CHANGED, asset, params)
                        }, this));

                        if (this.validateKeyframes(asset)) {
                            this.mb.publish(OO.EVENTS.THUMBNAILS_FETCHED, {data: asset.content.keyFrames});
                        }

                        if (asset.relatedVideos && asset.relatedVideos.length > 0) {
                            this.mb.publish(OO.EVENTS.DISCOVERY_API.RELATED_VIDEOS_FETCHED, {videos: asset.relatedVideos});
                        }

                    } else {
                        this.mb.publish(OO.EVENTS.ERROR, { code: OO.ERROR.API.CONTENT_TREE });
                    }
                },

                /**
                 * Called to update metadata about the currently playing asset. Unrequired field in the
                 * asset JSON can be filled in here after the initial SET_ASSET call without interrupting playback.
                 * Will publish ASSET_UPDATED if the asset passes validation.
                 * @method AssetController#updateAsset
                 * @private
                 * @param {string} eventname The name of the event raised
                 * @param {object} asset The new asset metadata
                 * @param {object} params The player parameters
                 * @fires OO.EVENTS.ASSET_UPDATED
                 */
                updateAsset: function(eventname, asset, params) {
                    // Verify if asset object satisfy required settings (Required settings are TBD)
                    if (this.validateUpdate(asset)) {
                        this.mb.publish(OO.EVENTS.ASSET_UPDATED, asset);
                    }

                    if (this.validateKeyframes(asset)) {
                        this.mb.publish(OO.EVENTS.THUMBNAILS_FETCHED, {data: asset.content.keyFrames});
                    }

                    if (asset.relatedVideos.length > 0) {
                        this.mb.publish(OO.EVENTS.DISCOVERY_API.RELATED_VIDEOS_FETCHED, {videos: asset.relatedVideos});
                    }
                },

                /**
                 * Validate asset params
                 * @method AssetController#validate
                 * @private
                 * @param {object} asset The new asset metadata
                 * @param {object} params The player parameters
                 * @return {Boolean} <code>true</code> if the asset fulfills required params, <code>false</code> otherwise.
                 * Required params TBD
                 */
                validate: function(asset) {
                    this.validateRelatedVideos(asset);
                    return  asset &&
                        typeof asset.id == "string" &&
                        asset.content &&
                        asset.content.streams &&
                        asset.content.streams.length > 0 &&
                        typeof asset.content.title == "string" &&
                        typeof asset.content.description == "string" &&
                        typeof asset.content.duration == "number" &&
                        asset.content.posterImages &&
                        asset.content.posterImages.length > 0 &&
                        asset.content.captions;
                },
                /**
                 * Validate asset params when updating the asset
                 * @method AssetController#validateUpdate
                 * @private
                 * @param {object} asset The updated asset metadata
                 * @return {Boolean} <code>true</code> if the asset fulfills required params, <code>false</code> otherwise.
                 * Required params TBD
                 */
                validateUpdate: function(asset) {
                    this.validateRelatedVideos(asset);
                    return  asset &&
                        typeof asset.id == "string" &&
                        (asset.id == this.currentAssetId) &&
                        ((asset.relatedVideos && asset.relatedVideos.length > 0) ||
                            (asset.content &&
                                (typeof asset.content.title == "string" ||
                                typeof asset.content.description == "string" ||
                                typeof asset.content.duration == "number" ||
                                asset.content.captions ||
                                (asset.content.posterImages && asset.content.posterImages.length > 0))
                            )
                        )
                },

                /**
                 * Validate related videos
                 * @method AssetController#validateRelatedVideos
                 * @private
                 * @param {object} asset Related video asset
                 */
                validateRelatedVideos: function(asset) {
                    if (asset.relatedVideos && asset.relatedVideos.length > 0){
                        var validatedRelatedVideos = [];
                        for (var i = 0; i < asset.relatedVideos.length; i++){
                            if (this.validate(asset.relatedVideos[i].asset) &&
                                typeof asset.relatedVideos[i].name == "string" &&
                                typeof asset.relatedVideos[i].preview_image_url == "string") {
                                validatedRelatedVideos.push(asset.relatedVideos[i]);
                            }
                        }
                        asset.relatedVideos = validatedRelatedVideos;
                    }
                },

                validateKeyframes: function(asset) {
                    return  asset && asset.content &&
                        asset.content.keyFrames &&
                        asset.content.keyFrames.available_widths &&
                        asset.content.keyFrames.available_widths.length > 0 &&
                        asset.content.keyFrames.available_time_slices &&
                        asset.content.keyFrames.available_time_slices.length > 0 &&
                        asset.content.keyFrames.thumbnails &&
                        Object.keys(asset.content.keyFrames.thumbnails).length == asset.content.keyFrames.available_time_slices.length;
                }
            });

            OO.registerModule('assetController', function(messageBus, id) {
                return new AssetController(messageBus, id);
            });

        }(OO, OO._, OO.$));
        /*
         * Playback Controller
         */

        (function(OO, _, $) {
            /**
             * @class PlaybackController
             * @classdesc The playback controller main class.  This class is registered as a module with the player.
             * @private
             * @param {object} messageBus The player message bus
             * @param {string} id The ID of the player module
             */
            var PlaybackController = function(messageBus, id) {
                this.toString = function() {return 'playback-controller';};
                this.mb = messageBus;
                this.id = id;

                // elements
                // TODO: Will this controller ever manage multiple playback elements?
                this.playbackElements = {};
                this.currentPlaybackElement = null;

                // state
                this.willPlayFromBeginning = true;
                this.metadataHasFetched = false;
                this.isFirstStream = true;
                this.playedAtLeastOnce = false;
                this.hasPlayed = false;
                this.endScreenShown = false;
                this.mobileContinuousPlayDisabled = {};
                this.previousWasOoyalaAd = false;


                // properties
                this.playerParams = null;
                this.shouldPreload = true;
                this.initialTime = 0;
                this.closedCaptions = null;

                // Default values for initialBitrate Override.
                // bitrateProperty.level a fraction from 0 to 1 from max_bitrate to choose, or "auto" to defer to video plugin ABR
                // bitrateProperty.duration a number (sec) to hold the level until ABR is set back to "auto"
                this.bitrateProperty = {level: "auto", duration: 15};
                this.bitrateOverrideFunction = null;
                this.bitrateOverrideTimer = null;
                this.chosenBitrateIndex = "auto";
                this.isBitrateOverrideReady = {
                    "isBitrateInfoAvailable": false,
                    "isMainVideoElementInFocus": false,
                    "isBitrateOverridden" : false
                };

                // subscribes
                this.mb.subscribe(OO.EVENTS.PLAYER_CREATED, 'playback', _.bind(this.playerCreated, this));
                this.mb.subscribe(OO.EVENTS.EMBED_CODE_CHANGED, 'playback', _.bind(this.embedCodeChanged, this));
                this.mb.subscribe(OO.EVENTS.EMBED_CODE_CHANGED_AFTER_OOYALA_AD, 'playback', _.bind(this.embedCodeChanged, this));
                this.mb.subscribe(OO.EVENTS.SET_ASSET, 'playback', _.bind(this.setAsset, this));
                this.mb.subscribe(OO.EVENTS.CONTENT_TREE_FETCHED, 'playback', _.bind(this.contentTreeFetched, this));
                this.mb.subscribe(OO.EVENTS.METADATA_FETCHED, 'playback', _.bind(this.metadataFetched, this));
                this.mb.subscribe(OO.EVENTS.AUTHORIZATION_FETCHED, 'playback', _.bind(this.authorizationFetched, this));
                this.mb.subscribe(OO.EVENTS.INITIAL_PLAY, 'playback', _.bind(this.initialPlay, this));
                this.mb.subscribe(OO.EVENTS.WILL_PLAY_FROM_BEGINNING, 'playback',
                    _.bind(this.onWillPlayFromBeginning, this));
                this.mb.subscribe(OO.EVENTS.PLAYED, 'playback', _.bind(this.played, this));
                this.mb.subscribe(OO.EVENTS.ASSET_CHANGED, 'playback', _.bind(this.assetChanged, this));

                this.mb.subscribe(OO.EVENTS.VC_VIDEO_ELEMENT_CREATED, 'playback',
                    _.bind(this.vcVideoElementCreated, this));
                this.mb.subscribe(OO.EVENTS.VC_VIDEO_ELEMENT_IN_FOCUS, 'playback',
                    _.bind(this.videoControllerVideoElementInFocus, this));
                this.mb.subscribe(OO.EVENTS.VC_VIDEO_ELEMENT_DISPOSED, 'playback',
                    _.bind(this.vcVideoElementDisposed, this));
                this.mb.subscribe(OO.EVENTS.VC_PLAYED, 'playback', _.bind(this.vcPlayed, this));
                this.mb.subscribe(OO.EVENTS.VC_PLAYING, 'playback', _.bind(this.vcPlaying, this));
                this.mb.subscribe(OO.EVENTS.VC_CAN_PLAY, 'playback', _.bind(this.vcCanPlay, this));
                this.mb.subscribe(OO.EVENTS.VC_PAUSED, 'playback', _.bind(this.vcPaused, this));
                this.mb.subscribe(OO.EVENTS.VC_SEEKED, 'playback', _.bind(this.vcSeeked, this));
                this.mb.subscribe(OO.EVENTS.VC_PLAY_FAILED, 'playback', _.bind(this.vcPlayFailed, this));
                this.mb.subscribe(OO.EVENTS.VC_ERROR, 'playback', _.bind(this.vcError, this));
                this.mb.subscribe(OO.EVENTS.VC_WILL_PLAY, 'playback', _.bind(this.vcWillPlay, this));
                this.mb.subscribe(OO.EVENTS.REPLAY, 'playback', _.bind(this.replay, this));
                this.mb.subscribe(OO.EVENTS.PLAYBACK_READY, 'playback', _.bind(this.playbackReady, this));
                this.mb.subscribe(OO.EVENTS.BITRATE_INFO_AVAILABLE, 'playback', _.bind(this.bitrateInfoAvailable, this));
                this.mb.subscribe(OO.EVENTS.SET_TARGET_BITRATE, 'playback', _.bind(this.setTargetBitrate, this));

                // TODO: Can we deprecate this event?
                this.mb.subscribe(OO.EVENTS.WILL_RESUME_MAIN_VIDEO, 'playback', _.bind(this.willResume, this));
            };

            _.extend(PlaybackController.prototype, {
                // ************
                // Helpers
                // ************

                /**
                 * Extracts the playable streams from the auth response.
                 * @method PlaybackController#getStreams
                 * @protected
                 * @param {object} playbackAuth The autorization response containing stream information
                 * @returns {object} The streams associated with the current asset denoted by encoding type
                 */
                getStreams: function(playbackAuth) {
                    if (!playbackAuth) { return null; }
                    if (_.isEmpty(playbackAuth.streams)) { return null; }
                    var streams = {};
                    for (var i = 0; i < playbackAuth.streams.length; i++) {
                        var deliveryType = playbackAuth.streams[i].delivery_type;
                        //In the case of youtube there is only one playbackAuth.streams object i.e only one stream hence the number of iteration is one and the object won't be lost or recreated.
                        if(deliveryType == "youtube")
                        {
                            streams = {
                                "deliveryType": deliveryType,
                                "youtube":{
                                    "url": playbackAuth.streams[i].youtube_id
                                }
                            }
                            return streams;
                        }
                        if (!playbackAuth.streams[i].url || !deliveryType) continue;

                        if (playbackAuth.streams[i].drm && _.isEmpty(playbackAuth.streams[i].drm)) continue;

                        var drmData = playbackAuth.streams[i].drm || {};

                        if (!_.isEmpty(drmData) && deliveryType != 'remote_asset') {
                            deliveryType = deliveryType.concat("_drm");
                        }

                        streams[deliveryType] = {
                            url: OO.decode64(playbackAuth.streams[i].url.data)
                        };

                        if (!_.isEmpty(drmData)) {
                            streams[deliveryType].drm = drmData;
                        }

                        // [PBW-5096]: pass akamai secure content metadata information to video plugin
                        var akamai_secure_hd = playbackAuth.streams[i].akamai_secure_hd || null;
                        if (typeof akamai_secure_hd === "boolean") {
                            streams[deliveryType].contentMetadata = {
                                "assetId": this.currentEmbedCode,
                                "accountId": this.playerParams.pcode,
                                "secureContent": akamai_secure_hd
                            };
                        }
                        streams.isLive = playbackAuth.streams[i].is_live_stream || false;
                    }

                    if (streams['remote_asset']) {
                        streams[OO.VIDEO.ENCODING.UNKNOWN] = streams['remote_asset'];
                        delete streams['remote_asset'];
                    }
                    return streams;
                },

                /**
                 * Extracts the playable streams from the auth response.
                 * @method PlaybackController#getAssets
                 * @protected
                 * @param {object} asset The JSON object containing stream information
                 * @returns {object} The streams associated with the current asset denoted by encoding type
                 */
                getAssets: function(asset) {
                    if (!asset) { return null; }
                    if (_.isEmpty(asset.content.streams)) { return null; }
                    var streams = {};
                    for (var i = 0; i < asset.content.streams.length; i++) {
                        if (!asset.content.streams[i].url || !asset.content.streams[i].delivery_type) continue;
                        streams[asset.content.streams[i].delivery_type] = {url: asset.content.streams[i].url};
                    }
                    streams.isLive = asset.content.is_live_stream || false;
                    return streams;
                },

                assetChanged: function(event, asset){
                    if (this.bitrateOverrideTimer) {
                        clearTimeout(this.bitrateOverrideTimer);
                        this.bitrateOverrideTimer = null;
                    }
                    this.chosenBitrateIndex = "auto";
                    this.isBitrateOverrideReady = {
                        "isBitrateInfoAvailable": false,
                        "isMainVideoElementInFocus": false,
                        "isBitrateOverridden" : false
                    };

                    this.streams = this.getAssets(asset);
                    this.closedCaptions = {
                        "closed_captions": asset.content.captions.closed_captions,
                        "closed_captions_vtt": asset.content.captions.closed_captions_vtt
                    };
                    this.dataReady();
                },

                /**
                 * Checks if all of the metadata has been raised.
                 * @method PlaybackController#checkDataReady
                 * @protected
                 */
                checkDataReady: function(ooyalaAds) {
                    if (this.contentTree != null && this.metadataHasFetched && this.authorization != null) {
                        this.dataReady(ooyalaAds);

                        // TODO: consider making a timeout to fire playback ready in case the video element is never created
                        // Note that having the video element never created while not raising an error event is not an
                        // expected scenario.
                    }
                },

                /**
                 * Called when all playback metadata has been fetched.  Creates the main video element.
                 * @method PlaybackController#dataReady
                 * @protected
                 * @fires OO.EVENTS.VC_CREATE_VIDEO_ELEMENT
                 */
                dataReady: function(ooyalaAds) {
                    var mainVideoId = ooyalaAds? OO.VIDEO.ADS : OO.VIDEO.MAIN;

                    this.playbackElements[mainVideoId] = { "streams": this.streams };
                    this.currentPlaybackElement = mainVideoId;
                    this.publishClosedCaptionInfo(mainVideoId, this.closedCaptions);
                    var platform = this.playerParams ? this.playerParams.platform : void 0;
                    var crossorigin = this.playerParams ? this.playerParams.crossorigin : void 0;
                    var pcode = this.playerParams ? this.playerParams.pcode : void 0;
                    var params = {
                        "closedCaptions": this.playbackElements[mainVideoId].closedCaptions,
                        "platform": platform,
                        "crossorigin": crossorigin,
                        "authenticationData": { "pcode": pcode },
                        // Obtain bit_wrapper configuration options from either the global player params
                        // (i.e. set by Valhalla using OO.__internal.playerParams) or the page-level params
                        "pluginParams": _.extend({}, OO.playerParams, this.playerParams)
                        // ^^ IMPORTANT!
                        // If the user sets their own 'bit-wrapper' property it will override the internal
                        // 'bit-wrapper' property set by Valhalla which contains the location of the Bitmovin
                        // files. There is currently no use case for the user adding 'bit-wrapper' to their config
                        // for a purpose other than setting the Bitmovin files location, so this is currently not a problem.
                        // This might change in the future though.
                    };
                    this.mb.publish(OO.EVENTS.VC_CREATE_VIDEO_ELEMENT, mainVideoId, this.streams, null, params);
                },

                /**
                 * Resets internal data associated with a stream.
                 * @method PlaybackController#resetStreamData
                 * @protected
                 */
                resetStreamData: function() {
                    // data
                    this.contentTree = null;
                    this.metadataHasFetched = false;
                    this.authorization = null;
                    this.streams = null;
                    this.currentEmbedCode = null;
                    this.endScreenShown = false;

                    // Clear out initialTime on all subsequent stream loads
                    if (!this.playerParams || (!this.previousWasOoyalaAd && !this.playerParams.ooyalaAds)) {
                        if (!this.isFirstStream) {
                            this.initialTime = 0;
                        }
                    }
                    this.isFirstStream = false;
                    this.playedAtLeastOnce = false;
                    if (this.playerParams && this.playerParams.ooyalaAds) {
                        this.previousWasOoyalaAd = true;
                    } else {
                        this.previousWasOoyalaAd = false;
                    }
                },

                /**
                 * Triggers stream preloading if should preload.
                 * @method PlaybackController#preloadStream
                 * @protected
                 * @fires OO.EVENTS.VC_PRELOAD;
                 */
                preloadStream: function() {
                    // preload the stream
                    if (this.shouldPreload) {
                        this.mb.publish(OO.EVENTS.VC_PRELOAD, this.currentPlaybackElement);
                    }
                },

                /**
                 * Triggers autoplay if required.
                 * @method PlaybackController#triggerAutoplay
                 * @protected
                 * @fires OO.EVENTS.INITIAL_PLAY
                 */
                triggerAutoplay: function() {
                    var autoPlay = !this.playerParams ? false :
                        (this.playerParams.autoPlay === 'true' || this.playerParams.autoPlay === true ||
                        this.playerParams.autoplay === 'true' || this.playerParams.autoplay === true);

                    var mobileContinuousPlay;
                    // In order to make auto play of ooyala ad without user gesture,
                    // mobileContinuousPlay should be always set to true if ooyalaAds is true
                    if (this.playerParams && this.playerParams.ooyalaAds) {
                        mobileContinuousPlay = true;
                    } else {
                        // When a video element is disposed (such as when switching from one video plugin to another)
                        // we shouldn't attempt to auto play it on mobile, otherwise browser restrictions might cause it to get stuck
                        var mobileContinuousPlayDisabled = this.mobileContinuousPlayDisabled[this.currentPlaybackElement];
                        mobileContinuousPlay = !mobileContinuousPlayDisabled && autoPlay && !OO.allowAutoPlay && this.hasPlayed;
                    }

                    if ((this.playedAtLeastOnce == false && autoPlay && OO.allowAutoPlay) || mobileContinuousPlay) {
                        this.mb.publish(OO.EVENTS.INITIAL_PLAY, Date.now());
                    }
                },

                /**
                 * Triggers playback if should loop playback.
                 * @method PlaybackController#triggerLoopPlay
                 * @protected
                 * @fires OO.EVENTS.REPLAY
                 */
                triggerLoopPlay: function() {
                    var loop = !this.playerParams ? false :
                        (this.playerParams['loop'] === 'true' || this.playerParams['loop'] === true);
                    if (loop) {
                        this.mb.publish(OO.EVENTS.REPLAY);
                    }
                },


                // **************
                // Callbacks
                // **************

                /**
                 * Called when the player is created.  Initializes locale and settings, and configures the system
                 * to pause the stream if visibility changes.
                 * @method PlaybackController#playerCreated
                 * @protected
                 * @param {string} eventName The name of the event raised
                 * @param {string} elementId The element id of the player instance
                 * @param {object} params Page-level player parameters
                 * @fires OO.EVENTS.PAUSE
                 */
                playerCreated: function(eventName, elementId, params) {
                    this.playerParams = params;

                    if (typeof this.playerParams === "object") {
                        // Set HTML5 locale
                        if (this.playerParams["locale"] !== undefined) {
                            OO.setLocale(this.playerParams["locale"]);
                        }

                        // Let page-level parameters override our default value for shouldPreload from true to false only
                        if (this.playerParams["preload"] === false) {
                            this.shouldPreload = false;
                        }

                        // Save initial time
                        if (this.playerParams["initialTime"] !== undefined){
                            var time = parseInt(this.playerParams["initialTime"], 10);
                            if (!isNaN(time) && time > 0) {
                                this.initialTime = time;
                            }
                        }
                    }

                    if (OO.isIos && OO.iosMajorVersion == 7) {
                        // [pbw-1832] iOS 7's visibilitychange event is different/bad, so use pageshow
                        window.addEventListener("pageshow", _.bind(function() {
                            this.mb.publish(OO.EVENTS.PAUSE);
                        }, this));
                    } else if (OO.isAndroid || OO.isIos) {
                        // [pbw-1832] on other mobile, pause when the tab is switched or the browser is backgrounded
                        document.addEventListener("visibilitychange", _.bind(function(evt) {
                            if (document.hidden) {
                                this.mb.publish(OO.EVENTS.PAUSE);
                            }
                        }, this));
                    }
                    this.initialBitrateOverride(params);
                },

                /**
                 * Called when playback is created.
                 * @method PlaybackController#playbackReady
                 * @protected
                 */
                playbackReady: function() {
                    this.triggerAutoplay();
                },

                /**
                 * Called when player is created. Store any bitrateOverride params and callback
                 * @method PlaybackController#initialBitrateOverride
                 * @protected
                 */
                initialBitrateOverride: function(params) {
                    if (params && params.initialBitrate) {
                        var level = params.initialBitrate.level;
                        if (level == "auto" || ($.isNumeric(level) && level >= 0 && level <= 1)) {
                            this.bitrateProperty.level = level;
                        }
                        var duration = params.initialBitrate.duration;
                        if ($.isNumeric(duration) && duration > 0) {
                            this.bitrateProperty.duration = duration;
                        }
                    }
                    if (params && params.bitrateOverrideFunction && typeof params.bitrateOverrideFunction === "function") {
                        this.bitrateOverrideFunction = params.bitrateOverrideFunction;
                    }
                },

                /**
                 * Called when BITRATE_INFO_AVAILABLE is published. Execute any bitrate override.
                 * @method PlaybackController#bitrateInfoAvailable
                 * @protected
                 */
                bitrateInfoAvailable: function (eventName, params) {
                    if (params && params.bitrates && this.bitrateProperty.level != "auto") {
                        // Form and sort array of bitrates
                        var bitrateArray = [];
                        var bitrateMap = {};
                        for (var index = 0; index < params.bitrates.length; index++) {
                            if (params.bitrates[index].id != "auto") {
                                bitrateArray.push(params.bitrates[index].bitrate);
                                bitrateMap[params.bitrates[index].bitrate] = params.bitrates[index].id;
                            }
                        }
                        bitrateArray.sort( function(a, b) { return a - b; } );

                        // Choose the bitrate, closes to the level * maxBitrateAvailable
                        if (bitrateArray.length > 0) {
                            var preferredBitrate = this.bitrateProperty.level * bitrateArray[bitrateArray.length - 1];
                            var chosenBitrate = bitrateArray[0];
                            for (var index = 0; index < bitrateArray.length; index++) {
                                if (bitrateArray[index] <= preferredBitrate) {
                                    chosenBitrate = bitrateArray[index];
                                } else {
                                    break;
                                }
                            }
                            this.chosenBitrateIndex = bitrateMap[chosenBitrate];
                            this.isBitrateOverrideReady.isBitrateInfoAvailable = true;
                        }
                        this.publishInitialBitrateOverride();
                    }
                },

                /**
                 * Called everytime VC_PLAYING is published. Execute any bitrate override once.
                 * @method PlaybackController#publishInitialBitrateOverride
                 * @protected
                 */
                publishInitialBitrateOverride: function() {
                    if (!this.isBitrateOverrideReady.isBitrateOverridden && this.isBitrateOverrideReady.isMainVideoElementInFocus) {
                        if (typeof this.bitrateOverrideFunction === "function") {
                            this.bitrateOverrideFunction();
                            this.isBitrateOverrideReady.isBitrateOverridden = true;
                        }
                        // Only trigger this Once every initial playback and after replay
                        else if (this.isBitrateOverrideReady.isBitrateInfoAvailable &&
                            this.bitrateProperty.level != "auto" &&
                            this.chosenBitrateIndex != "auto") {
                            this.mb.publish(OO.EVENTS.SET_TARGET_BITRATE, this.chosenBitrateIndex, {setTimer: true});
                            this.isBitrateOverrideReady.isBitrateOverridden = true;
                        }
                    }
                },

                /**
                 * Called everytime VC_VIDEO_ELEMENT_IN_FOCUS is published. For now is used if initialBitrateOverride is needed
                 * @method PlaybackController#videoControllerVideoElementInFocus
                 * @protected
                 */
                videoControllerVideoElementInFocus: function(eventName, id) {
                    this.isBitrateOverrideReady.isMainVideoElementInFocus = (id == OO.VIDEO.MAIN);
                    this.publishInitialBitrateOverride();
                },

                /**
                 * Called when SET_TARGET_BITRATE is published.
                 * @method PlaybackController#setTargetBitrate
                 * @protected
                 */
                setTargetBitrate: function (eventName, param, timer) {
                    // Set a timer to disable bitrate Override, once duration is reached.
                    if (!!timer && timer.setTimer) {
                        this.bitrateOverrideTimer = setTimeout(
                            _.bind(function(){ this.mb.publish(OO.EVENTS.SET_TARGET_BITRATE, "auto"); }, this),
                            this.bitrateProperty.duration * 1000
                        );
                    }
                    // Clear timer if another SET_TARGET_BITRATE is called, including self
                    else if (this.bitrateOverrideTimer) {
                        clearTimeout(this.bitrateOverrideTimer);
                        this.bitrateOverrideTimer = null;
                    }
                },

                /**
                 * Called when authorization has been fetched.  Checks if the player is ready.
                 * @method PlaybackController#authorizationFetched
                 * @protected
                 * @param {string} eventName The name of the event raised
                 * @param {object} params Authorization data
                 */
                authorizationFetched: function(eventName, params, ooyalaAds) {
                    this.authorization = params;
                    this.streams = this.getStreams(params);
                    this.checkDataReady(ooyalaAds);
                },

                /**
                 * Called when the content metadata has been fetched.  Checks if the player is ready.
                 * @method PlaybackController#contentTreeFetched
                 * @protected
                 * @param {string} eventName The name of the event raised
                 * @param {object} tree Movie metadata
                 */
                contentTreeFetched: function(eventName, tree, ooyalaAds) {
                    this.contentTree = tree;
                    if (tree) {
                        this.closedCaptions = {
                            "closed_captions": tree.closed_captions,
                            "closed_captions_vtt": tree.closed_captions_vtt
                        };
                    }
                    this.checkDataReady(ooyalaAds);
                },

                /**
                 * Called to publish the possible closed caption languages from content tree.
                 * @method PlaybackController#publishClosedCaptionInfo
                 * @protected
                 * @param {string} videoId The id of the video element to which the caption info belongs
                 * @param {object} tree Movie metadata
                 */
                publishClosedCaptionInfo: function(videoId, captions) {
                    if (captions) {
                        var closedCaptions = {};

                        //Check if the object contains either form of closed captions and that they have the correct info needed
                        if (captions.closed_captions_vtt && captions.closed_captions_vtt.captions && _.size(captions.closed_captions_vtt.captions) > 0) {
                            closedCaptions.closed_captions_vtt = captions.closed_captions_vtt.captions;
                            closedCaptions.availableLanguages = captions.closed_captions_vtt.languages;
                            closedCaptions.locale = {};
                            for (var i = 0; i < closedCaptions.availableLanguages.length; i++) {
                                var language = closedCaptions.availableLanguages[i];
                                closedCaptions.locale[language] = closedCaptions.closed_captions_vtt[language].name;
                            }
                        }
                        if (captions.closed_captions && captions.closed_captions.length > 0) {
                            closedCaptions.closed_captions_dfxp = captions.closed_captions[0];
                            closedCaptions.availableLanguages = captions.closed_captions[0].languages;
                        }

                        //Make sure the object contains at least one form of closed captions
                        if (_.size(closedCaptions) > 0) {
                            var availableLanguages = { videoId: videoId };
                            availableLanguages.languages = ((captions.closed_captions_vtt && captions.closed_captions_vtt.languages) ||
                            (closedCaptions.closed_captions_dfxp && closedCaptions.closed_captions_dfxp.languages));
                            availableLanguages.locale = {};

                            //Make sure we have available languages
                            if (availableLanguages.languages && availableLanguages.languages.length > 0) {
                                for (var i = 0; i < availableLanguages.languages.length; i++) {
                                    var language = availableLanguages.languages[i];
                                    if (closedCaptions.closed_captions_vtt && closedCaptions.closed_captions_vtt[language]) {
                                        availableLanguages.locale[language] = closedCaptions.closed_captions_vtt[language].name;
                                    }
                                }

                                _.extend(this.playbackElements[this.currentPlaybackElement], { "closedCaptions": closedCaptions });
                                this.mb.publish(OO.EVENTS.CLOSED_CAPTIONS_INFO_AVAILABLE, availableLanguages);
                            }
                        }
                    }
                },

                /**
                 * Called when the playback metadata has been fetched.  Checks if the player is ready.
                 * @method PlaybackController#metadataFetched
                 * @protected
                 */
                metadataFetched: function(event, metadata, ooyalaAds) {
                    this.metadataHasFetched = true;
                    this.checkDataReady(ooyalaAds);
                },

                /**
                 * Called when playback is started.  Triggers intention to start playback of the main video.
                 * @method PlaybackController#initialPlay
                 * @protected
                 * @param {string} eventName The name of the event raised
                 * @param {number} unixTimeMs The unix timestamp of the initial playtime
                 * @fires OO.EVENTS.WILL_PLAY_FROM_BEGINNING
                 */
                initialPlay: function(eventName, unixTimeMs) {
                    if (this.willPlayFromBeginning) {
                        this.mb.publish(OO.EVENTS.WILL_PLAY_FROM_BEGINNING);
                    }
                    this.willPlayFromBeginning = false;

                    // For mobile, start the main video on this click and then pause. If not,
                    // the video may not auto resume play when returning from prerolls.
                    if (OO.isIos || OO.isAndroid) {
                        this.mb.publish(OO.EVENTS.VC_PRIME_VIDEOS);
                    }
                },

                /**
                 * Called when playback on the content video should be started.
                 * Brings the main video element into focus and triggers playback.
                 * @method PlaybackController#onWillPlayFromBeginning
                 * @protected
                 * @fires OO.EVENTS.PLAY
                 * @fires OO.EVENTS.VC_FOCUS_VIDEO_ELEMENT
                 */
                onWillPlayFromBeginning: function() {
                    this.mb.publish(OO.EVENTS.VC_FOCUS_VIDEO_ELEMENT, this.currentPlaybackElement);
                    if(!this.playerParams.ooyalaAds){
                        this.mb.publish(OO.EVENTS.VC_SET_INITIAL_TIME, OO.VIDEO.MAIN, this.initialTime);
                    }
                    this.mb.publish(OO.EVENTS.PLAY);
                    //this.mb.publish(OO.EVENTS.PLAY, this.currentPlaybackElement);
                },

                /**
                 * Called when the video element has been created.  Triggers preloading and autoplay.
                 * @method PlaybackController#vcVideoElementCreated
                 * @protected
                 * @param {string} eventName The name of the event raised
                 * @param {object} elementParams Properties of the video element including its domId and supported encodings
                 * @fires OO.EVENTS.PLAYBACK_READY
                 */
                vcVideoElementCreated: function(eventName, elementParams) {
                    if (this.currentPlaybackElement && (elementParams["videoId"] === this.currentPlaybackElement)) {
                        this.mb.publish(OO.EVENTS.PLAYBACK_READY);
                        this.preloadStream();
                    }
                },

                /**
                 * Called when a video element has been disposed.
                 * @method PlaybackController#vcVideoElementDisposed
                 * @protected
                 * @param {string} eventName The name of the event raised
                 * @param {string} videoId The id of the video that was disposed
                 */
                vcVideoElementDisposed: function(eventName, videoId) {
                    // On mobile web, we can't programmatically trigger a 'play' on a video element
                    // that hasn't been previously started by a user gesture. If the element was just re-created,
                    // it is a sure sign that it hasn't been played before and we need to make sure that we
                    // don't attempt to autoplay it by mistake (on Android this will freeze the video)
                    this.mobileContinuousPlayDisabled[videoId] = true;
                },

                /**
                 * Called when the stream is changed.  Resets playback data and disposes any existing playback elements.
                 * @method PlaybackController#embedCodeChanged
                 * @protected
                 * @param {string} eventName The name of the event raised
                 * @param {object} embedCode The new embed code
                 * @param {object} params The player parameters
                 * @fires OO.EVENTS.VC_DISPOSE_VIDEO_ELEMENT
                 */
                embedCodeChanged: function(eventName, embedCode, params) {
                    // TODO: Only do all of this if the embed code actually changed?

                    this.playerParams = typeof params === 'object' ? params : {};

                    this.playerParams.autoPlay = (this.playerParams.autoPlay === 'true' || this.playerParams.autoPlay === true ||
                    this.playerParams.autoplay === 'true' || this.playerParams.autoplay === true);

                    //The only time we want autoplay to be false after the initial content has played is when playerParams.autoPlay is false
                    //and is playerParams.autoPlayUpNextVideosOnly is defined and false
                    if (this.currentEmbedCode) {
                        if (typeof this.playerParams.autoPlayUpNextVideosOnly === 'undefined' || this.playerParams.autoPlayUpNextVideosOnly === 'true' ||
                            this.playerParams.autoPlayUpNextVideosOnly === true) {
                            this.playerParams.autoPlay = true;
                        }
                    }

                    this.resetStreamData();
                    this.currentEmbedCode = embedCode;
                    if (this.bitrateOverrideTimer) {
                        clearTimeout(this.bitrateOverrideTimer);
                        this.bitrateOverrideTimer = null;
                    }
                    this.chosenBitrateIndex = "auto";
                    this.isBitrateOverrideReady = {
                        "isBitrateInfoAvailable": false,
                        "isMainVideoElementInFocus": false,
                        "isBitrateOverridden" : false
                    };

                    if (this.playerParams['locale'] !== undefined) {
                        OO.setLocale(this.playerParams['locale']);
                    }

                    this.willPlayFromBeginning = true;

                    // Destroy any existing playback elements
                    for (var element in this.playbackElements) {
                        if (!element) continue;
                        // [PLAYER-212][PLAYER-470]
                        // Recycling the video element allows us to support continous playback on
                        // mobile devices when switching videos with the Discovery plugin.  It also
                        // eliminates some video plugin problems resulting from re-creation thereof
                        if (element !== OO.VIDEO.MAIN) {
                            this.mb.publish(OO.EVENTS.VC_DISPOSE_VIDEO_ELEMENT, element);
                        }
                    }
                },

                /**
                 * Called when the asset is changed.  Resets playback data and disposes any existing playback elements.
                 * Sets the locale based on player parameters.
                 * @method PlaybackController#setAsset
                 * @protected
                 * @param {string} eventName The name of the event raised
                 * @param {object} asset The new asset object
                 * @param {object} params The player parameters
                 * @fires OO.EVENTS.VC_DISPOSE_VIDEO_ELEMENT
                 */
                setAsset: function(eventName, asset, params) {
                    this.resetStreamData();
                    this.playerParams = params;
                    this.willPlayFromBeginning = true;

                    if (this.playerParams['locale'] !== undefined) {
                        OO.setLocale(this.playerParams['locale']);
                    }

                    // Destroy any existing playback elements
                    for (var element in this.playbackElements) {
                        if (!element) continue;
                        this.mb.publish(OO.EVENTS.VC_DISPOSE_VIDEO_ELEMENT, element);
                    }
                },

                /**
                 * Called when the stream should resume.  Tells the video controller to play the stream.
                 * @method PlaybackController#willResume
                 * @protected
                 * @fires OO.EVENTS.VC_PLAY
                 */
                willResume: function() {
                    this.mb.publish(OO.EVENTS.VC_PLAY, this.currentPlaybackElement);
                },

                /**
                 * Called when the video controller reports playback failure.  Raises playback error events.
                 * @method PlaybackController#vcPlayFailed
                 * @protected
                 * @param {string} eventName The name of the event raised
                 * @param {string} videoId The id of the video element on which playback failed
                 * @param {string} mediaErrorCode The error code raised by the video controller
                 * @fires OO.EVENTS.PLAY_FAILED
                 * @fires OO.EVENTS.ERROR
                 */
                vcPlayFailed: function(eventName, videoId, mediaErrorCode) {
                    if (!this.currentPlaybackElement || (videoId !== this.currentPlaybackElement)) return;

                    this.mb.publish(OO.EVENTS.PLAY_FAILED, mediaErrorCode);
                    mediaErrorCode = parseInt(mediaErrorCode);
                    var mediaErrorAborted = !!window.MediaError ? window.MediaError.MEDIA_ERR_ABORTED : 1;
                    var mediaErrorNetwork = !!window.MediaError ? window.MediaError.MEDIA_ERR_NETWORK : 2;
                    var mediaErrorSourceNotSupported = !!window.MediaError ? window.MediaError.MEDIA_ERR_SRC_NOT_SUPPORTED : 4;
                    // TODO: Should mediaErrorAborted associate to it's own message?
                    if (mediaErrorCode === mediaErrorAborted) {
                        this.mb.publish(OO.EVENTS.ERROR, { code: OO.ERROR.PLAYBACK.GENERIC });
                    } else if (mediaErrorCode === mediaErrorNetwork) {
                        this.mb.publish(OO.EVENTS.ERROR, { code: OO.ERROR.PLAYBACK.NETWORK });
                    } else if (mediaErrorCode === mediaErrorSourceNotSupported) {
                        this.mb.publish(OO.EVENTS.ERROR, { code: OO.ERROR.PLAYBACK.GENERIC });
                    } else if (mediaErrorCode === 6) {
                        this.mb.publish(OO.EVENTS.ERROR, { code: OO.ERROR.API.SAS.ERROR_DRM_RIGHTS_SERVER_ERROR });
                    } else {
                        if (this.contentTree) {
                            switch(this.contentTree.content_type) {
                                case "Video":
                                    this.mb.publish(OO.EVENTS.ERROR, { code: OO.ERROR.PLAYBACK.STREAM });
                                    break;
                                case "LiveStream":
                                    this.mb.publish(OO.EVENTS.ERROR, { code: OO.ERROR.PLAYBACK.LIVESTREAM });
                                    break;
                                default:
                                    this.mb.publish(OO.EVENTS.ERROR, { code: OO.ERROR.PLAYBACK.GENERIC });
                            }
                        }
                    }
                },

                /**
                 * Called when the video controller encountered an error configuring a video element.  Raises error if
                 * the video element was a main video element.
                 * @protected
                 * @param {string} eventName The name of the event raised.
                 * @param {string} videoId The id of the video element which encountered a video controller error.
                 * @param {object} errorDetails The details of the error including the error code.
                 * @fires OO.EVENTS.ERROR
                 */
                vcError: function(eventName, videoId, errorDetails) {
                    if (!this.currentPlaybackElement || (videoId !== this.currentPlaybackElement)) {
                        return;
                    }

                    this.mb.publish(OO.EVENTS.ERROR, errorDetails);
                },

                /**
                 * Called when the video element received a play command and will be acting on it.  Raises willPlay if
                 * the video element was a main video element.
                 * @method PlaybackController#vcWillPlay
                 * @protected
                 * @param {string} eventName The name of the event raised
                 * @param {string} videoId The id of the video element which reported willPlay
                 * @fires OO.EVENTS.WILL_PLAY
                 */
                vcWillPlay: function(event, videoId) {
                    if (this.playbackElements[videoId]) {
                        this.mb.publish(OO.EVENTS.WILL_PLAY);

                        //[pbw-1734] iOS fullscreen blocks the replay button, so mimic functionality here
                        if (OO.isIos && this.endScreenShown) {
                            this.mb.publish(OO.EVENTS.REPLAY);
                        }

                        this.endScreenShown = false;
                    }
                },

                /**
                 * Called when the content video is replayed.
                 * @method PlaybackController#replay
                 * @protected
                 * @fires OO.EVENTS.SEEK
                 * @fires OO.EVENTS.WILL_PLAY_FROM_BEGINNING
                 */
                replay: function(event, initialTime) {
                    this.endScreenShown = false;
                    if (this.bitrateOverrideTimer) {
                        clearTimeout(this.bitrateOverrideTimer);
                        this.bitrateOverrideTimer = null;
                    }
                    this.isBitrateOverrideReady.isBitrateOverridden = false;
                    this.initialTime = initialTime || 0;
                    //PBI-1736 Do not send 'seek' here.  WILL_PLAY_FROM_BEGINNING will take care
                    //of setting the time back to the beginning of the video. Otherwise there
                    //may be problems on Android w/ ads.
                    this.mb.publish(OO.EVENTS.WILL_PLAY_FROM_BEGINNING);
                },

                /**
                 * Called when the video controller reports playback completion.  Raises played event.
                 * @method PlaybackController#vcPlayed
                 * @protected
                 * @param {string} eventName The name of the event raised
                 * @param {string} videoId The id of the video element which reported played
                 * @fires OO.EVENTS.PLAYED
                 */
                vcPlayed: function(eventName, videoId) {
                    if (!this.currentPlaybackElement || (videoId !== this.currentPlaybackElement)) return;

                    this.endScreenShown = true;
                    this.playedAtLeastOnce = true;
                    this.mb.publish(OO.EVENTS.PLAYED);
                },

                /**
                 * Called when the video controller reports playback in progress.  Raises playing event.
                 * @method PlaybackController#vcPlaying
                 * @protected
                 * @param {string} eventName The name of the event raised
                 * @param {string} videoId The id of the video element which reported playing
                 * @fires OO.EVENTS.PLAYING
                 */
                vcPlaying: function(eventName, videoId) {
                    if (!this.currentPlaybackElement || (videoId !== this.currentPlaybackElement)) return;
                    this.hasPlayed = true;
                    // Once a video has been played by the user, we are allowed to trigger
                    // "play" programmatically in order to achieve continuous playback on mobile
                    this.mobileContinuousPlayDisabled[videoId] = false;
                    // used to check this.userRequest before raising
                    this.mb.publish(OO.EVENTS.PLAYING);
                },

                vcCanPlay: function(eventName, videoId) {
                    if (this.currentPlaybackElement === videoId) {
                        this.mb.publish(OO.EVENTS.CAN_PLAY);
                    }
                },

                /**
                 * Called when the video controller reports playback paused.  Raises paused event.
                 * @method PlaybackController#vcPaused
                 * @protected
                 * @param {string} eventName The name of the event raised
                 * @param {string} videoId The id of the video element which reported paused
                 * @fires OO.EVENTS.PAUSED
                 */
                vcPaused: function(eventName, videoId) {
                    if (!this.currentPlaybackElement || (videoId !== this.currentPlaybackElement)) return;
                    this.mb.publish(OO.EVENTS.PAUSED);
                },

                /**
                 * Called when the video controller reports video seeked.  Raises seeked event.
                 * method PlaybackController#vcSeeked
                 * @protected
                 * @param {string} eventName The name of the event raised
                 * @param {string} videoId The id of the video element which reported paused
                 * @param {number} playhead The current time of the video after seeking
                 * @fires OO.EVENTS.SEEKED
                 */
                vcSeeked: function(eventName, videoId, playhead) {
                    if (!this.currentPlaybackElement || (videoId !== this.currentPlaybackElement)) return;
                    this.mb.publish(OO.EVENTS.SEEKED, playhead);
                },

                /**
                 * Called when the main video playback is completed.  Preloads the stream and checks for loop play.
                 * @method PlaybackController#played
                 * @protected
                 */
                played: function() {
                    this.playedAtLeastOnce = true;
                    this.preloadStream(); // re-initiate the playback ready for replay.
                    this.triggerLoopPlay();
                }
            });

            OO.registerModule('playbackController', function(messageBus, id) {
                return new PlaybackController(messageBus, id);
            });
        }(OO, OO._, OO.$));

        /*
         * Video Controller
         * Controls and manages video player plugins. Acts as an interface between CORE and the actual video player.
         * Handles transition between main video player and ads player
         */

        (function(OO, _, $) {
            /**
             * Logs data to the browser console in debug mode.
             * @private
             * @method log
             */
            var log = function() {
                OO.log.apply(this, $.merge(["VC:"], arguments));
            };

            /**
             * The list of registered plugins
             * key: video plugin name (string)
             * value: video plugin (object)
             * @private
             * @field registeredPlugins
             */
            var registeredPlugins = {};

            /**
             * The list of encodings to a videoPlugin name.
             * key: encoding (ex: OO.VIDEO.ENCODING.MP4) (string)
             * value: video plugin names (Queue or Array)
             * @private
             * @field encodingToPlugins
             */
            var encodingToPlugins = {};

            /**
             * Retrieves a list of the supported encodings.
             * @private
             * @method getSupportedEncodings
             */
            var getSupportedEncodings = _.bind(function() {
                var encodings = [];
                _.each(encodingToPlugins, function(value, index) {
                    if (value && value.length > 0) encodings.push(index);
                });
                return encodings;
            }, this);

            /**
             * @class OO.Video
             * @classdesc Provides the ability to register, verify, and unregister video plugins within the Ooyala player.
             * @public
             */
            OO.Video = {
                /**
                 * Registers a new video plugin. The format of the video plugin is validated, and
                 * the video plugin is only registered if it defines the required functions and properties.
                 * @public
                 * @method OO.Video#register
                 * @param {object} videoPlugin The video plugin object to be registered.
                 */
                plugin: function(videoPlugin) {
                    if (!this.validate(videoPlugin)) return;
                    log("Registering video plugin:", videoPlugin.name);
                    for (var index = 0; index < videoPlugin.encodings.length; index++) {
                        var encoding = videoPlugin.encodings[index];
                        if (encodingToPlugins[encoding]) {
                            encodingToPlugins[encoding].push(videoPlugin.name);
                        } else {
                            encodingToPlugins[encoding] = [videoPlugin.name];
                        }
                    }
                    registeredPlugins[videoPlugin.name] = videoPlugin;
                },

                /**
                 * Unregisters a video plugin.
                 * @public
                 * @method OO.Video#unregister
                 * @memberOf OO.Video
                 * @param {string} name The name of the video plugin to unregister, traditionally represented by
                 *                      <code>videoPlugin.name</code>.
                 */
                unregister: function(name) {
                    log("Removing a video plugin:", name);
                    if (name && registeredPlugins[name]) {
                        // Removes plugin from encodingToPlugin
                        for (var index = 0; index < registeredPlugins[name].encodings.length; index++) {
                            var encoding = registeredPlugins[name].encodings[index];
                            var priorityIndex = encodingToPlugins[encoding] ? encodingToPlugins[encoding].indexOf(name) : -1;
                            if (priorityIndex > -1) {
                                encodingToPlugins[encoding].splice(priorityIndex, 1);
                            }
                        }

                        // Removes plugin from registeredPlugins
                        if (_.isFunction(registeredPlugins[name].destroy)) {
                            try {
                                registeredPlugins[name].destroy();
                            } catch (err) {
                                log("Error destroying a video plugin", name, ".", err);
                            }
                        }

                        delete registeredPlugins[name];
                    }
                },

                /**
                 * Validates the format of a video plugin and checks if it is already registered.<br/>
                 * The video plugin must define the following functions:<br/>
                 * <ul>
                 *    <li><code>create()</code></li>
                 * </ul>
                 * The video plugin must define the following properties:
                 * <ul>
                 *     <li><code>name (string)</code></li>
                 *     <li><code>encodings (array)</code></li>
                 *     <li><code>features (array)</code></li>
                 *     <li><code>technology (string)</code></li>
                 * </ul>
                 * @public
                 * @method validate
                 * @memberOf OO.Video
                 * @instance
                 * @param {object} videoPlugin The video plugin object.
                 * @return {boolean} <code>true</code> if the video plugin meets the template requirements,
                 * <code>false</code> otherwise.
                 */
                validate: function(videoPlugin) {
                    // TODO: Enhance this to support type array
                    var properties = {"name":"string", "encodings":"object", "features":"object", "technology":"string"};
                    var functions = ["create"];

                    function raiseValidationError(errorString) {
                        log(errorString);
                        // TODO - raise real error
                    }

                    function checkForProperty(propertyName, propertyType, managerName) {
                        if (!_.has(videoPlugin, propertyName)) {
                            raiseValidationError("The video plugin '" + managerName + "' requires a '" + propertyName +
                                "' property");
                            return false;
                        }
                        if (typeof videoPlugin[propertyName] != propertyType) {
                            raiseValidationError("The video plugin '" + managerName + "' property '" + propertyName +
                                "' should be type '" + propertyType + "'");
                            return false;
                        }
                        return true;
                    }

                    function checkForFunction(functionName, managerName) {
                        if (!_.isFunction(videoPlugin[functionName])) {
                            raiseValidationError("The video plugin '" + managerName + "' requires a '" + functionName +
                                "' function");
                            return false;
                        }
                        return true;
                    }

                    if (!videoPlugin) {
                        raiseValidationError("The video plugin must be defined");
                        return false;
                    }
                    if (!_.isObject(videoPlugin)) {
                        raiseValidationError("The video plugin must be an object");
                        return false;
                    }
                    for (var key in properties) {
                        if (!checkForProperty(key, properties[key], videoPlugin.name)) return false;
                    }
                    for (var x = 0; x < functions.length; x++) {
                        if (!checkForFunction(functions[x], videoPlugin.name)) return false;
                    }
                    if (registeredPlugins[videoPlugin.name]) {
                        raiseValidationError("The video plugin '" + videoPlugin.name + "' has already been registered");
                        return false;
                    }

                    return true;
                },

                /**
                 * Returns a list of all registered video plugins.  This is primarily used in testing.
                 * @private
                 * @method OO.Video#getRegisteredPlugins
                 * @returns {object} All registered video plugins, referenced by name.
                 */
                getRegisteredPlugins: function() {
                    return registeredPlugins;
                }
            };

            OO.exposeStaticApi('Video', OO.Video);


            /**
             * @class VideoControllerInterface
             * @classdesc The interface to the controller provided to a plugin.
             * @public
             * @param vtc The video tech controller instance
             * @param videoId The id of the video instance
             * @param electedPlugin The plugin from which the video element is built
             */
            var VideoControllerInterface = function(vtc, videoId, electedPlugin) {
                /**
                 * Event types accepted by the video controller from video plugins for the <code>notify()</code> method.
                 * See VideoController#EVENTS for the full list of events and associated parameters.
                 * @field VideoControllerInterface#EVENTS
                 * @public
                 */
                this.EVENTS = vtc.EVENTS;

                /**
                 * Notifies the Video Controller of an event from the video.
                 * @method VideoControllerInterface#notify
                 * @public
                 * @param {string} eventName The event name (see VideoController#EVENTS).
                 * @param {object} eventparams The event parameters.
                 *                             See VideoController#EVENTS for the required parameters for each event.
                 */
                this.notify = _.bind(vtc.notify, vtc, videoId, electedPlugin);

                /**
                 * Notifies the Video Controller that the video element is not ready to receive play commands.  This
                 * will only have an effect if called before returning the element in the create API.
                 * This should only be used in cases when the video wrapper will not be able to handle play events
                 * in a synchronous fashion on devices such as Android that require playback directly upon user click.
                 * @method VideoControllerInterface#markNotReady
                 * @public
                 */
                this.markNotReady = _.bind(vtc.markNotReady, vtc, videoId);

                /**
                 * Notifies the Video Controller that the video element is ready to receive play commands.  This function
                 * should only be called if VideoControllerInterface.markNotReady was called.
                 * @method VideoControllerInterface#markReady
                 * @public
                 */
                this.markReady = _.bind(vtc.markReady, vtc, videoId);

                // temp placeholder, required by bitmovin plugin
                this.PLUGIN_MAGIC = '087d2ef5-9d39-43ed-a57a-16a312c87c0b';
            };


            /**
             * @class VideoController
             * @classdesc The video controller main class.  This class is registered as a module with the player.
             * @private
             * @param {object} messageBus The player message bus
             * @param {string} id The ID of the player module
             * @property {object} activeInstances An object of active video instances referenced by unique video ids
             * @property {string} focusVideoId The id of the video currently in focus
             * @property {string} elementId The id of the root element this video controller will interact with
             */
            var VideoController = function(messageBus, id) {
                // constants
                var READY_TIMEOUT = 3000;

                // module variables
                var mb = messageBus;
                var readyTimer = null;
                var elementsNotReady = [];

                // element variables
                var activeElements = [];
                var rootElement = null;

                // element properties
                this.activeInstances = {};
                this.focusVideoId = null;
                var activeLanguage = "";
                var ccMode = OO.CONSTANTS.CLOSED_CAPTIONS.SHOWING;
                this.elementId = null;
                this.currentPlayhead = 0;

                this.toString = function() {return 'video-controller';};

                /**
                 * A wrapper for video elements.
                 * @constructor
                 * @private
                 * @param {object} params The parameters for the video element.
                 *                        It must contain the following fields:<br/>
                 *   plugin {object} The plugin that created the video element<br />
                 *   parentContainer {object} The parent element of the video element<br />
                 *   wrapper {object} The video wrapper
                 * @property {string} plugin The name of the plugin used to create this element
                 * @property {string} domId The DOM ID of the video element
                 * @property {object} supportedEncodings A list of encodings supported by the element
                 * @property {object} parentContainer The parent element of the video element
                 * @property {object} wrapper The element wrapper created by the video plugin
                 * @property {string} sharedObjectToInstance The name of the instance that shares the video object with
                 *   this element (usually null)
                 * @property {boolean} isControllingObject True if the wrapper is currently controlling the video element
                 */
                var videoElement = function(params) {
                    this.plugin = params.plugin && params.plugin.name;
                    this.domId = _generateUniqueName();
                    this.supportedEncodings = params.plugin.encodings || [];
                    this.parentContainer = params.parentContainer || (rootElement && rootElement.find(".innerWrapper")) || null;
                    this.wrapper = params.wrapper;
                    this.sharedObjectToInstance = params.sharedObjectToInstance;
                    this.isControllingObject = (params.isControllingObject === undefined) ? true :
                        params.isControllingObject;
                };

                /**
                 * A wrapper object for video instances.
                 * @constructor
                 * @private
                 * @param {object} params The parameters for the video instance.
                 *                        It must contain the following fields:<br/>
                 *   plugin {object} The plugin that created the video element<br />
                 *   parentContainer {object} The parent element of the video element<br />
                 *   element {object} The video element object<br />
                 *   isControllingElement {boolean} True if the instance is controlling the video element<br />
                 *   stream {object} The stream url and drm associated with the instance<br />
                 *   vtcInterface {object} The instance's interface with the vtc<br />
                 *   closedCaptions {object} The closed captions object that contains the possible closed captions<br />
                 *   crossorigin {string} The crossorigin attribute value if there is one to be set<br />
                 *   params {string} The full list of instance parameters<br />
                 * @property {object} element Points to the element wrapped by this object
                 * @property {boolean} isControllingElement True if the actual element is controlled by this instance.
                 *                                          Instances that share existing elements initialize to false.
                 * @property {number} playhead The last saved playhead value of the stream, used to resume after unloading
                 * @property {string} encoding The encoding of the last stream used
                 * @property {object} stream The last stream used
                 * @property {object} vtcInterface The interface to the vtc used by the element
                 * @property {object} closedCaptions The closed captions object that contains the possible closed captions
                 * @property {object} crossorigin The crossorigin attribute value
                 * @property {boolean} isLive True if it is a live asset, false otherwise
                 * @property {boolean} playing True if the video is current playing
                 * @property {boolean} disableNativeSeek True if the video element should disable seeks that come from the
                 *                                       native video element.
                 */
                var videoInstance = function(params) {
                    this.plugin = params.plugin && params.plugin.name;
                    this.parentContainer = params.parentContainer;
                    this.element = params.element || null;
                    this.isControllingElement = !!params.isControllingElement;
                    this.playhead = 0;
                    this.encoding = params.encoding || null;
                    this.stream = params.stream || null;
                    this.vtcInterface = params.vtcInterface || {};
                    this.closedCaptions = params.closedCaptions || {};
                    this.crossorigin = params.crossorigin || null;
                    this.isLive = params.isLive || false;
                    this.params = params.params || {};
                    this.playing = false;
                    this.disableNativeSeek = false;
                };

                // state variables
                // TODO: Just use the replay event directly
                var pageLevelParams = {};
                var errorTimer = null;
                var shouldEmitErrors = true;
                var unemittedErrors = [];
                var currentVolume = null;
                var savedMainVolume = null;
                var isPlaybackReady = false;
                var csaiMode = false;

                // Determine whether or not to preload based on platform
                // TODO (neeraj): do we only need to default false on specific versions?
                var canPreload = !(OO.isChrome || OO.isIos || OO.isAndroid || OO.isSafari || OO.isFirefox);

                /**
                 * Event types accepted by the Video Controller from video plugins for the notify API
                 * @public
                 * @field VideoController#EVENTS
                 */
                this.EVENTS = {
                    /**
                     * @constant VideoController.EVENTS.PLAY
                     * @type {string}
                     * @description <code>VideoController.EVENTS.PLAY ('play')</code>:
                     *   The video will begin to play.
                     *   It should meet the following guidelines:<br />
                     *    - It should be raised each time a play command is going to be executed.<br />
                     *    - It need not be raised before the play occurs<br />
                     *   Expected params: {url:string}
                     */
                    PLAY: "play",

                    /**
                     * @constant VideoController.EVENTS.CAN_PLAY
                     * @type {string}
                     * @description <code>VideoController.EVENTS.CAN_PLAY ('canPlay')</code>:
                     *   Play can be called because the video renderer is ready.
                     *   It should meet the following guidelines:<br />
                     *    - It should be raised each time a stream is loaded and becomes ready to receive play commands<br />
                     *    - It does not need to be called after a seek<br />
                     *    - It does not need to be called after an underflow<br />
                     *   Expected params: none
                     */
                    CAN_PLAY: "canPlay",

                    /**
                     * @constant VideoController.EVENTS.PLAYING
                     * @type {string}
                     * @description <code>VideoController.EVENTS.PLAYING ('playing')</code>:
                     *   The video has begun to play
                     *   It should meet the following guidelines:<br />
                     *    - It should be raised each time a play is initiated, whether coming from seek, paused, or initial play<br />
                     *    - It need not be raised after an underflow<br />
                     *   Expected params: none
                     */
                    PLAYING: "playing",

                    /**
                     * @constant VideoController.EVENTS.ENDED
                     * @type {string}
                     * @description <code>VideoController.EVENTS.ENDED ('ended')</code>:
                     *   The video has ended.
                     *   It should meet the following guidelines:<br />
                     *    - It should be raised once each time a stream reaches the end<br />
                     *    - It should mark the end of the play session<br />
                     *    - It should be raised at the end of a replayed stream<br />
                     *   Expected params: none
                     */
                    ENDED: "ended",

                    /**
                     * @constant VideoController.EVENTS.ERROR
                     * @type {string}
                     * @description <code>VideoController.EVENTS.ERROR ('error')</code>:
                     *   The video has encountered an error.
                     *   It should meet the following guidelines:<br />
                     *    - It should <br />
                     *   Expected params: {errorcode:object}
                     */
                    ERROR: "error",

                    /**
                     * @constant VideoController.EVENTS.SEEKING
                     * @type {string}
                     * @description <code>VideoController.EVENTS.SEEKING ('seeking')</code>:
                     *   The video is being seeked.
                     *   It should meet the following guidelines:<br />
                     *    - It should be raised as soon as seeking has begun<br />
                     *    - It may be raised any number of times during a seek<br />
                     *    - It should not be raised after SEEKED<br />
                     *    - It should not be raised if attempting to seek outside of the seek range
                     *      (if seeking is not possible or will not succeed)<br />
                     *   Expected params: none
                     */
                    SEEKING: "seeking",

                    /**
                     * @constant VideoController.EVENTS.SEEKED
                     * @type {string}
                     * @description <code>VideoController.EVENTS.SEEKED ('seeked')</code>:
                     *   The video has seeked.
                     *   It should meet the following guidelines:<br />
                     *    - It should be raised before time updates at the new position are raised<br />
                     *   Expected params: none
                     */
                    SEEKED: "seeked",

                    /**
                     * @constant VideoController.EVENTS.PAUSED
                     * @type {string}
                     * @description <code>VideoController.EVENTS.PAUSED ('paused')</code>:
                     *   The video has paused.
                     *   It should meet the following guidelines:<br />
                     *    - It should be raised when the paused state is entered<br />
                     *    - It should not be raised when the video has stopped playing due to underflow<br />
                     *    - It does not need to be raised when a stream is loaded; the state will be assumed to be paused
                     *      until PLAYING is raised<br />
                     *   Expected params: none
                     */
                    PAUSED: "paused",

                    /**
                     * @constant VideoController.EVENTS.RATE_CHANGE
                     * @type {string}
                     * @description <code>VideoController.EVENTS.RATE_CHANGE ('ratechange')</code>:
                     *   The video speed has changed.
                     *   Expected params: {rate:number}
                     */
                    RATE_CHANGE: "ratechange",

                    /**
                     * @constant VideoController.EVENTS.STALLED
                     * @type {string}
                     * @description <code>VideoController.EVENTS.STALLED ('stalled')</code>:
                     *   The stream is attempting to fetch new data but is not receiving the expected data.
                     *   It should meet the following guidelines:<br />
                     *    - It can be raised while the stream is still playing<br />
                     *   Expected params: {url:string}
                     */
                    STALLED: "stalled",

                    /**
                     * @constant VideoController.EVENTS.TIME_UPDATE
                     * @type {string}
                     * @description <code>VideoController.EVENTS.TIME_UPDATE ('timeupdate')</code>:
                     *   The stream has changed time position.
                     *   It should meet the following guidelines:<br />
                     *    - It should be raised at least twice per second while the video is playing.<br />
                     *    - It need not be raised while the video is paused.<br />
                     *    - It should not be raised after and video has raised the ENDED event.<br />
                     *    - Once the seeking event has been raised, this event should not be raised until the seek has completed.<br />
                     *    - It should not be raised before initial time has been reached.<br />
                     *   Expected params:
                     *   {currentTime:number, duration:number, buffer:number, seekRange:{end:number, start:number}
       */
                    TIME_UPDATE: "timeupdate",

                    /**
                     * @constant VideoController.EVENTS.VOLUME_CHANGE
                     * @type {string}
                     * @description <code>VideoController.EVENTS.VOLUME_CHANGE ('volumechange')</code>:
                     *   The stream has changed volume.
                     *   It should meet the following guidelines:<br />
                     *    - It should be raised with volume '0' when muted<br />
                     *    - It should be raised when unmuted<br />
                     *   Expected params: {volume:number}
                     */
                    VOLUME_CHANGE: "volumechange",

                    /**
                     * @constant VideoController.EVENTS.BUFFERING
                     * @type {string}
                     * @description <code>VideoController.EVENTS.BUFFERING ('buffering')</code>:
                     *   The stream is buffering.
                     *   It should meet the following guidelines:<br />
                     *    - It should be raised when buffering state is entered<br />
                     *    - It can be raised any number of times during buffering but only once is required<br />
                     *    - It should not be raised after BUFFERED unless buffering state has been entered again<br />
                     *   Expected params: {url:string}
                     */
                    BUFFERING: "buffering",

                    /**
                     * @constant VideoController.EVENTS.BUFFERED
                     * @type {string}
                     * @description <code>VideoController.EVENTS.BUFFERED ('buffered')</code>:
                     *   The stream has buffered.
                     *   It should meet the following guidelines:<br />
                     *    - It should be raised when buffering state has exited<br />
                     *   Expected params: {url:string}
                     */
                    BUFFERED: "buffered",

                    /**
                     * @constant VideoController.EVENTS.DURATION_CHANGE
                     * @type {string}
                     * @description <code>VideoController.EVENTS.DURATION_CHANGE ('durationchange')</code>:
                     *   The stream duration has changed.
                     *   Expected params:
                     *     {currentTime:number, duration:number, buffer:number, seekRange:{end:number, start:number}}
                     */
                    DURATION_CHANGE: "durationchange",

                    /**
                     * @constant VideoController.EVENTS.PROGRESS
                     * @type {string}
                     * @description <code>VideoController.EVENTS.PROGRESS ('progress')</code>:
                     *   Data is being fetched from the network.
                     *   It should meet the following guidelines:<br />
                     *    - It should <br />
                     *   Expected params:
                     *     {currentTime:number, duration:number, buffer:number, seekRange:{end:number, start:number}}
                     */
                    PROGRESS: "progress",

                    /**
                     * @constant VideoController.EVENTS.WAITING
                     * @type {string}
                     * @description <code>VideoController.EVENTS.WAITING ('waiting')</code>:
                     *   The playback buffer is empty but the player is attempting to stream.
                     *   It should meet the following guidelines:<br />
                     *    - It should be raised when playback stops due to buffer underflow<br />
                     *   Expected params: {url:string}
                     */
                    WAITING: "waiting",

                    /**
                     * @constant VideoController.EVENTS.FULLSCREEN_CHANGED
                     * @type {string}
                     * @description <code>VideoController.EVENTS.FULLSCREEN_CHANGED ('fullScreenChanged')</code>:
                     *   The fullscreen state has changed.
                     *   Expected params: {isFullScreen:boolean, paused:boolean}
                     */
                    FULLSCREEN_CHANGED: "fullScreenChanged",

                    /**
                     * @constant VideoController.EVENTS.CAPTIONS_FOUND_ON_PLAYING
                     * @type {string}
                     * @description <code>VideoController.EVENTS.CAPTIONS_FOUND_ON_PLAYING ('captionsFoundOnPlaying')</code>:
                     *   The video has detected captions on the video while playing.
                     *   Expected params: {languages:[string], locale:{string:string}}
                     */
                    CAPTIONS_FOUND_ON_PLAYING: "captionsFoundOnPlaying",

                    /**
                     * @constant VideoController.EVENTS.ASSET_DIMENSION
                     * @type {string}
                     * @description <code>VideoController.EVENTS.ASSET_DIMENSION ('assetDimension')</code>:
                     *   New video dimension information has been received.
                     *   It should meet the following guidelines:<br />
                     *    - It should be raised when video dimensions are first determined<br />
                     *    - It should be raised any time the video dimensions change<br />
                     *    - The dimensions should be specified in pixels<br />
                     *   Expected params: {width:number,height:number}
                     */
                    ASSET_DIMENSION: "assetDimension",

                    /**
                     * @constant VideoController.EVENTS.BITRATE_CHANGED
                     * @type {string}
                     * @description <code>VideoController.EVENTS.BITRATE_CHANGED ('bitrateChanged')</code>:
                     *   The bitrate being played has changed.
                     *   It should meet the following guidelines:<br />
                     *    - It should be raised once when entering and exiting ABR mode<br />
                     *    - It should not be raised while in ABR mode<br />
                     *    - When entering ABR mode, the bitrate property should be set to the string "auto"<br />
                     *    - The bitrate property should be specified in bits per second<br />
                     *    - The height and width properties should indidicate the vertical and horizontal resolution of the
                     *       stream<br />
                     *   Expected params: {height:number, width:number, bitrate:(number|string)}
                     */
                    BITRATE_CHANGED: "bitrateChanged",

                    /**
                     * @constant VideoController.EVENTS.BITRATES_AVAILABLE
                     * @type {string}
                     * @description <code>VideoController.EVENTS.BITRATES_AVAILABLE ('bitratesAvailable')</code>:
                     *   There are multiple bitrates available to be played.
                     *   It should meet the following guidelines:<br />
                     *    - If ABR is available, parameters should contain an object whose bitrate property is set to the
                     *       string "auto".<br />
                     *    - The bitrate property should be specified in bits per second<br />
                     *    - The height and width properties should indidicate the vertical and horizontal resolution of the
                     *       stream<br />
                     *   Expected params: [{height:number, width:number, bitrate:(number|string)}]
                     */
                    BITRATES_AVAILABLE: "bitratesAvailable",

                    /**
                     * @constant VideoController.EVENTS.CLOSED_CAPTION_CUE_CHANGED
                     * @type {string}
                     * @description <code>VideoController.EVENTS.CLOSED_CAPTION_CUE_CHANGED ('closedCaptionCueChanged')</code>:
                     *   The active closed captions text has changed.
                     *   It should meet the following guidelines:<br />
                     *    - The parameter should contain the text of the new closed caption cue<br />
                     *    - Empty string parameter signifies no active cue<br />
                     *   Expected params: string
                     */
                    CLOSED_CAPTION_CUE_CHANGED: "closedCaptionCueChanged",

                    /**
                     * @constant VideoController.EVENTS.METADATA_FOUND
                     * @type {string}
                     * @description <code>VideoController.EVENTS.METADATA_FOUND ('metadataFound')</code>:
                     *   A metadata tag, such as an ID3 tag, was found in the movie.
                     *   It should meet the following guidelines:<br />
                     *    - The type field indicates the data type, such as ID3<br />
                     *    - The data field contains the tag data<br />
                     *   Expected params: [{type:string, data:[object|string]}]
                     */
                    METADATA_FOUND: "metadataFound"
                };

                var SETTINGS = {
                    ENCODING_PRIORITY: "encodingPriority",
                    INITIAL_VOLUME: "initialVolume",
                    PAUSE_ON_LIVE_ADS: "pauseOnLiveAds"
                };

                /**
                 * List of encoding priority in-order. Can be managed by backlot/backdoor/page level params
                 * The priority order is: pageLevel > backlot > backdoor > default
                 * @private
                 * @field VideoController#settingLevels
                 */
                var settingLevels = {
                    DEFAULT: "default",
                    PAGE: "pageLevel",
                    BACKLOT: "backlot",
                    BACKDOOR: "backdoor",
                    OOYALA_ADS: "ooyalaAds"
                };
                var encodingPriority = {};
                encodingPriority[settingLevels.DEFAULT] = [OO.VIDEO.ENCODING.DRM.DASH,
                    OO.VIDEO.ENCODING.DRM.HLS,
                    OO.VIDEO.ENCODING.HLS,
                    OO.VIDEO.ENCODING.AKAMAI_HD2_VOD_HLS,
                    OO.VIDEO.ENCODING.AKAMAI_HD2_HLS,
                    OO.VIDEO.ENCODING.DASH,
                    OO.VIDEO.ENCODING.MP4,
                    OO.VIDEO.ENCODING.YOUTUBE,
                    OO.VIDEO.ENCODING.HDS,
                    OO.VIDEO.ENCODING.WEBM,
                    OO.VIDEO.ENCODING.IMA,
                    OO.VIDEO.ENCODING.PULSE];
                encodingPriority[settingLevels.OOYALA_ADS] = [OO.VIDEO.ENCODING.MP4];
                var chosenEncodingPriority = settingLevels.DEFAULT;
                var formerChosenEncodingPriority = null; // Record of the last set encoding priority if there was one.

                var initialCss = { "width":"100%", "height":"100%", "position":"absolute", "visibility":"hidden",
                    "z-index":OO.CSS.VIDEO_Z_INDEX };
                if (OO.isIos) {
                    initialCss["display"] = OO.CSS.INVISIBLE_DISPLAY;
                } else {
                    initialCss["left"] = "-100000px";
                }

                var initialize = _.bind(function() {
                    mb.subscribe(OO.EVENTS.PLAYER_CREATED, 'vtc', playerCreated);
                    mb.subscribe(OO.EVENTS.METADATA_FETCHED, 'vtc', metadataFetched);
                    mb.subscribe(OO.EVENTS.EMBED_CODE_CHANGED, 'vtc', embedCodeChanged);
                    mb.subscribe(OO.EVENTS.EMBED_CODE_CHANGED_AFTER_OOYALA_AD, 'vtc', embedCodeChanged);
                    mb.subscribe(OO.EVENTS.ASSET_CHANGED, 'vtc', assetChanged);
                    mb.subscribe(OO.EVENTS.PLAYBACK_READY, 'vtc', playbackReady);
                    mb.subscribe(OO.EVENTS.VC_CREATE_VIDEO_ELEMENT, 'vtc', vcCreateVideoElement);
                    mb.subscribe(OO.EVENTS.VC_VIDEO_ELEMENT_CREATED, 'vtc', vcVideoElementCreated);
                    mb.subscribe(OO.EVENTS.VC_UPDATE_ELEMENT_STREAM, 'vtc', vcUpdateElementStream);
                    mb.subscribe(OO.EVENTS.VC_DISPOSE_VIDEO_ELEMENT, 'vtc', vcDisposeVideoElement);
                    mb.subscribe(OO.EVENTS.VC_FOCUS_VIDEO_ELEMENT, 'vtc', vcFocusVideoElement);
                    mb.subscribe(OO.EVENTS.WILL_PLAY_ADS, 'vtc', willPlayAds);
                    mb.subscribe(OO.EVENTS.ADS_PLAYED, 'vtc', adsPlayed);
                    mb.subscribe(OO.EVENTS.VC_PRELOAD, 'vtc', vcPreload);
                    mb.subscribe(OO.EVENTS.VC_RELOAD, 'vtc', vcReload);
                    mb.subscribe(OO.EVENTS.VC_SET_INITIAL_TIME, 'vtc', vcSetInitialTime);
                    mb.subscribe(OO.EVENTS.VC_SET_VIDEO_STREAMS, 'vtc', vcSetVideoStreams);
                    mb.subscribe(OO.EVENTS.VC_PRIME_VIDEOS, 'vtc', vcPrimeVideos);
                    mb.subscribe(OO.EVENTS.PLAY, 'vtc', play);
                    mb.subscribe(OO.EVENTS.VC_PLAY, 'vtc', vcPlay);
                    mb.subscribe(OO.EVENTS.PAUSE, 'vtc', pause);
                    mb.subscribe(OO.EVENTS.VC_PAUSE, 'vtc', vcPause);
                    mb.subscribe(OO.EVENTS.SEEK, 'vtc', seek);
                    mb.subscribe(OO.EVENTS.VC_SEEK, 'vtc', vcSeek);
                    mb.subscribe(OO.EVENTS.CHANGE_VOLUME, 'vtc', changeVolume);
                    mb.subscribe(OO.EVENTS.PAGE_UNLOAD_REQUESTED, 'vtc', pageUnloadRequested);
                    mb.subscribe(OO.EVENTS.DISABLE_SEEKING, 'vtc', disableSeeking);
                    mb.subscribe(OO.EVENTS.ENABLE_SEEKING, 'vtc', enableSeeking);
                    mb.subscribe(OO.EVENTS.SET_CLOSED_CAPTIONS_LANGUAGE, 'vtc', setClosedCaptionsLanguage);
                    mb.subscribe(OO.EVENTS.SET_TARGET_BITRATE, 'vtc', setTargetBitrate);
                    mb.subscribe(OO.EVENTS.DESTROY, 'vtc', _.bind(this.onDestroy, this));
                    mb.subscribe(OO.EVENTS.LIVE_BUTTON_CLICKED, 'vtc', onLiveClicked);
                }, this);

                // ********************
                // Playback setup
                // ********************

                var playerCreated = _.bind(function(eventName, elementId, params) {
                    this.elementId = elementId;
                    rootElement = $("#" + elementId);
                    pageLevelParams = params;
                    if (pageLevelParams) {
                        // Check if encoding priority is set at page level
                        if (pageLevelParams[SETTINGS.ENCODING_PRIORITY]) {
                            encodingPriority[settingLevels.PAGE] = pageLevelParams[SETTINGS.ENCODING_PRIORITY];

                            // Update chosenSteamPriority to settingLevels.PAGE
                            chosenEncodingPriority = settingLevels.PAGE;
                        }

                        // Collect initial volume
                        if (pageLevelParams[SETTINGS.INITIAL_VOLUME] !== undefined){
                            currentVolume = parseFloat(pageLevelParams[SETTINGS.INITIAL_VOLUME]);
                        }

                        //csai
                        if (pageLevelParams[SETTINGS.PAUSE_ON_LIVE_ADS] !== undefined) {
                            csaiMode = !pageLevelParams[SETTINGS.PAUSE_ON_LIVE_ADS];
                        }
                    }

                    OO.debug_tools = OO.debug_tools || {};
                    if (!OO.debug_tools[elementId]) {
                        OO.debug_tools[elementId] = {};
                    }
                    OO.debug_tools[elementId].video = videoDebugging;
                }, this);

                var metadataFetched = _.bind(function(eventName, backlotMetadata) {
                    // TODO: Check if encoding priority is set at backdoor level (it will be a string)
                    // If so, add it to encodingPriority[settingLevels.BACKDOOR], and update chosenSteamPriority to
                    //    settingLevels.BACKDOOR if it was settingLevels.DEFAULT

                    // Check if encoding priority is set at backlot movie level
                    if (backlotMetadata && backlotMetadata["base"] && backlotMetadata["base"][SETTINGS.ENCODING_PRIORITY]) {
                        var data = backlotMetadata["base"][SETTINGS.ENCODING_PRIORITY];
                        // strip out '&.*;' and spaces and parens
                        data = data.replace(/(&.+?;)|[ \[\]]/g, "");
                        encodingPriority[settingLevels.BACKLOT] = data.split(",");

                        // Update chosenSteamPriority to settingLevels.BACKLOT it it was anything other than PAGE
                        if (chosenEncodingPriority !== settingLevels.PAGE) {
                            chosenEncodingPriority = settingLevels.BACKLOT;
                        }
                    }
                }, this);

                var embedCodeChanged = _.bind(function(eventName, embedCode, params) {
                    // Remove backlot settings because they are specific to the movie
                    encodingPriority[settingLevels.BACKLOT] = null;

                    // Update the chosenEncodingPriority if it was set to backlot
                    if (params && params.ooyalaAds) {
                        if (chosenEncodingPriority !== settingLevels.OOYALA_ADS) {
                            formerChosenEncodingPriority = chosenEncodingPriority;
                        }
                        chosenEncodingPriority = settingLevels.OOYALA_ADS;
                    } else {
                        if (chosenEncodingPriority === settingLevels.BACKLOT) {
                            chosenEncodingPriority = encodingPriority[settingLevels.BACKDOOR] ?
                                settingLevels.BACKDOOR : settingLevels.DEFAULT;
                        } else if (chosenEncodingPriority === settingLevels.OOYALA_ADS) {
                            chosenEncodingPriority = encodingPriority[formerChosenEncodingPriority] ?
                                formerChosenEncodingPriority : settingLevels.DEFAULT;
                        }
                    }

                    isPlaybackReady = false;
                }, this);

                var assetChanged = _.bind(function() {
                    isPlaybackReady = false;
                }, this);

                var playbackReady = _.bind(function() {
                    isPlaybackReady = true;
                }, this);

                var onLiveClicked = _.bind(function() {
                    _callIfInControl(this.focusVideoId, "onLiveClick");
                }, this);

                // ********************
                // Element creation and destroy
                // ********************

                /**
                 * Selects an encoding and if required, creates a new element that can play this stream.
                 * This is a callback to OO.EVENTS.VC_CREATE_VIDEO_ELEMENT
                 * @private
                 * @method VideoController#vcCreateVideoElement
                 * @param {string} eventName The name of the event that triggered this function
                 * @param {string} videoId The id to use for the new element
                 * @param {object} streams An object with the encoding types as the keys and stream urls and drm object as the values
                 * @param {object} parentContainer The parent container of the new element
                 * @param {object} params An object with optional parameters to set on the new element
                 * @fires OO.EVENTS.VC_ERROR
                 * @fires OO.EVENTS.VC_FOCUS_VIDEO_ELEMENT
                 */
                var vcCreateVideoElement = _.bind(function(eventName, videoId, streams, parentContainer, params) {
                    // Get the list of possible plugins
                    var validPlugins;
                    var currentController;

                    if (params && (params.technology || params.features)) {
                        // Filter the list of usable plugins based on technology and feature restrictions
                        var pluginsForTechnology = _filterPluginsByTechnology(params.technology);
                        var pluginsForFeatures = _filterPluginsByFeatures(params.features);
                        validPlugins = _.pick(registeredPlugins, _.intersection(pluginsForTechnology, pluginsForFeatures));
                    } else {
                        // For performance, avoid the logic of filtering if no filtering parameters are specified
                        validPlugins = registeredPlugins;
                    }

                    // Select an encoding.  If none are selected, raise an error
                    var chosenEncoding = _selectEncoding(streams,
                        _getFilteredSupportedEncodings(validPlugins),
                        _getEncodingPriorities());

                    if (!chosenEncoding) {
                        mb.publish(OO.EVENTS.VC_ERROR, videoId, {code: OO.ERROR.VC.UNSUPPORTED_ENCODING});
                        return;
                    }
                    log("For video '" + videoId + "', selected encoding '" + chosenEncoding + "', with stream url " +
                        streams[chosenEncoding].url);

                    // Check if the element already exists and if the element supports the chosen encoding
                    var wasInFocus = !!(this.focusVideoId && (this.focusVideoId === videoId));
                    if (this.activeInstances[videoId] && this.activeInstances[videoId].element) {
                        if (validPlugins[this.activeInstances[videoId].plugin] &&
                            _.contains(this.activeInstances[videoId].element.supportedEncodings, chosenEncoding)) {
                            // There is another element with the same videoId that supports the chosen stream and is in the
                            // filtered list of plugins
                            log("Element already existed and supports chosen encoding.  Setting new video url.");
                            this.activeInstances[videoId].disableNativeSeek = false;
                            _setVideoStream(videoId, chosenEncoding, streams[chosenEncoding], streams.isLive);
                            if (params) {
                                this.activeInstances[videoId].params = params;
                                _setClosedCaptions(videoId, params.closedCaptions);
                                _setCrossorigin(videoId, params.crossorigin);
                            }
                            // Secure content
                            _setSecureContent(videoId, streams[chosenEncoding].contentMetadata);

                            //Workaround for PBW-5179 to save the current playhead of the main video
                            if (OO.isIos) {
                                currentController = this.activeInstances[videoId].element.sharedObjectToInstance;
                                if (currentController === "main" && this.activeInstances[currentController].element) {
                                    this.currentPlayhead = _safeFunctionCall(this.activeInstances[currentController].element, "getCurrentTime");
                                }
                            }

                            _notifyElementCreated(videoId);
                            return;
                        } else {
                            // There is another element with the same videoId but which doesn't have support for the current stream
                            // Destroy the current element at videoId
                            log("Element already existed but does not support chosen encoding.  Destroying exising element.");
                            vcDisposeVideoElement(OO.EVENTS.VC_CREATE_VIDEO_ELEMENT, videoId);
                        }
                    }

                    // Select a plugin
                    var possiblePlugins = _.intersection(encodingToPlugins[chosenEncoding] || [], _.keys(validPlugins));
                    var electedPlugin = null;

                    // If we only have an unknown stream possible, try to use the first registered plugin.
                    if ((possiblePlugins == null || possiblePlugins.length < 1)
                        && chosenEncoding == OO.VIDEO.ENCODING.UNKNOWN && _.size(validPlugins) > 0) {
                        electedPlugin = validPlugins[_.keys(validPlugins)[0]];
                    } else if (possiblePlugins && possiblePlugins.length > 0 && _.size(validPlugins) > 0) {
                        electedPlugin = validPlugins[possiblePlugins[0]];
                    }

                    if (!electedPlugin) {
                        mb.publish(OO.EVENTS.VC_ERROR, videoId, {code: OO.ERROR.VC.UNSUPPORTED_ENCODING});
                        return;
                    }

                    log("For video '" + videoId + "', elected plugin '" + electedPlugin.name + "'");

                    // If the max number of elements reached on elected plugin, create a virtual element
                    _createInstance(electedPlugin, videoId, parentContainer, chosenEncoding, streams[chosenEncoding], streams.isLive, params);

                    // TODO: Should we place the element in the parent ourselves?
                    //       Would require a direct handle to the element

                    // Notify results
                    if (this.activeInstances[videoId]) {
                        _notifyElementCreated(videoId);
                        if (wasInFocus) {
                            mb.publish(OO.EVENTS.VC_FOCUS_VIDEO_ELEMENT, videoId);
                        }
                    } else {
                        mb.publish(OO.EVENTS.VC_ERROR, videoId, {code: OO.ERROR.VC.UNABLE_TO_CREATE_VIDEO_ELEMENT});
                    }
                }, this);

                var _filterPluginsByTechnology = _.bind(function(technology) {
                    if (!technology) {
                        return _.keys(registeredPlugins);
                    }

                    var plugins = [];
                    for (name in registeredPlugins) {
                        if (registeredPlugins[name].technology === technology) {
                            plugins.push(name);
                        }
                    }

                    return plugins;
                }, this);

                var _filterPluginsByFeatures = _.bind(function(features) {
                    if (!features || features.length < 1) {
                        return _.keys(registeredPlugins);
                    }

                    var plugins = [];
                    for (name in registeredPlugins) {
                        var unsupportedFeatures = _.difference(features, registeredPlugins[name].features);
                        if (!unsupportedFeatures || unsupportedFeatures.length === 0) {
                            plugins.push(name);
                        }
                    }

                    return plugins;
                }, this);

                var _getFilteredSupportedEncodings = _.bind(function(subsetOfPlugins) {
                    var encodings = [];
                    for (var plugin in subsetOfPlugins) {
                        encodings = encodings.concat(registeredPlugins[plugin].encodings);
                    }

                    return _.uniq(encodings);
                }, this);

                var _getEncodingPriorities = _.bind(function(){
                    //TODO: could be calculated and stored when setting our current chosen encoding priority list

                    //Calculate the priorities not included in our current encoding priorities.
                    //These priorities will be appended to the end of the returned list
                    var currentPriorites = encodingPriority[chosenEncodingPriority];
                    var unprioritized = $(getSupportedEncodings()).not(currentPriorites).get();
                    return currentPriorites.concat(unprioritized);
                }, this);

                var _selectEncoding = _.bind(function(streams, supportedList, priorityOrder) {
                    if (!streams || _.size(streams) < 1) return;
                    var encodings = {};

                    // Get the intersection of the streams we have and the streams we support
                    for (var index = 0; index < supportedList.length; index++) {
                        var encoding = supportedList[index];
                        if (streams.hasOwnProperty(encoding)) {
                            encodings[encoding] = streams[encoding];
                        }
                    }

                    var chosenEncoding = null;

                    // Select an encoding based on encodingPriority[chosenEncodingPriority]
                    for (var index = 0; index < priorityOrder.length; index++) {
                        if (encodings.hasOwnProperty(priorityOrder[index])) {
                            chosenEncoding = priorityOrder[index];
                            break;
                        }
                    }

                    // Check for unkown stream type if no other streams are supported
                    if (chosenEncoding == null && streams.hasOwnProperty(OO.VIDEO.ENCODING.UNKNOWN)) {
                        chosenEncoding = OO.VIDEO.ENCODING.UNKNOWN;
                    }

                    return chosenEncoding;
                }, this);

                var _notifyElementCreated = _.bind(function(videoId) {
                    // If the element doesn't exist, return;
                    if (!(this.activeInstances && this.activeInstances[videoId] && this.activeInstances[videoId].element)) {
                        return;
                    }

                    // Get the true element
                    var element = this.activeInstances[videoId].element;
                    var videoElement = (element.parentContainer && element.parentContainer.length > 0) ?
                        element.parentContainer.find("#" + element.domId) : [];


                    // Retrieve the stream url
                    var streamUrl = this.activeInstances[videoId].stream ? this.activeInstances[videoId].stream.url : null;

                    //Workaround to allow iPhone to remove closed captions before switching the video element
                    if (OO.isIos) {
                        _.delay(function() {
                            // raise an event denoting success
                            mb.publish(OO.EVENTS.VC_VIDEO_ELEMENT_CREATED, {
                                "videoId": videoId,
                                "encodings": element.supportedEncodings,
                                "parent": element.parentContainer,
                                "domId": element.domId,
                                "videoElement": videoElement,
                                "streamUrl": streamUrl
                            });
                        }, 1);
                    } else {
                        // raise an event denoting success
                        mb.publish(OO.EVENTS.VC_VIDEO_ELEMENT_CREATED, {
                            "videoId": videoId,
                            "encodings": element.supportedEncodings,
                            "parent": element.parentContainer,
                            "domId": element.domId,
                            "videoElement": videoElement,
                            "streamUrl": streamUrl
                        });
                    }
                }, this);

                var vcUpdateElementStream = _.bind(function(event, videoId, newUrl) {
                    // If the element doesn't exist, return;
                    if (!(this.activeInstances && this.activeInstances[videoId] && this.activeInstances[videoId].element)) {
                        return;
                    }

                    // Update the stream url
                    if (this.activeInstances[videoId].stream) {
                        this.activeInstances[videoId].stream.url = newUrl;

                        _setVideoStream(videoId, this.activeInstances[videoId].encoding, this.activeInstances[videoId].stream, this.activeInstances[videoId].isLive);
                    }
                }, this);

                /**
                 * Creates a video element and instance.
                 * @private
                 * @method VideoController#_createInstance
                 * @param {object} electedPlugin The plugin to use when creating a new instance.
                 * @param {string} videoId The name of the new video instance.
                 * @param {object} parentContainer The DOM object below which to append the new element
                 * @param {string} encoding The encoding of video stream, possible values are found in OO.VIDEO.ENCODING
                 * @param {object} stream The object contains url and drm to load on the new video element.
                 * @param {boolean} isLive True if it is a live asset, false otherwise
                 * @param {object} params Parameters that apply to the video element.  These include "crossorigin" and
                 *                        closedCaptions settings.
                 * @fires OO.EVENTS.VC_ERROR
                 */
                var _createInstance = _.bind(function(electedPlugin, videoId, parentContainer, encoding, stream, isLive, params) {
                    if (!electedPlugin || !videoId) return;

                    // Check if device limitations require that elements be shared
                    if (_checkIfElementSharingRequired(electedPlugin)) {
                        // Get the instance of the existing video element that the new element should share with
                        var instanceToShare = _getInstanceToShare(electedPlugin.technology);

                        if (instanceToShare && this.activeInstances[instanceToShare].plugin !== electedPlugin.name) {
                            // An element must be shared, and the existing element was created by the same plugin as the
                            // desired plugin for the new element.  Do inter-plugin sharing rather than creating a new element.
                            if (_checkIfInterpluginSharingSupported(instanceToShare, electedPlugin)) {
                                if (this.activeInstances[instanceToShare]) {
                                    _createSharedElementBetweenPlugins(electedPlugin, videoId, encoding, stream, isLive, parentContainer, params,
                                        instanceToShare);
                                }
                                else {
                                    mb.publish(OO.EVENTS.VC_ERROR, videoId, {code: OO.ERROR.VC.UNABLE_TO_CREATE_VIDEO_ELEMENT});
                                }
                                return;
                            }
                            else {
                                // Video element sharing is required but not supported by the plugins in use.
                                // Delete an element with the same technology to make space for a new element.
                                // [update] After testing, we found that new elements require playback to be triggered by a user
                                // click event.  To prevent users from needing to click, do not dispose the old video element.
                                //_disposeElementKeepInstance(instanceToShare);
                            }
                        } else if (instanceToShare) {
                            // An element must be shared, and the existing element was created by the same plugin as the
                            // desired plugin for the new element.  Do intra-plugin sharing of the element rather than creating
                            // a new element.
                            _createSharedElement(electedPlugin, videoId, encoding, stream, isLive, params);
                            return;
                        } else {
                            // This is hit if an element allows sharing but is of technology MIXED (which can never be shared)
                            // [update] After testing, we found that new elements require playback to be triggered by a user
                            // click event.  To prevent users from needing to click, do not dispose the old video element.
                            //this.disposeAnyElementKeepInstance();
                        }
                    }

                    if (electedPlugin.maxSupportedElements > -1 &&
                        _countElements(electedPlugin.name) >= electedPlugin.maxSupportedElements) {
                        // If limited number of elements and if we exceeded the limit, create shared element
                        _createSharedElement(electedPlugin, videoId, encoding, stream, isLive, params);
                    } else {
                        // If unlimited or if we didn't exceed the limit
                        _createRealElement(electedPlugin, videoId, parentContainer, encoding, stream, isLive, params);
                    }
                }, this);

                /**
                 * Returns true if device limitations state that the maximum number of elements of a given type have been
                 * created.  This will indicate whether or not a new HTML5-based element can be created based on the
                 * technology of the elected plugin and existing elements.
                 * @private
                 * @method VideoController#_checkIfElementSharingRequired
                 * @param {object} electedPlugin The plugin to use when creating a new instance.
                 * @returns {boolean} True if new video elements cannot be created.
                 */
                var _checkIfElementSharingRequired = _.bind(function(electedPlugin) {
                    // check if single element mode required and if it's an html5 video
                    if (OO.requiresSingleVideoElement &&
                        ((electedPlugin.technology === OO.VIDEO.TECHNOLOGY.HTML5)||
                        (electedPlugin.technology === OO.VIDEO.TECHNOLOGY.MIXED))) {
                        // check if any other html5-based elements exist
                        for (var instance in this.activeInstances) {
                            if ((registeredPlugins[this.activeInstances[instance].plugin].technology ===
                                OO.VIDEO.TECHNOLOGY.HTML5 ||
                                registeredPlugins[this.activeInstances[instance].plugin].technology ===
                                OO.VIDEO.TECHNOLOGY.MIXED) &&
                                (this.activeInstances[instance].element)) {
                                return true;
                            }
                        }
                    }

                    return false;
                }, this);

                /**
                 * Returns true if the plugins of the existing video element and new video element support sharing.
                 * @private
                 * @method VideoController#_checkIfInterpluginSharingSupported
                 * @param {object} instanceToShare The video instance that should be shared.
                 * @param {object} electedPlugin The plugin to use when creating a new instance.
                 * @returns {boolean} True if inter-plugin sharing is supported by the plugins.
                 */
                var _checkIfInterpluginSharingSupported = _.bind(function(instanceToShare, electedPlugin) {
                    // Check if existing plugin supports videoObjectSharingGive
                    var giveSupported = _.contains(
                        registeredPlugins[this.activeInstances[instanceToShare].plugin].features,
                        OO.VIDEO.FEATURE.VIDEO_OBJECT_SHARING_GIVE);

                    // Check if electedPlugin supports feature videoObjectSharingTake
                    var takeSupported = _.contains(
                        electedPlugin.features,
                        OO.VIDEO.FEATURE.VIDEO_OBJECT_SHARING_TAKE);

                    var sameTech = (registeredPlugins[this.activeInstances[instanceToShare].plugin].technology ===
                    electedPlugin.technology);

                    var isNotMixed = (electedPlugin.technology !== OO.VIDEO.TECHNOLOGY.MIXED);

                    return giveSupported && takeSupported && sameTech && isNotMixed;
                }, this);

                /**
                 * Returns a reference to the instance that should be shared by new elements created with the same
                 * technology.
                 * @private
                 * @method VideoController#_getInstanceToShare
                 * @returns {object} A reference to the video instance to share.
                 */
                var _getInstanceToShare = _.bind(function(technology) {
                    var instanceToShare = null;

                    // return first html5-based element with sharing capability
                    for (var instance in this.activeInstances) {
                        if (registeredPlugins[this.activeInstances[instance].plugin].technology !== technology) {
                            continue;
                        }

                        // Only share with an instance that has an element
                        if (!this.activeInstances[instance].element) {
                            continue;
                        }

                        // Check if existing plugin supports videoObjectSharingGive
                        // If it doesn't, only return it if no other eligible plugins support Give
                        if (!_.contains(
                                registeredPlugins[this.activeInstances[instance].plugin].features,
                                OO.VIDEO.FEATURE.VIDEO_OBJECT_SHARING_GIVE)) {
                            instanceToShare = instance;
                            continue;
                        }

                        return instance;
                    }

                    return instanceToShare;
                }, this);

                var _createSharedElementBetweenPlugins = _.bind(function(electedPlugin, videoId, encoding, stream, isLive, parentContainer,
                                                                         params, instanceToShare) {
                    if (!electedPlugin || !videoId) return;

                    log("For video '" + videoId + "', sharing element with video '" + instanceToShare + "'");
                    this.activeInstances[instanceToShare].element.sharedObjectToInstance = videoId;

                    // Create the element object
                    var element = new videoElement({ plugin: electedPlugin,
                        parentContainer: parentContainer,
                        sharedObjectToInstance: instanceToShare,
                        isControllingObject: false });
                    activeElements.push(element);

                    // Create the video instance object if it doesn't already exist
                    var vtcInterface = new VideoControllerInterface(this, videoId, electedPlugin);
                    if (!this.activeInstances[videoId]) {
                        this.activeInstances[videoId] = new videoInstance({plugin: electedPlugin,
                            parentContainer: parentContainer,
                            element: element,
                            encoding: encoding,
                            stream: stream,
                            isLive: isLive,
                            vtcInterface: vtcInterface,
                            isControllingElement: true,
                            params: params});
                    } else {
                        this.activeInstances[videoId].element = element;
                    }

                    if (params) {
                        _setClosedCaptions(videoId, params.closedCaptions);
                        _setCrossorigin(videoId, params.crossorigin);
                        vtcInterface.authenticationData = params.authenticationData;
                    }

                    // Create the shared element
                    var domId = this.activeInstances[instanceToShare].element.domId;
                    var calculatedElementId = _getElementIdOfVideo(domId);
                    element.wrapper = electedPlugin.createFromExisting(calculatedElementId,
                        vtcInterface,
                        this.elementId);

                    // Set the stream
                    _setVideoStream(videoId, encoding, stream, isLive);

                    // Secure content
                    _setSecureContent(videoId, stream.contentMetadata);
                }, this);

                var _countElements = _.bind(function(pluginName) {
                    var count = 0;
                    for (var index = 0; index < activeElements.length; index++) {
                        if (activeElements[index].plugin === pluginName) {
                            count++;
                        }
                    }
                    return count;
                }, this);

                var _createSharedElement = _.bind(function(electedPlugin, videoId, encoding, stream, isLive, params) {
                    if (!electedPlugin || !videoId) return;

                    // Find an element to wrap
                    var element = null;
                    for (var index = 0; index < activeElements.length; index++) {
                        if (activeElements[index].plugin === electedPlugin.name) {
                            element = activeElements[index];
                            break;
                        }
                    }

                    if (!element) return;

                    log("For video '" + videoId + "', sharing existing element with index " + index);

                    // Create the video instance object if it doesn't already exist
                    var vtcInterface = new VideoControllerInterface(this, videoId, electedPlugin);
                    if (!this.activeInstances[videoId]) {
                        this.activeInstances[videoId] = new videoInstance({plugin: electedPlugin,
                            parentContainer: element.parentContainer,
                            element: element,
                            encoding: encoding,
                            stream: stream,
                            isLive: isLive,
                            vtcInterface: vtcInterface,
                            params: params});
                    } else {
                        this.activeInstances[videoId].element = element;
                    }

                    if (params) {
                        _setClosedCaptions(videoId, params.closedCaptions);
                        _setCrossorigin(videoId, params.crossorigin);
                        vtcInterface.authenticationData = params.authenticationData;
                    }

                    // Secure content
                    _setSecureContent(videoId, stream.contentMetadata);
                }, this);

                var _createRealElement = _.bind(function(electedPlugin, videoId, parentContainer, encoding, stream, isLive, params) {
                    if (!electedPlugin || !videoId) return;

                    // Create the element object
                    var element = new videoElement({plugin:electedPlugin, parentContainer:parentContainer});
                    activeElements.push(element);

                    // Create the video instance object if it doesn't already exist
                    var vtcInterface = new VideoControllerInterface(this, videoId, electedPlugin);
                    if (!this.activeInstances[videoId]) {
                        this.activeInstances[videoId] = new videoInstance({plugin: electedPlugin,
                            parentContainer: element.parentContainer,
                            element: element,
                            encoding: encoding,
                            stream: stream,
                            isLive: isLive,
                            vtcInterface: vtcInterface,
                            isControllingElement: true,
                            params: params});
                    } else {
                        this.activeInstances[videoId].element = element;
                    }

                    var pluginParams = {};

                    if (params) {
                        _setClosedCaptions(videoId, params.closedCaptions);
                        _setCrossorigin(videoId, params.crossorigin);
                        vtcInterface.authenticationData = params.authenticationData;
                        pluginParams = params.pluginParams || {};
                    }

                    var electedPluginParams = pluginParams[electedPlugin.name] || {};
                    // Create the real element
                    element.wrapper = electedPlugin.create(element.parentContainer,
                        element.domId,
                        vtcInterface,
                        initialCss,
                        this.elementId,
                        electedPluginParams);
                    // Set the stream
                    _setVideoStream(videoId, encoding, stream, isLive);

                    // Secure content
                    _setSecureContent(videoId, stream.contentMetadata);
                }, this);

                var vcVideoElementCreated = _.bind(function(eventName, elementParams) {
                    // Set current volume
                    if (typeof currentVolume === "number") {
                        mb.publish(OO.EVENTS.CHANGE_VOLUME, currentVolume, elementParams["videoId"]);
                    }
                    _changeCrossorigin(elementParams["videoId"]);
                }, this);

                /**
                 * Disposes an entire video instance as well as a non-shared element.
                 * @private
                 * @method VideoController#vcDisposeVideoElement
                 * @param {string} eventName The name of the event that triggered this instance disposal.
                 * @param {string} videoId The name of the disposed video instance.
                 * @fires OO.EVENTS.VC_VIDEO_ELEMENT_DISPOSED
                 */
                var vcDisposeVideoElement = _.bind(function(eventName, videoId) {
                    if (!videoId) return;

                    // Remove focus
                    if (this.focusVideoId === videoId) {
                        // Note: this function attempts to pause the video, but this will take place after the destroy
                        _removeFocusFromElement(videoId);
                    }

                    // Hand off element control
                    _handoffElementControl(videoId);

                    // Delete the instance
                    if (this.activeInstances[videoId]) {
                        var element = this.activeInstances[videoId].element;
                        delete this.activeInstances[videoId];

                        // Destroy orphaned elements
                        if (element && !_hasInstances(element)) {
                            // If not associated with virtual instances, destroy the element
                            _safeFunctionCall(element, "destroy", []);
                            activeElements = _.without(activeElements, element);
                            element = null;
                        }
                    }

                    // Delete the instance and notify
                    mb.publish(OO.EVENTS.VC_VIDEO_ELEMENT_DISPOSED, videoId);
                }, this);

                var _hasInstances = _.bind(function(element) {
                    if (!element) return false;
                    for (var instance in this.activeInstances) {
                        if (this.activeInstances[instance] &&
                            this.activeInstances[instance].element &&
                            this.activeInstances[instance].element === element )
                            return true;
                    }
                    return false;
                }, this);

                var willPlayAds = _.bind(function(eventName, params) {
                    // Remove the closed captions prior to ad play on iOS
                    if (OO.isIos && params && params.duration > 0) {
                        setClosedCaptionsLanguage('', '', {"mode": ccMode});
                    }
                }, this);


                // ********************
                // Element focus
                // ********************

                var vcFocusVideoElement = _.bind(function(eventName, videoId, ooyalaAds) {
                    // If already in focus
                    if (videoId && (this.focusVideoId === videoId)) {
                        mb.publish(OO.EVENTS.VC_VIDEO_ELEMENT_IN_FOCUS, videoId);
                        return;
                    }

                    // Defocus currently focused element
                    // Don't necessarily need to do null check here
                    //csai
                    if (this.focusVideoId) {
                        //if csai mode, the currently focused element is main, main video is live, and sharing is not required
                        if (csaiMode && this.focusVideoId === OO.VIDEO.MAIN && this.activeInstances[this.focusVideoId] &&
                            this.activeInstances[this.focusVideoId].isLive &&
                            !_checkIfElementSharingRequired(registeredPlugins[this.activeInstances[this.focusVideoId].plugin])) {
                            //just mute the volume, so we can continue receiving ID3 tags in the background
                            savedMainVolume = currentVolume === null ? 1 : currentVolume;
                            _callIfInControl(this.focusVideoId, "setVolume", [0]);
                        } else {
                            //else go with default behavior
                            _removeFocusFromElement(this.focusVideoId);
                        }
                    }
                    this.focusVideoId = null;

                    // Check if we should focus anything
                    if (!videoId || !this.activeInstances[videoId]) {
                        return;
                    }
                    this.focusVideoId = videoId;

                    //csai
                    if (this.focusVideoId === OO.VIDEO.MAIN && savedMainVolume !== null) {
                        _callIfInControl(this.focusVideoId, "setVolume", [savedMainVolume]);
                    }

                    /* PBF-790: In case of ooyala ads, _takeElementControl() is not called when ad is done playing in devices.
                     Found that isControllingElement of main element is set to true when ad finishes playing.
                     Tried setting the isControllingElement of main to false when ad starts playing on EMBED_CODE_CHANGED
                     event in AMC but it didn't work. As we are not sure on the root cause of the problem below is the
                     workaround to switch the control from ad element to main once ad is done playing in devices
                     */
                    if (ooyalaAds && videoId === OO.VIDEO.MAIN) {
                        this.activeInstances[videoId].isControllingElement = false;
                    }

                    _prepareInstanceForAction(videoId);
                    // Focus the element
                    var css = { "visibility": "visible" };
                    if (OO.isIos) {
                        css["display"] = OO.CSS.VISIBLE_DISPLAY;
                    } else {
                        css["left"] = "0px";
                    }
                    _safeFunctionCall(this.activeInstances[videoId].element, "applyCss", [css]);

                    //Workaround to allow iPhone to remove closed captions before switching the video element
                    if (OO.isIos) {
                        _.delay(function() {
                            mb.publish(OO.EVENTS.VC_VIDEO_ELEMENT_IN_FOCUS, videoId);
                        }, 1);
                    } else {
                        mb.publish(OO.EVENTS.VC_VIDEO_ELEMENT_IN_FOCUS, videoId);
                    }

                    // Set the closed captions for the element in focus
                    setClosedCaptionsLanguage('', activeLanguage, {"mode": ccMode});
                }, this);

                var _removeFocusFromElement = _.bind(function(videoId) {
                    if (!(videoId && this.activeInstances && this.activeInstances[videoId] &&
                        this.activeInstances[videoId].element)) {
                        return;
                    }

                    //csai
                    if (this.focusVideoId === OO.VIDEO.ADS && savedMainVolume !== null) {
                        _callIfInControl(OO.VIDEO.MAIN, "setVolume", [savedMainVolume]);
                    }

                    // Send the 'transition' parameter to indicate that the video is going into hiding
                    // The skin should use this field to know not to show the pause animation
                    mb.publish(OO.EVENTS.VC_PAUSE, videoId, "transition");

                    this.focusVideoId = null;
                    var css = { "visibility": "hidden" };
                    if (OO.isIos) {
                        css["display"] = OO.CSS.INVISIBLE_DISPLAY;
                    } else {
                        css["left"] = "-100000px";
                    }

                    _safeFunctionCall(this.activeInstances[videoId].element, "applyCss", [css]);
                    _safeFunctionCall(this.activeInstances[videoId].element, "setClosedCaptionsMode", [OO.CONSTANTS.CLOSED_CAPTIONS.DISABLED]);

                    mb.publish(OO.EVENTS.VC_VIDEO_ELEMENT_LOST_FOCUS, videoId);
                }, this);


                // ********************
                // Plugin control apis
                // ********************

                var adsPlayed = _.bind(function(eventName) {
                    if (this.activeInstances[this.focusVideoId]) {
                        _safeFunctionCall(this.activeInstances[this.focusVideoId].element, "onAdsPlayed");
                    }
                }, this);

                var vcSetVideoStreams = _.bind(function(eventName, videoId, streams, isLive) {
                    if (!(videoId && this.activeInstances && this.activeInstances[videoId] &&
                        this.activeInstances[videoId].element)) {
                        return;
                    }

                    // if streams parameter is empty, clear stream object from the video
                    if (!streams) {
                        _setVideoStream(videoId, "", {url:""}, false);
                        return;
                    }

                    var chosenEncoding = _selectEncoding(streams,
                        this.activeInstances[videoId].element.supportedEncodings,
                        _getEncodingPriorities());

                    /*
                     // TODO: Do we wish to select an encoding based on the full list of plugins or use the one we have?
                     mb.publish(OO.EVENTS.VC_DISPOSE_VIDEO_ELEMENT, OO.VIDEO.ADS);
                     mb.publish(OO.EVENTS.VC_CREATE_VIDEO_ELEMENT, OO.VIDEO.ADS, streams, this.pluginsElement);
                     (if it was in focus, focus the new element)
                     */

                    // If none are selected, raise an error
                    if (!chosenEncoding) {
                        mb.publish(OO.EVENTS.VC_ERROR, videoId, {code: OO.ERROR.VC.UNSUPPORTED_ENCODING});
                        return;
                    }

                    _setVideoStream(videoId, chosenEncoding, streams[chosenEncoding], isLive || this.activeInstances[videoId].isLive);
                }, this);

                var vcPreload = _.bind(function(eventName, videoId) {
                    if (canPreload) {
                        _callIfInControl(videoId, "load", [true]);
                    }
                }, this);

                var vcReload = _.bind(function(eventName, videoId) {
                    _callIfInControl(videoId, "load", [false]);
                }, this);

                var vcSetInitialTime = _.bind(function(eventName, videoId, initialTime) {
                    if (this.activeInstances && this.activeInstances[videoId] && this.activeInstances[videoId].element) {
                        // NOTE: Each video technology may handle this differently.
                        _safeFunctionCall(this.activeInstances[videoId].element, "setInitialTime", [initialTime]);
                    }
                }, this);

                var vcPrimeVideos = _.bind(function() {
                    // Prime each video element to enable api-controlled video playback on devices
                    for (var videoId in this.activeInstances) {
                        _callIfInControl(videoId, "primeVideoElement", []);
                    }
                }, this);

                var play = _.bind(function() {
                    // TODO: May need to take url as a parameter
                    mb.publish(OO.EVENTS.VC_PLAY, this.focusVideoId);
                }, this);

                var vcPlay = _.bind(function(eventName, videoId, url) {
                    if (!(this.activeInstances && this.activeInstances[videoId])) {
                        return;
                    }

                    if (url) {
                        if (this.activeInstances[videoId].stream) {
                            this.activeInstances[videoId].stream.url = url;
                        } else {
                            this.activeInstances[videoId].stream = {url:url};
                        }
                    }

                    _prepareInstanceForAction(videoId);

                    // This value may be null in the case where a module will be controlling the url manually
                    // This is true for freewheel
                    if (this.activeInstances[videoId].stream && this.activeInstances[videoId].stream.url) {
                        _setVideoStream(videoId, this.activeInstances[videoId].encoding, this.activeInstances[videoId].stream, this.activeInstances[videoId].isLive);
                        // If we don't sent playing to true here, then if we lose element control before playing is raised
                        // we may not keep our current position.  This happens when switching to an ad after seeking if
                        // we were paused.
                        this.activeInstances[videoId].playing = true;
                    }

                    // Focus the video element?
                    _safeFunctionCall(this.activeInstances[videoId].element, "play", []);
                }, this);

                var pause = _.bind(function() {
                    mb.publish(OO.EVENTS.VC_PAUSE, this.focusVideoId);
                }, this);

                var vcPause = _.bind(function(eventName, videoId) {
                    _callIfInControl(videoId, "pause", []);
                }, this);

                var seek = _.bind(function(eventName, time, videoIdIn) {
                    var videoId = videoIdIn || this.focusVideoId;
                    mb.publish(OO.EVENTS.VC_SEEK, videoId, time);
                }, this);

                var vcSeek = _.bind(function(eventName, videoId, time) {
                    if (videoId && this.activeInstances[videoId] && this.activeInstances[videoId].element &&
                        this.activeInstances[videoId].element.wrapper) {
                        _callIfInControl(videoId, "seek", [time]);
                    }
                }, this);

                var changeVolume = _.bind(function(eventName, newVolume, videoId) {
                    if (typeof(newVolume) !== "number" || newVolume < 0 || newVolume > 1) {
                        log("Can not assign volume with invalid value", newVolume);
                        return;
                    }

                    currentVolume = newVolume;
                    if (videoId) {
                        _callIfInControl(videoId, "setVolume", [currentVolume]);
                    } else {
                        // Change the volume on all active elements
                        for (var index=0; index < activeElements.length; index++) {
                            _safeFunctionCall(activeElements[index], "setVolume", [currentVolume]);
                        }
                    }
                }, this);

                var pageUnloadRequested = _.bind(function() {
                    _delayErrorPublishing();
                }, this);

                var enableSeeking = _.bind(function(eventName, videoId) {
                    if (videoId && this.activeInstances[videoId]) {
                        this.activeInstances[videoId].disableNativeSeek = false;
                        if (this.activeInstances[videoId].isControllingElement &&
                            this.activeInstances[videoId].element &&
                            this.activeInstances[videoId].element.isControllingObject &&
                            this.activeInstances[videoId].element.wrapper) {
                            this.activeInstances[videoId].element.wrapper.disableNativeSeek = false;
                        }
                    }
                }, this);

                var disableSeeking = _.bind(function(eventName, videoId) {
                    if (videoId && this.activeInstances[videoId]) {
                        this.activeInstances[videoId].disableNativeSeek = true;
                        if (this.activeInstances[videoId].isControllingElement &&
                            this.activeInstances[videoId].element &&
                            this.activeInstances[videoId].element.isControllingObject &&
                            this.activeInstances[videoId].element.wrapper) {
                            this.activeInstances[videoId].element.wrapper.disableNativeSeek = true;
                        }
                    }
                }, this);

                var setClosedCaptionsLanguage = _.bind(function(eventName, language, params) {
                    var captionParams = params || {};
                    if (captionParams.mode == null) {
                        captionParams.mode = OO.CONSTANTS.CLOSED_CAPTIONS.SHOWING;
                    }
                    activeLanguage = language;
                    ccMode = captionParams.mode;

                    if (this.focusVideoId && captionParams.mode == OO.CONSTANTS.CLOSED_CAPTIONS.DISABLED) {
                        _callIfInControl(this.focusVideoId, "setClosedCaptionsMode", [captionParams.mode]);
                    } else if (this.activeInstances[this.focusVideoId]) {
                        // March 2016 iPhone and iPad use their native video players so we must let them also render the captions, instead of our skin.
                        if (captionParams.mode == OO.CONSTANTS.CLOSED_CAPTIONS.HIDDEN && (OO.isIphone || (OO.isIpad && captionParams.isFullScreen))) {
                            captionParams.mode = OO.CONSTANTS.CLOSED_CAPTIONS.SHOWING;
                        }

                        _callIfInControl(this.focusVideoId, "setClosedCaptions", [language, this.activeInstances[this.focusVideoId].closedCaptions, captionParams]);
                    }
                }, this);

                var setTargetBitrate = _.bind(function(eventName, targetBitrate) {
                    // check bitrate feature available and call setBitrate on plugin
                    if (this.focusVideoId && _.contains(registeredPlugins[this.activeInstances[this.focusVideoId].plugin].features,
                            OO.VIDEO.FEATURE.BITRATE_CONTROL)) {
                        _callIfInControl(this.focusVideoId, "setBitrate", [targetBitrate]);
                    }
                }, this);

                /**
                 * Destroy the Video Tech Controller, all elements, and all plugins.
                 * @method VideoController#onDestroy
                 * @public
                 */
                this.onDestroy = function() {
                    // Destroy all instances
                    for (var videoId in this.activeInstances) {
                        vcDisposeVideoElement(OO.EVENTS.DESTROY, videoId);
                    }

                    // TODO: Destroy self
                };

                // ********************
                // Public Plugin APIs
                // ********************

                /**
                 * Notify the Video Controller of an event from the video.  This is not called directly by the plugins.
                 * @method VideoController#notify
                 * @protected
                 * @param {string} videoId The id of the video element
                 * @param {string} plugin The plugin name
                 * @param {string} eventName The event name as found in VideoController#EVENTS
                 * @param {object} eventparams The event parameters.
                 *                             Refer to VideoController#EVENTS for required parameters for each event.
                 * @fires OO.EVENTS.VC_WILL_PLAY
                 * @fires OO.EVENTS.SEEK
                 * @fires OO.EVENTS.VC_CAN_PLAY
                 * @fires OO.EVENTS.VC_PLAYING
                 * @fires OO.EVENTS.VC_PLAYED
                 * @fires OO.EVENTS.VC_ERROR
                 * @fires OO.EVENTS.VC_SEEKING
                 * @fires OO.EVENTS.VC_SEEKED
                 * @fires OO.EVENTS.VC_PAUSED
                 * @fires OO.EVENTS.PLAYHEAD_TIME_CHANGED
                 * @fires OO.EVENTS.VOLUME_CHANGED
                 * @fires OO.EVENTS.BUFFERING
                 * @fires OO.EVENTS.BUFFERED
                 * @fires OO.EVENTS.DOWNLOADING
                 * @fires OO.EVENTS.FULLSCREEN_CHANGED
                 * @fires OO.EVENTS.CLOSED_CAPTIONS_INFO_AVAILABLE
                 * @fires OO.EVENTS.ASSET_DIMENSION
                 */
                this.notify = function(videoId, plugin, eventName, eventparams) {
                    var params = eventparams || {};
                    switch(eventName) {
                        case this.EVENTS.PLAY:
                            mb.publish(OO.EVENTS.VC_WILL_PLAY, videoId, params["url"]);
                            break;
                        case this.EVENTS.CAN_PLAY:
                            mb.publish(OO.EVENTS.VC_CAN_PLAY, videoId);
                            break;
                        case this.EVENTS.PLAYING:
                            mb.publish(OO.EVENTS.VC_PLAYING, videoId); // this used to have the stream url as a parameter
                            break;
                        case this.EVENTS.ENDED:
                            if (this.activeInstances[videoId]) {
                                this.activeInstances[videoId].playing = false;
                            }
                            mb.publish(OO.EVENTS.VC_PLAYED, videoId);
                            break;
                        case this.EVENTS.ERROR:
                            this.markReady(videoId);
                            if (this.activeInstances[videoId]) {
                                this.activeInstances[videoId].playing = false;
                            }
                            _handleErrors(params["errorcode"], videoId);
                            break;
                        case this.EVENTS.SEEKING:
                            mb.publish(OO.EVENTS.VC_SEEKING, videoId);
                            break;
                        case this.EVENTS.SEEKED:
                            if (this.activeInstances[videoId]) {
                                var playhead = _safeFunctionCall(this.activeInstances[videoId].element, "getCurrentTime");
                                mb.publish(OO.EVENTS.VC_SEEKED, videoId, playhead);
                            }
                            break;
                        case this.EVENTS.PAUSED:
                            mb.publish(OO.EVENTS.VC_PAUSED, videoId); // this event used to have the url as the parameter
                            break;
                        case this.EVENTS.TIME_UPDATE:
                            if (typeof params["duration"] !== "number") return;
                            if (typeof params["currentTime"] !== "number") return;
                            var currentLiveTime;
                            if (this.activeInstances[videoId].isLive) {
                                currentLiveTime = params["currentLiveTime"];
                            }
                            mb.publish(OO.EVENTS.PLAYHEAD_TIME_CHANGED, params["currentTime"], params["duration"],
                                params["buffer"], params["seekRange"], videoId, currentLiveTime);
                            break;
                        case this.EVENTS.VOLUME_CHANGE:
                            mb.publish(OO.EVENTS.VOLUME_CHANGED, params["volume"], videoId);
                            break;
                        case this.EVENTS.BUFFERING:
                            mb.publish(OO.EVENTS.BUFFERING, params["url"], videoId);
                            break;
                        case this.EVENTS.BUFFERED:
                            mb.publish(OO.EVENTS.BUFFERED, params["url"], videoId);
                            break;
                        case this.EVENTS.DURATION_CHANGE:
                            if (typeof params["duration"] !== "number") return;
                            mb.publish(OO.EVENTS.PLAYHEAD_TIME_CHANGED, params["currentTime"], params["duration"],
                                params["buffer"], params["seekRange"], videoId);
                            break;
                        case this.EVENTS.PROGRESS:
                            mb.publish(OO.EVENTS.DOWNLOADING, params["currentTime"], params["duration"],
                                params["buffer"], params["seekRange"], videoId);
                            break;
                        case this.EVENTS.WAITING:
                            mb.publish(OO.EVENTS.BUFFERING, params["url"], videoId);
                            break;
                        case this.EVENTS.FULLSCREEN_CHANGED:
                            mb.publish(OO.EVENTS.FULLSCREEN_CHANGED, params["isFullScreen"], params["paused"], videoId);
                            setClosedCaptionsLanguage('', activeLanguage, {"mode": ccMode, "isFullScreen": params["isFullScreen"]});
                            break;
                        case this.EVENTS.CAPTIONS_FOUND_ON_PLAYING:
                            if (this.activeInstances[videoId] && eventparams) {
                                //Set crossorigin so that we can load captions from outside sources
                                _setCrossorigin(videoId, "anonymous");

                                //Add the found plugins from the plugin to our existing available captions
                                var availableClosedCaptions = {
                                    videoId: videoId,
                                    languages: [],
                                    locale: {}
                                };
                                if (this.activeInstances[videoId].closedCaptions &&
                                    this.activeInstances[videoId].closedCaptions.availableLanguages &&
                                    this.activeInstances[videoId].closedCaptions.locale) {

                                    availableClosedCaptions.languages = this.activeInstances[videoId].closedCaptions.availableLanguages;
                                    availableClosedCaptions.locale = this.activeInstances[videoId].closedCaptions.locale;
                                }

                                availableClosedCaptions.languages = _.union(availableClosedCaptions.languages, eventparams.languages);
                                availableClosedCaptions.locale = _.extend(availableClosedCaptions.locale, eventparams.locale);

                                mb.publish(OO.EVENTS.CLOSED_CAPTIONS_INFO_AVAILABLE, availableClosedCaptions);
                            }
                            break;
                        case this.EVENTS.ASSET_DIMENSION:
                            if (typeof params["width"] == "number" && params["width"] > 0 &&
                                typeof params["height"] == "number" && params["height"] > 0) {
                                _.extend(params, {videoId: videoId});
                                mb.publish(OO.EVENTS.ASSET_DIMENSION, params);
                            }
                            break;
                        case this.EVENTS.BITRATES_AVAILABLE:
                            //publish bitrate available event to MB, possibly store the bitrates?
                            mb.publish(OO.EVENTS.BITRATE_INFO_AVAILABLE, {bitrates: eventparams});
                            break;
                        case this.EVENTS.BITRATE_CHANGED:
                            if (_validateBitrate(eventparams)) {
                                mb.publish(OO.EVENTS.BITRATE_CHANGED, eventparams);
                            } else {
                                log("Invalid bitrate object reported", eventparams);
                            }
                            break;
                        case this.EVENTS.CLOSED_CAPTION_CUE_CHANGED:
                            if (typeof eventparams !== 'string') return;
                            mb.publish(OO.EVENTS.CLOSED_CAPTION_CUE_CHANGED, eventparams);
                            break;
                        case this.EVENTS.METADATA_FOUND:
                            if (eventparams["type"] && eventparams["data"]) {
                                mb.publish(OO.EVENTS.VC_TAG_FOUND, videoId, eventparams["type"], eventparams["data"]);
                            }
                            break;
                    }
                };

                /**
                 * Notifies the Video Controller that the video element is not ready to receive play commands.  This
                 * will only have an effect if called before returning the element in the create API.
                 * This should only be used in cases when the video wrapper will not be able to handle play events
                 * in a synchronous fashion on devices such as Android that require playback directly upon user click.
                 * @method VideoController#markNotReady
                 * @protected
                 * @param {string} videoId The videoId to mark as not ready.
                 */
                this.markNotReady = function(videoId) {
                    if (videoId && this.activeInstances[videoId] && !isPlaybackReady) {
                        elementsNotReady.push(videoId);

                        if (readyTimer === null) {
                            mb.addDependent(OO.EVENTS.PLAYBACK_READY, OO.EVENTS.VC_READY, "vtc", _restoreOrigParams);
                            readyTimer = setTimeout(_declareReadyOnTimeout, READY_TIMEOUT);
                        }
                    }
                };

                /**
                 * Notifies the Video Controller that the video element is ready to receive play commands.  This function
                 * should only be called if VideoControllerInterface.markNotReady was called.
                 * @method VideoController#markReady
                 * @protected
                 * @param {string|null} videoId The videoId to mark as ready.  If null is passed, marks all elements as ready.
                 * @fires OO.EVENTS.VC_READY
                 */
                this.markReady = function(videoId) {
                    if (readyTimer === null && elementsNotReady.length === 0) {
                        return;
                    }

                    if (!videoId) {
                        elementsNotReady = [];
                    } else {
                        elementsNotReady = _.without(elementsNotReady, videoId);
                    }

                    if (elementsNotReady.length === 0) {
                        if (readyTimer !== null) {
                            clearTimeout(readyTimer);
                            readyTimer = null;
                        }
                        mb.publish(OO.EVENTS.VC_READY);
                    }
                };

                // ********************
                // Helpers
                // ********************

                /**
                 * This ensures that the parameters from the blocked event are maintained if it has a dependent
                 * If nothing (or null) is returned, the blocked event would get raised with the parameters of
                 * the blocker rather than the parameters which were specified by the caller.
                 * This is required to ensure that VC_PLAY passes the stream url
                 * This will change with PBW-2910 and can be removed at that time.
                 * @private
                 * @method VideoController#_restoreOrigParams
                 */
                var _restoreOrigParams = function(eventName, dependentEvent, origParams, args){
                    return origParams;
                };

                /**
                 * Marks all plugins as ready.
                 * @private
                 * @method VideoController#_declareReadyOnTimeout
                 */
                var _declareReadyOnTimeout = _.bind(function() {
                    this.markReady();
                }, this);

                /**
                 * Safely triggers a function with the specified video wrapper.
                 * @method VideoController#_safeFunctionCall
                 * @private
                 * @param {string} videoElement The element on which to call a function
                 * @param {string} func The function to call
                 * @param {object} params An array containing the function parameters
                 * @returns {*} The return value of the function that was run or null
                 */
                var _safeFunctionCall = function(videoElement, func, params) {
                    if (!videoElement) return;
                    var videoWrapper = videoElement.wrapper;
                    if (!videoWrapper) return;
                    try {
                        if (_.isFunction(videoWrapper[func])) {
                            return videoWrapper[func].apply(videoWrapper, params);
                        }
                    } catch (err) {
                        console.warn("Video tech plugin", (videoElement && videoElement.plugin), "at function '" + func +
                            "' threw exception - ", err);
                    }
                    return null;
                };

                /**
                 * Calls a function on a video element if the videoInstance is controlling the video element.
                 * When a virtual instance has control, the instance managing real element does not (and vica versa).
                 * @private
                 * @method VideoController#_callIfInControl
                 * @param {string} videoId The id of the video instance to call a function on
                 * @param {string} func The function to call on the video instance
                 * @param {object} params A list of the parameters to pass to the function
                 * @returns {*} The return value of the function that was run or null
                 */
                var _callIfInControl = _.bind(function(videoId, func, params) {
                    if (!this.activeInstances[videoId] ||
                        !this.activeInstances[videoId].element ||
                        !this.activeInstances[videoId].isControllingElement) return;
                    return _safeFunctionCall(this.activeInstances[videoId].element, func, params);
                }, this);

                /**
                 * Sets crossorigin attribute based on the video instance.
                 * @private
                 * @method VideoController#_setCrossorigin
                 * @param {string} videoId The id of the video to set the attribute
                 * @param {object} crossorigin The crossorigin object to set on the element
                 */
                var _setCrossorigin = _.bind(function(videoId, crossorigin) {
                    if (!this.activeInstances[videoId]) return;
                    this.activeInstances[videoId].crossorigin = crossorigin;
                    _changeCrossorigin(videoId);
                }, this);

                /**
                 * Changes crossorigin attribute based on the video instance.
                 * @private
                 * @method VideoController#_changeCrossorigin
                 * @param {string} videoId The id of the video to set the attribute
                 */
                var _changeCrossorigin = _.bind(function(videoId) {
                    if (!this.activeInstances[videoId]) return;

                    if (this.activeInstances[videoId].crossorigin) {
                        _callIfInControl(videoId, "setCrossorigin", [this.activeInstances[videoId].crossorigin]);
                    } else {
                        _callIfInControl(videoId, "setCrossorigin", [null]);
                    }
                }, this);

                /**
                 * Switches playback sessions between unique instances of a single shared video element.
                 * @private
                 * @method VideoController#_switchElementBetweenInstances
                 * @param {string} videoId The id of the video taking control
                 */
                var _switchElementBetweenInstances = _.bind(function(videoId) {
                    var oldController = _takeElementControl(videoId);

                    // Set the crossorigin attribute
                    _changeCrossorigin(videoId);

                    // Update the vtc interface for the wrapper
                    this.activeInstances[videoId].element.wrapper.controller = this.activeInstances[videoId].vtcInterface;

                    // Reset the stream url and position
                    _resetElementDataAfterSwitch(this.activeInstances[videoId], oldController);
                }, this);

                /**
                 * Switch control from the instance currently in control of the shared element to the specified instance.
                 * @private
                 * @method VideoController#_takeElementControl
                 * @param {string} videoId The id of the video taking control
                 * @returns {object} The video instance that previously had control of the shared element
                 */
                var _takeElementControl = _.bind(function(videoId) {
                    var newController = this.activeInstances[videoId];
                    if (newController.isControllingElement) return newController;

                    // Find the instance currently in control
                    var oldController = null;
                    for (var instance in this.activeInstances) {
                        if (this.activeInstances[instance] &&
                            this.activeInstances[instance].element &&
                            this.activeInstances[instance].element === newController.element &&
                            this.activeInstances[instance].isControllingElement) {
                            oldController = this.activeInstances[instance];
                            break;
                        }
                    }

                    log("Switching element between instances.  From: '" + instance + "', To: '" + videoId + "'");

                    // Swap Control
                    newController.isControllingElement = true;
                    if (oldController) {
                        oldController.isControllingElement = false;
                        return oldController;
                    }
                }, this);

                /**
                 * Switch control from the specified instance to another instance using the same element.
                 * @private
                 * @method VideoController#_handoffElementControl
                 * @param {string} videoId The id of the video losing control
                 */
                var _handoffElementControl = _.bind(function(videoId) {
                    var oldController = this.activeInstances[videoId];
                    if (!oldController || !oldController.isControllingElement) {
                        return;
                    }

                    // Find an instance not currently in control
                    var newController = null;
                    for (var instance in this.activeInstances) {
                        if (this.activeInstances[instance] &&
                            this.activeInstances[instance].element &&
                            this.activeInstances[instance].element === oldController.element &&
                            !this.activeInstances[instance].isControllingElement) {
                            newController = this.activeInstances[instance];
                            break;
                        }
                    }

                    // Swap Control
                    oldController.isControllingElement = false;
                    if (newController) {
                        newController.isControllingElement = true;
                    }
                }, this);

                /**
                 * If the video object is shared, switch control between element wrappers
                 * @private
                 * @method VideoController#_switchElementWrapperControl
                 * @param {string} videoId The id of the video instance taking control
                 */
                var _switchElementWrapperControl = _.bind(function(videoId) {
                    if (!this.activeInstances[videoId].element.isControllingObject) {
                        // Switch control
                        var oldController = this.activeInstances[videoId].element.sharedObjectToInstance;
                        log("Switching wrapper between elements.  From: '" + oldController + "', To: '" + videoId + "'");
                        _safeFunctionCall(this.activeInstances[oldController].element, "sharedElementGive", []);
                        this.activeInstances[oldController].element.isControllingObject = false;
                        _safeFunctionCall(this.activeInstances[videoId].element, "sharedElementTake", []);
                        this.activeInstances[videoId].element.isControllingObject = true;

                        // Reset the stream url and position
                        _resetElementDataAfterSwitch(this.activeInstances[videoId], this.activeInstances[oldController]);
                    }
                }, this);

                /**
                 * Sets the stream url and position to that of the newInstance and saves the playhead of the old instance.
                 * @private
                 * @method VideoController#_resetElementDataAfterSwitch
                 * @param {object} newInstance The video instance taking control of the element
                 * @param {object} oldInstance The video instance losing control of the element
                 */
                var _resetElementDataAfterSwitch = _.bind(function(newInstance, oldInstance) {
                    // Save the old playhead
                    if (oldInstance) {
                        // Check if the stream has finished playing or hasn't played at all, if so, save 0 as the playhead
                        if (oldInstance.playing === true) {
                            oldInstance.playhead = _safeFunctionCall(oldInstance.element, "getCurrentTime");
                            /* PBW-5179: In iOS, getCurrentTime() returns zero for the main video. Below is the workaround to set
                             the playhead to the correct value */
                            if (OO.isIos && oldInstance.playhead === 0) {
                                oldInstance.playhead  = this.currentPlayhead;
                                this.currentPlayhead = 0;
                            }
                        } else {
                            oldInstance.playhead = 0;
                        }
                    }

                    // Set the new stream
                    if (newInstance.stream) {
                        var stream = newInstance.stream;
                        var encoding = newInstance.encoding;
                        var isLive = newInstance.isLive;
                        _callIfInControl(newInstance.element, "setPlatform", [newInstance.params.platform, encoding]);
                        _safeFunctionCall(newInstance.element, "setVideoUrl", [stream.url, encoding, isLive || false]);
                        newInstance.playing = false;
                        // Set DRM data if needed
                        if (stream.drm && !_.isEmpty(stream.drm) && _isSupportedDRMEncoding(encoding)) {
                            _safeFunctionCall(newInstance.element, "setDRM", [stream.drm]);
                        }
                    }

                    // Set initial time if required
                    if (newInstance.playhead > 0) {
                        _safeFunctionCall(newInstance.element, "setInitialTime", [newInstance.playhead]);
                    }

                    // Restore native seeking state
                    if (newInstance.element && newInstance.element.wrapper) {
                        newInstance.element.wrapper.disableNativeSeek = newInstance.disableNativeSeek;
                    }
                }, this);

                /**
                 * Disposes a video element while keeping the video instance around.  Selects which video element to
                 * dispose based on technology.
                 * This function is not being called and might be deprecated.  It was made public to enable unit testing.
                 * @protected
                 * @method VideoController#_disposeAnyElementKeepInstance
                 */
                this.disposeAnyElementKeepInstance = function() {
                    // Favor disposal of an HTML5-based instance in case the mixed instance is not HTML5-based.
                    var favoredTechnology = OO.VIDEO.TECHNOLOGY.HTML5;
                    var videoId = _findElementToDispose(favoredTechnology);
                    _disposeElementKeepInstance(videoId);
                };

                /**
                 * Selects which video element to dispose based on technology.  If an element of this technology cannot
                 * be found, an element of technology "mixed" will be selected (if available).
                 * This function is not being called and might be deprecated.
                 * @private
                 * @method VideoController#_findElementToDispose
                 * @param {string} desiredTechnology The technology of the video instance to select
                 */
                var _findElementToDispose = _.bind(function(desiredTechnology) {
                    var instanceToDispose = null;
                    for (var instance in this.activeInstances) {
                        if (this.activeInstances[instance] &&
                            this.activeInstances[instance].element) {
                            var technology = registeredPlugins[this.activeInstances[instance].plugin].technology;
                            if (technology === desiredTechnology) {
                                return instance;
                            } else if (technology === OO.VIDEO.TECHNOLOGY.MIXED) {
                                instanceToDispose = instance;
                            }
                        }
                    }

                    return instanceToDispose;
                }, this);

                /**
                 * Disposes a video element while keeping the video instance around.
                 * This function is not being called and might be deprecated.
                 * @private
                 * @method VideoController#_disposeElementKeepInstance
                 * @param {string} videoId The id of the video instance within which to dispose the video element
                 */
                var _disposeElementKeepInstance = _.bind(function(videoId) {
                    if (!videoId) return;

                    // NOTE: Be careful here for ads.  We don't want a new ad to use the position of the previous stream.
                    // Currently there is no issue here because ads will attempt to re-create the instance, thus not
                    // hitting this line of code.
                    // Check if the stream has finished playing or hasn't played at all, if so, save 0 as the playhead
                    if (this.activeInstances[videoId].playing === true) {
                        this.activeInstances[videoId].playhead = _safeFunctionCall(this.activeInstances[videoId].element,
                            "getCurrentTime");
                    } else {
                        this.activeInstances[videoId].playhead = 0;
                    }

                    // Remove focus
                    if (this.focusVideoId === videoId) {
                        // Note: this function attempts to pause the video, but this will take place after the destroy
                        _removeFocusFromElement(videoId);
                    }

                    // Remove element from all shared instances
                    for (var instance in this.activeInstances) {
                        if (instance === videoId) continue;
                        if (this.activeInstances[instance] &&
                            this.activeInstances[instance].element &&
                            this.activeInstances[instance].element === this.activeInstances[videoId].element) {
                            this.activeInstances[instance].isControllingElement = true;
                            this.activeInstances[instance].element = null;
                        }
                    }

                    // Quietly dispose the video element, do not raise an event to denote instance destroyal
                    if (this.activeInstances[videoId].element) {
                        _safeFunctionCall(this.activeInstances[videoId].element, "destroy", []);
                        activeElements = _.without(activeElements, this.activeInstances[videoId].element);
                        this.activeInstances[instance].isControllingElement = true;
                        this.activeInstances[videoId].element = null;
                    }
                }, this);

                /**
                 * Re-creates a video element for an existing instance.
                 * @private
                 * @method VideoController#_recreateDisposedElement
                 * @param {string} videoId The id of the video instance within which to re-create the video element
                 */
                var _recreateDisposedElement = _.bind(function(videoId) {
                    // Grab the playhead before creating a new element
                    var playhead = this.activeInstances[videoId].playhead;

                    _createInstance(registeredPlugins[this.activeInstances[videoId].plugin],
                        videoId,
                        this.activeInstances[videoId].parentContainer,
                        this.activeInstances[videoId].encoding,
                        this.activeInstances[videoId].stream,
                        this.activeInstances[videoId].isLive,
                        this.activeInstances[videoId].params);

                    vcVideoElementCreated("recreate", { "videoId" : videoId });

                    // Set initial time if required
                    if (playhead > 0) {
                        _safeFunctionCall(this.activeInstances[videoId].element, "setInitialTime", [playhead]);
                    }

                    // Restore native seeking state
                    if (this.activeInstances[videoId].element && this.activeInstances[videoId].element.wrapper) {
                        this.activeInstances[videoId].element.wrapper.disableNativeSeek =
                            this.activeInstances[videoId].disableNativeSeek;
                    }
                }, this);

                /**
                 * Prepares and instance to take action.  Recreates dispose elements and takes element control.
                 * @private
                 * @method VideoController#_prepareInstanceForAction
                 * @param {string} videoId The id of the video instance to prepare for action.
                 */
                var _prepareInstanceForAction = _.bind(function(videoId) {
                    if (this.activeInstances[videoId] && !this.activeInstances[videoId].element) {
                        _recreateDisposedElement(videoId);
                    }

                    // If it's virtual, switch to this element
                    if (!this.activeInstances[videoId].isControllingElement) {
                        _switchElementBetweenInstances(videoId);
                    }

                    // If the video object is shared, switch control between element wrappers
                    _switchElementWrapperControl(videoId);
                }, this);

                /**
                 * Some plugins do not set the desired domId on the core video element.  Make a best-effort to find the
                 * actual video element.  This won't be possible for flash-based videos.
                 * @private
                 * @method VideoController#_getElementIdOfVideo
                 * @param {string} domId The dom id of the element to find
                 */
                var _getElementIdOfVideo = _.bind(function(domId){
                    var element = $("#" + domId);
                    if (element.length > 0 && !element.is("video")) {
                        var foundElementId = element.find("video").attr("id");
                        if (foundElementId) {
                            return foundElementId;
                        }
                    }

                    return domId;
                }, this);

                /**
                 * Sets the video stream and DRM on the given element.
                 * @private
                 * @method VideoController#_setVideoStream
                 * @param {string} videoId The id of the video instance
                 * @param {string} encoding The encoding of video stream, possible values are found in OO.VIDEO.ENCODING
                 * @param {object} stream The url and drm of the stream to set on the video element
                 * @param {boolean} isLive True if it is a live asset, false otherwise
                 */
                var _setVideoStream = _.bind(function(videoId, encoding, stream, isLive) {
                    if (!this.activeInstances[videoId]) return;
                    this.activeInstances[videoId].playhead = 0;
                    this.activeInstances[videoId].playing = false;
                    this.activeInstances[videoId].stream = stream;
                    this.activeInstances[videoId].encoding = encoding;
                    this.activeInstances[videoId].isLive = !!isLive;

                    if (stream.drm && !_.isEmpty(stream.drm) && _isSupportedDRMEncoding(encoding)) {
                        _callIfInControl(videoId, "setDRM", [stream.drm]);
                    }
                    _callIfInControl(videoId, "setPlatform", [this.activeInstances[videoId].params.platform, encoding]);
                    return _callIfInControl(videoId, "setVideoUrl", [stream.url, encoding, isLive || false]);
                }, this);

                /**
                 * Check if the DRM encoding is currently supported
                 * @private
                 * @method VideoController#_isSupportedDRMEncoding
                 * @param {string} encoding The encoding of video stream, possible values are found in OO.VIDEO.ENCODING
                 * @return {boolean} True if DRM for the encoding is supported, otherwise false
                 */
                var _isSupportedDRMEncoding = _.bind(function(encoding) {
                    for (var key in OO.VIDEO.ENCODING.DRM) {
                        if (OO.VIDEO.ENCODING.DRM[key] == encoding) return true;
                    }
                    return false;
                }, this);

                /**
                 * Saves the closed captions object to the instance.
                 * @private
                 * @method VideoController#_setClosedCaptions
                 * @param {string} videoId The id of the video instance
                 * @param {object} closedCaptions The closed captions to set on the video element
                 */
                var _setClosedCaptions = _.bind(function(videoId, closedCaptions) {
                    if (!this.activeInstances[videoId]) return;
                    this.activeInstances[videoId].closedCaptions = closedCaptions;
                }, this);

                /**
                 * Sets the video stream secureContent
                 * @private
                 * @method VideoController#_setSecureContent
                 * @param {string} videoId The id of the video instance
                 * @param {object} contentMetadata the assetId and accountId of the content
                 */
                var _setSecureContent = _.bind(function(videoId, contentMetadata) {
                    if (!this.activeInstances[videoId] || !contentMetadata) return;
                    _callIfInControl(videoId, "setSecureContent", [contentMetadata]);
                }, this);

                /**
                 * Emits errors if possible, otherwise saves errors in a list.
                 * HTML5 Media Error Constants:
                 *   MediaError.MEDIA_ERR_ABORTED = 1
                 *   MediaError.MEDIA_ERR_NETWORK = 2
                 *   MediaError.MEDIA_ERR_DECODE = 3
                 *   MediaError.MEDIA_ERR_SRC_NOT_SUPPORTED = 4
                 *   MediaError.MEDIA_ERR_ENCRYPTED = 5 (Chrome only)
                 *   Ooyala Extensions:
                 *   NO_STREAM = 0
                 *   UNKNOWN = -1
                 * @method VideoController#_handleErrors
                 * @param {object} code The error code
                 * @param {string} videoId The id of the video
                 * @fires OO.EVENTS.PAGE_PROBABLY_UNLOADING
                 * @fires OO.EVENTS.VC_PLAY_FAILED
                 */
                var _handleErrors = _.bind(function(code, videoId) {
                    if (shouldEmitErrors) {
                        _emitErrors();
                    } else {
                        // The error occurred when the page was probably unloading.
                        // Happens more often on low bandwidth.
                        OO.d("Error not emitted: " + code);
                        // TODO: Store the videoId
                        unemittedErrors.push(code);
                        mb.publish(OO.EVENTS.PAGE_PROBABLY_UNLOADING);
                        return;
                    }

                    mb.publish(OO.EVENTS.VC_PLAY_FAILED, videoId, JSON.stringify(code));
                }, this);

                /**
                 * Emits unemitted errors.
                 * @method VideoController#_emitErrors
                 * @private
                 * @fires OO.EVENTS.VC_PLAY_FAILED
                 */
                var _emitErrors = _.bind(function() {
                    // Any errors that occurred after selecting to "stay" and before
                    // the time limit are dispatched.
                    shouldEmitErrors = true;
                    // TODO: Get the videoId
                    var videoId = "";
                    _.each(unemittedErrors, function(e) {
                        mb.publish(OO.EVENTS.VC_PLAY_FAILED, videoId, JSON.stringify(e));
                    });
                    unemittedErrors = [];
                }, this);

                /**
                 * Delays error publishing by 5 seconds.
                 * @method VideoController#_delayErrorPublishing
                 * @private
                 */
                var _delayErrorPublishing = _.bind(function() {
                    // User-cancellable event beforeUnload has been dispatched to window.
                    // Prevent errors to be dispatched due to the video element being destroyed.
                    shouldEmitErrors = false;
                    // Clear previous timeout in case the user selected "stay" and then
                    // navigated away again, otherwise the error may get emitted on low bandwidth.
                    clearTimeout(errorTimer);

                    // Restore error dispatching after a timeout.
                    // TODO: Can this be a defer?  Why do we need this?
                    _.delay(_.bind(function() {
                        // This will happen after the user clicks on "leave" or "stay" in case
                        // the embedding webpage adds another listener which gives the option.
                        // After 5 seconds it is assumed the user stayed on the page.
                        errorTimer = _.delay(_emitErrors, 5000);
                    }, this), 1);
                }, this);

                var _generateUniqueName = function() {
                    // TODO: make more unique
                    return Math.random().toString(36).substring(7);
                };

                /**
                 * Validates a bitrate object before published to message bus.
                 * Bitrate object needs the following properties:
                 *   id: a String that uniquely identifies the object
                 *   bitrate: a Number representing the bitrate
                 *   height: a Number equal to vertical resolution
                 *   width: a Number equal to the horizontal resolution
                 * @method VideoController#_delayErrorPublishing
                 * @param {Object} bitrate An object representing the bitrate switched to.
                 * @private
                 */
                var _validateBitrate = function(bitrate) {
                    if (!bitrate) return false;
                    var idValid = (bitrate.id !== undefined && typeof bitrate.id === "string");
                    var bitrateValid = (bitrate.bitrate !== undefined && (typeof bitrate.bitrate === "number" || typeof bitrate.bitrate === "string"));
                    var heightValid = (bitrate.height !== undefined && typeof bitrate.height === "number");
                    var widthValid = (bitrate.width !== undefined && typeof bitrate.width === "number");
                    return (idValid && bitrateValid && heightValid && widthValid);
                };

                // ********************
                // Debugging
                // ********************

                var self = this;
                var videoDebugging = {
                    getRegisteredPlugins: function() {
                        return OO.Video.getRegisteredPlugins();
                    },

                    getEncodingPriority: function() {
                        return _getEncodingPriorities();
                    },

                    getSupportedEncodings: function() {
                        return _getFilteredSupportedEncodings(this.getRegisteredPlugins());
                    },

                    getVideoInstances: function() {
                        return self.activeInstances;
                    },

                    getVideoElements: function() {
                        return activeElements;
                    }
                };

                // ********************
                // Setup
                // ********************

                initialize();
            };

            OO.registerModule('videoController', function(messageBus, id) {
                return new VideoController(messageBus, id);
            });
        }(OO, OO._, OO.$));

        /*
         * Metadata Controller
         */

        (function(OO, _, $) {
            /**
             * @class MetadataController
             * @classdesc The Metadata controller main class.  This class is registered as a module with the player.
             * @private
             * @param {object} messageBus The player message bus
             * @param {string} id The ID of the player module
             */
            var MetadataController = function(messageBus, id) {
                this.toString = function() {return 'metadata-controller';};
                this.mb = messageBus;
                this.id = id;
                this.metadataFetched = false;
                this.metadata = null;

                this.mb.subscribe(OO.EVENTS.METADATA_FETCHED, 'metadata', _.bind(this.onMetadataFetched, this));
                this.mb.subscribe(OO.EVENTS.SET_EMBED_CODE, 'metadata', _.bind(this.onSetEmbedCode, this));
                this.mb.subscribe(OO.EVENTS.SET_EMBED_CODE_AFTER_OOYALA_AD, 'metadata', _.bind(this.onSetEmbedCode, this));
            };

            _.extend(MetadataController.prototype, {
                /**
                 * Called when the metadata API is fetched. Parse Thumbnail metadata setting from API response.
                 * This is customer specific metadata format that we know of.
                 * This method will need to be replaced by calling a separate general purpose API for thumbnail.
                 * @method MetadataController#onMetadataFetched
                 * @param {string} eventName The name of the event for which this callback is called
                 * @param {object} metadata Backlot metadata
                 */
                onMetadataFetched: function(eventName, metadata) {
                    this.metadataFetched = true;
                    this.metadata = metadata;
                },

                /**
                 * Called when the embed code has been set. This happens after an external ID has been
                 * translated to an Ooyala embed code so we don't need special handling for that case.
                 * @method MetadataController#onSetEmbedCode.
                 * @param {string} eventName The name of the event for which this callback is called
                 * @param {object} embedCode the embedCode to be played
                 */
                onSetEmbedCode: function(eventName, embedCode) {
                    this.metadataFetched = false;
                    this.metadata = null;
                    var urlParams = {
                        server: OO.SERVER.API,
                        embedCode: embedCode
                    };
                    $.ajax({
                        url: OO.URLS.THUMBNAILS(urlParams),
                        type: 'GET',
                        dataType: 'json',
                        cache: true,
                        success: _.bind(this._thumbnailsFetched, this),
                        error: _.bind(this._thumbnailsFailed, this)
                    });
                },

                _thumbnailsFetched: function(data){
                    if (data && data.data && !_.isEmpty(data.data.thumbnails)) {
                        this.mb.publish(OO.EVENTS.THUMBNAILS_FETCHED, data);
                    }
                },

                // Deploying this code before the backend is done, this allows for graceful
                // fallback to the ESPN specific use case
                _thumbnailsFailed: function(request, status, error){
                    if (this.metadataFetched) {
                        this.onMetadataFetched("", this.metadata);
                    }
                }

            });

            OO.registerModule('metadataController', function(messageBus, id) {
                return new MetadataController(messageBus, id);
            });

        }(OO, OO._, OO.$));

        (function(OO,_,$){
            /*
             *  Defines the playback controller
             */

            var ApiModule = function(messageBus, id, params) {
                this.mb = messageBus;
                this.id = id;
                this.params = params || {};
                this.ooyalaAds = false;

                this.contentTree = {};
                this.metadata = {};
                this.skinMetadata = {};
                this.attributes = {};
                this.sasResponse = {};
                this.authToken = OO.localStorage.getItem("oo_auth_token");

                this._aborting = false;
                this._contentAjax = null;
                this._metadataAjax = null;
                this._sasAjax = null;

                OO.StateMachine.create({
                    initial:'Init',
                    messageBus:this.mb,
                    moduleName:'Api',
                    target:this,
                    events:[
                        {name:OO.EVENTS.SET_EMBED_CODE,                     from:'*',                                          to:'Init'},
                        {name:OO.EVENTS.SET_EMBED_CODE_AFTER_OOYALA_AD,     from:'*',                                          to:'Init'},
                        {name:OO.EVENTS.EMBED_CODE_CHANGED,                 from:'Init',                                       to:'WaitingForAPIResponse'},
                        {name:OO.EVENTS.EMBED_CODE_CHANGED_AFTER_OOYALA_AD, from:'Init',                                       to:'WaitingForAPIResponse'},

                        {name:OO.EVENTS.WILL_FETCH_CONTENT_TREE,            from:'WaitingForAPIResponse'},
                        {name:OO.EVENTS.WILL_FETCH_METADATA,                from:'WaitingForAPIResponse'},
                        {name:OO.EVENTS.WILL_FETCH_AUTHORIZATION,           from:'WaitingForAPIResponse'},
                        {name:OO.EVENTS.WILL_FETCH_AD_AUTHORIZATION,        from:['WaitingForAPIResponse', "Init"]},

                        {name:OO.EVENTS.PLAYBACK_READY,                     from:'WaitingForAPIResponse',                      to:'Init'},
                    ]
                });
            };

            _.extend(ApiModule.prototype, {

                /*
                 * @private
                 */
                _processSetEmbedCode: function(event, embedCode, options) {
                    // store parameters
                    this.rootEmbedCode = embedCode;
                    this.adSetCode = options ? options.adSetCode : undefined;
                    this.embedToken = (options && options.embedToken) || this.embedToken;
                    this.authToken = (options && options.authToken) || this.authToken;
                },

                onSetEmbedCode: function(event, embedCode, options) {
                    // store parameters
                    this._processSetEmbedCode(event, embedCode, options);
                    this.mb.publish(OO.EVENTS.EMBED_CODE_CHANGED, embedCode, options);
                },

                onSetEmbedCodeAfterOoyalaAd: function(event, embedCode, options) {
                    // store parameters
                    this._processSetEmbedCode(event, embedCode, options);
                    this.mb.publish(OO.EVENTS.EMBED_CODE_CHANGED_AFTER_OOYALA_AD, embedCode, options);
                },

                /*
                 * @private
                 */
                _processOnEmbedCodeChanged: function(event, embedCode, params) {
                    // store parameters
                    this.currentEmbedCode = embedCode;
                    var playerParams = {};
                    if (params && params.ooyalaAds) {
                        playerParams = params;
                    }

                    this._abort(this._contentAjax);
                    this._abort(this._metadataAjax);
                    this._abort(this._sasAjax);

                    // start server request
                    var request = {
                        embedCode: this.currentEmbedCode,
                        pcode: OO.playerParams.pcode || "unknown",
                        playerBrandingId : OO.playerParams.playerBrandingId || "unknown",
                        params: playerParams
                    };

                    if (!_.isEmpty(this.adSetCode)) {
                        _.extend(request.params, { adSetCode: this.adSetCode });
                    }
                    if (!_.isEmpty(this.embedToken)) {
                        _.extend(request.params, { embedToken: this.embedToken });
                    }

                    // Note(bz): Temporary call to fetch player xml until we move to player api
                    var apiRequest = _.extend({}, request, { server: OO.SERVER.API });
                    var authRequest = _.extend({}, request, { server: OO.SERVER.AUTH });

                    //always publish the metadata event, but only html5 should publish the others.
                    this.mb.publish(OO.EVENTS.WILL_FETCH_METADATA, apiRequest);
                    if (OO.requiredInEnvironment('html5-playback')) {
                        this.mb.publish(OO.EVENTS.WILL_FETCH_PLAYER_XML, apiRequest);
                        this.mb.publish(OO.EVENTS.WILL_FETCH_CONTENT_TREE, apiRequest);
                        this.mb.publish(OO.EVENTS.WILL_FETCH_AUTHORIZATION, authRequest);
                    }
                },

                onEmbedCodeChangedAfterOoyalaAd: function(event, embedCode, params) {
                    this._processOnEmbedCodeChanged(event, embedCode, params);
                },

                onEmbedCodeChanged: function(event, embedCode, params) {
                    this._processOnEmbedCodeChanged(event, embedCode, params);
                },

                // Ooyala API Calls

                /*
                 *  Content Tree
                 */
                onWillFetchContentTree: function(event, request) {
                    if (request.params && request.params.ooyalaAds) {
                        this.ooyalaAds = request.params.ooyalaAds;
                    } else {
                        this.ooyalaAds = false;
                    }

                    if (typeof this.contentTree[this.currentEmbedCode] != "undefined") {
                        this.mb.publish(OO.EVENTS.CONTENT_TREE_FETCHED, this.contentTree[this.currentEmbedCode], this.ooyalaAds);
                    } else {
                        this._contentAjax = $.ajax({
                            url: OO.URLS.CONTENT_TREE(request) + "?" + $.param(request.params),
                            type: 'GET',
                            dataType: 'json',
                            crossDomain: true,
                            success: _.bind(this._onContentTreeFetched, this),
                            error: function(apiModule) {
                                return function(xhr, status, error) {
                                    apiModule._onApiError(xhr, status, "Error in Content Tree request. " + error, this.url);
                                };
                            }(this)
                        });
                    }
                },

                _onContentTreeFetched: function(response) {
                    var embed_code;
                    var safe_response = OO.HM.safeObject("playbackControl.contentTree", response, {});

                    this._contentAjax = null;

                    if (safe_response.errors && safe_response.errors.code == 0) {
                        _.each(safe_response.content_tree, _.bind(function(value, embed_code){
                            this.contentTree[embed_code] = safe_response.content_tree[embed_code];

                        }, this));
                    }

                    var supportedContentType = ["Video", "VideoAd", "LiveStream", "Channel", "MultiChannel","Youtube"];
                    if (this.contentTree[this.currentEmbedCode]) {
                        var hostedAtURL = safe_response.content_tree[this.currentEmbedCode].hostedAtURL;
                        if (hostedAtURL == "" || hostedAtURL == null) {
                            safe_response.content_tree[this.currentEmbedCode].hostedAtURL = document.URL;
                        }

                        var contentIsSupportedInHtml5 = supportedContentType.indexOf(this.contentTree[this.currentEmbedCode].content_type) >= 0;
                        if (contentIsSupportedInHtml5) {
                            this.mb.publish(OO.EVENTS.CONTENT_TREE_FETCHED, this.contentTree[this.currentEmbedCode], this.ooyalaAds);
                        } else {
                            this.mb.publish(OO.EVENTS.ERROR, { code : OO.ERROR.API.CONTENT_TREE });
                        }
                    } else {
                        this.mb.publish(OO.EVENTS.ERROR, { code : OO.ERROR.UNPLAYABLE_CONTENT });
                    }
                },


                /*
                 *  Metadata
                 */
                onWillFetchMetadata: function(event, request) {
                    if (request.params && request.params.ooyalaAds) {
                        this.ooyalaAds = request.params.ooyalaAds;
                    } else {
                        this.ooyalaAds = false;
                    }

                    // send the metadata request
                    if (typeof this.metadata[this.currentEmbedCode] != "undefined") {
                        this.mb.publish(OO.EVENTS.METADATA_FETCHED, this.metadata[this.currentEmbedCode], this.ooyalaAds);
                    } else {
                        this._metadataAjax = $.ajax({
                            url: OO.URLS.METADATA(request) + "&" + $.param(request.params),
                            type: 'GET',
                            dataType: 'json',
                            crossDomain: true,
                            success: _.bind(this._onMetadataFetched, this),
                            error: function(apiModule) {
                                return function(xhr, status, error) {
                                    apiModule._onApiError(xhr, status, "Error in Metadata request. " + error, this.url);
                                };
                            }(this)
                        });
                    }
                },

                _onMetadataFetched: function(response) {
                    this.metadata = this.metadata || {};
                    var safeResponse = OO.HM.safeObject("api.metadata", response, {});
                    this._metadataAjax = null;

                    if (safeResponse.errors && safeResponse.errors.code == 0) {
                        this.skinMetadata = safeResponse.skin;
                        this.attributes = safeResponse.attributes;

                        _.each(safeResponse.metadata, _.bind(function(value, embedCode){
                            this.metadata[embedCode] = safeResponse.metadata[embedCode];

                            // allow to override module params from player params
                            this.metadata[embedCode].modules = this.metadata[embedCode].modules || {};
                            this.metadata[embedCode].modules = _.extend(this.metadata[embedCode].modules, this.params.modules || {});
                        }, this));
                    }
                    this.mb.publish(OO.EVENTS.METADATA_FETCHED, this.metadata[this.currentEmbedCode] || {}, this.ooyalaAds);

                    if (this.skinMetadata) {
                        this.mb.publish(OO.EVENTS.SKIN_METADATA_FETCHED, this.skinMetadata);
                    }

                    if (this.attributes) {
                        this.mb.publish(OO.EVENTS.ATTRIBUTES_FETCHED, this.attributes);
                    }

                    if (safeResponse.errors && safeResponse.errors.player_movie_mismatch &&
                        typeof(window.console) != "undefined" && typeof(window.console.log) == "function") {
                        console.log("WARNING: Player and movie providers do not match");
                    }
                },

                /*
                 *  SAS
                 */
                onWillFetchAuthorization: function(event, request) {
                    if (request.params && request.params.ooyalaAds) {
                        this.ooyalaAds = request.params.ooyalaAds;
                    } else {
                        this.ooyalaAds = false;
                    }

                    if (this.sasResponse[this.currentEmbedCode] && this.sasResponse[this.currentEmbedCode].code == 0) {
                        this.mb.publish(OO.EVENTS.AUTHORIZATION_FETCHED, this.sasResponse[this.currentEmbedCode], this.ooyalaAds);
                    } else {
                        //add additional params for SAS
                        this._sendSasRequest(request, _.bind(this._onAuthorizationFetched, this),
                            function(apiModule) {
                                return function(xhr, status, error) {
                                    apiModule._onApiError(xhr, status, "Error in SAS request. " + error, this.url);
                                };
                            }(this));
                    }
                },

                _onAuthorizationFetched: function(response) {
                    var code, codes;
                    this._sasAjax = null;

                    var safe_response = OO.HM.safeObject("playbackControl.sasResponse", response, {});

                    //save auth token
                    if (safe_response.auth_token) {
                        OO.setItem("oo_auth_token", safe_response.auth_token);
                        this.authToken = safe_response.auth_token;
                    } else {
                        OO.localStorage.removeItem("oo_auth_token");
                        this.authToken = null;
                    }

                    _.each(safe_response.authorization_data, _.bind(function(value, embed_code){
                        this.sasResponse[embed_code] = safe_response.authorization_data[embed_code];
                        if (safe_response.debug_data) {
                            this.sasResponse[embed_code].debug_data = safe_response.debug_data;
                        }
                        if (safe_response.user_info) {
                            this.sasResponse[embed_code].user_info = safe_response.user_info;
                        }
                        if (safe_response.auth_token) {
                            this.sasResponse[embed_code].auth_token = safe_response.auth_token;
                        }
                        if (safe_response.heartbeat_data) {
                            this.sasResponse[embed_code].heartbeat_data = safe_response.heartbeat_data;
                        }
                    }, this));
                    code = this.sasResponse[this.currentEmbedCode].code;

                    // Always publish the Authorization Response for Flash and only publish this on success for HTML5
                    if (code == 0) {
                        this.mb.publish(OO.EVENTS.AUTHORIZATION_FETCHED, this.sasResponse[this.currentEmbedCode], this.ooyalaAds);
                        return;
                    }
                    if (!_.isString(code)) {
                        this.mb.publish(OO.EVENTS.ERROR, { code : OO.ERROR.API.SAS.GENERIC });
                        return;
                    }
                    codes = code.split(',');
                    if (_.contains(codes, '2')) {
                        this.mb.publish(OO.EVENTS.ERROR, { code : OO.ERROR.API.SAS.DOMAIN });
                    } else if (_.contains(codes, '3')) {
                        this.mb.publish(OO.EVENTS.ERROR, { code : OO.ERROR.API.SAS.GEO });
                    } else if (_.contains(codes, '4')) {
                        this.mb.publish(OO.EVENTS.ERROR, { code : OO.ERROR.API.SAS.FUTURE });
                    } else if (_.contains(codes, '5')) {
                        this.mb.publish(OO.EVENTS.ERROR, { code : OO.ERROR.API.SAS.PAST });
                    } else if (_.contains(codes, '13')) {
                        this.mb.publish(OO.EVENTS.ERROR, { code : OO.ERROR.API.SAS.DEVICE });
                    } else if (_.contains(codes, '18')) {
                        this.mb.publish(OO.EVENTS.ERROR, { code : OO.ERROR.API.SAS.CONCURRENT_STREAMS });
                    } else if (_.contains(codes, '24')) {
                        this.mb.publish(OO.EVENTS.ERROR, { code : OO.ERROR.API.SAS.PROXY });
                    } else {
                        this.mb.publish(OO.EVENTS.ERROR, { code : OO.ERROR.API.SAS.GENERIC });
                    }
                },

                onWillFetchAdAuthorization: function(event, request) {
                    this._sendSasRequest(request, _.bind(this._onAdAuthorizationFetched, this));
                },

                _onAdAuthorizationFetched: function(response) {
                    var safe_response = OO.HM.safeObject("playbackControl.sasResponse", response, {});

                    var ooyalaAds = {};
                    _.each(safe_response.authorization_data, _.bind(function(value, embed_code){
                        ooyalaAds[embed_code] = safe_response.authorization_data[embed_code];
                    }, this));

                    this.mb.publish(OO.EVENTS.AD_AUTHORIZATION_FETCHED, ooyalaAds);
                },

                _sendSasRequest: function(request, callback, errorback) {
                    var profiles = OO.supportedVideoProfiles,
                        device = OO.device;

                    $.extend(request.params, { device: device, domain:OO.docDomain});
                    if (profiles) {
                        $.extend(request.params, {profiles:profiles}); // set profiles if any
                    }
                    if (this.authToken) {
                        $.extend(request.params, { auth_token: this.authToken });
                    }

                    this._sasAjax = $.ajax({
                        url: OO.URLS.SAS(request) + "?" + $.param(request.params),
                        type: 'GET',
                        dataType: 'json',
                        xhrFields: {
                            withCredentials: true
                        },
                        crossDomain: true,
                        success: callback,
                        error: errorback
                    });
                },

                _abort: function(ajax) {
                    if (!ajax) { return; }
                    this._aborting = true;
                    ajax.abort();
                    this._aborting = false;
                },

                _onApiError: function(xhr, status, error, url) {
                    if (this._aborting) { return; }

                    OO.d(error, status, xhr, url);
                    this.mb.publish(OO.EVENTS.ERROR, { code : OO.ERROR.API.NETWORK, xhrStatus : status, description : error, url : url });
                },

                __placeholder: true
            });

            OO.registerModule('api', function(messageBus, id, params) {
                return new ApiModule(messageBus, id, params);
            });
        }(OO, OO._, OO.$));

        OO.plugin("Channels", function(OO, _, $, W) {

            /*
             * Channel Module:  Intercept all CONTENT_TREE_FETCHED events.
             *   If the player is a flash player, and channels are enabled, play the flash player v2 style
             *   If the player is a flash player, and channels are disabled, publish an error
             *   If the player is html5 and channels are enabled, play the first video of the channel
             *   If the player is html5 and channels are disabled, publish an error
             */
            var Channels = function(mb, id) {
                this.id = id;
                this.mb = mb;
                this.channel_tree = null;
                this.channel_pos = -1;
                this.replay = false;

                OO.StateMachine.create({
                    initial:'Init',
                    messageBus:this.mb,
                    moduleName:'Channels',
                    target:this,
                    events:[
                        {name:OO.EVENTS.PLAYER_CREATED, from:'*'}
                    ]
                });
            };

            _.extend(Channels.prototype, {
                onPlayerCreated: function(event, elementId, params) {
                    this.enableChannels = params.enableChannels || OO.playerParams.enableChannels || false;
                    this.mb.intercept(OO.EVENTS.CONTENT_TREE_FETCHED, "channels",
                        _.bind(this._checkTreeForChannel, this));
                },

                _checkTreeForChannel: function(eventName, tree, ooyalaAds) {
                    var supportedContentType = ["Channel", "MultiChannel"];

                    //if i get a tree from V3, it will have contenttype
                    if (tree && (supportedContentType.indexOf(tree.content_type) >= 0 || tree.lineup)) {
                        if (this.enableChannels) {
                            //if this is a html5 player, take first child's embed code
                            if (OO.requiredInEnvironment('html5-playback') || OO.requiredInEnvironment('cast-playback')) {
                                if(!tree.children) {
                                    if(tree.content_type == 'Channel') {
                                        this.mb.publish(OO.EVENTS.ERROR, { code : OO.ERROR.EMPTY_CHANNEL });
                                    } else {
                                        this.mb.publish(OO.EVENTS.ERROR, { code : OO.ERROR.EMPTY_CHANNEL_SET });
                                    }
                                    return false;
                                }
                                this.channel_tree = tree;
                                this.channel_pos = 0;
                                this.mb.subscribe(OO.EVENTS.PLAYED, 'channels', _.bind(this.onPlayed, this));
                                this.mb.subscribe(OO.EVENTS.PLAYBACK_READY, 'channels', _.bind(this.onPlaybackReady, this));
                                this.mb.publish(OO.EVENTS.SET_EMBED_CODE, tree.children[0].embed_code);
                            }
                            return false;
                        }

                        //If this is a channel, and channels are not enabled, error out
                        this.mb.publish(OO.EVENTS.ERROR, { code : OO.ERROR.CHANNEL_CONTENT });
                        return false;
                    }

                    return [tree, ooyalaAds];
                },


                onPlayed: function(event) {
                    this.channel_pos++;

                    //Every time a video is played, set the embed code to the next video.
                    if(this.channel_tree.children[this.channel_pos]) {
                        this.mb.publish(OO.EVENTS.SET_EMBED_CODE, this.channel_tree.children[this.channel_pos].embed_code);
                    }

                    //If we played the last video, reset to the first video
                    else {
                        this.channel_pos = 0;
                        this.mb.publish(OO.EVENTS.SET_EMBED_CODE, this.channel_tree.children[0].embed_code);
                    }
                },

                //Every time the video is loaded (other than first), autoplay
                onPlaybackReady: function(event) {
                    if(this.channel_pos > 0) {
                        this.mb.publish(OO.EVENTS.PLAY);
                    }
                }
            });

            // Return class definition.
            return Channels;
        });
        OO.plugin("ExternalId", function(OO, _, $, W) {

            /*
             * Channel Module:  Intercept all CONTENT_TREE_FETCHED events.
             *   If the player is a flash player, and ExternalId are enabled, play the flash player v2 style
             *   If the player is a flash player, and ExternalId are disabled, publish an error
             *   If the player is html5 and ExternalId are enabled, play the first video of the channel
             *   If the player is html5 and ExternalId are disabled, publish an error
             */
            var ExternalId = function(mb, id) {
                this.id = id;
                this.mb = mb;

                this.mb.intercept(OO.EVENTS.SET_EMBED_CODE, "ExternalId", _.bind(this._checkExternalId, this));
            };

            _.extend(ExternalId.prototype, {
                /*
                 *  External ID lookup
                 */
                _checkExternalId: function(event, embedCode, options) {
                    var externalId = embedCode.match("^extId:(.*)");
                    if (externalId && externalId[1]) {
                        this.externalId = externalId[1];
                        this.options = options || {};
                        this._fetchExternalId({
                            externalId: this.externalId,
                            pcode: OO.playerParams.pcode || "1kNG061cgaoolOncv54OAO1ceO-I",
                            server: OO.SERVER.API
                        });
                        return false;
                    }
                    return [embedCode, options];
                },

                _fetchExternalId: function(request) {
                    this._contentAjax = $.ajax({
                        url: OO.URLS.EXTERNAL_ID(request),
                        type: 'GET',
                        dataType: 'json',
                        crossDomain: true,
                        cache:false,
                        success: _.bind(this._onExternalIdFetched, this),
                        error: _.bind(this._onExternalIdError, this)
                    });
                },

                _onExternalIdFetched: function(response) {
                    var embedCode = null;
                    var safe_response = OO.HM.safeObject("playbackControl.contentTree", response, {});

                    if (safe_response.errors && safe_response.errors.code == 0) {
                        _.each(safe_response.content_tree, _.bind(function(value, ec){
                            if (value["external_id"] === this.externalId) {
                                embedCode = ec;
                            }
                        }, this));
                    }

                    // save the external Id in the option hash (in case it's needed for analytics and such)
                    _.extend(this.options, {"originalId" : this.externalId});

                    if (embedCode) {
                        this.mb.publish(OO.EVENTS.SET_EMBED_CODE, embedCode, this.options);
                    } else {
                        this.mb.publish(OO.EVENTS.ERROR, { code: OO.ERROR.INVALID_EXTERNAL_ID });
                    }
                },

                _onExternalIdError: function(response) {
                    this.mb.publish(OO.EVENTS.ERROR, { code: OO.ERROR.INVALID_EXTERNAL_ID });
                }
            });

            // Return class definition.
            return ExternalId;
        });

        (function(OO, _, $){

            var AuthHeartbeat = function(messageBus, id) {
                if (!OO.requiredInEnvironment('html5-playback')) { return; }
                this.mb = messageBus;
                this.id = id;

                this.embedCode = null;
                this.authToken = null;
                this.heartbeatInterval = 300;  // in sec
                this.timer = null;
                this.retries = 3;

                //internal constants
                this.AUTH_HEARTBEAT_URL = _.template('<%=server%>/player_api/v1/auth_heartbeat/pcode/<%=pcode%>/auth_token/<%=authToken%>?embed_code=<%=embedCode%>');

                //listeners
                this.mb.subscribe(OO.EVENTS.EMBED_CODE_CHANGED, 'auth_heartbeat', _.bind(this._onEmbedCodeChanged, this));
                this.mb.subscribe(OO.EVENTS.AUTHORIZATION_FETCHED, 'auth_heartbeat', _.bind(this._onAuthorizationFetched, this));
            };

            _.extend(AuthHeartbeat.prototype, {
                _onEmbedCodeChanged: function(event, embedCode) {
                    this.embedCode = embedCode;
                    if (this.timer) {
                        clearInterval(this.timer);
                    }
                    if (this.ajax) {
                        this.ajax.error = null;
                        this.ajax.abort();
                        this.ajax = null;
                    }
                    this.retries = 3;
                },

                _onAuthorizationFetched: function(event, authResponse) {
                    if (authResponse.heartbeat_data && authResponse.heartbeat_data.heartbeat_interval) {
                        this.heartbeatInterval = authResponse.heartbeat_data.heartbeat_interval;
                    }
                    if (authResponse.auth_token) {
                        this.authToken = authResponse.auth_token;
                    }
                    if (authResponse.require_heartbeat === true) {
                        this.timer = setInterval(_.bind(this._onTimerTick, this), this.heartbeatInterval * 1000);
                        this._onTimerTick(); //Fire first heartbeat NOW.
                    }
                },

                _onTimerTick: function() {
                    //send heartbeat
                    this.ajax = $.ajax({
                        url: this.AUTH_HEARTBEAT_URL({
                            server: OO.SERVER.AUTH,
                            pcode: OO.playerParams.pcode || "unknown",
                            authToken: this.authToken || "",
                            embedCode: this.embedCode || ""
                        }),
                        type: 'GET',
                        dataType: 'json',
                        crossDomain: true,
                        cache: false,
                        success: _.bind(this._onHeartbeatResponse, this),
                        error: _.bind(this._onHeartbeatErrorResponse, this)
                    });
                },

                _onHeartbeatResponse: function(response) {
                    this.ajax = null;
                    if (!response.message || response.message != "OK" || !response.signature) {
                        this._onHeartbeatError(OO.ERROR.API.SAS.INVALID_HEARTBEAT);
                    }
                    else if (!response.expires || response.expires < new Date().getTime()/1000) {
                        this._onHeartbeatError(OO.ERROR.API.SAS.INVALID_HEARTBEAT);
                    }
                    else {
                        this.retries = 3;
                        if (response.auth_token != null) {
                            this.authToken = response.auth_token;
                            OO.setItem("oo_auth_token", response.auth_token);
                        }
                    }
                },

                _onHeartbeatErrorResponse: function(response) {
                    this.ajax = null;
                    if (response && response.responseText && response.responseText.indexOf("Invalid entitlements") > -1) {
                        this._onHeartbeatError(OO.ERROR.API.SAS.ERROR_INVALID_ENTITLEMENTS);
                    } else {
                        this._onHeartbeatError(OO.ERROR.API.SAS.CONCURRENT_STREAMS);
                    }
                },

                _onHeartbeatError: function(errorMessage) {
                    this.ajax = null;
                    this.retries--;

                    if (this.retries > 0) {
                        this._onTimerTick();
                        return;
                    }

                    if (this.timer) {
                        clearInterval(this.timer);
                    }
                    this.mb.publish(OO.EVENTS.ERROR, { code: errorMessage });
                }
            });

            OO.registerModule('auth_heartbeat', function(messageBus, id) {
                return new AuthHeartbeat(messageBus, id);
            });

        }(OO, OO._, OO.$));

        /*
         * Ad Manager Controller
         *
         * owner: PBI
         * version: 1.0
         *
         */

        (function(OO, _, $){
            OO.EVENTS.AMC_ALL_ADS_DONE               = 'adManagerControllerAllAdsDone';
            OO.EVENTS.AMC_PREROLLS_DONE              = 'adManagerControllerPrerollsDone';
            OO.EVENTS.AMC_ALL_READY                  = 'adManagerControllerAllReady';
            /**
             * A set of ads from an ad manager has started. This may be followed by multiple WILL_PLAY_SINGLE_AD/SINGLE_AD_PLAYED events.
             *
             *
             * @event OO.EVENTS#AD_POD_STARTED
             */
            OO.EVENTS.AD_POD_STARTED                 = 'adPodStarted';
            /**
             * A set of ads from an ad manager has ended.
             *
             *
             * @event OO.EVENTS#AD_POD_ENDED
             */
            OO.EVENTS.AD_POD_ENDED                   = 'adPodEnded';
            /**
             * A nonlinear ad has finished playing.
             *
             *
             * @event OO.EVENTS#NONLINEAR_AD_PLAYED
             */
            OO.EVENTS.NONLINEAR_AD_PLAYED            = 'nonlinearAdPlayed';
            /**
             * A nonlinear ad will be hidden. This will not count against the clock timer determining how long the ad will be shown.
             *
             *
             * @event OO.EVENTS#HIDE_NONLINEAR_AD
             */
            OO.EVENTS.HIDE_NONLINEAR_AD              = 'hideNonlinearAd';
            /**
             * A hidden nonlinear ad will be shown.
             *
             *
             * @event OO.EVENTS#SHOW_NONLINEAR_AD
             */
            OO.EVENTS.SHOW_NONLINEAR_AD              = 'showNonlinearAd';
            /**
             * A nonlinear ad will now display a close button.
             *
             *
             * @event OO.EVENTS#SHOW_NONLINEAR_AD_CLOSE_BUTTON
             */
            OO.EVENTS.SHOW_NONLINEAR_AD_CLOSE_BUTTON = 'showNonlinearAdCloseButton';
            /**
             * A nonlinear ad was loaded in the UI.
             *
             *
             * @event OO.EVENTS#NONLINEAR_AD_DISPLAYED
             */
            OO.EVENTS.NONLINEAR_AD_DISPLAYED         = 'nonlinearAdDisplayed';
            /**
             * An individual ad manager is taking control of the session to play an ad. This only happens when an ad manager controls its own timeline.
             *
             *
             * @event OO.EVENTS#AD_MANAGER_HANDLED_ADS
             */
            OO.EVENTS.AD_MANAGER_HANDLED_ADS         = 'adManagerHandledAds';
            /**
             * A linear ad can now enable or display a skip button.
             *
             *
             * @event OO.EVENTS#SHOW_AD_SKIP_BUTTON
             */
            OO.EVENTS.SHOW_AD_SKIP_BUTTON            = 'showAdSkipButton';

            /**
             * Event for signaling Ad Controls (Scrubber bar and Control bar) rendering:
             *   <ul>
             *     <li>Boolean parameter, 'false' to not show ad controls, 'true' to show ad controls based on skin config</li>
             *   </ul>
             *
             *
             * @event OO.EVENTS#SHOW_AD_CONTROLS
             */
            OO.EVENTS.SHOW_AD_CONTROLS                = 'showAdControls';

            /**
             * Event for signaling Ad Marquee rendering:
             *   <ul>
             *     <li>Boolean parameter, 'false' to not show ad marquee, 'true' to show ad marquee based on skin config</li>
             *   </ul>
             *
             *
             * @event OO.EVENTS#SHOW_AD_MARQUEE
             */
            OO.EVENTS.SHOW_AD_MARQUEE                = 'showAdMarquee';

            /**
             * Event for signaling that an Ad Clickthrough URL has opened a new window.
             *
             * @event OO.EVENTS#ADS_CLICKTHROUGH_OPENED
             */
            OO.EVENTS.ADS_CLICKTHROUGH_OPENED        = 'adsClickthroughOpened';

            // Timeouts
            var MAX_AD_MANAGER_LOAD_TIMEOUT = 3000;
            var MAX_AD_LOAD_TIMEOUT = 25000;
            var MAX_VIDEO_RELOAD_TIMEOUT = 2000;
            var DEFAULT_VIDEO_SKIP_BUTTON_TIME = 5;

            // Maximum duration for ad request before timeout
            var MAX_AD_REQUEST_TIMEOUT = 8000;

            /**
             * The list of registered ad managers.
             *   key: ad manager name (the name property of the ad manager object)
             *   value: ad manager (object)
             * @private
             */
            var adManagerFactories = {};

            // Settings to store in adManagerSettings.  These could come from the page or the server.
            var SETTINGS = {
                PAUSE_AD_ON_CLICK: "pauseAdOnClick",
                AD_MANAGER_LOAD_TIMEOUT: "adManagerLoadTimeout",
                AD_LOAD_TIMEOUT: "adLoadTimeout",
                DISPLAY_CUE_POINTS: "displayCuePointMarkers",
                REPLAY_ADS: "replayAds",
                SHOW_NONLINEAR_CLOSE_BUTTON: "showNonLinearCloseButton",
                SHOW_LINEAR_AD_SKIP_BUTTON: "showLinearAdSkipButton",
                LINEAR_AD_SKIP_BUTTON_START_TIME: "linearAdSkipButtonStartTime",
                ALLOW_AD_CLICK_THROUGH_ON_VIDEO: "allowAdClickThroughOnVideo",
                PAUSE_ON_LIVE_ADS: "pauseOnLiveAds"
            };

            /**
             * This array is used to keep a list of all ad managers that were unregistered before the controller was
             * setup. The controller will use this list to raise an event for each unregistered ad manager.
             * @private
             * @type {Array}
             */
            var unregisteredAdManagerFactories = [];

            /**
             * @class OO.Ads
             * @classdesc Enables you to register, verify, and unregister ad managers within the Ooyala player.
             * The related ad manager events are not processed on the standard message bus.
             * @public
             */
            OO.Ads = {
                /**
                 * Registers a new ad manager factory. The factory will be used to instantiate ad managers
                 * when the player is created. The format of the resulting ad manager is validated and the
                 * ad manager factory is only registered if the ad manager defines the required functions and properties.
                 * @public
                 * @method OO.Ads#manager
                 * @param {object} adManagerFactory The ad manager factory function to register
                 */
                manager: function(adManagerFactory) {
                    if (typeof adManagerFactory == 'function') {
                        //validate the resulting ad manager
                        var adManager = adManagerFactory.apply({}, [_, $]);
                        if (OO.Ads.validateAdManager(adManager)) {
                            OO.log("AMC: Registering ad manager factory: " + adManager.name);
                            adManagerFactories[adManager.name] = adManagerFactory;
                        }
                    }
                },

                /**
                 * Unregisters an ad manager factory.
                 * @public
                 * @method OO.Ads#unregisterAdManager
                 * @memberOf OO.Ads
                 * @param {string} name The name of the ad manager factory to unregister, traditionally represented by
                 *                      the resulting ad manager instance adManager.name
                 */
                unregisterAdManager: function(name) {
                    OO.log("AMC: Removing an ad manager factory: " + name);
                    if (name && adManagerFactories[name]) {
                        unregisteredAdManagerFactories.push(name);
                        delete adManagerFactories[name];
                    }
                },

                /**
                 * Validates the format of an ad manager and checks if the ad manager is already registered.<br/>
                 * The ad manager must define the following functions:<br/>
                 * <ul><li>initialize</li>
                 *     <li>buildTimeline</li>
                 *     <li>playAd</li>
                 *     <li>cancelAd</li> </ul>
                 * The ad manager must define the following properties:
                 * <ul><li>name (string)</li>
                 *     <li>ready (boolean)</li></ul>
                 * @public
                 * @method validateAdManager
                 * @memberOf OO.Ads
                 * @instance
                 * @param {object} adManager The ad manager object
                 * @returns {boolean} <code>true</code> if the ad manager meets the template requirements, <code>false</code> otherwise.
                 */
                validateAdManager: function(adManager) {
                    var properties = {"name":"string", "ready":"boolean"};
                    var functions = ["initialize", "buildTimeline", "playAd", "cancelAd"];

                    function raiseValidationError(errorString) {
                        OO.log("AMC: " + errorString);
                        // TODO - raise real error
                        //mb.publish(OO.EVENTS.ERROR, { code : OO.ERROR.NEW_CODE });
                    }

                    function checkForProperty(propertyName, propertyType, managerName) {
                        if (!_.has(adManager, propertyName)) {
                            raiseValidationError("The ad manager '" + managerName + "' requires a '" + propertyName +
                                "' property");
                            return false;
                        }
                        if (typeof adManager[propertyName] != propertyType) {
                            raiseValidationError("The ad manager '" + managerName + "' property '" + propertyName +
                                "' should be type '" + propertyType + "'");
                            return false;
                        }
                        return true;
                    }

                    function checkForFunction(functionName, managerName) {
                        if (!_.isFunction(adManager[functionName])) {
                            raiseValidationError("The ad manager '" + managerName + "' requires a '" + functionName +
                                "' function");
                            return false;
                        }
                        return true;
                    }

                    if (!adManager) { raiseValidationError(" The ad manager must be defined"); return false;}
                    if (!_.isObject(adManager)) { raiseValidationError("The ad manager must be an object"); return false;}
                    for (var key in properties) {
                        if (!checkForProperty(key, properties[key], adManager.name)) return false;
                    }
                    for (var x = 0; x < functions.length; x++) {
                        if (!checkForFunction(functions[x], adManager.name)) return false;
                    }
                    if (adManagerFactories[adManager.name]) {
                        raiseValidationError("The ad manager '" + adManager.name + "' has already been registered");
                        return false;
                    }

                    return true;
                },

                /**
                 * Returns the names of ad managers that were registered but have been unregistered.
                 * This is used in testing.
                 * @method OO.Ads#getUnregisteredAdManagers
                 * @public
                 * @returns {string[]} A list of all ad managers that have been unregistered.
                 */
                getUnregisteredAdManagers: function() { return unregisteredAdManagerFactories; }
            };

            OO.exposeStaticApi('Ads', OO.Ads);

            /**
             * @class AdManagerInterface
             * @classdesc
             * Exposes certain parts of the Ad Manager Controller (AMC) to ad managers.  This acts as a layer through
             * which the ad manager can interact with the ad manager controller.
             * @private
             */
            var AdManagerInterface = function() {
                // List of properties and functions to expose
                var exposedProperties = ["EVENTS", "ADTYPE", "AD_CANCEL_CODE", "AD_SETTINGS", "MAX_AD_REQUEST_TIMEOUT", "Ad", "ui",
                    "platform", "adManagerSettings", "playerSettings", "backlotSettings", "pageSettings",
                    "currentEmbedCode", "movieMetadata", "startTime", "movieDuration", "isLiveStream"];
                var exposedFunctions =  ["updateMainStreamUrl","playAd", "addPlayerListener", "removePlayerListener", "loadAdModule","notify",
                    "onAdManagerReady", "removeAdManager", "adsClicked", "raiseAdError", "appendToTimeline",
                    "showCompanion", "forceAdToPlay", "adManagerWillControlAds", "adsClickthroughOpened",
                    "adManagerDoneControllingAds", "notifyPodStarted", "notifyPodEnded", "notifyLinearAdStarted",
                    "notifyLinearAdEnded", "notifyNonlinearAdStarted", "notifyNonlinearAdEnded", "hidePlayerUi", "isLastAdPlayed",
                    "sendURLToLoadAndPlayNonLinearAd", "showSkipVideoAdButton", "showNonlinearAdCloseButton", "focusAdVideo", "getRegisteredAdManagers",
                    "unregisterAdManager"];

                var exposed = _.union(exposedProperties, exposedFunctions);

                for (var i = 0; i < exposed.length; i++) {
                    if (_.isFunction(controller[exposed[i]])) {
                        // exposes functions bound to the correct instance
                        this[exposed[i]] = _.bind(controller[exposed[i]], controller);
                    } else {
                        // exposes properties bound to the correct instance
                        var getter = _.bind(function(key) {
                            return this[key];
                        }, controller, exposed[i]);
                        Object.defineProperty(this, exposed[i], { get:getter });
                    }
                }
            };

            /**
             * @class AdManagerControllerPlatform
             * @classdesc Exposes information about the device platform as defined by the Ooyala player.
             * @public
             * @property {string} platform The device platform.
             * @property {string} os The device operating system.
             * @property {boolean} isIos <code>true</code> if the OS is iOS, <code>false</code> otherwise.
             * @property {string} iosMajorVersion The iOS version if applicable.
             * @property {boolean} isAndroid4Plus <code>true</code> if the OS is Android 4.0 or above, <code>false</code> otherwise.
             * @property {boolean} isFirefox <code>true</code> if the browser is Firefox, <code>false</code> otherwise.
             * @property {boolean} isChrome <code>true</code> if the browser is Chrome, <code>false</code> otherwise.
             * @property {string} chromeMajorVersion The browser version if the browser is Chrome
             * @property {boolean} isIE <code>true</code> if the browser is Internet Explorer, <code>false</code> otherwise.
             * @property {boolean} isIE11Plus <code>true</code> if the browser version is IE 11.0 or above
             * @property {boolean} isMacOs <code>true</code> if the OS is desktop Mac OS, <code>false</code> otherwise.
             * @property {boolean} isMacOsLionOrLater <code>true</code> if the OS version is Mac OS Lion or later, <code>false</code> otherwise.
             * @property {boolean} isKindleHD <code>true</code> if the device is Kindle HD, <code>false</code> otherwise.
             * @property {boolean} isSSL <code>true</code> if SSL is being used, <code>false</code> otherwise.
             * @property {string} device Device information
             * @property {boolean} isIphone <code>true</code> if the device is an iPhone, <code>false</code> otherwise.
             * @property {boolean} isIpad <code>true</code> if the device is an iPad, <code>false</code> otherwise.
             * @property {boolean} isAndroid <code>true</code> if the OS is Android OS, <code>false</code> otherwise.
             * @property {boolean} isRimDevice <code>true</code> if the device is Rim device, <code>false</code> otherwise.
             * @property {boolean} isWinPhone <code>true</code> if the device is a Windows Phone, <code>false</code> otherwise.
             * @property {boolean} isSmartTV <code>true</code> if the device is a SmartTV, <code>false</code> otherwise.
             * @property {boolean} DEV <code>true</code> if running in debug mode, <code>false</code> otherwise.
             */
            var AdManagerControllerPlatform = function() {
                this.requiredInEnvironment = OO.requiredInEnvironment;
                /**
                 * The list of properties in OO that should be exposed to ad managers.
                 * @private
                 */
                var platform_params = ["platform", "os", "isIos", "iosMajorVersion", "isAndroid4Plus", "isFirefox",
                    "isChrome", "chromeMajorVersion", "isIE", "isIE11Plus", "isMacOs", "isMacOsLionOrLater", "isKindleHD",
                    "isSSL", "device", "isIphone", "isIpad", "isAndroid", "isRimDevice", "isWinPhone",
                    "isSmartTV", "DEV"];

                for (var i = 0; i < platform_params.length; i++) {
                    this[platform_params[i]] = OO[platform_params[i]];
                }
            };

            /**
             * @class AdManagerControllerUi
             * @classdesc
             * Handles the display of video ads, ad marquee, and controls.
             * Exposes information about the UI as defined by the Ooyala player.
             * All elements are jQuery elements.  To access the DOM element, append <code>[0]</code>.
             * These values are only ready once <code>{adManager}.registerUi</code> is called.
             * @public
             * @property {boolean} useSingleVideoElement <code>true</code> if a single video element is used for both the ad and the
             *                                           content video, <code>false</code> otherwise.
             * @property {object} rootElement The root html element of the Ooyala player.
             * @property {object} videoWrapper The parent element to the content video element.
             * @property {object} playerSkinVideoWrapper The skin-integrated parent element to the content video element.
             *                                           Currently the same as videoWrapper.
             * @property {object} ooyalaVideoElement The content video element.
             * @property {object} adVideoElement The ad video element.  Sometimes this is the same as the content video
             *                                   element.
             * @property {object} adWrapper The parent element for plugin elements.
             * @property {object} pluginsElement The element to house ad video and ad UI
             * @property {object} playerSkinPluginsElement The skin-integrated element to house ad video and ad UI
             * @property {number} height The player height.
             * @property {number} width The player width.
             * @property {object} uiParameters Contains parameters (videoWrapperClass and pluginsClass) required to setup the UI
             * @param {object} messageBus The player message bus
             * @param {object} settings Ad playback settings (e.g. showAdMarquee)
             * @param {object} registeredAdManagers A reference to the registered ad managers
             */
            var AdManagerControllerUi = function(messageBus, settings, registeredAdManagers) {
                var mb = messageBus;
                var adManagers = registeredAdManagers;

                // Page Elements
                this.elementId             = null;
                this.useSingleVideoElement = false;
                this.rootElement           = null;
                this.videoWrapper          = null;
                this.playerSkinVideoWrapper = null;
                this.ooyalaVideoElement    = null;
                this.adVideoElement        = null;
                this.adWrapper             = null;
                this.pluginsElement        = null;
                this.playerSkinPluginsElement = null;
                this.height                = null;
                this.width                 = null;
                this.uiParameters          = {};
                this.aliceUiParameters     = {};
                var elementInFocus         = null;

                var _init = _.bind(function() {
                    this.useSingleVideoElement = OO.requiresSingleVideoElement;

                    mb.subscribe(OO.EVENTS.VC_VIDEO_ELEMENT_CREATED, 'amcUi', _videoElementCreated);
                    mb.subscribe(OO.EVENTS.VC_VIDEO_ELEMENT_DISPOSED, 'amcUi', _videoElementDisposed);
                    mb.subscribe(OO.EVENTS.VC_VIDEO_ELEMENT_IN_FOCUS, 'amcUi', _videoElementInFocus);
                    mb.subscribe(OO.EVENTS.EMBED_CODE_CHANGED, 'amcUi', _embedCodeChanged);
                    mb.subscribe(OO.EVENTS.EMBED_CODE_CHANGED_AFTER_OOYALA_AD, 'amcUi', _embedCodeChangedAfterOoyalaAd);
                }, this);

                /**
                 * Destroys the UI class.
                 * @protected
                 * @method AdManagerControllerUi#destroy
                 */
                this.destroy = function() {
                    _disposeElements(true);
                    mb.unsubscribe(OO.EVENTS.VC_VIDEO_ELEMENT_CREATED, 'amcUi');
                    mb.unsubscribe(OO.EVENTS.VC_VIDEO_ELEMENT_IN_FOCUS, 'amcUi');
                    mb.unsubscribe(OO.EVENTS.VC_VIDEO_ELEMENT_DISPOSED, 'amcUi');
                    mb.unsubscribe(OO.EVENTS.EMBED_CODE_CHANGED, 'amcUi');
                    mb.unsubscribe(OO.EVENTS.EMBED_CODE_CHANGED_AFTER_OOYALA_AD, 'amcUi');
                };

                /**
                 * Generates an unused element id by taking in a base id and appending
                 * a random string to the end of it if necessary.
                 * @private
                 * @param {string} baseId  the base id to use
                 * @returns {string}
                 */
                var _generateUniqueElementId = function(baseId) {
                    var generatedId = baseId;
                    while (document.getElementById(generatedId)) {
                        generatedId = baseId + "-" + OO.getRandomString();
                    }
                    return generatedId;
                };

                /**
                 * Sets the element properties and creates ad elements.
                 * @protected
                 * @method AdManagerControllerUi#setupUiElements
                 */
                this.setupUiElements = function() {
                    var uiParams = this.uiParameters;
                    //TODO: Should the ids for these elements be set by ChromelessUI?
                    this.videoWrapper = this.rootElement.find("." + uiParams.videoWrapperClass);
                    this.pluginsElement = this.videoWrapper.find("." + uiParams.pluginsClass);

                    // TODO: Set this id somewhere else
                    //When we have multiple players, we want our plugin div ids
                    //to be unique for the instances where the plugin will search
                    //for the div (like ad SDKs)
                    this.pluginsElement.attr("id", _generateUniqueElementId("ooyala-plugins-element"));

                    // TODO: Set this id somewhere else
                    //When we have multiple players, we want our wrapper div ids
                    //to be unique for the instances where the plugin will search
                    //for the div (like ad SDKs)
                    this.videoWrapper.attr("id", _generateUniqueElementId("ooyala-inner-wrapper"));

                    //Alice UI params are used for ad plugins that need to interact with the Alice UI,
                    //such as IMA.
                    var aliceUiParams = this.aliceUiParameters;

                    if (!_.isEmpty(aliceUiParams)) {
                        this.playerSkinVideoWrapper = this.rootElement.find("." + aliceUiParams.videoWrapperClass);
                        this.playerSkinPluginsElement = this.playerSkinVideoWrapper.find("." + aliceUiParams.pluginsClass);
                        this.playerSkinPluginsElement.attr("id", _generateUniqueElementId("ooyala-plugins-element"));
                        this.playerSkinVideoWrapper.attr("id", _generateUniqueElementId("ooyala-inner-wrapper"));
                    }

                    this.adWrapper = this.useSingleVideoElement ? this.videoWrapper : this.pluginsElement;
                };

                /**
                 * Register the ui elements with the ad managers
                 * @protected
                 * @method AdManagerControllerUi#registerUi
                 */
                this.registerUi = function() {
                    for (var key in adManagers) {
                        if (adManagers[key]) {
                            _safeFunctionCall(adManagers[key], "registerUi", []);
                        }
                    }
                };

                /**
                 * Sets up the UI elements for ad use and registers the UI elements with the ad managers.
                 * @protected
                 * @method AdManagerControllerUi#setupAndRegisterUi
                 */
                this.setupAndRegisterUi = function() {
                    this.setupUiElements();
                    this.registerUi();

                    // [PBW-1743] We need to create and "activate" the plugin video on a click so that we can control
                    // it with JS later on mobile
                    if (OO.isAndroid || OO.isIos) {
                        _primeHtml5Video();
                    }
                };

                /**
                 * This function should be called page load.  It primes the player for HTML5 playback by
                 * creating an ad video element before play is called.  This is required for platforms that only
                 * allow video play on user interaction (such as Android and iOS).
                 * @private
                 */
                var _primeHtml5Video = _.bind(function() {
                    OO.log("AMC: Prepping player with a video element on load");
                    var streams = {};
                    streams[OO.VIDEO.ENCODING.MP4] = "";

                    // Get list of restrictions from registered ad managers
                    var restrictionTech = null;
                    var restrictionFeatures = [];
                    for (var adManager in adManagers) {
                        if (adManagers[adManager].videoRestrictions) {
                            if (adManagers[adManager].videoRestrictions.technology) {
                                restrictionTech = adManagers[adManager].videoRestrictions.technology;
                            }
                            if (adManagers[adManager].videoRestrictions.features) {
                                for (var index in adManagers[adManager].videoRestrictions.features) {
                                    restrictionFeatures.push(adManagers[adManager].videoRestrictions.features[index]);
                                }
                            }
                        }
                    }

                    restrictionFeatures = _.uniq(restrictionFeatures);
                    this.createAdVideoElement(streams,
                        { "technology": restrictionTech,
                            "features": restrictionFeatures });
                }, this);

                /**
                 * Creates the adVideoElement.
                 * @protected
                 * @method AdManagerControllerUi#createAdVideoElement
                 * @param {object} streamsDesired An object listing the stream urls and encoding types of the ads
                 * @param {object} restrictions An object that lists restrictions the ad manager has on the video plugin
                 *   used.  ex. {"technology":OO.VIDEO.TECHNOLOGY.HTML5, "features":[OO.VIDEO.FEATURE.VIDEO_OBJECT_OPEN]}
                 * @fires OO.EVENTS.VC_CREATE_VIDEO_ELEMENT
                 */
                this.createAdVideoElement = function(streamsDesired, restrictions) {
                    var streams = {};
                    for (var encoding in streamsDesired) {
                        streams[encoding] = { url:streamsDesired[encoding] };
                    }
                    mb.publish(OO.EVENTS.VC_CREATE_VIDEO_ELEMENT, OO.VIDEO.ADS, streams, this.pluginsElement,
                        restrictions);
                };

                /**
                 * Saves the video element if it was created successfully.
                 * @private
                 * @method AdManagerControllerUi#_videoElementCreated
                 * @param {string} eventName The name of the event that triggered this callback
                 * @param {object} elementParams The parameters of the element created including id, domId, parent,
                 *                               video element, and supported encodings
                 */
                var _videoElementCreated = _.bind(function(eventName, elementParams) {
                    if (elementParams["videoId"] === OO.VIDEO.MAIN) {
                        this.ooyalaVideoElement = elementParams["videoElement"];
                        var streamUrl = elementParams["streamUrl"];
                        // If single video element is required, registered the ui after the main video element has been created
                        if (this.useSingleVideoElement) {
                            //setup UI
                            this.setupAndRegisterUi();
                        }
                    } else if (elementParams["videoId"] === OO.VIDEO.ADS) {
                        this.adVideoElement =  elementParams["videoElement"];
                        this.adWrapper = elementParams["parent"];
                    }
                }, this);

                /**
                 * Destroys any existing video elements associated with the AMF.
                 * @private
                 * @method AdManagerControllerUi#_disposeElements
                 * @param {boolean} forceDispose Forces dispose on platforms on which video elements are recycled
                 * @fires OO.EVENTS.VC_DISPOSE_VIDEO_ELEMENT
                 */
                var _disposeElements = _.bind(function(forceDispose) {
                    if (this.adVideoElement) {
                        // [PLAYER-212]
                        // We no longer dispose elements on mobile platforms that require a user
                        // gesture in order to start playback. Recycling the video element allows
                        // us to support continous playback when switching videos with the Discovery plugin
                        if (forceDispose || OO.allowAutoPlay) {
                            mb.publish(OO.EVENTS.VC_DISPOSE_VIDEO_ELEMENT, OO.VIDEO.ADS);
                        }
                    }
                }, this);

                /**
                 * Removes the ad video element from saved properties.
                 * @private
                 * @method AdManagerControllerUi#_videoElementDisposed
                 * @param {string} eventName The name of the event that triggered this callback
                 * @param {string} videoId The video tech id of the element disposed
                 */
                var _videoElementDisposed = _.bind(function(eventName, videoId) {
                    if (videoId === OO.VIDEO.ADS) {
                        this.adVideoElement = null;
                    }
                }, this);

                /**
                 * Called when a video element is brought to focus.  Saves the focused element id.
                 * @private
                 * @method AdManagerControllerUi#_videoElementInFocus
                 * @param {string} eventName The name of the event that triggered this callback
                 * @param {string} videoId The video tech id of the element in focus
                 */
                var _videoElementInFocus = _.bind(function(eventName, videoId) {
                    elementInFocus = videoId;
                    if (elementInFocus === OO.VIDEO.ADS) {
                        for (var key in adManagers) {
                            if (adManagers[key]) {
                                _safeFunctionCall(adManagers[key], "adVideoFocused", []);
                            }
                        }
                    }
                }, this);

                /**
                 * Destroys any ad video elements when the content video is switched.
                 * @private
                 * @method AdManagerControllerUi#_embedCodeChanged
                 */
                var _embedCodeChanged = _.bind(function() {
                    _disposeElements();
                }, this);

                /**
                 * Transitions the UI from ad video to content video.
                 * @private
                 * @method AdManagerControllerUi#_embedCodeChangedAfterOoyalaAd
                 */
                var _embedCodeChangedAfterOoyalaAd = _.bind(function() {
                    _disposeElements();
                    if (OO.isAndroid || OO.isIos) {
                        mb.publish(OO.EVENTS.VC_FOCUS_VIDEO_ELEMENT, OO.VIDEO.MAIN, "true");
                    }
                }, this);

                ////// UI Transition Functions //////

                /**
                 * Retrieves whether or not the ad is in focus.
                 * @protected
                 * @method AdManagerControllerUi#isAdInFocus
                 * @returns {boolean} true if ad is in focus, false otherwise
                 */
                this.isAdInFocus = function() {
                    return elementInFocus === OO.VIDEO.ADS;
                };

                /**
                 * Transitions the UI from content video to ad.
                 * @protected
                 * @method AdManagerControllerUi#transitionToAd
                 */
                this.transitionToAd = function() {
                    mb.publish(OO.EVENTS.VC_FOCUS_VIDEO_ELEMENT, OO.VIDEO.ADS);
                };

                /**
                 * Transitions the UI from ad video to content video.
                 * @protected
                 * @method AdManagerControllerUi#transitionToMainContent
                 * @param {boolean} shouldResumeContent True if the player should resume the content after transitioning
                 * @param {boolean} ended True if the stream has ended
                 * @fires OO.EVENTS.PLAY
                 */
                this.transitionToMainContent = function(shouldResumeContent, ended) {
                    if (elementInFocus !== OO.VIDEO.MAIN) {
                        mb.publish(OO.EVENTS.VC_FOCUS_VIDEO_ELEMENT, OO.VIDEO.MAIN);
                    }

                    if (shouldResumeContent && !ended) {
                        mb.publish(OO.EVENTS.VC_PLAY, OO.VIDEO.MAIN);
                    }
                };

                /**
                 * Called when the ad manager controller initializes.  Raises SHOULD_DISPLAY_CUE_POINTS with true or false
                 * depending on whether or not cue points should be displayed according to the metadata.
                 * @fires OO.EVENTS.SHOULD_DISPLAY_CUE_POINTS
                 */
                this.shouldDisplayCuePointMarkers = function() {
                    mb.publish(OO.EVENTS.SHOULD_DISPLAY_CUE_POINTS, settings[SETTINGS.DISPLAY_CUE_POINTS]);
                };

                /**
                 * Uses the timeline and movie duration to create a list of times in seconds at which to display cue points.
                 * @param {Array} timeline The array of ads in the timeline
                 * @param {int} duration The duration of the main content video in seconds
                 * @fires OO.EVENTS.RESET_CUE_POINTS
                 */
                this.resetCuePoints = function(timeline, duration) {
                    // replace position>duration with duration
                    var times = timeline.map(function(ad) {
                        if (ad.position > duration) return duration;
                        return ad.position;
                    }, this);
                    mb.publish(OO.EVENTS.RESET_CUE_POINTS, times);
                };

                _init();
            };

            /**
             * @class AdManagerController
             * @classdesc The ad manager controller main class.  This class is registered as a module with the player.
             * @public
             * @property {object} adManagerSettings Ad settings used by the ad manager controller.
             * @property {object} playerSettings Ad settings specific to the player.
             * @property {object} backlotSettings Ad settings set in Backlot.
             * @property {object} pageSettings Ad settings set at the page level.
             * @property {object} ui The current instance of the <code>AdManagerControllerUi</code> class.
             * @property {object} platform The current instance of <code>AdManagerControllerPlatform</code> class.
             * @property {string} currentEmbedCode Code representing the current content video stream.
             * @property {object} movieMetadata Metadata for the content video stream.
             * @property {number} startTime The start position of the content video stream (seconds).
             * @property {number} movieDuration The duration of the content video stream (seconds).
             * @param {object} messageBus The player message bus.
             * @param {string} id The ID of the player module.
             */
            OO.AdManagerController = function(messageBus, id) {
                // Module Properties
                var moduleName       = 'adManagerController';
                var mb               = messageBus;
                // Indicates whether or not all registered ad managers are ready
                var allready         = false;  // TODO: This could get out of sync if an ad manager is loaded late
                // Listeners registered by the ad managers
                var managerListeners = {};
                // Indicates whether or not the ad manager controller has been initialized
                var initialized      = false;

                var ooyalaAdManager = {};

                // Player/page Properties
                this.adManagerSettings    = {};
                this.playerSettings       = {};
                this.backlotSettings      = null;
                this.pageSettings         = null;
                var backlotSettingsRaised = null;
                var pageSettingsRaised    = null;
                var movieMetadataRaised   = null;

                // Movie Properties
                var lastEmbedCode     = "";
                this.currentEmbedCode = "";
                this.movieMetadata    = null;
                this.startTime        = -1;
                this.movieDuration    = -1;
                this.isLiveStream     = false;

                // Live Stream Properties for maintaining the playhead
                this.liveStreamTimestamps = {};
                this.timeMainVideoIdleMs  = 0;

                // Movie state Properties
                var currentPlayhead           = -1;
                var timeline                  = [];
                var repeatAds                 = [];
                var adQueue                   = [];
                var skipAdsOnSeek             = false;
                var seekToEndThreshold        = 0;
                var lastAdIndex               = 0;
                var seeking                   = false;
                var seeked                    = false;
                var seekedPosition            = 0;
                var paused                    = false;
                var started                   = false;
                var startTriggered            = false;
                this.ended                    = false;
                this.waitForPostrollToPlay    = true;
                var adManagersControllingAds  = {};
                var csaiMode                  = false;
                //This flag is used when initialTime (customization) is greater than 0.
                //This is to prevent ads prior to initialTime from triggering when
                //the initial time seek is slightly less (milliseconds) than the initial time.
                //This is mainly observed in iOS devices.
                var reachedStartTime          = false;
                var lastFullscreenState       = false;

                // This lets us know if a new stream is being loaded
                // This is needed so that don't call AMC_PREROLLS_DONE if an ad was playing and was cancelled
                // when a new stream was loaded.
                var newStreamHandling         = false;

                var amcPrerollsDoneCalled     = false;

                // UI Setup
                var uiSetup        = false;

                // Ad state Properties
                var overlay                   = false;
                var currentAd                 = null;
                var lastOverlayAd             = null;
                this.adStarted                = false;
                var adPaused                  = false;
                var cancelling                = false;
                var adTimeouts                = {};
                var skipButtonTimeout         = {};
                var adManagerShowSkipButton   = true;
                var adManagerSkipButtonOffset = null;
                var singleAdPlaying           = false;
                var pendingPodEnd             = false;

                // AMC modules
                this.ui        = null;
                this.platform  = null;
                this.amcInterface = null;

                // AMC Ad Managers
                this.adManagers = {};
                this.unregisteredAdManagers = [];

                // Timeouts
                // OO.playerParams.maxAdsTimeout - TODO: see if this value is useful in the AMC
                this.MAX_AD_MODULE_LOAD_TIMEOUT  = 5000;
                this.MAX_AD_REQUEST_TIMEOUT = MAX_AD_REQUEST_TIMEOUT;

                // Ad Frequency
                var VIDEO_COUNT_KEY = "OO Main Video Count";

                // Unit test helper
                this.testMode = false;

                //Exposing settings from adManagerSettings. These are the options specified on the page or from the server.
                this.AD_SETTINGS = SETTINGS;

                /**
                 * Events to which ad managers can subscribe. These events are not processed on the standard message bus.
                 * @public
                 * @field OO.AdManagerController#EVENTS
                 * @example
                 * var amc = new AdManagerController(mb, id);
                 * amc.addPlayerListener(amc.EVENTS.INITIAL_PLAY_REQUESTED, callback);
                 * @property {string} INITIAL_PLAY_REQUESTED Raised the first time playback is requested.
                 * @property {string} REPLAY_REQUESTED Raised when a stream is replayed
                 * @property {string} PLAY_STARTED Raised when the content video first begins to play
                 * @property {string} PLAYHEAD_TIME_CHANGED Raised periodically during content playback, reporting the
                 *                    current position and duration
                 * @property {string} AD_PLAYHEAD_TIME_CHANGED Raised periodically during ad playback, reporting the
                 *                    current position and duration
                 * @property {string} PAUSE Raised when the content video is paused
                 * @property {string} RESUME Raised when the content video is resumed
                 * @property {string} CONTENT_COMPLETED Raised when the content video completes
                 * @property {string} CONTENT_AND_ADS_COMPLETED Raised when the content video and all ads have completed playing
                 * @property {string} SIZE_CHANGED Raised when the size of the player is changed
                 * @property {string} CONTENT_CHANGED Raised when the content video is changed
                 * @property {string} FULLSCREEN_CHANGED Raised when the player enters and exits fullscreen mode
                 * @property {string} VOLUME_CHANGED Raised when the user requests a change in video volume
                 * @property {string} AD_VOLUME_CHANGED Raised when the user requests a change in video volume against the
                 *                    OO.VIDEO.ADS element
                 * @property {string} MAIN_CONTENT_IN_FOCUS Raised when the main element has gained focus
                 * @property {string} VIDEO_TAG_FOUND Raised when an embedded tag has been found in the video stream
                 * @property {string} CONTENT_URL_CHANGED Raised when a url has been selected to stream from
                 * @property {string} NONLINEAR_AD_DISPLAYED Raised when the UI has successfully rendered the nonlinear ad
                 */
                this.EVENTS = {
                    INITIAL_PLAY_REQUESTED :          "initialPlayRequested",
                    REPLAY_REQUESTED :                "replayRequested",
                    PLAY_STARTED :                    "playStarted",
                    PLAYHEAD_TIME_CHANGED :           "playheadTimeChanged",
                    AD_PLAYHEAD_TIME_CHANGED :        "adPlayheadTimeChanged",
                    PAUSE :                           "pause",
                    RESUME :                          "resume",
                    CONTENT_COMPLETED :               "contentCompleted",
                    CONTENT_AND_ADS_COMPLETED :       "contentAndAdsCompleted",
                    SIZE_CHANGED :                    "sizeChanged",
                    CONTROLS_SHOWN :                  "controlsShown",
                    CONTROLS_HIDDEN :                 "controlsHidden",
                    CONTENT_CHANGED :                 "contentChanged",
                    FULLSCREEN_CHANGED :              "fullscreenChanged",
                    VOLUME_CHANGED :                  "volumeChanged",
                    AD_VOLUME_CHANGED :               "adVolumeChanged",
                    MAIN_CONTENT_IN_FOCUS :           "mainContentInFocus",
                    VIDEO_TAG_FOUND :                 "videoTagFound",
                    CONTENT_URL_CHANGED :             "contentURLChanged",
                    NONLINEAR_AD_DISPLAYED :          "nonlinearAdDisplayed",
                    WILL_FETCH_AD_AUTHORIZATION:      "willFetchAdAuthorization",
                    AMC_PREROLLS_DONE :               "amcPrerollsDone",
                    SET_EMBED_CODE :                  "setEmbedCode",
                    SET_EMBED_CODE_AFTER_OOYALA_AD :  "setEmbedCodeAfterOoyalaAd"
                };

                /**
                 * States used internally for passing into _checkTimeline function.
                 * @private
                 * @field OO.AdManagerController#STATES
                 * @property {string} SEEKED The seeked state
                 * @property {string} CONTENT_VIDEO_PLAYED The contentVideoPlayed state
                 */
                var STATES = {
                    SEEKED :                    "seeked",
                    CONTENT_VIDEO_PLAYED :      "contentVideoPlayed"
                };

                /**
                 * Defines possible ad types.
                 * @public
                 * @field OO.AdManagerController#ADTYPE
                 * @example
                 * var amc = new AdManagerController(mb, id);
                 * var ad = new amc.Ad(position, duration, name, adObj, amc.ADTYPE.LINEAR_VIDEO);
                 * @property {string} LINEAR_OVERLAY The type name for an ad that is not a video but requires the main
                 *                                   video be paused.
                 * @property {string} NONLINEAR_OVERLAY The type name for an ad that is not a video and does not require
                 *                                      the main video be paused.
                 * @property {string} LINEAR_VIDEO The type name for an ad that is a video and requires the main video be
                 *                                 paused.
                 * @property {string} COMPANION The type name for an ad that is a companion ad.
                 * @property {string} AD_REQUEST The type name for an ad request.
                 * @property {string} UNKNOWN_AD_REQUEST The type name for an unknown ad request.
                 */
                this.ADTYPE = {
                    LINEAR_OVERLAY : "linearOverlay",
                    NONLINEAR_OVERLAY : "nonlinearOverlay",
                    LINEAR_VIDEO : "linearVideo",
                    COMPANION : "companion",
                    AD_REQUEST: "adRequest",
                    UNKNOWN_AD_REQUEST: "unknownAdRequest"
                };

                /**
                 * Defines ad cancellation codes.
                 * @public
                 * @field OO.AdManagerController#AD_CANCEL_CODE
                 * @property {string} SKIPPED The ad was skipped by the user via the skip ad button
                 * @property {string} TIMEOUT The ad timed out
                 * @property {string} ERROR The ad threw an error
                 * @property {string} STREAM_ENDED The main video stream ended
                 */
                this.AD_CANCEL_CODE = {
                    SKIPPED : "skipped",
                    TIMEOUT : "timeout",
                    ERROR : "error",
                    STREAM_ENDED : "streamEnded"
                };

                /**
                 * @class Ad
                 * @classdesc Represents an ad or a set of podded ads. This object contains a reference to the actual ad object provided by
                 * the ad manager.
                 * <b>Constructor</b>: Represents an ad or a set of podded ads. This object contains a reference to the actual ad object provided by
                 * the ad manager.
                 * @public
                 * @example
                 * var amc = new AdManagerController(mb, id);
                 * var ad = new amc.Ad({position:10000, duration:7000, adManager:"example-ad-manager", ad:adObj,
     *                      adType:amc.ADTYPE.LINEAR_VIDEO});
                 * @param adData {object} The ad data object describes the ad, it must contain the following fields:<br/>
                 *   <code>position {number}</code> The time, in seconds, in the video at which the ad(s) will play.<br />
                 *   <code>duration {number}</code> The duration of the ad(s) (seconds).<br />
                 *   <code>adManager {string}</code> The name of the ad manager (<code>{adManager}.name</code>) that will play the ad.<br />
                 *   <code>ad {object}</code> The ad object.<br />
                 *   <code>adType {string}</code> The type of ad created (e.g. <code>{AdManagerController}.ADTYPE.LINEAR_VIDEO</code>).
                 * @property {string} id A unique ID for the ad.
                 * @property {number} position The position in the stream at which to play the ad (seconds).
                 * @property {number} duration The duration of the ad (seconds).
                 * @property {string} adManager The name of the ad manager that owns the ad.
                 * @property {object} ad The ad object.
                 * @property {boolean} isLinear <code>true</code> if the ad is linear, <code>false</code> otherwise.
                 * @property {boolean} played <code>true</code> if the ad has been played during the current video, <code>false</code> otherwise.
                 * @property {object} videoRestrictions An object that lists restrictions the ad manager has on the video plugin
                 *   used.  ex. {"technology":OO.VIDEO.TECHNOLOGY.HTML5, "features":[OO.VIDEO.FEATURE.VIDEO_OBJECT_OPEN]}
                 */
                this.Ad = function(adData) {
                    if (!adData) adData = {};
                    this.id = _.uniqueId(adData['adManager'] + "_");
                    this.position = adData['position'] || 0;
                    this.duration = adData['duration'] || 0;
                    this.adManager = adData['adManager'];
                    this.ad = adData['ad'] || {};
                    this.adType = adData['adType'] || controller.ADTYPE.LINEAR_VIDEO;
                    this.isLinear = this.adType === controller.ADTYPE.LINEAR_VIDEO ||
                        this.adType === controller.ADTYPE.LINEAR_OVERLAY;
                    this.isRequest = this.adType === controller.ADTYPE.AD_REQUEST ||
                        this.adType === controller.ADTYPE.UNKNOWN_AD_REQUEST;
                    this.streams = adData['streams'] || {};
                    this.played = false;
                    this.videoRestrictions = adData['videoRestrictions'];
                };

                var states_noLinearAdPlaying = ['Init', 'Ready', 'Playback', 'Reload', 'Overlay'];
                var states_linearAd = ['LinearAd'];

                // State Machine
                this.fsm = OO.StateMachine.create({
                    initial:    'Init',
                    messageBus: mb,
                    moduleName: moduleName,
                    target:     this,
                    events:[
                        // Setup and teardown
                        {name:OO.EVENTS.PLAYER_CREATED,            from:'Init',  to:'Init'},

                        // Playback events
                        {name:OO.EVENTS.PLAY,                      from:states_linearAd, to:'*'},
                        {name:OO.EVENTS.INITIAL_PLAY,              from:'Ready',         to:'Playback'},
                        {name:OO.EVENTS.SET_EMBED_CODE,            from:'*',             to:'Reload'},
                        {name:OO.EVENTS.EMBED_CODE_CHANGED,        from:'*',             to:'Ready'},
                        {name:OO.EVENTS.PLAYED,                    from:'*',             to:'Ready'},
                        {name:OO.EVENTS.REPLAY,                    from:'*',             to:'Playback'},

                        // Ad events
                        {name:OO.EVENTS.AMC_ALL_READY,           from:'*',                      to:'Ready'},
                        {name:OO.EVENTS.WILL_PLAY_ADS,           from:states_noLinearAdPlaying, to:'LinearAd'},
                        {name:OO.EVENTS.AD_POD_STARTED,          from:'*',                      to:'LinearAd'},
                        {name:OO.EVENTS.WILL_PLAY_NONLINEAR_AD,  from:'*',                      to:'*'},
                        {name:OO.EVENTS.PLAY_NONLINEAR_AD,       from:'*',                      to:'Overlay'},
                        {name:OO.EVENTS.NONLINEAR_AD_PLAYED,     from:'*',                      to:'Playback'},
                        {name:OO.EVENTS.ADS_PLAYED,              from:'*',                      to:'Playback'}
                        // ad load error
                    ]
                });

                ///// Setup /////

                // Load the ad managers if all the settings are available
                var _tryInit = _.bind(function() {
                    if (initialized || !pageSettingsRaised || !backlotSettingsRaised || !movieMetadataRaised) return;
                    initialized = true;

                    // Parse global metadata locally
                    var settings = _.values(SETTINGS);
                    for (var i = 0; i < settings.length; i++) {
                        var setting = settings[i];
                        if (typeof this.pageSettings[setting] !== "undefined") {
                            this.adManagerSettings[setting] = this.pageSettings[setting];
                        }
                    }

                    var metadataMap = {};
                    // Send the metadata to the ad managers
                    var adManagerNames = _.keys(this.adManagers);
                    for (var i = 0; i < adManagerNames.length; i++) {
                        var adManagerName = adManagerNames[i];
                        var adManagerClass = this.adManagers[adManagerName];
                        if (adManagerClass) {
                            // Merge the backlot and page level data where page level gets precedence
                            var metadata = OO.getInnerProperty(this.backlotSettings, ["modules", adManagerName, "metadata"]) || {};
                            metadata = _.extend(metadata, OO.getInnerProperty(this.pageSettings, [adManagerName]));

                            // Note: For now the amc must parse ad-manager specific settings
                            //       We should only support setting these settings globally and this code should be removed
                            for (var j = 0; j < settings.length; j++) {
                                setting = settings[j];
                                if (typeof metadata[setting] !== "undefined") {
                                    // Question: Doesn't this mean that if there are backlot settings from multiple ad managers that
                                    // whoever is last in the for-loop iteration get's its settings applied? Consider a multiple ad managers
                                    // on a page scenario.
                                    this.adManagerSettings[setting] = metadata[setting];
                                }
                            }

                            metadataMap[adManagerName] = {
                                metadata: metadata,
                                adManagerClass: adManagerClass
                            };
                        }
                    }

                    // Change the type of booleans to proper boolean with proper defaults
                    this.adManagerSettings[SETTINGS.PAUSE_AD_ON_CLICK] =
                        (typeof this.adManagerSettings[SETTINGS.PAUSE_AD_ON_CLICK] == "undefined") ?
                            true : _stringToBoolean(this.adManagerSettings[SETTINGS.PAUSE_AD_ON_CLICK]);
                    this.adManagerSettings[SETTINGS.DISPLAY_CUE_POINTS] =
                        (typeof this.adManagerSettings[SETTINGS.DISPLAY_CUE_POINTS] == "undefined") ?
                            true : _stringToBoolean(this.adManagerSettings[SETTINGS.DISPLAY_CUE_POINTS]);
                    this.adManagerSettings[SETTINGS.REPLAY_ADS] =
                        (typeof this.adManagerSettings[SETTINGS.REPLAY_ADS] == "undefined") ?
                            true : _stringToBoolean(this.adManagerSettings[SETTINGS.REPLAY_ADS]);
                    this.adManagerSettings[SETTINGS.SHOW_NONLINEAR_CLOSE_BUTTON] =
                        (typeof this.adManagerSettings[SETTINGS.SHOW_NONLINEAR_CLOSE_BUTTON] == "undefined") ?
                            false : _stringToBoolean(this.adManagerSettings[SETTINGS.SHOW_NONLINEAR_CLOSE_BUTTON]);
                    this.adManagerSettings[SETTINGS.SHOW_LINEAR_AD_SKIP_BUTTON] =
                        (typeof this.adManagerSettings[SETTINGS.SHOW_LINEAR_AD_SKIP_BUTTON] == "undefined") ?
                            false : _stringToBoolean(this.adManagerSettings[SETTINGS.SHOW_LINEAR_AD_SKIP_BUTTON]);
                    this.adManagerSettings[SETTINGS.LINEAR_AD_SKIP_BUTTON_START_TIME] =
                        (typeof this.adManagerSettings[SETTINGS.LINEAR_AD_SKIP_BUTTON_START_TIME] == "undefined") ?
                            DEFAULT_VIDEO_SKIP_BUTTON_TIME : parseInt(this.adManagerSettings[SETTINGS.LINEAR_AD_SKIP_BUTTON_START_TIME]);
                    this.adManagerSettings[SETTINGS.ALLOW_AD_CLICK_THROUGH_ON_VIDEO] =
                        (typeof this.adManagerSettings[SETTINGS.ALLOW_AD_CLICK_THROUGH_ON_VIDEO] == "undefined") ?
                            true : _stringToBoolean(this.adManagerSettings[SETTINGS.ALLOW_AD_CLICK_THROUGH_ON_VIDEO]);
                    this.adManagerSettings[SETTINGS.AD_LOAD_TIMEOUT] =
                        (!_isValidTimeout(this.adManagerSettings[SETTINGS.AD_LOAD_TIMEOUT]) ?
                            null : this.adManagerSettings[SETTINGS.AD_LOAD_TIMEOUT] * 1000);
                    this.adManagerSettings[SETTINGS.AD_MANAGER_LOAD_TIMEOUT] =
                        (!_isValidTimeout(this.adManagerSettings[SETTINGS.AD_MANAGER_LOAD_TIMEOUT]) ?
                            null : this.adManagerSettings[SETTINGS.AD_MANAGER_LOAD_TIMEOUT] * 1000);

                    // Update timeout constants if the property in adManagerSettings is still valid
                    if (_isValidTimeout(this.adManagerSettings[SETTINGS.AD_LOAD_TIMEOUT])) {
                        MAX_AD_LOAD_TIMEOUT = this.adManagerSettings[SETTINGS.AD_LOAD_TIMEOUT];
                    }
                    if (_isValidTimeout(this.adManagerSettings[SETTINGS.AD_MANAGER_LOAD_TIMEOUT])) {
                        MAX_AD_MANAGER_LOAD_TIMEOUT = this.adManagerSettings[SETTINGS.AD_MANAGER_LOAD_TIMEOUT];
                    }

                    //csai
                    if (this.adManagerSettings[SETTINGS.PAUSE_ON_LIVE_ADS] !== undefined) {
                        csaiMode = !this.adManagerSettings[SETTINGS.PAUSE_ON_LIVE_ADS];
                    }

                    if (this.testMode) {
                        _declareAllReadyOnTimeout();
                    } else {
                        _.delay(_.bind(_declareAllReadyOnTimeout, this), MAX_AD_MANAGER_LOAD_TIMEOUT);
                    }

                    var mappingObjects = _.values(metadataMap);
                    for (i = 0; i < mappingObjects.length; i++) {
                        var mappingObject = mappingObjects[i];
                        _safeFunctionCall(mappingObject.adManagerClass, "loadMetadata", [mappingObject.metadata,
                            OO.getInnerProperty(this.backlotSettings, ["base"]) || {},
                            this.movieMetadata]);
                    }

                    // Handle metadata settings
                    this.ui.shouldDisplayCuePointMarkers();

                    _checkAllReady();
                }, this);

                /**
                 * Helper function to determine if a value is a non-negative number.
                 * @private
                 * @method OO.AdManagerController#_isValidTimeout
                 * @param {*} value The value to test
                 * @returns {boolean} true if value is a non-negative number. Otherwise, returns false.
                 */
                var _isValidTimeout = _.bind(function(value) {
                    return _.isFinite(value) && (value >= 0);
                }, this);

                /**
                 * Helper function to convert a string to boolean. Accepts values of "true", "yes",
                 * and "1" to be true.
                 * @private
                 * @method OO.AdManagerController#_stringToBoolean
                 * @param {string} value The value to convert
                 * @returns {boolean} true if value is "true", "yes", or "1". Otherwise, returns false.
                 */
                var _stringToBoolean = _.bind(function(value) {
                    value = value.toString().toLowerCase();
                    return value === "true" || value === "yes" || value === "1";
                }, this);

                var _resetPlaybackEventDependencies = _.bind(function(destroying) {
                    destroying = destroying || false;
                    // Remove existing dependencies
                    mb.removeDependent(OO.EVENTS.PLAYBACK_READY, OO.EVENTS.AMC_ALL_READY);
                    mb.removeDependent(OO.EVENTS.WILL_PLAY_FROM_BEGINNING, OO.EVENTS.AMC_PREROLLS_DONE);
                    mb.removeDependent(OO.EVENTS.PLAYED, OO.EVENTS.AMC_ALL_ADS_DONE);
                    // AD_MANAGER_HANDLED_ADS should be removed but NOT re-added
                    mb.removeDependent(OO.EVENTS.PLAYED, OO.EVENTS.AD_MANAGER_HANDLED_ADS);
                    // Reset this because it tracks which ad managers are trying to block PLAYED
                    adManagersControllingAds = {};

                    if (!destroying) {
                        // This ensures that the parameters from the blocked event are maintained if it has a dependent
                        // If nothing (or null) is returned, the blocked event would get raised with the parameters of
                        // the blocker rather than the parameters which were specified by the caller.
                        // This is required to ensure that VC_PLAY passes the stream url
                        // This will change with PBW-2910 and can be removed at that time.
                        var restoreOrigParams = function(eventName, dependentEvent, origParams, args){
                            return origParams;
                        };

                        // Add new dependencies
                        mb.addDependent(OO.EVENTS.PLAYBACK_READY, OO.EVENTS.AMC_ALL_READY, moduleName, restoreOrigParams);
                        mb.addDependent(OO.EVENTS.WILL_PLAY_FROM_BEGINNING, OO.EVENTS.AMC_PREROLLS_DONE, moduleName, restoreOrigParams);
                        mb.addDependent(OO.EVENTS.PLAYED, OO.EVENTS.AMC_ALL_ADS_DONE, moduleName, restoreOrigParams);
                    }
                }, this);

                /**
                 * Collects page settings, sets up event dependencies, attempts init, destroys self if required, sets
                 * up UI, platform, and interface classes, sets up root video element references in AdManagerControllerUi.
                 * @method OO.AdManagerController#onPlayerCreated
                 * @protected
                 * @param {string} eventName The name of the event for which this callback is called
                 * @param {string} elementId The ID of the root Ooyala element
                 * @param {object} params Page level parameters
                 * @fires OO.EVENTS.AMC_ALL_READY
                 */
                this.onPlayerCreated = function(eventName, elementId, params) {
                    var destroyEarly = _.bind(function() {
                        _destroy();
                        mb.publish(OO.EVENTS.AMC_ALL_READY, Object.keys(this.adManagers));
                    }, this);

                    // instantiate the ad managers
                    for (var i in adManagerFactories) {
                        var adManagerFactory = adManagerFactories[i];
                        var adManager = adManagerFactory.apply({}, [_, $]);
                        OO.log("AMC: Registering ad manager: " + adManager.name);
                        this.adManagers[adManager.name] = adManager;
                    }

                    if ((!this.adManagers) || _.isEmpty(this.adManagers)) {
                        destroyEarly();
                        return;
                    }

                    if (!OO.supportAds ||
                        !OO.requiredInEnvironment('ads') ||
                        OO.requiredInEnvironment('flash-playback')) {
                        destroyEarly();
                        return;
                    }

                    this.ui = new AdManagerControllerUi(mb, this.adManagerSettings, this.adManagers);
                    this.platform = new AdManagerControllerPlatform(mb);
                    this.amcInterface = new AdManagerInterface(this);

                    this.pageSettings = params;
                    pageSettingsRaised = true;
                    if (params && params.initialTime != null) {
                        this.startTime = params.initialTime;
                    }

                    // Setup root element
                    this.ui.elementId = elementId;
                    this.ui.rootElement = $("#" + elementId);
                    if (!this.ui.rootElement) return destroyEarly();
                    this.ui.height = this.ui.rootElement.height();
                    this.ui.width = this.ui.rootElement.width();

                    // Add dependecies for preroll and postroll
                    _resetPlaybackEventDependencies();
                    mb.intercept(OO.EVENTS.DESTROY, moduleName, _.bind(this.onDestroy, this));

                    // Initialize ad managers
                    for (var key in this.adManagers) {
                        if (this.adManagers[key]) {
                            _safeFunctionCall(this.adManagers[key], "initialize", [this.amcInterface, elementId]);
                        }
                    }

                    // Init
                    mb.subscribe(OO.EVENTS.PLAYER_EMBEDDED, moduleName, _.bind(this.onPlayerEmbedded, this));
                    mb.subscribe(OO.EVENTS.METADATA_FETCHED, moduleName, _.bind(this.onMetadataFetched, this));
                    mb.subscribe(OO.EVENTS.CONTENT_TREE_FETCHED, moduleName, _.bind(this.onContentTreeFetched, this));
                    mb.subscribe(OO.EVENTS.AUTHORIZATION_FETCHED, moduleName, _.bind(this.onAuthorizationFetched, this));
                    mb.subscribe(OO.EVENTS.ASSET_CHANGED, moduleName, _.bind(this.onAssetChanged, this));
                    mb.subscribe(OO.EVENTS.UI_READY, moduleName, _.bind(this.onUiReady, this));
                    mb.subscribe(OO.EVENTS.PLAYBACK_READY, moduleName, _.bind(this.onPlaybackReady, this));
                    mb.subscribe(OO.EVENTS.AD_AUTHORIZATION_FETCHED, moduleName, _.bind(this.onAdAuthorizationFetched, this));

                    // Playback
                    mb.subscribe(OO.EVENTS.WILL_PLAY_FROM_BEGINNING, moduleName, _.bind(this.onWillPlayFromBeginning, this));
                    mb.subscribe(OO.EVENTS.PLAYHEAD_TIME_CHANGED, moduleName, _.bind(this.onPlayheadTimeChanged, this));
                    mb.subscribe(OO.EVENTS.PAUSE, moduleName, _.bind(this.onPause, this));
                    mb.subscribe(OO.EVENTS.WILL_PLAY, moduleName, _.bind(this.onWillPlay, this));
                    mb.subscribe(OO.EVENTS.PLAYING, moduleName, _.bind(this.onPlaying, this));
                    mb.subscribe(OO.EVENTS.SEEK, moduleName, _.bind(this.onSeek, this));
                    mb.subscribe(OO.EVENTS.SEEKED, moduleName, _.bind(this.onSeeked, this));
                    mb.subscribe(OO.EVENTS.VC_PLAY, moduleName, onVideoPlay);
                    mb.subscribe(OO.EVENTS.VC_PAUSED, moduleName, _.bind(this.onVideoPaused, this));
                    mb.subscribe(OO.EVENTS.VC_PLAYING, moduleName, _.bind(this.onVideoPlaying, this));
                    mb.subscribe(OO.EVENTS.VC_PLAY_FAILED, moduleName, _.bind(this.onVideoPlayFailed, this));
                    mb.subscribe(OO.EVENTS.VC_PLAYED, moduleName, _.bind(this.onVideoPlayed, this));
                    mb.subscribe(OO.EVENTS.VC_VIDEO_ELEMENT_IN_FOCUS, moduleName, _.bind(this.onVideoElementInFocus, this));

                    // Settings
                    mb.subscribe(OO.EVENTS.FULLSCREEN_CHANGED, moduleName, _.bind(this.onFullscreenChanged, this));
                    mb.subscribe(OO.EVENTS.SIZE_CHANGED, moduleName, _.bind(this.onSizeChanged, this));
                    mb.subscribe(OO.EVENTS.VOLUME_CHANGED, moduleName, _.bind(this.onVolumeChanged, this));
                    mb.subscribe(OO.EVENTS.CONTROLS_SHOWN, moduleName, _.bind(this.onControlsShown, this));
                    mb.subscribe(OO.EVENTS.CONTROLS_HIDDEN, moduleName, _.bind(this.onControlsHidden, this));

                    // Interaction
                    mb.subscribe(OO.EVENTS.ADS_CLICKED, moduleName, _.bind(this.onAdsClicked, this));
                    mb.subscribe(OO.EVENTS.SKIP_AD, moduleName, _.bind(this.onSkipAd, this));

                    // Ad events
                    mb.subscribe(OO.EVENTS.WILL_PAUSE_ADS, moduleName, _.bind(this.onWillPauseAds, this));
                    mb.subscribe(OO.EVENTS.WILL_RESUME_ADS, moduleName, _.bind(this.onWillResumeAds, this));
                    mb.subscribe(OO.EVENTS.AD_POD_ENDED, moduleName, _.bind(this.onAdPodEnded, this));
                    mb.subscribe(OO.EVENTS.NONLINEAR_AD_DISPLAYED, moduleName, _.bind(this.onNonlinearAdDisplayed, this));

                    //SSAI events (like ID3 tags)
                    mb.subscribe(OO.EVENTS.VC_TAG_FOUND, moduleName, _.bind(this.onVideoTagFound, this));
                    mb.subscribe(OO.EVENTS.VC_VIDEO_ELEMENT_CREATED, moduleName, _.bind(this.onVideoElementCreated, this));

                    _tryInit();
                };

                var trySetupUI = _.bind(function() {
                    //We want to make sure we have the ui parameters from Mjolnir before proceeding
                    if (!uiSetup && !_.isEmpty(this.ui.uiParameters)) {
                        //setup UI
                        this.ui.setupAndRegisterUi();
                        uiSetup = true;
                    }
                }, this);

                /**
                 * Called when the player is embedded. Stores the provided UI parameters for possible later use.
                 * @method OO.AdManagerController#onPlayerEmbedded
                 * @protected
                 */
                this.onPlayerEmbedded = function(eventName, uiParams) {
                    //Store the ui params received here for later use (either when we
                    //receive UI_READY event or PLAYBACK_READY event)
                    //We only want to use the values from PLAYER_EMBEDDED if we did not
                    //receive any from the UI_READY event
                    if (uiParams) {
                        this.ui.uiParameters = uiParams;
                    }
                };

                /**
                 * Called when the Alice UI is ready. Sets up the AMC UI with the parameters
                 * provided in the message.
                 * @method OO.AdManagerController#onUiReady
                 * @protected
                 */
                this.onUiReady = function(eventName, uiParams) {
                    if (uiParams) {
                        this.ui.aliceUiParameters = uiParams;
                    }
                    //When using single video elements, we will setup the UI later
                    //when the video element is created
                    if (!this.ui.useSingleVideoElement) {
                        trySetupUI();
                    }
                };

                /**
                 * Called when playback is deemed ready. Attempts to setup the UI.
                 * @method OO.AdManagerController#onPlaybackReady
                 * @protected
                 */
                this.onPlaybackReady = function() {
                    //When using single video elements, we will setup the UI later
                    //when the video element is created
                    if (!this.ui.useSingleVideoElement) {
                        trySetupUI();
                    }
                };

                /**
                 * Called when Backlot settings are available.
                 * Attempts initialization.
                 * @method OO.AdManagerController#onMetadataFetched
                 * @protected
                 * @param {string} eventName The name of the event for which this callback is called
                 * @param {object} metadata Backlot metadata
                 * @fires OO.EVENTS.AMC_ALL_READY
                 */
                this.onMetadataFetched = function(eventName, metadata) {
                    this.backlotSettings = metadata;
                    backlotSettingsRaised = true;
                    _tryInit();
                };

                /**
                 * Called when the movie metadata is available.
                 * Attempts initialization.
                 * @method OO.AdManagerController#onContentTreeFetched
                 * @protected
                 * @param {string} eventName The name of the event for which this callback is called
                 * @param {object} content Movie metadata (duration in milliseconds)
                 * @fires OO.EVENTS.AMC_ALL_READY
                 */
                this.onContentTreeFetched = function(eventName, content) {
                    this.movieMetadata = content;
                    movieMetadataRaised = true;
                    if (content && content.duration) {
                        this.movieDuration = content.duration/1000;
                    }

                    _tryInit();

                    // TODO: What do i do with content.cue_ads:[] and content.ads:[],
                    //   which doesn't appear to be legacy ads although it might be.
                };

                /**
                 * Called when authorization with the Ooyala server has completed.  Checks if the content is live or VOD.
                 * @method OO.AdManagerController#onAuthorizationFetched
                 * @protected
                 * @param {string} event The name of the event for which this callback is called
                 * @param {object} authorization
                 */
                this.onAuthorizationFetched = function(event, authorization) {
                    this.isLiveStream = false;
                    if (authorization && authorization.streams && authorization.streams[0])
                    {
                        this.isLiveStream = authorization.streams[0]['is_live_stream'] || false;
                    }
                    for (var key in this.adManagers) {
                        if (this.adManagers[key]) {
                            _safeFunctionCall(this.adManagers[key], "authorizationFetched");
                        }
                    }
                };


                /**
                 * Called when authorization with the Ooyala server has completed.  Checks if the content contains an OoyalaAd.
                 * @method OO.AdManagerController#onAdAuthorizationFetched
                 * @protected
                 * @param {string} event The name of the event for which this callback is called
                 * @param {object} response
                 */
                this.onAdAuthorizationFetched = function(event, response) {
                    var ooyalaAds = response;
                    for (var key in this.adManagers) {
                        if (this.adManagers[key] && key === "ooyala-ads-manager" ) {
                            _safeFunctionCall(this.adManagers[key], "ooyalaAdData", [ooyalaAds]);
                            ooyalaAdManager = this.adManagers[key];
                        }
                    }
                };

                /**
                 * Called when the CMSless flow is used, receiving a JSON object full of asset metadata and player params.
                 * @method OO.AdManagerController#onAssetChanged
                 * @protected
                 * @param {string} event The name of the even for which the callback is called
                 * @param {object} asset The JSON object containing all of the asset metadata
                 * @param {object} params The page level player parameters specified for the asset.
                 */

                this.onAssetChanged = function(event, asset, params) {
                    // Mark each ad manager as not ready - need to load new metadata
                    for (var name in this.adManagers) {
                        this.adManagers[name].ready = false;
                    }

                    if (asset.id != this.currentEmbedCode) {
                        lastEmbedCode = this.currentEmbedCode;
                    }
                    this.currentEmbedCode = asset.id;
                    if (lastEmbedCode != '' && lastEmbedCode != this.currentEmbedCode) {
                        _triggerAdManagerCallback(this.EVENTS.CONTENT_CHANGED);
                        _handleNewStream();
                    }

                    this.pageSettings = params;
                    this.backlotSettings = {};
                    backlotSettingsRaised = true;

                    this.movieMetadata = asset.content;
                    movieMetadataRaised = true;
                    if (asset.content && asset.content.duration) {
                        this.movieDuration = asset.content.duration/1000;
                    }

                    this.isLiveStream = false;
                    if (asset.content && asset.content.streams && asset.content.streams[0])
                    {
                        this.isLiveStream = asset.content.streams[0]['is_live_stream'] || false;
                    }

                    _tryInit();
                };

                /**
                 * Loads an ad module asynchronously from the network.
                 * @public
                 * @method OO.AdManagerController#loadAdModule
                 * @param {string} adManager The name of the ad manager making the request (<code>{adManager}.name</code>).
                 * @param {string} path The network path to the remote ad module to load.
                 * @param {function} callback Calls this function when the network request is complete with one parameter
                 *                            indicating success (<code>true</code>) or failure (<code>false</code>).
                 */
                this.loadAdModule = function(adManager, path, callback) {
                    _.defer(
                        function(amc, adManager, path, callback) {
                            OO.loadScriptOnce(path,
                                _.bind(function() {
                                    callback(true);
                                    amc.onAdManagerReady();
                                }, amc, adManager, callback),
                                _.bind(function() { callback(false);
                                    amc.removeAdManager(adManager); }, amc, adManager, callback),
                                amc.MAX_AD_MODULE_LOAD_TIMEOUT);
                        }, this, adManager, path, callback);
                };

                /**
                 * When one ad manager reports it is ready, the ad manager controller checks all of the registered managers
                 * to see if they are ready.
                 * @public
                 * @method OO.AdManagerController#onAdManagerReady
                 * @fires OO.EVENTS.AMC_ALL_READY
                 */
                this.onAdManagerReady = function() {
                    _checkAllReady();
                };

                /**
                 * Unregisters an ad manager.  This is called when an ad manager fails to set up or become ready.
                 * @public
                 * @method OO.AdManagerController#removeAdManager
                 * @param {string} adManager The name of the ad manager.
                 * @fires OO.EVENTS.AMC_ALL_READY
                 */
                this.removeAdManager = function(adManager) {
                    OO.log("AMC: removing failed ad manager " + adManager);
                    this.unregisterAdManager(adManager);
                    _checkAllReady();
                };

                // Check if all ad managers loaded
                var _checkAllReady = _.bind(function() {
                    // TODO: figure out why this is called twice when a manager fails to load
                    if (allready) return;

                    for (var adManager in this.adManagers) {
                        if (!this.adManagers[adManager].ready) return;
                    }

                    allready = true;
                    _buildTimeline();
                    mb.publish(OO.EVENTS.AMC_ALL_READY, Object.keys(this.adManagers));
                }, this);

                // Abort ad managers that are not yet ready
                var _declareAllReadyOnTimeout = _.bind(function() {
                    if (!allready) {
                        for (var adManager in this.adManagers) {
                            if (!this.adManagers[adManager].ready) {
                                this.removeAdManager(adManager);
                            }
                        }

                        if (!allready) {
                            allready = true;
                            _buildTimeline();
                            mb.publish(OO.EVENTS.AMC_ALL_READY, Object.keys(this.adManagers));
                        }
                    }
                }, this);

                /**
                 * Destroys self if there are no ad managers registered.
                 * Resets the newStreamHandling flag as the handling is now completed.
                 * @method OO.AdManagerController#onAdManagerControllerAllReady
                 * @protected
                 */
                this.onAdManagerControllerAllReady = function() {
                    if ((!adManagerFactories) || _.isEmpty(adManagerFactories)) {
                        OO.log("AMC: No ad manager factories, destroying AMC");
                        _destroy();
                        return;
                    }

                    newStreamHandling = false;
                };

                ////////// Timeline Control //////////

                // Build timeline for ads
                var _buildTimeline = _.bind(function() {
                    for (var key in this.adManagers) {
                        var manager = this.adManagers[key];
                        if (manager) {
                            // TODO: Check if returned array of this.Ad where the adManager property is set correctly
                            // or should we just set the adManager property?
                            var managerTimeline = _safeFunctionCall(manager, "buildTimeline", []);
                            if (_.isArray(managerTimeline)) {
                                timeline = _.union(timeline, managerTimeline);
                                _extractRepeatAds(timeline);
                            }
                        }
                    }

                    timeline = _sortAdArray(timeline);

                    // TODO: Make sure this is called when an ad manager asynchronously adds ads
                    this.ui.resetCuePoints(timeline, this.movieDuration);
                }, this);

                // goes through timeline to find any repeat ads
                var _extractRepeatAds = _.bind(function(timeline) {
                    _.each(timeline, function(timelineAd) {
                        if (isRepeatAd(timelineAd)) {
                            timelineAd.ad.lastPlayed = timelineAd.position;
                            timelineAd.ad.playTimes = {};
                            repeatAds.push(timelineAd);
                        }
                    }, this);
                }, this);

                /**
                 * Adds ads to the controller's ad timeline.  This function can be called at any time.
                 * @method OO.AdManagerController#appendToTimeline
                 * @public
                 * @param {OO.AdManagerController#Ad[]} adManagerTimeline An array of ads to add to the timeline.
                 *                                                        The ads are not required to be in time order.
                 */
                this.appendToTimeline = function(adManagerTimeline) {
                    if (_.isArray(adManagerTimeline)) {
                        timeline = timeline.concat(adManagerTimeline);
                        timeline = _sortAdArray(timeline);
                        _extractRepeatAds(adManagerTimeline);
                    }
                };

                /**
                 * Add single ad to the controller's active ad queue and then re-sort them.
                 * @private
                 * @param {OO.AdManagerController#Ad[]} adToAppend Single ad that is appended to adQueue
                 *                                                 and sorted into place.
                 */
                var _appendToQueue = _.bind(function(adToAppend) {
                    adQueue.push(adToAppend);
                    adQueue = _sortAdArray(adQueue);
                }, this);

                // Sort ad array by time increasing
                // Sort (!isLinear) last
                // Sort isRequest first
                var _sortAdArray = function(adArray) {
                    var sorted = adArray;
                    if ((!OO._.isArray(sorted)) || (!sorted.length) || (sorted.length < 1)) return [];
                    sorted.sort(function(a, b){
                        if (!a || !OO._.isObject(a) || a.position == undefined) return 1;
                        if (!b || !OO._.isObject(b) || b.position == undefined) return -1;
                        if (a.position < b.position) return -1;
                        if (a.position === b.position) {
                            if (a.isRequest) {
                                return -1;
                            } else if (b.isRequest) {
                                return 1;
                            } else if (!a.isLinear) {
                                return 1;
                            } else if (!b.isLinear) {
                                return -1;
                            } else {
                                return 0;
                            }
                        }
                        return 1;
                    });
                    return sorted;
                };

                /**
                 * Raises an event on the message bus to notify listeners that a companion ad is to be shown.
                 * @method OO.AdManagerController#showCompanion
                 * @public
                 * @param {object} companion The companion ad to display.
                 * @fires OO.EVENTS.WILL_SHOW_COMPANION_ADS
                 */
                this.showCompanion = function(companion) {
                    // Defer so that external JS exception will not hang our player.
                    mb.publish(OO.EVENTS.WILL_SHOW_COMPANION_ADS, {ads: companion});
                };

                /**
                 * Not yet implemented.
                 * @private
                 * @method OO.AdManagerController#hideCompanion
                 */
                this.hideCompanion = function() {
                };

                /**
                 * Blocks the AMC from bringing up the end screen until <code>adManagerDoneControllingAds()</code>
                 * is called.
                 * @public
                 * @method OO.AdManagerController#adManagerWillControlAds
                 */
                //EVENTS.CONTENT_COMPLETED will not be called as long as you are in this mode.
                this.adManagerWillControlAds = function(adManagerName) {
                    if (!adManagersControllingAds[adManagerName])
                    {
                        if ($.isEmptyObject(adManagersControllingAds))
                        {
                            mb.addDependent(OO.EVENTS.PLAYED, OO.EVENTS.AD_MANAGER_HANDLED_ADS, moduleName, function(){});
                        }

                        adManagersControllingAds[adManagerName] = true;
                    }
                };

                /**
                 * Forces an ad to play immediately, bypassing the timeline.
                 * @public
                 * @method OO.AdManagerController#forceAdToPlay
                 * @param {object} adManager The name of the ad manager that will play the ad.
                 * @param {object} ad An object containing all the optional parameters for the ad.
                 * @param {OO.AdManagerController#ADTYPE} adType The type of ad you are trying to force.
                 * @param {object} streams Object containing the ad video stream types
                 * @param {number} duration The duration of the ad
                 */
                this.forceAdToPlay = function(adManager, ad, adType, streams, duration) {
                    var adData = {
                        "adManager": adManager,
                        "adType": adType,
                        "ad": ad,
                        "streams": streams,
                        "duration": duration,
                        "position": -1 //we want it to play immediately
                    };
                    var newAd = new this.Ad(adData);
                    _appendToQueue(newAd);
                    _extractRepeatAds([newAd]);
                    //if we've received a pod end notification, do not check timeline.
                    //The timeline will be checked when we handle the adPodEnded message
                    if (!pendingPodEnd) {
                        _checkTimeline(currentPlayhead, false);
                    }
                };

                /**
                 * This unblocks the AMC so it can bring up the end screen.
                 * @public
                 * @method OO.AdManagerController#adManagerDoneControllingAds
                 */
                this.adManagerDoneControllingAds = function(adManagerName) {
                    if (adManagersControllingAds[adManagerName]) {
                        //delete this ad manager from the list and if it's empty then publish the message.
                        delete adManagersControllingAds[adManagerName];
                        if ($.isEmptyObject(adManagersControllingAds)) {
                            //releasing the dependent, so EVENTS.PLAYED can be sent out.
                            mb.publish(OO.EVENTS.AD_MANAGER_HANDLED_ADS);
                        }
                    }
                };

                /**
                 * If we don't provide argument, this checks if some ad manager is controlling ads.
                 * If we provide an argument, this checks if the specified ad manager is controlling ads.
                 * @private
                 * @method OO.AdManagerController#isAdManagerControllingAds
                 * @param {adManagerName#String}
                 * @returns {boolean} Whether ads are being controlled by any ad manager/a particular ad manager,
                 *                    depending on whether an argument is provided.
                 */
                this.isAdManagerControllingAds = function(adManagerName) {
                    if (!adManagerName) {
                        return $.isEmptyObject(adManagersControllingAds);
                    }

                    return !!(adManagersControllingAds[adManagerName]);
                };

                // Check if an ad should be played at the current time
                // state is an optional string parameter
                // TODO: If you end up with an overlay in the middle, playback will run until the time of the next ad
                //       If this happens we don't respect people's pauses because we are still working through the ad queue
                var _checkTimeline = _.bind(function(playhead, lastAdBreakOnly, state) {
                    if (!timeline || singleAdPlaying) return;

                    if (!seekToEndThreshold) {
                        seekToEndThreshold = this.movieDuration - OO.CONSTANTS.SEEK_TO_END_LIMIT;
                    }
                    var adDuration = _populateQueue(playhead, lastAdBreakOnly, state);
                    // TODO: Consider moving the duration calculation here.

                    // Play the ads in the queue
                    if (adQueue.length > 0) {
                        //If we're in ad mode, trigger next ad
                        if ($.inArray(this.currentState, states_linearAd) >= 0) {
                            _triggerNextAd();
                        }
                        //else enter ad mode first
                        else {
                            _enterAdMode({type: adQueue[0].adManager, duration: adDuration}); //TODO: type needs to change to FREEWHEEL and GOOGLE_IMA and LIVERAIL
                            // TODO: Liverail used to call this with useCustomCountdown:true, maybe need to add metadata to the ad object and include it here
                        }
                        return;
                    } else if (this.tryAdsCompleted()) {
                        return;
                    }

                    if (!started) {
                        mb.publish(OO.EVENTS.AMC_PREROLLS_DONE);
                        amcPrerollsDoneCalled = true;
                    }
                }, this);

                var _handleRepeatAds = _.bind(function(playhead, areAdsPlaying, state) {
                    var adQueueTemp = [];
                    if (state !== STATES.SEEKED) {
                        _.each(repeatAds, function(repeatAd) {
                            var nextTimeToPlay = repeatAd.ad.lastPlayed + repeatAd.ad.repeatAfter;

                            // Check if the current playhead has passed the next time the repeat is supposed to play
                            // If the main content video has ended, we may want to play a repeat ad
                            if ((nextTimeToPlay <= playhead && playhead < this.movieDuration) || (!areAdsPlaying && state === STATES.CONTENT_VIDEO_PLAYED)) {
                                if (this.startTime >= 0) {
                                    var repeatInterval = repeatAd.ad.repeatAfter;
                                    var positionOfLastAd;
                                    if (playhead > repeatAd.position) {
                                        positionOfLastAd = Math.floor((playhead - repeatAd.position) / repeatInterval) * repeatInterval  + repeatAd.position;
                                    }
                                    else {
                                        positionOfLastAd = repeatAd.position;
                                    }
                                    repeatAd.ad.lastPlayed = positionOfLastAd;
                                }
                                else {
                                    repeatAd.ad.lastPlayed = nextTimeToPlay;
                                }

                                // Only play the repeat ad if a non-repeat ad is not playing (i.e. a midroll/postroll)
                                if (!areAdsPlaying && !_checkRepeatAdPlayed(repeatAd, repeatAd.ad.lastPlayed)) {
                                    adQueue.push(repeatAd);
                                }
                            }
                        }, this);
                    }
                    // only do logic for repeat ads if seeking to the future
                    else {
                        _.each(repeatAds, function(repeatAd) {
                            var repeatInterval = repeatAd.ad.repeatAfter;
                            var currentAd = _getCurrentAd();
                            if (currentAd && currentAd === repeatAd) {
                                repeatAd.ad.firstPlay = true;
                            }

                            // this get's where the repeat ad was supposed to play last
                            // (consider: repeat interval of 5 seconds and current play head is at 28,
                            // 28 / 5 = 5 * 5 = 25 seconds is the where the last repeat ad should have played)
                            var positionOfLastAd;
                            if (playhead > repeatAd.position) {
                                positionOfLastAd = Math.floor((playhead - repeatAd.position) / repeatInterval) * repeatInterval  + repeatAd.position;
                            }
                            else {
                                positionOfLastAd = repeatAd.position;
                            }

                            // if there isn't an ad to play after seek then assume lastPlayed is the "supposed" last played position
                            // and try to play repeat the ad
                            if (!currentAd) {
                                var nextTimeToPlay = repeatAd.ad.lastPlayed + repeatInterval;
                                // do not play if the playhead is too close to end of main content
                                // also, only care about paying the ad tax for the closest repeat ad position (position of last ad)
                                if ((nextTimeToPlay <= playhead && playhead < seekToEndThreshold) && !_checkRepeatAdPlayed(repeatAd, positionOfLastAd)) {
                                    adQueueTemp.push(repeatAd);
                                }
                                repeatAd.ad.lastPlayed = positionOfLastAd;
                            }
                            // if there is a current ad but the playhead would be past the point
                            // of a supposed last ad, then pretend the lastPlayed for repeat ad is at the
                            // supposed last ad position
                            else if (currentAd && playhead >= positionOfLastAd) {
                                repeatAd.ad.lastPlayed = positionOfLastAd;
                            }
                        }, this);
                    }
                    adQueue = adQueue.concat(adQueueTemp);
                }, this);

                var _checkRepeatAdPlayed = _.bind(function(repeatAd, positionOfLastAd) {
                    var played = false;
                    if (repeatAd) {
                        if (positionOfLastAd in repeatAd.ad.playTimes) {
                            played = repeatAd.ad.playTimes[positionOfLastAd];
                        }
                    }
                    return played;
                }, this);

                var _populateQueue = _.bind(function(playhead, lastAdBreakOnly, state) {
                    if (timeline == undefined || timeline.length == 0) return;
                    var adDuration = 0;

                    // If we should only play the last ad, empty the queue before handling so that we only play the ads from new position
                    if (lastAdBreakOnly) adQueue = [];

                    // Find our current ad index starting with last ad index
                    while (timeline[lastAdIndex] &&
                    timeline[lastAdIndex].position > playhead &&
                    lastAdIndex > 0) {
                        lastAdIndex--;
                    }

                    var index = lastAdIndex;
                    while (timeline[index] &&
                    (index < timeline.length - 1) &&
                    (timeline[index].played == true )) {
                        index++;
                    }


                    // Build up the ad queue
                    while (timeline[index] && timeline[index].position <= playhead) {
                        lastAdIndex = index;

                        // On a seek, only play ads at the most recent position
                        if (lastAdBreakOnly &&
                            (adQueue.length > 0) &&
                            (timeline[index].position != adQueue[adQueue.length - 1].position)) {
                            adQueue = [];
                            adDuration = 0;
                        }

                        if (timeline[index].played || (skipAdsOnSeek && timeline[index].position < seekedPosition)) {
                            index++;
                            continue;
                        }

                        // Check if it's already in the queue
                        if (_.indexOf(adQueue, timeline[index]) >= 0) {
                            index++;
                            continue;
                        }

                        adQueue.push(timeline[index]);
                        if (timeline[index].isLinear) adDuration = adDuration + timeline[index].duration;
                        index++;
                    }

                    // try to add repeat ads to queue
                    if (adQueue.length > 0) {
                        _handleRepeatAds(playhead, true, state);
                    }
                    else {
                        _handleRepeatAds(playhead, false, state);
                        _.each(adQueue, function(ad) {
                            if (ad.isLinear) {
                                adDuration = adDuration + ad.duration;
                            }
                        }, this);
                    }

                    // sort ads in case of 2 repeat ads where one is an overlay and the other is a linear ad
                    // linear ad should go first
                    adQueue = _sortAdArray(adQueue);

                    return adDuration;
                }, this);

                /**
                 * Returns the ad timeline.  This is used in unit testing.
                 * @method OO.AdManagerController#getTimeline
                 * @protected
                 * @returns {OO.AdManagerController#Ad[]} An array of the ads to play during the current video,
                 *                                        arranged in order of time and ad type.
                 */
                this.getTimeline = function() { return timeline; };

                /**
                 * Returns the repeat ads.  This is used in unit testing.
                 * @method OO.AdManagerController#getRepeatAds
                 * @protected
                 * @returns {OO.AdManagerController#Ad[]} An array of ads that have been specified to repeat.
                 */
                this.getRepeatAds = function() { return _.clone(repeatAds); };

                /**
                 * Returns the ad queue.  This is used in unit testing.
                 * @method OO.AdManagerController#getAdQueue
                 * @protected
                 * @returns {OO.AdManagerController#Ad[]} An array of the ads in the queue to be played during the
                 *                                        current commercial break, arranged in play order.
                 */
                this.getAdQueue = function() { return adQueue; };

                /**
                 * Function to return the value of current playhead.
                 * @public
                 * @method OO.AdManagerController#getCurrentPlayhead
                 * @returns {number} The current playhead represented in seconds.
                 */
                this.getCurrentPlayhead = _.bind(function() {
                    return currentPlayhead;
                }, this);

                /**
                 * Getter for AD_MANAGER_LOAD_TIMEOUT.
                 * @public
                 * @method OO.AdManagerController@getAdManagerLoadTimeout
                 * @returns {number} The timeout constant.
                 */
                this.getAdManagerLoadTimeout = function() {
                    return MAX_AD_MANAGER_LOAD_TIMEOUT;
                };

                /**
                 * Getter for AD_LOAD_TIMEOUT.
                 * @public
                 * @method OO.AdManagerController@getAdLoadTimeout
                 * @returns {number} The timeout constant.
                 */
                this.getAdLoadTimeout = function() {
                    return MAX_AD_LOAD_TIMEOUT;
                };

                /**
                 * Determines whether the last ad in the timeline is marked as played.
                 * @method OO.AdManagerController#isLastAdPlayed
                 * @public
                 * @returns {boolean} <code>true</code> if the last ad in the timeline is marked as played, <code>false</code> otherwise.
                 */
                this.isLastAdPlayed = function() {
                    return timeline.length == 0 || timeline[timeline.length - 1].played;
                };

                /**
                 * Dispatchs a <code>WILL_PLAY_NONLINEAR_AD</code> event with the nonLinear ad URL.
                 * @method OO.AdManagerController#sendURLToLoadAndPlayNonLinearAd
                 * @public
                 * @param {object} ad Contains the ad details.
                 * @param {string} adId Contains the unique ID that the AMC provides to the ad.
                 * @param {string} url The URL for the overlay image.
                 * @fires OO.EVENTS.WILL_PLAY_NONLINEAR_AD
                 */
                this.sendURLToLoadAndPlayNonLinearAd = function(ad, adId, url) {
                    mb.publish(OO.EVENTS.PLAY_NONLINEAR_AD, {"ad":ad, "url": url});
                    this.notifyNonlinearAdStarted(adId);

                    // If url is null, do not show the close button; the close button is currently only supported on overlays that we
                    // render. Additionally, close button should not be displayed if customer sets parameter to true without a url.
                    if(url && this.adManagerSettings[SETTINGS.SHOW_NONLINEAR_CLOSE_BUTTON]) {
                        mb.publish(OO.EVENTS.SHOW_NONLINEAR_AD_CLOSE_BUTTON);
                    }
                };

                /**
                 * Sets the flag allowSkipButtonToBeShow to True or false, called by the ad managers. NOTE: It is important to call
                 * this function before starting to play the ad, so that the flag is set when the play head updates.
                 * @method OO.AdManagerController#showSkipVideoAdButton
                 * @public
                 * @param {boolean} allowButton If set to true, then it will display the skip button if the page level param is also
                 * set, if set to false, it will prevent the button from displaying even if the page level param is set to true.
                 * @param {string} offset Optional parameter which includes a time offset value in seconds which must be met before skip button is shown.
                 *                        If a percent ('%') is suffixed, will be treated as a percentage of duration rather than seconds. Will
                 *                        only be accepted if allowButton is valid
                 */
                this.showSkipVideoAdButton = function(allowButton, offset) {
                    if(typeof allowButton === 'boolean') {
                        adManagerShowSkipButton = allowButton;

                        if (offset) {
                            adManagerSkipButtonOffset = offset;
                        }
                    }
                };

                /**
                 * Attempts to trigger the next ad. If there are ads in the ad queue appropriate for our current state, we will
                 * play the first ad in the ad queue. Otherwise, we will publish ADS_PLAYED.
                 * @private
                 * @method OO.AdManagerController#_triggerNextAd
                 * @fires OO.EVENTS.ADS_PLAYED
                 */
                var _triggerNextAd = _.bind(function() {
                    var linear = _inLinearAdMode();
                    // Some ad managers will create a fake ad to take time to download the list of ads while the movie is paused.
                    // If this happens they will be appended to the timeline by the time adPodEnded is called.  Check the timeline
                    // immediately and trigger ads to prevent the main video from advancing if more ads were added at the current
                    // time slot.

                    //lastAdBreakOnly is used to ensure that the end user is not overwhelmed with ads at a given point
                    //when seeking or starting a video with a start time > 0.
                    var lastAdBreakOnly = seeked || (!started && currentPlayhead > 0) ||
                        (this.startTime >= this.movieDuration && !this.isLiveStream);

                    if (this.startTime >= this.movieDuration || this.ended) {
                        currentPlayhead = Number.MAX_VALUE;
                    }
                    _populateQueue(currentPlayhead, lastAdBreakOnly);

                    //We want to play an ad appropriate for the mode we are in. If we are in
                    //linear ad mode, we want to play a linear ad if the next ad is linear.
                    //If we are not in linear ad mode, we want to play a non linear ad.
                    if (adQueue.length <= 0 || (adQueue[0] && !adQueue[0].isRequest && adQueue[0].isLinear !== linear)) {
                        //if we're currently in linear ad mode, publish ads played to get out
                        //since we have run out of linear ads to play
                        if (linear) {
                            mb.publish(OO.EVENTS.ADS_PLAYED);
                        }
                        return;
                    }

                    var nextAd = adQueue.shift();
                    this.playAd(nextAd);
                }, this);

                var _resetRepeatAds = _.bind(function() {
                    repeatAds = [];
                }, this);

                var _getCurrentAd = function() {
                    if (adQueue.length > 0) {
                        return adQueue[0];
                    }
                    return null;
                };

                var _cancelCurrentAd = _.bind(function(cancelParams) {
                    cancelling = true;
                    if (currentAd && this.adManagers[currentAd.adManager]) {
                        _notifyCancelAd(currentAd, cancelParams);
                        // Overlay should be hidden by the ad manager now.  This should be done in cancelAd.
                        mb.publish(OO.EVENTS.ADS_PLAYED);
                    }
                }, this);

                var _notifyCancelAd = _.bind(function(ad, cancelParams) {
                    if (ad && this.adManagers[ad.adManager]) {
                        _safeFunctionCall(this.adManagers[ad.adManager], "cancelAd", [ad, cancelParams]);
                    }
                }, this);

                //////// End Timeline Control ////////


                ///////// Ad Manager Control /////////

                /**
                 * Update the url of the main stream content being played.
                 * @public
                 * @method OO.AdManagerController#updateMainStreamUrl
                 * @param  {string} newUrl The new url to be used.
                 * @fires OO.EVENTS.VC_UPDATE_ELEMENT_STREAM
                 */
                this.updateMainStreamUrl = function(newUrl) {
                    mb.publish(OO.EVENTS.VC_UPDATE_ELEMENT_STREAM, OO.VIDEO.MAIN, newUrl);
                };

                // TODO: If an ad manager calls this we should also raise WILL_PLAY_ADS somehow.
                // Maybe expose a different function to the ad managers
                /**
                 * Triggers playback of an ad.
                 * @public
                 * @method OO.AdManagerController#playAd
                 * @param {object} ad From <code>this.Ad</code>, the object representing the ad.
                 * @fires OO.EVENTS.AD_POD_STARTED
                 * @fires OO.EVENTS.WILL_PLAY_SINGLE_AD
                 * @fires OO.EVENTS.WILL_PLAY_NONLINEAR_AD
                 */
                this.playAd = function(ad) {
                    if(!ad || !ad.ad)
                    {
                        return;
                    }

                    cancelling = false;
                    currentAd = ad;
                    currentAd.played = true;

                    // Setup functions to cancel and end ads
                    var cancelAd = _.bind(function(mb, ad, adId){
                        OO.log("AMC: Cancelling an ad due to timeout " + adId);
                        _notifyCancelAd(ad, {
                            code : this.AD_CANCEL_CODE.TIMEOUT
                        });
                        mb.publish(OO.EVENTS.SINGLE_AD_PLAYED, adId);
                        mb.publish(OO.EVENTS.AD_POD_ENDED, adId);
                    }, this, mb, ad, ad.id);

                    if (!_shouldPlayAd(ad.ad.first_shown, ad.ad.frequency)) {
                        cancelAd();
                        return;
                    }

                    if (_.isFinite(ad.duration) && ad.duration > 0) {
                        this.timeMainVideoIdleMs += ad.duration * 1000;
                    }

                    // add the ad's current play position if it is a repeat ad
                    if (isRepeatAd(ad)) {
                        var position;

                        // if firstPlay is true, it means that the currentAd playing is the first play of an ad that
                        // is supposed to repeat. this issue/situation only happens if the repeat ad is a midroll and
                        // the user seeks far past the midroll.
                        if (ad.ad.firstPlay) {
                            position = ad.position;
                            ad.ad.firstPlay = false;
                        }
                        else {
                            position = ad.ad.lastPlayed;
                        }
                        ad.ad.playTimes[position] = true;
                    }

                    if (ad.isLinear || ad.isRequest) {
                        // Linear ad (not overlay)
                        // These params may not be required
                        OO.log("AMC: Will play a linear ad for time: " + ad.position + " at playhead " + currentPlayhead);

                        setAdTimeouts(ad, cancelAd, MAX_AD_LOAD_TIMEOUT);

                        // trigger ads
                        if (ad.adManager && this.adManagers[ad.adManager]) {
                            var videoRestrictions = this.adManagers[ad.adManager].videoRestrictions ? this.adManagers[ad.adManager].videoRestrictions : {};
                            if (ad.videoRestrictions) {
                                videoRestrictions = ad.videoRestrictions;
                            }
                            //We need to pass the page level platform setting to the VTC to ensure the proper
                            //video element is created
                            var platform = this.pageSettings ? this.pageSettings.platform : null;

                            if (videoRestrictions && platform)
                            {
                                videoRestrictions["platform"] = platform;
                            }

                            if (ad.adType === this.ADTYPE.UNKNOWN_AD_REQUEST) {
                                //we want to create the video element but not focus it
                                mb.subscribe(OO.EVENTS.VC_VIDEO_ELEMENT_CREATED, 'amc', startAdPlayback);
                                mb.subscribe(OO.EVENTS.VC_ERROR, 'amc', _.bind(_stopAdOnVcError, this, ad.id));

                                // Create video element
                                this.ui.createAdVideoElement(ad.streams, videoRestrictions);
                            } else if (ad.adType === this.ADTYPE.LINEAR_VIDEO && (!ad.ad || !ad.ad.ssai)) {
                                // Play linear video ads through the ooyala player (vtc)
                                mb.subscribe(OO.EVENTS.VC_VIDEO_ELEMENT_CREATED, 'amc', videoElementCreated);
                                mb.subscribe(OO.EVENTS.VC_VIDEO_ELEMENT_IN_FOCUS, 'amc', _.bind(startAdPlayback, this, ad));
                                mb.subscribe(OO.EVENTS.VC_ERROR, 'amc', _.bind(_stopAdOnVcError, this, ad.id));

                                // Create video element
                                this.ui.createAdVideoElement(ad.streams, videoRestrictions);
                            } else {
                                //TODO: Currently will hide ssai ad controls to avoid pausing/resuming of ssai ad
                                //(skin has too many states to consider)
                                if (ad.ad.ssai) {
                                    mb.publish(OO.EVENTS.SHOW_AD_CONTROLS, false);
                                }
                                // Play linear overlay ads through the ad manager itself
                                _safeFunctionCall(this.adManagers[ad.adManager], "playAd", [ad]);
                            }
                        } else {
                            this.notifyPodEnded(ad.id);
                        }
                    } else {
                        overlay = true;
                        currentAd = ad;
                        // Non-linear ad (overlay)
                        //Storing the ad details so that if a video ad plays and ends we can redisplay the overlay.
                        lastOverlayAd = currentAd;
                        mb.publish(OO.EVENTS.WILL_PLAY_NONLINEAR_AD, ad);
                    }
                };

                /**
                 * Determines whether or not the current ad is a repeat ad.
                 * @param currentAd The current ad to check
                 */
                var isRepeatAd = _.bind(function(currentAd) {
                    if (currentAd && currentAd.ad) {
                        return currentAd.ad.repeatAfter;
                    }
                    return null;
                }, this);

                /**
                 * Sets a timeout for the specified ad, and calls the specified callback
                 * if the timeout occurs.
                 * @param ad The ad for which to set the timeout.
                 * @param callback The function to call when a timeout occurs.
                 * @param duration The timeout limit.
                 */
                var setAdTimeouts = _.bind(function(ad, callback, duration){
                    //we want to avoid the situation where our ad timeout is
                    //different from our ad manager's timeout if they control ads

                    //until we can sync timeouts, we will not handle our ad timeout
                    //if the ad manager is controlling ads
                    if(ad && typeof callback === "function" && !this.isAdManagerControllingAds(ad.adManager))
                    {
                        adTimeouts[ad.id] = _.delay(callback, duration);
                    }
                }, this);

                /**
                 * Called when the ad video element is created. Will focus the ad element.
                 * @private
                 * @method OO.AdManagerController#videoElementCreated
                 * @param {string} eventName The name of the event
                 * @param {string} videoDetails The details of the video element that has been created
                 */
                var videoElementCreated = _.bind(function(eventName, adDetails) {
                    if (!(adDetails && adDetails["videoId"] === OO.VIDEO.ADS)) {
                        return;
                    }
                    mb.unsubscribe(OO.EVENTS.VC_VIDEO_ELEMENT_CREATED, 'amc');
                    this.focusAdVideo();
                }, this);

                /**
                 * Tells the ui class to transition to the ad video element.
                 * @public
                 * @method OO.AdManagerController#focusAdVideo
                 */
                this.focusAdVideo = function() {
                    this.ui.transitionToAd();
                };

                /**
                 * Trigger ads from the ad manager itself and publish VTC play event.
                 * @private
                 * @method OO.AdManagerController#startAdPlayback
                 * @param {object} ad The ad object to start playback on
                 * @param {string} eventName The name of the event triggering this callback
                 * @param {string} videoId The id of the video element
                 * @fires OO.EVENTS.VC_PLAY
                 */
                var startAdPlayback = _.bind(function() {
                    mb.unsubscribe(OO.EVENTS.VC_VIDEO_ELEMENT_CREATED, 'amc');
                    mb.unsubscribe(OO.EVENTS.VC_VIDEO_ELEMENT_IN_FOCUS, 'amc');
                    mb.unsubscribe(OO.EVENTS.VC_ERROR, 'amc');
                    _safeFunctionCall(this.adManagers[currentAd.adManager], "playAd", [currentAd]);
                    if (currentAd.adType === this.ADTYPE.LINEAR_VIDEO) {
                        mb.publish(OO.EVENTS.VC_PLAY, OO.VIDEO.ADS);
                    }
                }, this);

                /**
                 */
                var handleAdStarted = _.bind(function(adId) {
                    clearAdTimeout(adId);
                    this.adStarted = true;
                }, this);

                /**
                 * Helper function that checks if a timeout exists for a particular adId and
                 * erases it.
                 * @private
                 * @method OO.AdManagerController#clearAdTimeout
                 * @param adId The ad id whose timeout should be erased. (Ad id comes from the
                 *        AMC when playAd() is called)
                 */
                var clearAdTimeout = _.bind(function(adId) {
                    if (adTimeouts && adTimeouts[adId]) {
                        clearTimeout(adTimeouts[adId]);
                        delete adTimeouts[adId];
                    }
                }, this);

                /**
                 * Stops the ad playback attempt upon error raised from VTC.
                 * @private
                 * @method OO.AdManagerController#_stopAdOnVcError
                 * @param {string} adId The id of the ad (Ad.id)
                 * @param {string} eventName The name of the event triggering the callback
                 * @param {string} videoId The id of the video that encountered an error
                 * @param {number} errorCode The error code associated with the VTC error
                 */
                var _stopAdOnVcError = _.bind(function(adId, eventName, videoId, errorCode) {
                    if (videoId !== OO.VIDEO.ADS) {
                        return;
                    }
                    mb.unsubscribe(OO.EVENTS.VC_VIDEO_ELEMENT_CREATED, 'amc');
                    mb.unsubscribe(OO.EVENTS.VC_VIDEO_ELEMENT_IN_FOCUS, 'amc');
                    mb.unsubscribe(OO.EVENTS.VC_ERROR, 'amc');
                    if (currentAd && currentAd.isLinear && this.adManagers[currentAd.adManager]) {
                        _safeFunctionCall(this.adManagers[currentAd.adManager], "adVideoError", [currentAd, errorCode]);
                    }
                    this.notifyPodEnded(adId);
                }, this);

                /**
                 * Notifies the player that an ad or a set of podded ads has begun.  This cancels any ad timeouts.
                 * @public
                 * @method OO.AdManagerController#notifyPodStarted
                 * @param {string} adId The ID of the ad (<code>Ad.id</code>).
                 * @param {number} numberOfAds The number of ads in the pod or set.
                 * @fires OO.EVENTS.AD_POD_STARTED
                 */
                this.notifyPodStarted = function(adId, numberOfAds) {
                    OO.log("AMC: Start ad pod " + adId);
                    clearAdTimeout(adId);
                    mb.publish(OO.EVENTS.AD_POD_STARTED, numberOfAds);
                };

                /**
                 * Notifies the player that an ad or a set of podded ads has ended.
                 * @public
                 * @method OO.AdManagerController#notifyPodEnded
                 * @param {string} adId The ID of the ad (<code>Ad.id</code>).
                 * @fires OO.EVENTS.AD_POD_ENDED
                 */
                this.notifyPodEnded = function(adId) {
                    OO.log("AMC: End ad pod " + adId);
                    pendingPodEnd = true;
                    clearAdTimeout(adId);
                    //We want to publish the UI messages before the ended message.
                    //Otherwise, the ended message can queue up another ad, and we might
                    //end up showing the UI for an ad when we don't want UI for with this line
                    _showPlayerUi();
                    mb.publish(OO.EVENTS.AD_POD_ENDED, adId);
                };

                /**
                 * Notifies the player that a nonlinear ad has begun.  This cancels any ad timeouts.
                 * @public
                 * @method OO.AdManagerController#notifyNonlinearAdStarted
                 * @param {string} adId The ID of the ad (<code>Ad.id</code>).
                 */
                this.notifyNonlinearAdStarted = function(adId) {
                    OO.log("AMC: Start of non-linear ad " + adId);
                    handleAdStarted(adId);
                };

                /**
                 * Notifies the player that a nonlinear ad has ended.
                 * @public
                 * @method OO.AdManagerController#notifyNonlinearAdEnded
                 * @param {string} adId The ID of the ad (<code>Ad.id</code>).
                 * @fires OO.EVENTS.NONLINEAR_AD_PLAYED
                 */
                this.notifyNonlinearAdEnded = function(adId) {
                    lastOverlayAd = null;
                    OO.log("AMC: End of non-linear ad " + adId);
                    //We want to publish the UI messages before the played message.
                    //Otherwise, the played message can queue up another ad, and we might
                    //end up showing the UI for an ad when we don't want UI for with this line
                    _showPlayerUi();
                    mb.publish(OO.EVENTS.NONLINEAR_AD_PLAYED, adId);
                };

                /**
                 * Notifies the player that a single linear ad has started.  The ad may be within a pod of ads.
                 * @public
                 * @method OO.AdManagerController#notifyLinearAdStarted
                 * @param {string} adId The id of the AMC ad recieved from playad()
                 * @param {object} properties Properties of the ad.  This is an object containing
                 *   <code>name</code> (string), <code>duration</code> (seconds), <code>clickUrl</code> (string), <code>indexInPod</code> (number indicating the position
                 *   among podded ads (1 for first ad, 2 for second, etc), <code>skippable</code> (boolean).
                 * @fires OO.EVENTS.WILL_PLAY_SINGLE_AD
                 */
                this.notifyLinearAdStarted = function(adId, properties) {
                    OO.log("AMC: Start of linear ad " + adId);
                    singleAdPlaying = true;
                    mb.publish(OO.EVENTS.WILL_PLAY_SINGLE_AD, properties);
                    handleAdStarted(adId);
                };

                /**
                 * Notifies the player that a single linear ad has ended.  The ad may be within a pod of ads.
                 * @public
                 * @method OO.AdManagerController#notifyLinearAdEnded
                 * @param {string} adId The ID of the ad (<code>Ad.id</code>).
                 * @fires OO.EVENTS.SINGLE_AD_PLAYED
                 */
                this.notifyLinearAdEnded = function(adId) {
                    OO.log("AMC: End of linear ad " + adId);
                    singleAdPlaying = false;
                    clearTimeout(skipButtonTimeout);
                    mb.publish(OO.EVENTS.SINGLE_AD_PLAYED, adId);
                };

                /**
                 * Requests the player to hide its UI. Used by Ad Managers that handle their own UI.
                 * @public
                 * @method OO.AdManagerController#hidePlayerUi
                 * @param {boolean} showAdControls override to show the ad controls
                 * @param {boolean} showAdMarquee override to show the ad marquee
                 * @fires OO.EVENTS.SHOW_AD_MARQUEE
                 */
                this.hidePlayerUi = function(showAdControls, showAdMarquee) {
                    showAdControls = _.isBoolean(showAdControls) ? showAdControls : false;
                    showAdMarquee = _.isBoolean(showAdMarquee) ? showAdMarquee : false;
                    mb.publish(OO.EVENTS.SHOW_AD_CONTROLS, showAdControls);
                    mb.publish(OO.EVENTS.SHOW_AD_MARQUEE, showAdMarquee);
                };

                /**
                 * Requests the player to show its UI.
                 * @private
                 * @method OO.AdManagerController#_showPlayerUi
                 * @fires OO.EVENTS.SHOW_AD_MARQUEE
                 */
                var _showPlayerUi = _.bind(function() {
                    mb.publish(OO.EVENTS.SHOW_AD_CONTROLS, true);
                    mb.publish(OO.EVENTS.SHOW_AD_MARQUEE, true);
                }, this);

                /**
                 * Requests the player to show the nonlinear ad close button.
                 * @method OO.AdManagerController#showNonlinearAdCloseButton
                 * @public
                 * @fires OO.EVENTS.SHOW_NONLINEAR_AD_CLOSE_BUTTON)
                 */
                this.showNonlinearAdCloseButton = function() {
                    mb.publish(OO.EVENTS.SHOW_NONLINEAR_AD_CLOSE_BUTTON);
                };

                /**
                 * Raises an ads error on the message bus.
                 * @method OO.AdManagerController#raiseAdError
                 * @protected
                 * @param {(object|string)} error The error name or information.
                 * @fires OO.EVENTS.ADS_ERROR
                 */
                this.raiseAdError = function(error) {
                    mb.publish(OO.EVENTS.ADS_ERROR, error);
                };

                ///// AD MANAGER MESSAGE BUS APIs /////

                /**
                 * Adds listeners on events in <code>AdManagerController.EVENTS</code> that are triggered by this class.
                 * @public
                 * @method OO.AdManagerController#addPlayerListener
                 * @param {string} eventName The name of the event for which this callback is called.
                 * @param {function} callback The listener callback function.
                 */
                this.addPlayerListener = function(eventName, callback) {
                    // Ad managers can call this to listen to events through the AdManagerController
                    // Throw warning if selecting an event that's not allowed?
                    if (_.indexOf(_.values(this.EVENTS), eventName) < 0) return;

                    if (managerListeners[eventName] == null) {
                        managerListeners[eventName] = [];
                    }

                    if (!_.isFunction(callback)) return;
                    managerListeners[eventName].push(callback);
                };

                /**
                 * Publishes Ad events to the message bus.
                 * @private
                 * @method OO.AdManagerController#notify
                 */
                this.notify = function(eventName, response, params) {
                    mb.publish(eventName,response, params);
                };

                /**
                 * Removes listeners on events in <code>AdManagerController.EVENTS</code> that are triggered by this class.
                 * @public
                 * @method OO.AdManagerController#removePlayerListener
                 * @param {string} eventName The name of the event for which this callback is called.
                 * @param {function} callback The listener callback function.
                 */
                this.removePlayerListener = function(eventName, callback) {
                    var callbackList = managerListeners[eventName];
                    if (callbackList) {
                        var index = callbackList.indexOf(callback);
                        if (index >= 0) {
                            callbackList.splice(index, 1);
                        }
                        if (callbackList.length <= 0) {
                            delete managerListeners[eventName];
                        }
                    }
                };

                // Trigger callbacks on behalf of the ad managers
                var _triggerAdManagerCallback = _.bind(function(playEvent) {
                    if (managerListeners[playEvent] && _.isArray(managerListeners[playEvent])) {
                        for (var i = 0; i < managerListeners[playEvent].length; i++) {
                            managerListeners[playEvent][i].apply(this, arguments);
                        }
                    }
                }, this);


                ///// Playback Listeners /////

                /**
                 * Called when playback is triggered.  Resumes ad playback if an ad was playing.
                 * @method OO.AdManagerController#onPlay
                 * @protected
                 * @fires OO.EVENTS.WILL_RESUME_ADS
                 */
                this.onPlay = function() {
                    // to be safe, again check linear ad mode
                    if ($.inArray(this.currentState, states_linearAd) < 0 || !this.adStarted) return;

                    // apply the play to the linear ad
                    mb.publish(OO.EVENTS.WILL_RESUME_ADS);
                };

                /**
                 * A new stream is being played, checks the timeline for ads before playback begins.
                 * @method OO.AdManagerController#onInitialPlay
                 * @protected
                 * @param {string} eventName The name of the event for which this callback is called.
                 * @param {number} unixTimeMs The UNIX timestamp, in milliseconds, of the time
                 * OO.EVENTS.INITIAL_PLAY was published
                 * @fires this.EVENTS.INITIAL_PLAY_REQUESTED
                 * @fires OO.EVENTS.BUFFERING
                 * @fires OO.EVENTS.WILL_PLAY_ADS
                 */
                this.onInitialPlay = function(eventName, unixTimeMs) {
                    if (this.startTime <= 0) {
                        currentPlayhead = 0;
                        this.startTime = 0;
                    }

                    _incrementMainVideoCount();

                    if (this.isLiveStream) {
                        this.liveStreamTimestamps.initialPlay = {
                            ms: unixTimeMs,
                            delayUsed: false
                        };
                    }

                    // [PBK-255] [PBW-199] [PBW-223]
                    if (OO.isAndroid && OO.isChrome) {
                        // Required to pass OO.VIDEO.MAIN so that the video controller knows to reload this element
                        // even if it's not in focus
                        mb.publish(OO.EVENTS.VC_RELOAD, OO.VIDEO.MAIN);
                    }

                    _triggerAdManagerCallback(this.EVENTS.INITIAL_PLAY_REQUESTED);

                    //Set the current playhead to the start time so we only play the ad pod
                    //that is closest to the start time and skip other previous ones.
                    currentPlayhead = this.startTime;

                    // trigger ads
                    _checkTimeline(currentPlayhead, currentPlayhead > 0);
                };

                /**
                 * Called when a replay is triggered.  Resets AMC settings and triggers prerolls.
                 * @protected
                 * @method OO.AdManagerController#onReplay
                 */
                this.onReplay = function() {
                    // Movie state Properties
                    this.startTime  = 0;
                    currentPlayhead = 0;
                    amcPrerollsDoneCalled = false;

                    _incrementMainVideoCount();

                    _resetMovieState();
                    _resetAdState();
                    _resetPlaybackEventDependencies();
                    _resetRepeatAds();

                    _triggerAdManagerCallback(this.EVENTS.REPLAY_REQUESTED);

                    //clear the timeline if we want to replay ads
                    if (this.adManagerSettings[SETTINGS.REPLAY_ADS]) {
                        timeline = [];
                        _buildTimeline();
                    } else {
                        _.each(timeline, _.bind(function (ad) { ad.played = true; }, this));
                    }
                    _checkTimeline(0, false);
                };

                /**
                 * Called when a stream is first played.  Used to set the <code>lastEmbedCode</code> field.
                 * @protected
                 * @method OO.AdManagerController#onWillPlayFromBeginning
                 */
                this.onWillPlayFromBeginning = function() {
                    if (started) return;
                    if ($.inArray(this.currentState, states_linearAd) >= 0) return;
                    lastEmbedCode = this.currentEmbedCode;
                };

                /**
                 * Called when the embed code is set for a movie.
                 * @protected
                 * @method OO.AdManagerController#onSetEmbedCode
                 * @param {string} eventName The name of the event for which this callback is called.
                 * @param {string} embedCode The videoâ€™s Ooyala content ID found in Backlot.
                 * @param {object} options Page level settings for the new embed code.
                 */
                this.onSetEmbedCode = function(eventName, embedCode, options) {
                    if (options) {
                        this.pageSettings = _.extend(this.pageSettings, options);
                    }
                };

                /**
                 * Called when the embed code is changed.<br/>
                 * If the embed code is new:<br/>
                 * <ul><li>ad timelines are reset</li>
                 *     <li>new metadata will be loaded</li>
                 *     <li>ad managers are marked as not ready</li>
                 *     <li><code>adManager['loadMetadata']</code> is called with the new metadata</li>
                 * @protected
                 * @method OO.AdManagerController#onEmbedCodeChanged
                 * @param {string} eventName The name of the event for which this callback is called.
                 * @param {string} embedcode The videoâ€™s Ooyala content ID found in Backlot.
                 * @fires this.EVENTS.CONTENT_CHANGED
                 * @fires OO.EVENTS.WILL_PLAY_ADS
                 */
                this.onEmbedCodeChanged = function(eventName, embedcode) {
                    // Mark each ad manager as not ready - need to load new metadata
                    for (var name in this.adManagers) {
                        this.adManagers[name].ready = false;
                    }

                    if (embedcode != this.currentEmbedCode) {
                        lastEmbedCode = this.currentEmbedCode;
                    }
                    this.currentEmbedCode = embedcode;
                    if (lastEmbedCode != '' && lastEmbedCode != this.currentEmbedCode) {
                        _triggerAdManagerCallback(this.EVENTS.CONTENT_CHANGED);
                        _handleNewStream();
                    }
                };

                /**
                 * Called when a video time changes.
                 * If the main video is not paused or seeking, then the timeline is checked for ads to play.
                 * @protected
                 * @method OO.AdManagerController#onPlayheadTimeChanged
                 * @param {string} eventName The name of the event for which this callback is called.
                 * @param {number} playhead Current video time (seconds).
                 * @param {number} duration Duration of the current video (seconds)
                 * @fires this.EVENTS.PLAYHEAD_TIME_CHANGED
                 * @fires OO.EVENTS.WILL_PLAY_ADS
                 */
                this.onPlayheadTimeChanged = function(eventName, playhead, duration, buffer, seekRange, videoId) {
                    var offset = null;

                    if (this.isLiveStream && !csaiMode) {
                        offset = playhead;
                        playhead = _calculateLivePlayhead();
                    }

                    if (videoId === OO.VIDEO.MAIN) {
                        //if the movie duration was not set by the content tree due to
                        //lack of availability, set it here if we receive a duration
                        if (this.movieDuration === -1 && duration > 0) {
                            this.movieDuration = duration;
                        }

                        //for main content playheads, we are reading the playhead time to determine
                        //when to start ad playback

                        // Throw out playheads before we started playback
                        if (!started || this.ended) {
                            return;
                        }

                        currentPlayhead = playhead;

                        if (paused || seeked || seeking) {
                            return;
                        }

                        if (!reachedStartTime && currentPlayhead > this.startTime) {
                            OO.log("Reached start time at playhead: " + currentPlayhead + " for start time: " + this.startTime);
                            reachedStartTime = true;
                        }

                        if (this.startTime == -1) {
                            this.startTime = currentPlayhead;
                            return;
                        }

                        //Do not play additional ads if we are currently in ad mode
                        var linear = _inLinearAdMode();
                        if (linear) {
                            return;
                        }

                        // Set to true in order to only play the last ad on the timeline when it reaches
                        // the new time.
                        if (reachedStartTime) {
                            _checkTimeline(currentPlayhead, true);
                        }

                        // Call ad manager listeners
                        _triggerAdManagerCallback(this.EVENTS.PLAYHEAD_TIME_CHANGED, playhead, duration, offset);
                    } else if (videoId === OO.VIDEO.ADS) {
                        //for ad playheads, we are reading the playhead time to determine
                        //when to show the skip ad button

                        var adManagerSetting = {};
                        adManagerSetting[SETTINGS.SHOW_LINEAR_AD_SKIP_BUTTON] = adManagerShowSkipButton;
                        //Retrieve the skip button setting prioritized by: page level, XML (via ad manager),
                        //then provider level/default value
                        var showSkipButton = getSetting(SETTINGS.SHOW_LINEAR_AD_SKIP_BUTTON,
                            [
                                this.pageSettings,
                                adManagerSetting,
                                this.adManagerSettings
                            ]);

                        if (typeof showSkipButton !== 'undefined') {
                            showSkipButton = _stringToBoolean(showSkipButton);
                        }

                        if (showSkipButton) {
                            var adManagerOffset;
                            //Calculate the XML provided offset depending on if it was provided as a percent or in seconds
                            if (adManagerSkipButtonOffset) {
                                if (adManagerSkipButtonOffset.indexOf('%') === adManagerSkipButtonOffset.length - 1) {
                                    adManagerOffset = parseInt(adManagerSkipButtonOffset)/100 * currentAd.duration;
                                } else {
                                    adManagerOffset = parseInt(adManagerSkipButtonOffset);
                                }
                            }
                            adManagerSetting[SETTINGS.LINEAR_AD_SKIP_BUTTON_START_TIME] = adManagerOffset;
                            //Priority (most to least): page level, XML (via ad manager), provider level/default value
                            var triggerPoint = getSetting(SETTINGS.LINEAR_AD_SKIP_BUTTON_START_TIME,
                                [
                                    this.pageSettings,
                                    adManagerSetting,
                                    this.adManagerSettings
                                ]);

                            if (_.isNumber(triggerPoint) && triggerPoint >= 0) {
                                if (playhead >= triggerPoint) {
                                    mb.publish(OO.EVENTS.SHOW_AD_SKIP_BUTTON);
                                }
                            }
                        }

                        // Call ad manager listeners
                        _triggerAdManagerCallback(this.EVENTS.AD_PLAYHEAD_TIME_CHANGED, playhead, duration, offset);
                    }
                };

                /**
                 * Retrieves the value of a setting (key). Iterates through the provided settings to grab the first
                 * value it can find for the provided key. Prioritized from first item in the array to the last.
                 * @private
                 * @method OO.AdManagerController#getSetting
                 * @param {string} setting The setting to retrieve (the key)
                 * @param {array} settings The settings to iterate through. Prioritized from first to last. Each item
                 *                         in the array must be an object with key value pairs.
                 * @return {object|boolean|string} The retrieved setting (the value), if found. Otherwise returns undefined
                 */
                var getSetting = _.bind(function(setting, settings) {
                    var settingsObject, value;
                    for(var i = 0; i < settings.length; i++){
                        settingsObject = settings[i];
                        value = settingsObject[setting];
                        if (typeof value !== 'undefined') {
                            break;
                        }
                    }
                    return value;
                }, this);

                /**
                 * Called when pause is triggered.
                 * @protected
                 * @method OO.AdManagerController#onPause
                 * @fires this.EVENTS.PAUSE
                 * @fires OO.EVENTS.WILL_PAUSE_ADS
                 */
                this.onPause = function() {
                    // If in linear ad mode, apply the controls to the ad
                    if ($.inArray(this.currentState, states_linearAd) >= 0 && this.adStarted) {
                        // apply the pause to the linear ad
                        if (currentAd && this.adManagers[currentAd.adManager]) {
                            mb.publish(OO.EVENTS.WILL_PAUSE_ADS);
                        }
                        return;
                    }

                    paused = true;

                    // If the state is overlay, pause the overlay counter
                    if (overlay) {
                        var pauseOverlayTimer = 'pauseOverlayTimer';
                        _triggerAdManagerCallback(pauseOverlayTimer);
                    }

                    // Call ad manager listeners
                    if (started) {
                        _triggerAdManagerCallback(this.EVENTS.PAUSE);
                    }
                };

                /**
                 * Called when the video element has entered the pause state.
                 * @protected
                 * @method Oo.AdManagerController#onVideoPaused
                 */
                this.onVideoPaused = function() {
                    if (this.liveStreamTimestamps) {
                        this.liveStreamTimestamps.paused = {
                            ms: Date.now(),
                            delayUsed: false
                        };
                    }
                };

                /**
                 * Called when an ad will be paused.  Triggers pauseAd in the appropriate ad manager.
                 * @protected
                 * @method OO.AdManagerController#onWillPauseAds
                 */
                this.onWillPauseAds = function() {
                    if (currentAd && this.adManagers[currentAd.adManager]) {
                        _safeFunctionCall(this.adManagers[currentAd.adManager], "pauseAd", [currentAd]);
                        mb.publish(OO.EVENTS.VC_PAUSE, OO.VIDEO.ADS);
                        adPaused = true;
                    }
                };

                /**
                 * Called when an ad will be resumed.  Triggers resumeAd in the appropriate ad manager.
                 * @protected
                 * @method OO.AdManagerController#onWillResumeAds
                 */
                this.onWillResumeAds = function() {
                    if (currentAd && this.adManagers[currentAd.adManager]) {
                        _safeFunctionCall(this.adManagers[currentAd.adManager], "resumeAd", [currentAd]);
                        mb.publish(OO.EVENTS.VC_PLAY, OO.VIDEO.ADS);
                        adPaused = false;
                    }
                };

                /**
                 * Handle seek.
                 * Note: This gets called on scrubber seek but not on button seek unless the player is paused.
                 * @protected
                 * @method OO.AdManagerController#onWillPlay
                 * @param {string} eventName The name of the event for which this callback is called
                 * @param {string} streamurl The url of the stream about to play
                 * @fires this.EVENTS.PLAY_STARTED
                 * @fires OO.EVENTS.WILL_PLAY_ADS
                 */
                this.onWillPlay = function(eventName, streamurl) {
                    // Notify ad managers of initial play
                    if (!started) {
                        _triggerAdManagerCallback(this.EVENTS.PLAY_STARTED);
                    }

                    if (paused && startTriggered) {
                        _triggerAdManagerCallback(this.EVENTS.RESUME, streamurl)
                    }

                    if (startTriggered) {
                        started = true;
                    }

                    if (!paused) return;
                    paused = false;

                    if (seeked) {
                        _handleSeek();
                    }
                };

                /**
                 * Called when a video is told to play.  Tracks whether or not the main video has been told to play.
                 * @private
                 * @method OO.AdManagerController#onVideoPlay
                 */
                var onVideoPlay = _.bind(function(event, videoId) {
                    if (videoId == OO.VIDEO.MAIN) {
                        startTriggered = true;
                    }
                }, this);

                /**
                 * Called when main video is playing
                 * @protected
                 * @method OO.AdManagerController#onPlaying
                 */
                this.onPlaying = function() {
                    seeking = false;
                    started = true;
                };

                /**
                 * Called when a video completes.
                 * @protected
                 * @method OO.AdManagerController#onVideoPlayed
                 */
                this.onVideoPlayed = function(event, videoId) {
                    if (videoId === OO.VIDEO.MAIN) {
                        onContentVideoPlayed(event, videoId);
                    } else if (videoId === OO.VIDEO.ADS) {
                        if (currentAd && currentAd.isLinear && this.adManagers[currentAd.adManager]) {
                            _safeFunctionCall(this.adManagers[currentAd.adManager], "adVideoEnded");
                        } else if (ooyalaAdManager) {
                            _safeFunctionCall(ooyalaAdManager, "adVideoEnded");
                        }
                    }
                };

                /**
                 * Called when a video element comes into focus.
                 * @protected
                 * @method OO.AdManagerController#onVideoElementInFocus
                 * @param event     the event name
                 * @param videoId   the id of the element that came into focus
                 */
                this.onVideoElementInFocus = function(event, videoId) {
                    //notify the ad managers of the focus
                    if (videoId === OO.VIDEO.MAIN) {
                        _showPlayerUi();
                        _triggerAdManagerCallback(this.EVENTS.MAIN_CONTENT_IN_FOCUS);
                    }
                };

                // TODO: This didn't get called after failed postroll
                /**
                 * Called when the video in the main video element ends.
                 * Triggers postrolls.
                 * @private
                 * @method OO.AdManagerController#onContentVideoPlayed
                 * @fires OO.EVENTS.WILL_PLAY_ADS
                 * @fires this.EVENTS.CONTENT_COMPLETED
                 */
                var onContentVideoPlayed = _.bind(function(event, videoId) {
                    // Ignore if not the main content video
                    if (videoId !== OO.VIDEO.MAIN) return;

                    // If an overlay is playing, stop it now
                    //(PIliev) This needs to happen before this.ended = true
                    //so that we don't try to show the end screen before playing postrolls
                    //and end up with no end screen after postroll.
                    //(AngieIsrani)we need to test for the case where ended = true before all of the
                    //events triggered by CancelledCurrentAd are handled which in turn brings
                    //the end screen error back
                    if (overlay) {
                        _cancelOverlay();
                    }

                    this.ended = true;

                    //In order to prevent the overlay from appearing on replay after the post-roll we must null out the var.
                    lastOverlayAd = null;
                    overlay = false;
                    this.waitForPostrollToPlay = false;
                    _triggerAdManagerCallback(this.EVENTS.CONTENT_COMPLETED);
                    _checkTimeline(Number.MAX_VALUE, false, STATES.CONTENT_VIDEO_PLAYED);
                }, this);

                // TODO: Does this get called on embed code change from pause
                /**
                 * Called when a stream has completed.
                 * @protected
                 * @method OO.AdManagerController#onPlayed
                 * @fires this.EVENTS.CONTENT_COMPLETED
                 */
                this.onPlayed = function() {
                    started = false;
                    startTriggered = false;
                    lastEmbedCode = this.currentEmbedCode;
                };

                /**
                 * Called while a video is seeking.  Updates the current playhead if a video ad is not playing.
                 * @protected
                 * @method OO.AdManagerController#onSeek
                 * @param {string} eventName The name of the event for which this callback is called
                 * @param {number} playhead The current video position (seconds)
                 */
                this.onSeek = function(eventName, playhead) {
                    if ($.inArray(this.currentState, states_linearAd) >= 0) {
                        // Trigger a seek on ads
                        if (currentAd && currentAd.adManager) {
                            _safeFunctionCall(this.adManagers[currentAd.adManager], "seekAd");
                        }

                        return;
                    }

                    //if a seek is detected that does not go to start time
                    //this means another seek other than the initial seek has occurred.
                    //We consider this as having reached the start time as well
                    //(for the purposes of gating checkTImelines for playhead changes and seeks)
                    if (!reachedStartTime && playhead != this.startTime) {
                        reachedStartTime = true;
                    }

                    // If true, will skip ads when seeking on the specific threshold
                    skipAdsOnSeek = playhead >= seekToEndThreshold;
                    seekedPosition = playhead;
                    currentPlayhead = playhead;
                    seeking = true;
                };

                /**
                 * Called when a video has seeked.  If an ad is playing, do nothing.<br/>
                 * If it just returned from playing a video ad in single element mode, switch back to the content video.<br/>
                 * If the stream started from an offset note that the video has now started.<br/>
                 * If not currently scrubbing, check the timeline if any ads were skipped over.<br/>
                 * Note: Does not get called on seek to beginning.<br/>
                 * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Does get called while scrubbing and at scrubbed and after willPlay
                 * if weren't paused.
                 * @protected
                 * @method OO.AdManagerController#onSeeked
                 * @param {string} eventName The name of the event
                 * @param {?number} playhead The current time of the video after seeking.
                 * @fires OO.EVENTS.WILL_PLAY_ADS
                 */
                this.onSeeked = function(eventName, playhead) {
                    if (typeof playhead === "number") {
                        currentPlayhead = playhead;
                    }
                    seeking = false;
                    _tryHandleSeek();
                };

                /**
                 * Called when video started playback. Notifies ad managers of the event.
                 * @protected
                 * @method OO.AdManagerController#onVideoPlaying
                 * @param {string} event The event name
                 * @param {string} videoId The id of the video that started playback
                 */
                this.onVideoPlaying = function(event, videoId) {
                    _handleLiveStreamDelays();
                    if (videoId === OO.VIDEO.ADS && currentAd) {
                        _safeFunctionCall(this.adManagers[currentAd.adManager], "adVideoPlaying");
                    }
                };

                /**
                 * Reset ad manager controller on stream play failed.
                 * @protected
                 * @method OO.AdManagerController#onVideoPlayFailed
                 * @param {string} event The name of the event triggering the callback
                 * @param {string} videoId The id of the video that encountered an error
                 * @param {number} errorCode The error code associated with the VTC error
                 */
                this.onVideoPlayFailed = function(event, videoId, errorCode) {
                    if (videoId === OO.VIDEO.ADS) {
                        if(currentAd && currentAd.isLinear && this.adManagers[currentAd.adManager]) {
                            _safeFunctionCall(this.adManagers[currentAd.adManager], "adVideoError", [currentAd, errorCode]);
                        }
                    } else if (videoId === OO.VIDEO.MAIN) {
                        // TODO: Verify that reset is the correct action to take on stream playback failure
                        _reset();
                    }
                };

                ///// Playback Handling /////

                var _resetSeekState = _.bind(function() {
                    seeked = false;
                    seeking = false;
                }, this);

                /**
                 * Helper function to determine checking the timeline for ad is needed.
                 * @private
                 * @method OO.AdManagerController#_tryHandleSeek
                 */
                var _tryHandleSeek = _.bind(function() {
                    if (!started) return;

                    seeking = false;
                    seeked = true;
                    if (!paused) {
                        _handleSeek();
                    }
                }, this);

                /**
                 * After seeking, check the timeline for ads.
                 * @private
                 * @method OO.AdManagerController#_handleSeek
                 */
                var _handleSeek = _.bind(function() {
                    _resetSeekState();

                    if (reachedStartTime) {
                        _checkTimeline(currentPlayhead, true, STATES.SEEKED);
                    }
                }, this);

                // Reset data on new stream and trigger prerolls
                var _handleNewStream = _.bind(function() {
                    _cancelCurrentAd({
                        code : this.AD_CANCEL_CODE.STREAM_ENDED
                    });
                    _reset();
                    newStreamHandling = true;
                }, this);


                ///// Settings Listeners /////

                /**
                 * Will raise an event to tell the ad manager that it has entered or exited fullscreen mode.
                 * @private
                 * @method OO.AdManagerController#onFullscreenChanged
                 * @param {string} eventName The name of the event for which this callback is called
                 * @param {boolean} isFullscreen The current fullscreen state
                 * @fires this.EVENTS.FULLSCREEN_CHANGED
                 */
                this.onFullscreenChanged = function(eventName, isFullscreen) {
                    if (isFullscreen !== lastFullscreenState) {
                        _triggerAdManagerCallback(this.EVENTS.FULLSCREEN_CHANGED, isFullscreen);
                        lastFullscreenState = isFullscreen;
                    }
                };

                /**
                 * Called when the video size changes.  Note down the new size and raise event to ad managers.
                 * @protected
                 * @method OO.AdManagerController#onSizeChanged
                 * @param {string} event The sizeChanged event name
                 * @param {number} width The new player width
                 * @param {number} height The new player height
                 * @fires this.EVENTS.SIZE_CHANGED
                 */
                this.onSizeChanged = function(event, width, height) {
                    if (width < 0 || height < 0) return;
                    this.ui.height = height;
                    this.ui.width = width;
                    // Call ad manager listeners
                    _triggerAdManagerCallback(this.EVENTS.SIZE_CHANGED, width, height);
                };

                /**
                 * Called when the control bar is shown. Raises event to ad managers.
                 * @protected
                 * @method OO.AdManagerController#onControlsShown
                 * @fires this.EVENTS.CONTROLS_SHOWN
                 */
                this.onControlsShown = function() {
                    _triggerAdManagerCallback(this.EVENTS.CONTROLS_SHOWN);
                };

                /**
                 * Called when the control bar is shown. Raises event to ad managers.
                 * @protected
                 * @method OO.AdManagerController#onControlsHidden
                 * @fires this.EVENTS.CONTROLS_HIDDEN
                 */
                this.onControlsHidden = function() {
                    _triggerAdManagerCallback(this.EVENTS.CONTROLS_HIDDEN);
                };

                /**
                 * Ad managers that use VTC video elements will not need to take action on volume change.  Ad managers
                 * who do not use VTC video elements will need to listen on the VOLUME_CHANGED event and trigger the
                 * change manually.
                 * @protected
                 * @method OO.AdManagerController#onVolumeChanged
                 * @param {string} eventName The name of the event for which this callback is called
                 * @param {number} volume The current volume level
                 * @param {string} videoId The video tech id of the element disposed
                 */
                this.onVolumeChanged = function(eventName, volume, videoId) {
                    _triggerAdManagerCallback(this.EVENTS.VOLUME_CHANGED, volume);
                    if (videoId === OO.VIDEO.ADS) {
                        _triggerAdManagerCallback(this.EVENTS.AD_VOLUME_CHANGED, volume);
                    }
                };


                ///// Interaction Listeners /////

                /**
                 * When an ad is clicked.  If the ad is playing and if possible, pause the ad and show controls.
                 * If the ad was paused, resume it and hide controls if necessary. However if SETTINGS.ALLOW_AD_CLICK_THROUGH_ON_VIDEO
                 * is set to false, default is true, then we want to ignore the click if it comes from the video window.
                 * @public
                 * @method OO.AdManagerController#adsClicked
                 * @param {object} prop The argument from the event that contains an object having the source from which the button
                 * was clicked.
                 */
                this.adsClicked = function(prop) {
                    if (ooyalaAdManager) {
                        _safeFunctionCall(ooyalaAdManager, "playerClicked");
                    }

                    if (!currentAd) {
                        return;
                    }

                    if (adPaused && (!prop || (prop.source != "learnMoreButton"))) {
                        mb.publish(OO.EVENTS.PLAY);
                    } else {
                        if (this.adManagerSettings[SETTINGS.PAUSE_AD_ON_CLICK]) {
                            //Dispatch pause event to pause the main video when an overlay is clicked.
                            if (currentAd && !currentAd.isLinear) {
                                mb.publish(OO.EVENTS.PAUSE);
                            } else {
                                this.onPause();
                            }
                        }
                        if((currentAd.isLinear && (!this.adManagerSettings[SETTINGS.ALLOW_AD_CLICK_THROUGH_ON_VIDEO]
                            && prop && prop.source == "videoWindow"))) {
                            return;
                        }
                        if (this.adManagers[currentAd.adManager]) {
                            _safeFunctionCall(this.adManagers[currentAd.adManager], "playerClicked", [currentAd, true]);
                        }
                    }
                };

                /**
                 * Called when an ad's clickthrough URL is opened. Currently, it is called by each individual ad manager
                 * because clickthroughs behave differently across the different ad managers (Google IMA, FreeWheel, VAST).
                 * @public
                 * @method OO.AdManagerController#adsClickthroughOpened
                 * @fires OO.EVENTS.ADS_CLICKTHROUGH_OPENED
                 */
                this.adsClickthroughOpened = function() {
                    mb.publish(OO.EVENTS.ADS_CLICKTHROUGH_OPENED);
                };

                /**
                 * When the ad is closed with the X button, cancel the ad.
                 * @public
                 * @method OO.AdManagerController#onSkipAd
                 */
                this.onSkipAd = function() {
                    if (ooyalaAdManager) {
                        _safeFunctionCall(ooyalaAdManager, "cancelAd", [currentAd, {
                            code : this.AD_CANCEL_CODE.SKIPPED
                        }]);
                    }

                    if (this.currentState == 'LinearAd') {
                        OO.log("AMC: Canceling linear ad due to skip button clicked.");
                        _notifyCancelAd(currentAd, {
                            code : this.AD_CANCEL_CODE.SKIPPED
                        });
                    } else if (this.currentState == 'Overlay') {
                        OO.log("AMC: Canceling nonlinear ad due to skip button clicked.");
                        _cancelOverlay();
                    }
                };

                /**
                 * Cancels the current overlay. Notifies the overlay's ad manager of the event.
                 * @private
                 * @method OO.AdManagerController#_cancelOverlay
                 */
                var _cancelOverlay = _.bind(function() {
                    if (overlay && currentAd && this.adManagers[currentAd.adManager]) {
                        cancelling = true;
                        _safeFunctionCall(this.adManagers[currentAd.adManager], "cancelOverlay", [currentAd]);
                        mb.publish(OO.EVENTS.NONLINEAR_AD_PLAYED, currentAd.id);
                    }
                }, this);

                ///// Events Raised Locally Listeners /////

                var _enterAdMode = _.bind(function(adEventDetails) {
                    _resetSeekState();

                    // If an overlay is playing, hide it now
                    if (overlay && currentAd && this.adManagers[currentAd.adManager]) {
                        if (_.isFunction(this.adManagers[currentAd.adManager].hideOverlay)) {
                            _safeFunctionCall(this.adManagers[currentAd.adManager], "hideOverlay", [currentAd]);
                            mb.publish(OO.EVENTS.HIDE_NONLINEAR_AD);
                        }
                        else {
                            //If an overlay is playing and the ad manager cancels the overlay instead of just hiding it, we need to update
                            // the state of the the AMC to know that it is cancelled and done so we don't trigger the next ad in the queue
                            // if the overlay calls adPodEnded. It also calls the cancelOverlay function inside of the ad admanager.
                            _cancelOverlay();
                        }
                    }

                    mb.publish(OO.EVENTS.WILL_PLAY_ADS, adEventDetails);
                }, this);

                var _inLinearAdMode = _.bind(function() {
                    return $.inArray(this.currentState, states_linearAd) >= 0;
                }, this);

                var _prepareAndTriggerAd = _.bind(function() {
                    _triggerNextAd();
                }, this);

                /**
                 * Called when ad mode is beginning.
                 * Either notifies that the main content video will be unloaded or triggers the first ad in the set.
                 * @protected
                 * @method OO.AdManagerController#onWillPlayAds
                 * @fires OO.EVENTS.AD_POD_STARTED
                 * @fires OO.EVENTS.WILL_PLAY_SINGLE_AD
                 */
                this.onWillPlayAds = function() {
                    _prepareAndTriggerAd();
                };

                /**
                 * When this function is called, the state machine switches to LinearAd. This empty function must exist
                 * for the state machine to change states.
                 * @protected
                 * @method OO.AdManagerController#onAdPodStarted
                 */
                this.onAdPodStarted = function() {
                    mb.publish(OO.EVENTS.DISABLE_SEEKING, OO.VIDEO.ADS);
                };

                /**
                 * Sets overlay state.  Shows the overlay.
                 * @protected
                 * @method OO.AdManagerController#onWillPlayNonlinearAd
                 * @param {string} eventName The name of the event for which this callback is called
                 * @param {object} ad The ad that will be played
                 */
                this.onWillPlayNonlinearAd = function(eventName, ad) {
                    // Setup functions to cancel and end ads
                    var cancelAd = _.bind(function(mb, ad, adId){
                        lastOverlayAd = null;
                        OO.log("AMC: Cancelling a non-linear ad due to timeout " + adId);
                        _notifyCancelAd(ad, {
                            code : this.AD_CANCEL_CODE.TIMEOUT
                        });
                        mb.publish(OO.EVENTS.NONLINEAR_AD_PLAYED, adId);
                    }, this, mb, ad, ad.id);

                    setAdTimeouts(ad, cancelAd, MAX_AD_LOAD_TIMEOUT);

                    // trigger ads
                    if (ad.adManager && this.adManagers[ad.adManager]) {
                        _safeFunctionCall(this.adManagers[ad.adManager], "playAd", [ad]);
                    } else {
                        this.notifyNonlinearAdEnded(ad.id);
                    }
                };

                /**
                 * Callback for when linear ads start to play.
                 * @protected
                 * @method OO.AdManagerController#onPlayNonlinearAd
                 */
                this.onPlayNonlinearAd = function() {
                    //Must be defined so the state machine remains in the proper state (overlay state)
                };

                var _handleEndOfAd = _.bind(function(adId) {
                    _resetAdState();
                    if (!cancelling) {
                        // only trigger more ads if we're not in ad-cancelling mode
                        _triggerNextAd();
                    }
                }, this);

                /**
                 * Trigger next queued ad if the ended ad is the current ad.
                 * @protected
                 * @method OO.AdManagerController#onAdPodEnded
                 * @param {string} eventName The name of the event for which this callback is called
                 * @param {string} adId ID of the ad that finished playing
                 * @fires OO.EVENTS.AD_POD_STARTED
                 * @fires OO.EVENTS.WILL_PLAY_SINGLE_AD
                 */
                this.onAdPodEnded = function(eventName, adId) {
                    pendingPodEnd = false;
                    mb.publish(OO.EVENTS.ENABLE_SEEKING, OO.VIDEO.ADS);
                    mb.publish(OO.EVENTS.VC_SET_VIDEO_STREAMS, OO.VIDEO.ADS, null);
                    _handleEndOfAd(adId);
                };

                /**
                 * Callback triggered when the UI successfully displays the nonlinear ad.
                 * @public
                 * @method OO.AdManagerController#onNonlinearAdDisplayed
                 * @param {string} eventname The name of the event for which this callback is called
                 */
                this.onNonlinearAdDisplayed = function(eventname) {
                    _triggerAdManagerCallback(this.EVENTS.NONLINEAR_AD_DISPLAYED);
                };

                /**
                 * Trigger next queued ad if the ended ad is the current ad.
                 * @protected
                 * @method OO.AdManagerController#onNonlinearAdPlayed
                 * @param {string} eventName The name of the event for which this callback is called
                 * @param {string} adId The ID of the ad that has ended
                 * @fires OO.EVENTS.AD_POD_STARTED
                 * @fires OO.EVENTS.WILL_PLAY_SINGLE_AD
                 */
                this.onNonlinearAdPlayed = function(eventName, adId) {
                    // Overlay should be hidden by the ad manager now.
                    _handleEndOfAd(adId);
                };

                /**
                 * Checks to see if all ads are done. If so, handles the necessary state changes
                 * and publishes the required events for when all ads are done.
                 * @protected
                 * @method OO.AdManagerController#tryAdsCompleted
                 * @fires OO.EVENTS.AMC_ALL_ADS_DONE
                 * @returns {boolean} True if it is determined that all ads are done, false otherwise
                 */
                this.tryAdsCompleted = function() {
                    var allDone = false;
                    //if the next ad is a non linear ad, we still want to publish AMC_ALL_ADS_DONE assuming
                    //the other conditions are met
                    if (this.ended && !this.waitForPostrollToPlay && (adQueue.length <= 0 || (adQueue[0] && !adQueue[0].isLinear && !adQueue[0].isRequest))) {
                        this.waitForPostrollToPlay = true;
                        this.ui.transitionToMainContent(false, this.ended);
                        allDone = true;
                        OO.log("AMC: All ads completed, unblocking played event");
                        mb.publish(OO.EVENTS.AMC_ALL_ADS_DONE);
                    }
                    return allDone;
                };

                /**
                 * Resumes the content video after ads are completed.  Re-enables controls and ends ad mode.
                 * @protected
                 * @method OO.AdManagerController#onAdsPlayed
                 * @fires OO.EVENTS.AMC_ALL_ADS_DONE
                 * @fires OO.EVENTS.AMC_PREROLLS_DONE
                 * @fires OO.EVENTS.ENABLE_PLAYBACK_CONTROLS
                 */
                this.onAdsPlayed = function() {
                    cancelling = false;

                    if (this.tryAdsCompleted()) {
                        return;
                    }

                    //We do not want to disturb the play/pause state if the main content is in focus
                    //so only resume when ad is in focus
                    var shouldResume = !newStreamHandling && startTriggered && this.ui.isAdInFocus();
                    this.ui.transitionToMainContent(shouldResume, this.ended);

                    // resume from preroll, NOTE: (started=false) on replay unless in single element mode
                    if ((!started && !newStreamHandling) || (!amcPrerollsDoneCalled && OO.isIos)) {
                        mb.publish(OO.EVENTS.AMC_PREROLLS_DONE);
                        amcPrerollsDoneCalled = true;
                    }

                    //This will trigger any pending overlays
                    _triggerNextAd();

                    _resetAdState();

                    // Reshow the overlay if the ad finished playing, if there was one.
                    if (overlay && currentAd && this.adManagers[currentAd.adManager]) {
                        _safeFunctionCall(this.adManagers[currentAd.adManager], "showOverlay");
                        mb.publish(OO.EVENTS.SHOW_NONLINEAR_AD);
                    }
                };


                /**
                 * Alerts the ad manager that an ad has been clicked on and it should react.
                 * @protected
                 * @method OO.AdManagerController#onAdsClicked
                 * @param {object} event The event object that sent when the event dispatches.
                 * @param {object} prop An Object sent with the event that contains data we need to find what the source of ads clicked
                 * was.
                 */
                this.onAdsClicked = function(event, prop) {
                    this.adsClicked(prop);
                };
                // Exposed to ad manager
                //adPlaybackError

                /**
                 * Alerts the ad manager that a video stream tag has been found.
                 * @protected
                 * @method OO.AdManagerController#onVideoTagFound
                 * @param {string} event The event that triggered this callback.
                 * @param {string} videoId The id of the video element that processed a tag.
                 * @param {string} tagType The type of tag that was detected.
                 * @param {object} metadata Any metadata attached to the found tag.
                 */
                this.onVideoTagFound = function(event, videoId, tagType, metadata) {
                    _triggerAdManagerCallback(this.EVENTS.VIDEO_TAG_FOUND, videoId, tagType, metadata);
                };

                /**
                 * Notifies ad manager plugins that a URL for the MAIN element has been selected/changed.
                 * @protected
                 * @method AdManagerController#onVideoElementCreated
                 * @param {string} eventName The name of the event that triggered this callback
                 * @param {object} elementParams The parameters of the element created including id, domId, parent,
                 *                               video element, and supported encodings
                 */
                this.onVideoElementCreated = _.bind(function(eventName, elementParams) {
                    if (elementParams["videoId"] === OO.VIDEO.MAIN) {
                        var streamUrl = elementParams["streamUrl"];
                        if (streamUrl) {
                            _triggerAdManagerCallback(this.EVENTS.CONTENT_URL_CHANGED, streamUrl);
                        }
                    }
                }, this);

                // Live Stream Helpers

                /**
                 * Helper function to calculate the duration of a pause or from the time
                 * initial play is called to the time the video actually begins playing. Accumulate
                 * these delays/offsets to then use as part of the calculation for the live playhead.
                 * @private
                 * @method OO.AdManagerController#_handleLiveStreamDelays
                 */
                var _handleLiveStreamDelays = _.bind(function() {
                    var now = Date.now();
                    var paused = this.liveStreamTimestamps.paused;
                    var initialPlay = this.liveStreamTimestamps.initialPlay;
                    if (paused && _.isFinite(paused.ms) && !paused.delayUsed) {
                        this.timeMainVideoIdleMs += now - paused.ms;
                        this.liveStreamTimestamps.paused.delayUsed = true;
                    }
                    if (initialPlay && _.isFinite(initialPlay.ms) && !initialPlay.delayUsed) {
                        this.timeMainVideoIdleMs += now - initialPlay.ms;
                        this.liveStreamTimestamps.initialPlay.delayUsed = true;
                    }
                }, this);

                /**
                 * Helper function to calculate the playhead for a livestream. The live playhead is calculated
                 * by taking: timeSinceInitialPlay - timeMainVideoIdle
                 * timeMainVideoIdle is the accumulation of the duration of pauses, ad playback, and
                 * delay between hitting play and the stream actually playing back (aka the duration of non main
                 * video playback).
                 * @private
                 * @method OO.AdManagerController#_calculateLivePlayhead
                 * @returns {number} The live playhead represented in milliseconds.
                 */
                var _calculateLivePlayhead = _.bind(function() {
                    var timeSinceInitialPlayMs = Date.now() - this.liveStreamTimestamps.initialPlay.ms;
                    var mainVideoPlayhead = (timeSinceInitialPlayMs - this.timeMainVideoIdleMs) / 1000;
                    return mainVideoPlayhead;
                }, this);

                /**
                 * Determines if we should play an ad based on the first_shown and frequency attributes
                 * of the ad object backlot/page level settings provides us.
                 * @private
                 * @method OO.AdManagerController#_shouldPlayAd
                 * @param {number} playAfter The number of main content views prior to showing an ad
                 * @param {number} adFrequency How often we want to show an ad. (adFrequency - 1) main
                 * content views between ads
                 * @returns {boolean} True if we should play the ad, false otherwise
                 */
                var _shouldPlayAd = _.bind(function(playAfter, adFrequency) {
                    playAfter = playAfter > 0 ? playAfter : 0;
                    adFrequency = adFrequency > 0 ? adFrequency : 0;
                    //compare main video count against play after and ad frequency values
                    var count = OO.localStorage.getItem(VIDEO_COUNT_KEY);
                    count = count && +count > 0 ? +count : 0;
                    var shouldPlayAd = false;
                    if (count >= playAfter && (adFrequency === 0 || (count - playAfter) % adFrequency === 0)) {
                        shouldPlayAd = true;
                    }
                    return shouldPlayAd;
                }, this);

                /**
                 * Increments a count of main content playbacks by this user.
                 * @private
                 * @method OO.AdManagerController#_incrementMainVideoCount
                 */
                var _incrementMainVideoCount = _.bind(function() {
                    //Add main video count to local storage so ad frequency
                    //can be upheld
                    var count = OO.localStorage.getItem(VIDEO_COUNT_KEY);
                    count = (count && +count > 0 ? +count : 0) + 1;
                    OO.setItem(VIDEO_COUNT_KEY, count);
                    OO.log("MAIN VIDEO COUNT: " + OO.localStorage.getItem(VIDEO_COUNT_KEY));
                }, this);

                ///////// CLEANUP ////////

                var _resetAdState = _.bind(function() {
                    if (lastOverlayAd) {
                        currentAd = lastOverlayAd;
                        overlay = true;
                        this.adStarted = true;
                    }
                    else {
                        currentAd = null;
                        overlay = false;
                        this.adStarted = false;
                    }
                    singleAdPlaying = false;
                    adPaused = false;
                    adManagerShowSkipButton = true;
                    adManagerSkipButtonOffset = null;
                    pendingPodEnd = false;
                }, this);

                var _resetMovieState = _.bind(function() {
                    adQueue                    = [];
                    lastAdIndex                = 0;
                    seeked                     = false;
                    seeking                    = false;
                    paused                     = false;
                    lastOverlayAd              = null;
                    this.ended                 = false;
                    seekToEndThreshold         = 0;
                    skipAdsOnSeek              = false;
                    seekedPosition             = 0;
                    this.waitForPostrollToPlay = true;
                    started                    = false;
                    startTriggered             = false;
                    movieMetadataRaised        = false;
                    backlotSettingsRaised      = false;
                }, this);

                // Reset all movie properties
                var _reset = _.bind(function(destroying) {
                    // Ad manager state
                    allready    = false;
                    initialized = false;

                    // Movie data properties
                    this.movieMetadata = null;
                    this.startTime     = -1;
                    this.movieDuration = -1;
                    this.isLiveStream  = false;

                    // Movie state properties
                    currentPlayhead = -1;
                    timeline        = [];
                    cancelling      = false;

                    _resetMovieState();
                    _resetAdState();
                    _resetPlaybackEventDependencies(destroying);
                }, this);

                var _destroy = _.bind(function() {
                    if (this.ui && (typeof this.ui.destroy === "function")) {
                        this.ui.destroy();
                    }

                    for (var id in adTimeouts) {
                        if (adTimeouts.hasOwnProperty(id)) {
                            clearAdTimeout(id);
                        }
                    }

                    // stop any ads that are playing
                    if (this.currentState == 'LinearAd' || this.currentState == 'Overlay') {
                        _cancelCurrentAd({
                            code: this.AD_CANCEL_CODE.STREAM_ENDED
                        });
                    }

                    for (var key in this.adManagers) {
                        this.unregisterAdManager(key);
                    }

                    this.fsm.destroyFsm();
                    _reset(true);
                }, this);

                /**
                 * Called when the player is being destroyed.  Destroys the ad manager controller, including the state
                 * machine and all registered ad managers.
                 * @protected
                 * @method OO.AdManagerController#onDestroy
                 */
                this.onDestroy = function() {
                    _destroy();
                };

                /**
                 * Returns a list of all registered ad managers. This is used in testing.
                 * @method OO.AdManagerController#getRegisteredAdManagers
                 * @public
                 * @returns {Object[]} A list of all registered ad managers
                 */
                this.getRegisteredAdManagers = function() {
                    return this.adManagers;
                };

                /**
                 * Unregisters an ad manager.
                 * @public
                 * @method OO.AdManagerController#unregisterAdManager
                 * @param {string} name The name of the ad manager to unregister, traditionally represented by
                 *                      adManager.name
                 */
                this.unregisterAdManager = function(name) {
                    OO.log("AMC: Removing an ad manager: " + name);
                    if (name && this.adManagers[name]) {
                        if (_.isFunction(this.adManagers[name].destroy)) {
                            try {
                                this.adManagers[name].destroy();
                            } catch (err) {
                                OO.log("AMC: Error destroying an ad manager - " + err);
                            }
                        }

                        this.unregisteredAdManagers.push(name);
                        delete this.adManagers[name];
                    }
                };
            };

            // Helpers
            // Safely trigger an ad manager function
            var _safeFunctionCall = function(adManager, func, params) {
                try {
                    if (_.isFunction(adManager[func])) {
                        return adManager[func].apply(adManager, params);
                    }
                } catch (err) {
                    OO.log("AMC: ad manager",
                        (adManager && adManager.name),
                        "at function '" + func + "' threw exception -",
                        err);
                }
                return null;
            };

            /**
             * The ad manager controller object.
             * @private
             */
            var controller = null;

            OO.registerModule('adManagerController', _.bind(function(messageBus, id) {
                return controller = new OO.AdManagerController(messageBus, id);
            }, this));
        }(OO, OO._, OO.$));

        /**
         * Ad Manager For Ooyala video as Ads
         */

        OO.Ads.manager(function(_, $) {
            /**
             * @class OoyalaAdManager
             * @classDesc The Ooyala Ads Manager class, registered as an ads manager with the ad manager controller.
             * Controls how Ooyala ads are loaded and played as ads while communicating with the ad manager framework.
             * @public
             * @property {string} name Name of the OoyalaAdManager, must match what is sent from Backlot and used at the page level.
             * @property {boolean} ready ready Used to communicate with the ad manger controller if the manager is ready to go.
             * @property {object} movieMetadata Store metadata for the main video
             * @property {object} streams Store streams info of the ad.
             */
            var OoyalaAdManager = function() {
                this.name = "ooyala-ads-manager";
                this.adId = null;
                this.ready = false;
                this.movieMetadata = {};
                this.streams = {};
                var _amc  = null;
                var _adEmbedCode = "";
                var _movieEmbedCode = "";
                var _getMainVideoEmbedCode = true;
                var _adProperties = {};
                var _clickedOnAdBefore = false;

                var metadataLoaded = false;
                var fetchedAuthorization = false;
                var fetchedAdAuthorization = false;
                var afterOoyalaAd = false;

                var startTime = 0;

                var _reset = _.bind(function() {
                    OO.log(this.name + ": resetting");
                    this.adId = null;
                    this.ready = false;
                    this.movieMetadata = {};
                    this.streams = {};

                    _adEmbedCode = "";
                    _movieEmbedCode = "";
                    _getMainVideoEmbedCode = true;
                    _adProperties = {};
                    _clickedOnAdBefore = false;

                    metadataLoaded = false;
                    fetchedAuthorization = false;
                    fetchedAdAuthorization = false;
                    afterOoyalaAd = false;
                }, this);

                /**
                 * Called by the Ad Manager Controller. Use this function to initialize, create listeners, and load
                 * remote JS files.
                 * @method OoyalaAdManager#initialize
                 * @public
                 * @param {object} adManagerController A reference to the Ad Manager Controller
                 * @param {string} playerId The unique player identifier of the player initializing the class
                 */
                this.initialize = function(adManagerController, playerId) {
                    _reset();
                    startTime = new Date().getTime();
                    _amc = adManagerController;
                };

                /**
                 * Called by Ad Manager Controller. When this function is called, all movie and server metadata are
                 * ready to be parsed.
                 * This metadata may contain the adTagUrl and other ad manager and movie specific configuration.
                 * @method AdManager#loadMetadata
                 * @public
                 * @param {object} adManagerMetadata Ad manager-specific metadata
                 * @param {object} backlotBaseMetadata Base metadata from Ooyala Backlot
                 * @param {object} movieMetadata Metadata for the main video
                 */
                this.loadMetadata = function(adManagerMetadata, backlotBaseMetadata, movieMetadata) {
                    OO.log(this.name + ": Load Metadata at " + (new Date().getTime() - startTime) + " ms");
                    if (!_amc) {
                        return;
                    }
                    _amc.addPlayerListener(_amc.EVENTS.CONTENT_CHANGED, _onContentChanged);

                    this.movieMetadata = movieMetadata;
                    if (_getMainVideoEmbedCode && movieMetadata) {
                        this.ready = false;
                        _movieEmbedCode = movieMetadata.embed_code;
                        _getMainVideoEmbedCode = false;
                    }

                    metadataLoaded = true;
                    _tryFetchAdAuthorization();
                };

                /**
                 * Called by Ad Manager Controller.  When this function is called, the content authorization will have been fetched.
                 * At this point, we can safely fetch our ad authorization.
                 * @method OoyalaAdManager#authorizationFetched
                 * @public
                 */
                this.authorizationFetched = function() {
                    OO.log(this.name + ": Authorization Fetched at " + (new Date().getTime() - startTime) + " ms");
                    fetchedAuthorization = true;
                    _tryFetchAdAuthorization();
                };

                /**
                 * Try to fetch our ad authorization. We will wait until both the metdata has been loaded and that the content
                 * authorization has been fetched.
                 * @method OoyalaAdManager#_tryFetchAdAuthorization
                 * @private
                 */
                var _tryFetchAdAuthorization = _.bind(function() {
                    OO.log(this.name + ": Try Fetch Ad Authorization at " + (new Date().getTime() - startTime) + " ms");
                    // If we have not loaded all initial metadata, return as we are not ready to try to fetch ad authorization
                    if (!metadataLoaded || !fetchedAuthorization || !_amc || fetchedAdAuthorization) {
                        return;
                    }

                    // If we have loaded all initial metadata and there are no Ooyala ads, set to ready and return as this ad
                    // manager has nothing else to do
                    if (!this.movieMetadata || !this.movieMetadata.ads || this.movieMetadata.ads.length <= 0 ||
                        !this.movieMetadata.ads[0] || !this.movieMetadata.ads[0].ad_embed_code) {
                        OO.log(this.name + ": No Ooyala Ads at " + (new Date().getTime() - startTime) + " ms");
                        fetchedAdAuthorization = true;
                        _setReady();
                        _reset();
                        return;
                    }

                    OO.log(this.name + ": Fetching Ad Authorization at " + (new Date().getTime() - startTime) + " ms");

                    fetchedAdAuthorization = true;

                    _adEmbedCode = this.movieMetadata.ads[0].ad_embed_code;
                    var adsRequest = {
                        pcode: this.movieMetadata.asset_pcode || "unknown",
                        embedCode: _adEmbedCode,
                        server: OO.SERVER.AUTH,

                        params: OO.playerParams
                    };
                    _amc.notify(_amc.EVENTS.WILL_FETCH_AD_AUTHORIZATION,adsRequest);
                }, this);

                /**
                 * Called by Ad Manager Controller.  When this function is called, all the information about the Ooyala
                 * ads will be received and will notify the controller that the Ad Manager is ready.
                 * @method OoyalaAdManager#ooyalaAdData
                 * @public
                 * @param {object} adData Ad-specific metadata
                 */
                this.ooyalaAdData = function(adData) {
                    OO.log(this.name + ": Ooyala Ad Data at " + (new Date().getTime() - startTime) + " ms");
                    if (!adData) {
                        return;
                    }
                    this.streams[OO.VIDEO.ENCODING.MP4] = adData;
                    _setReady();
                };

                /**
                 * Sets this ad manager as ready. Notifies the Ad Manager Controller of this event, unblocking playback.
                 * @method OoyalaAdManager#_setReady
                 * @private
                 */
                var _setReady = _.bind(function() {
                    OO.log(this.name + ": Set ready at " + (new Date().getTime() - startTime) + " ms");
                    this.ready = true;
                    _amc.onAdManagerReady();
                }, this);

                /**
                 * Called once per video by Ad Manager Controller once the ad manager has set its ready flag to true.
                 * This function asks the ad manager to return a list of all ads to the controller for addition in the
                 * line. If the list of ads is not available at this time, return [] or null and call
                 * [AdManagerController].appendToTimeline() when the ads become available.
                 * The duration and position of each ad should be specified in seconds.
                 * @method OoyalaAdManager#buildTimeline
                 * @public
                 * @returns {OO.AdManagerController#Ad[]} timeline A list of the ads to play for the current video
                 */
                this.buildTimeline = function() {
                    OO.log(this.name + ": Build Timeline at " + (new Date().getTime() - startTime) + " ms");
                    if (!this.movieMetadata || !this.movieMetadata.ads || this.movieMetadata.ads.length <= 0 ||
                        !this.movieMetadata.ads[0]) {
                        return;
                    }
                    var adsTimeline = [];
                    var adData = {
                        "position": this.movieMetadata.ads[0].time,
                        "adManager": this.name,
                        "ad": this.movieMetadata.ads[0],
                        "streams": this.streams,
                        "adType": _amc.ADTYPE.UNKNOWN_AD_REQUEST
                    };
                    var adToInsert = new _amc.Ad(adData);
                    adsTimeline.push(adToInsert);
                    return adsTimeline;
                };

                /**
                 * Called by Ad Manager Controller. The ad manager should play the ad or group of podded ads passed to
                 * the function as a parameter.
                 * @method OoyalaAdManager#playAd
                 * @public
                 * @param {object} ad The ad object to play
                 *
                 * TODO: _adProperties.name and _adProperties.duration need data supplied from backlotBaseMetadata.
                 *
                 */
                this.playAd = function(ad) {
                    OO.log(this.name + ": Play Ad at " + (new Date().getTime() - startTime) + " ms");
                    _amc.pageSettings.autoPlay = true;
                    _amc.pageSettings.ooyalaAds = true;
                    _adProperties.indexInPod = 1;
                    if (this.movieMetadata) {
                        _adProperties.name = this.movieMetadata.title;
                        _adProperties.duration = this.movieMetadata.duration;
                    } else {
                        _adProperties.name = "";
                        _adProperties.duration = 30;
                    }
                    _adProperties.ooyalaAds = true;
                    _adProperties.hasClickUrl = ad.ad.click_url;
                    _adProperties.skippable = false;
                    this.adId = ad.id;
                    var tempPageSettings = _.clone(_amc.pageSettings);
                    tempPageSettings.onCreate = null;
                    _amc.notify(_amc.EVENTS.SET_EMBED_CODE, _adEmbedCode, tempPageSettings);
                    _amc.notifyLinearAdStarted(ad.id, _adProperties);
                };

                /**
                 * Called by Ad Manager Controller. The ad manager should cancel the ad passed to the function as a
                 * parameter. After cancelling the ad, the ad manager should call the adEndedCallback to indicate that
                 * ad cancellation has completed. If the given ad is not currently playing and the adEndedCallback has
                 * already been called, then no action is required.
                 * @method OoyalaAdManager#cancelAd
                 * @public
                 * @param {object} ad The ad object to cancel
                 * @param {object} params An object containing information about the cancellation. It will include the
                 *                        following fields:
                 *                 code : The _amc.AD_CANCEL_CODE for the cancellation
                 */
                this.cancelAd = function(ad, params) {
                    OO.log("Cancelling Ooyala ad");
                    if (params && params.code === _amc.AD_CANCEL_CODE.SKIPPED) {
                        _amc.pageSettings.ooyalaAds = false;
                        _amc.notify(OO.EVENTS.SINGLE_AD_PLAYED, this.adId);
                        _amc.notify(OO.EVENTS.AD_POD_ENDED, this.adId);
                        var movieEmbedCode = _movieEmbedCode;
                        _reset();
                        afterOoyalaAd = true;
                        _amc.notify(OO.EVENTS.SET_EMBED_CODE_AFTER_OOYALA_AD, movieEmbedCode, _amc.pageSettings);
                    }
                };

                /**
                 * Called when player clicks on the tap frame, if tap frame is disabled, then this function will not be
                 * called
                 * @method OoyalaAdManager#playerClicked
                 * @public
                 */
                this.playerClicked = function() {
                    OO.log("Click Url = " + _adProperties.hasClickUrl);
                    if (_clickedOnAdBefore) {
                        _amc.notify(OO.EVENTS.PLAY);
                        _clickedOnAdBefore = false;
                    } else {
                        _amc.notify(OO.EVENTS.PAUSE);

                        if (this.openUrl(_adProperties.hasClickUrl)) {
                            _amc.adsClickthroughOpened();
                        }
                        _clickedOnAdBefore = true;
                    }
                };

                /**
                 * Checks whether URL is valid or not.
                 * @private
                 * @method OoyalaAdManager#isClickThroughURLValid
                 * @param {string} url The url that needs to be validated
                 * @returns {boolean} true, if the URL is valid. Returns false, if url is invalid.
                 */
                var isClickThroughURLValid = _.bind(function(url) {
                    if (typeof url === 'string' && url.length > 0) {
                        return true;
                    }
                    return false;
                }, this);

                /**
                 * Opens a new page pointing to the URL provided.
                 * @public
                 * @method OoyalaAdManager#openUrl
                 * @param {string} url The url that we need to open in a new page
                 * @returns {boolean} true, if the URL is valid. Returns false, if url is invalid.
                 */
                this.openUrl = function(url) {
                    if (isClickThroughURLValid(url)) {
                        window.open(url);
                        return true;
                    }
                    return false;
                };

                /**
                 * Called when ad is finished playing.
                 * @method OoyalaAdManager#adVideoEnded
                 * @public
                 */
                this.adVideoEnded = function() {
                    OO.log(this.name + ": adVideoEnded at " + (new Date().getTime() - startTime) + " ms");
                    _amc.pageSettings.ooyalaAds = false;
                    _amc.notify(OO.EVENTS.SINGLE_AD_PLAYED, this.adId);
                    _amc.notify(OO.EVENTS.AD_POD_ENDED, this.adId);

                    var movieEmbedCode = _movieEmbedCode;
                    _reset();
                    afterOoyalaAd = true;
                    _amc.notify(OO.EVENTS.SET_EMBED_CODE_AFTER_OOYALA_AD, movieEmbedCode, _amc.pageSettings);
                };

                var _onContentChanged = _.bind(function() {
                    OO.log(this.name + ": onContentChanged at " + (new Date().getTime() - startTime) + " ms");
                    startTime = new Date().getTime();
                    //We need to set to ready so the AMC can proceed when attempting to play the Ooyala ad.
                    //We reset this value to false in this.loadMetadata
                    this.ready = true;
                    if (afterOoyalaAd) {
                        _reset();
                    }
                }, this);

                /**
                 * Remove player listeners.
                 * @public
                 * @method OoyalaAdManager#destroy
                 */
                this.destroy = function() {
                    OO.log(this.name + ": Destroy at " + (new Date().getTime() - startTime) + " ms");
                    if (_amc) {
                        _amc.removePlayerListener(_amc.EVENTS.CONTENT_CHANGED, _onContentChanged);
                    }
                    _clickedOnAdBefore = false;
                };
            };
            return new OoyalaAdManager();
        });

        (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
            if (!OO)
            {
                OO = {};
            }

        },{}],2:[function(require,module,exports){
            require("./InitOO.js");

            if (!window._)
            {
                window._ = require('underscore');
            }

            if (!OO._)
            {
                OO._ = window._.noConflict();
            }

        },{"./InitOO.js":1,"underscore":6}],3:[function(require,module,exports){
            require("./InitAnalyticsNamespace.js");

            /**
             * If Analytics.EVENTS or Analytics.REQUIRED_PLUGIN_FUNCTIONS do not already
             * exist, create them.
             */

            /**
             * @public
             * @description These are the ad types Ooyala Player supports
             * @namespace OO.Analytics.AD_TYPE
             */
            if (!OO.Analytics.AD_TYPE)
            {
                var AD_TYPE =
                    {
                        LINEAR_OVERLAY: "linearOverlay",
                        NONLINEAR_OVERLAY: "nonlinearOverlay",
                        LINEAR_VIDEO: "linearVideo",
                        COMPANION: "companion"
                    };
                OO.Analytics.AD_TYPE = AD_TYPE;
            }

            /**
             * @public
             * @description These are the stream types Ooyala Player supports
             * @namespace OO.Analytics.STREAM_TYPE
             */
            if (!OO.Analytics.STREAM_TYPE)
            {
                var STREAM_TYPE =
                    {
                        VOD: "vod",
                        LIVE_STREAM: "liveStream"
                    };
                OO.Analytics.STREAM_TYPE = STREAM_TYPE;
            }

            /**
             * @public
             * @description [DEPRECATED]
             * These are the Ooyala Player error codes
             * @namespace OO.Analytics.ERROR_CODE
             */
            if (!OO.Analytics.ERROR_CODE)
            {
                var ERROR_CODE =
                    {
                        "100": "General Error"
                    };
                OO.Analytics.ERROR_CODE = ERROR_CODE;
            }

            /**
             * @public
             * @description These are the events associated with the Analytics Framework.
             * @namespace OO.Analytics.EVENTS
             */
            if (!OO.Analytics.EVENTS)
            {
                var EVENTS =
                    {
                        /**
                         * @public
                         * @event OO.Analytics.EVENTS#VIDEO_PLAYER_CREATED
                         * @description This message is sent when the player is first created.
                         * @param {Array} paramArray Array of length 1, containing the original parameters
                         * passed into the player
                         */
                        VIDEO_PLAYER_CREATED:           'video_player_created',

                        /**
                         * @public
                         * @event OO.Analytics.EVENTS#VIDEO_ELEMENT_CREATED
                         * @description This message is sent when the video element is first created.
                         */
                        VIDEO_ELEMENT_CREATED:           'video_element_created',

                        /**
                         * @public
                         * @event OO.Analytics.EVENTS#INITIAL_PLAYBACK_REQUESTED
                         * @description This message is sent the first time the user tries to play the video.
                         * In the case of autoplay, it will be sent immediately after the player is ready to play.
                         */
                        INITIAL_PLAYBACK_REQUESTED:     'initial_playback_requested',

                        /**
                         * @public
                         * @event OO.Analytics.EVENTS#VIDEO_CONTENT_COMPLETED
                         * @description This message is sent when main content playback has completed.
                         */
                        VIDEO_CONTENT_COMPLETED:        'video_content_completed',

                        /**
                         * @public
                         * @event OO.Analytics.EVENTS#PLAYBACK_COMPLETED
                         * @description This message is sent when video and ad playback has completed.
                         */
                        PLAYBACK_COMPLETED:             'playback_completed',

                        /**
                         * @public
                         * @event OO.Analytics.EVENTS#VIDEO_PLAY_REQUESTED
                         * @description This message is sent every time there is a request to try and
                         * initiate video playback (except the first time. See VIDEO_FIRST_PLAY_REQUESTED).
                         * This is only the request, not when video playback has actually started.
                         */
                        VIDEO_PLAY_REQUESTED:           'video_play_requested',

                        /**
                         * @public
                         * @event OO.Analytics.EVENTS#VIDEO_PAUSE_REQUESTED
                         * @description This message is sent every time there is a request to try and
                         * pause the video. This is only the request, not when video playback has actually
                         * paused.
                         */
                        VIDEO_PAUSE_REQUESTED:          'video_pause_requested',

                        /**
                         * @public
                         * @event OO.Analytics.EVENTS#VIDEO_PLAYING
                         * @description This message is sent when video playback has started or resumed.
                         */
                        VIDEO_PLAYING:                  'video_playing',

                        /**
                         * @event OO.Analytics.EVENTS#VIDEO_PAUSED
                         * @description This message is sent when video playback has paused.
                         */
                        VIDEO_PAUSED:                   'video_paused',

                        /**
                         * @public
                         * @event OO.Analytics.EVENTS#VIDEO_REPLAY_REQUESTED
                         * @description This message is sent after VIDEO_ENDED, when the player is
                         * requested to start video playback from the beginning of the video. This
                         * is only the request, not when the video actually start playing again.
                         */
                        VIDEO_REPLAY_REQUESTED:         'video_replay_requested',

                        /**
                         * @public
                         * @event OO.Analytics.EVENTS#VIDEO_SOURCE_CHANGED
                         * @description This message is sent when the player has received a new video source
                         * to load.  This will happen when the first video initially starts to load,
                         * when switching video sources during playback and also when switching to a
                         * new video after VIDEO_ENDED.  This will not be received on VIDEO_REPLAY_REQUESTED.
                         * @param {Array} paramArray Array of length 1, containing an instance of
                         * OO.Analytics.EVENT_DATA.VideoSourceData
                         */
                        VIDEO_SOURCE_CHANGED:           'video_source_changed',

                        /**
                         * @event OO.Analytics.EVENTS#VIDEO_STREAM_METADATA_UPDATED
                         * @description This message is sent when video stream metadata has been
                         * downloaded.  In contains information about the stream and metadata
                         * for any plugins that should be loaded.
                         * @param {Array} paramArray Array of length 1, contains an object holding all
                         * the metadata for each plugin that should be loaded
                         */
                        VIDEO_STREAM_METADATA_UPDATED:  'video_stream_metadata_updated',

                        /**
                         * @public
                         * @event OO.Analytics.EVENTS#VIDEO_CONTENT_METADATA_UPDATED
                         * @description This message is sent when the video content data has been
                         * downloaded. This will contain information about the video content. For
                         * example, title and description.
                         * @param {Array} paramArray Array of length 1, contains an instance of
                         * OO.Analytics.EVENT_DATA.VideoContentMetadata
                         */
                        VIDEO_CONTENT_METADATA_UPDATED: 'video_content_metadata_updated',

                        /**
                         * @public
                         * @event OO.Analytics.EVENTS#STREAM_TYPE_UPDATED
                         * @description This message is sent when the content stream type has been
                         * determined by the player.
                         * @param {Array} paramArray Array of length 1, contains an instance of
                         * OO.Analytics.EVENT_DATA.StreamTypeMetadata
                         */
                        STREAM_TYPE_UPDATED: 'stream_type_updated',

                        /**
                         * @public
                         * @event OO.Analytics.EVENTS#VIDEO_SEEK_REQUESTED
                         * @description This message is sent when a video seek is requested.
                         * @param {Array} paramArray Array of length 1, contains an instance of
                         * OO.Analytics.EVENT_DATA.VideoSeekRequestedData
                         */
                        VIDEO_SEEK_REQUESTED:             'video_seek_requested',

                        /**
                         * @public
                         * @event OO.Analytics.EVENTS#VIDEO_SEEK_COMPLETED
                         * @description This message is sent when a video seek has completed.
                         * @param {Array} paramArray Array of length 1, contains an instance of
                         * OO.Analytics.EVENT_DATA.VideoSeekCompletedData
                         */
                        VIDEO_SEEK_COMPLETED:               'video_seek_completed',

                        /**
                         * @public
                         * @event OO.Analytics.EVENTS#VIDEO_STREAM_DOWNLOADING
                         * @description This message is sent when a video stream is downloading data.
                         * If the stream has to stop because of a buffer underrun, that is considered
                         * a buffering event.
                         * @param {Array} paramArray Array of length 1, contains an instance of
                         * OO.Analytics.EVENT_DATA.VideoDownloadingMetadata
                         */
                        VIDEO_STREAM_DOWNLOADING:       'video_stream_downloading',

                        /**
                         * @public
                         * @event OO.Analytics.EVENTS#VIDEO_BUFFERING_STARTED
                         * @description This message is sent when a video stream has to pause playback
                         * to load more data. It is also sent when the stream is buffering before
                         * initial playback is started.
                         * @param {Array} paramArray Array of length 1, contains an instance of
                         * OO.Analytics.EVENT_DATA.VideoBufferingStartedData
                         */
                        VIDEO_BUFFERING_STARTED:        'video_buffering_started',

                        /**
                         * @public
                         * @event OO.Analytics.EVENTS#VIDEO_BUFFERING_ENDED
                         * @description This message is sent when a video stream has buffered and
                         * is ready to resume playback.
                         * @param {Array} paramArray Array of length 1, contains an instance of
                         * OO.Analytics.EVENT_DATA.VideoBufferingEndedData
                         */
                        VIDEO_BUFFERING_ENDED:          'video_buffering_ended',

                        /**
                         * @public
                         * @event OO.Analytics.EVENTS#VIDEO_STREAM_BITRATE_PROFILES
                         * @description This message is sent when all of the possible bitrate profiles for a stream are available.
                         * @param {Array} paramArray Array of length 1, contains an instance of
                         * OO.Analytics.EVENT_DATA.VideoBitrateProfileLookupData
                         */
                        VIDEO_STREAM_BITRATE_PROFILES: 'video_stream_bitrate_profiles',

                        /**
                         * @public
                         * @event OO.Analytics.EVENTS#VIDEO_STREAM_TARGET_BITRATE_REQUESTED
                         * @description Sent when the a specific bitrate profile is requested. Automatic
                         * bitrate selection is "auto".
                         * @param {Array} paramArray Array of length 1, contains an instance of
                         * OO.Analytics.EVENT_DATA.VideoTargetBitrateData
                         */
                        VIDEO_STREAM_TARGET_BITRATE_REQUESTED: 'video_stream_target_bitrate_requested',

                        /**
                         * @public
                         * @event OO.Analytics.EVENTS#VIDEO_STREAM_BITRATE_CHANGED
                         * @description This message is sent when the video stream's bitrate changes.
                         * @param {Array} paramArray Array of length 1, contains an instance of
                         * OO.Analytics.EVENT_DATA.VideoBitrateProfileData
                         */
                        VIDEO_STREAM_BITRATE_CHANGED: 'video_stream_bitrate_changed',

                        /**
                         * @public
                         * @event OO.Analytics.EVENTS#VIDEO_STREAM_POSITION_CHANGED
                         * @description This message is sent, periodically, when the video stream position changes.
                         * @param {Array} paramArray Array of length 1, contains an instance of
                         * OO.Analytics.EVENT_DATA.VideoStreamPositionChangedData
                         */
                        VIDEO_STREAM_POSITION_CHANGED:  'video_stream_position_changed',

                        /**
                         * @public
                         * @event OO.Analytics.EVENTS#VIDEO_ERROR
                         * @description [DEPRECATED]
                         * (NOTE: replaced by OO.Analytics.EVENTS.ERROR#VIDEO_PLAYBACK)
                         * This message is sent when a video error occurs.
                         * @param {Array} paramArray Array of length 1, contains an instance of
                         * OO.Analytics.EVENT_DATA.VideoErrorData
                         */
                        VIDEO_ERROR:                    'video_error',

                        /**
                         * @public
                         * @event OO.Analytics.EVENTS#AD_BREAK_STARTED
                         * @description This message is sent when the player stops the main content
                         * to start playing linear ads.
                         */
                        AD_BREAK_STARTED:               'ad_break_started',

                        /**
                         * @public
                         * @event OO.Analytics.EVENTS#AD_BREAK_ENDED
                         * @description This message is sent when the player has finished playing ads
                         * and is ready to playback the main video.
                         */
                        AD_BREAK_ENDED:                 'ad_break_ended',

                        /**
                         * @event OO.Analytics.EVENTS#AD_POD_STARTED
                         * @description This message is sent when an ad pod starts.
                         * @param {Array} paramArray Array of length 1, contains an instance of
                         * OO.Analytics.EVENT_DATA.AdPodStartedData
                         */
                        AD_POD_STARTED:                 'ad_pod_started',

                        /**
                         * @public
                         * @event OO.Analytics.EVENTS#AD_POD_ENDED
                         * @description This message is sent when an ad pod ends.
                         * @param {Array} paramArray Array of length 1, contains an instance of
                         * OO.Analytics.EVENT_DATA.AdPodEndedData
                         */
                        AD_POD_ENDED:                   'ad_pod_ended',

                        /**
                         * @public
                         * @event OO.Analytics.EVENTS#AD_STARTED
                         * @description This message is sent when the player starts an ad playback.
                         * @param {Array} paramArray Array of length 1, contains an instance of
                         * OO.Analytics.EVENT_DATA.AdStartedData
                         */
                        AD_STARTED:                     'ad_started',

                        /**
                         * @public
                         * @event OO.Analytics.EVENTS#AD_ENDED
                         * @description This message is sent when the player ends an ad playback.
                         * @param {Array} paramArray Array of length 1, contains an instance of
                         * OO.Analytics.EVENT_DATA.AdEndedData
                         */
                        AD_ENDED:                       'ad_ended',

                        /**
                         * @public
                         * @event OO.Analytics.EVENTS#AD_SKIPPED
                         * @description This message is sent when an ad is skipped.
                         */
                        AD_SKIPPED:                     'ad_skipped',

                        /**
                         * @public
                         * @event OO.Analytics.EVENTS#AD_ERROR
                         * @description This message is sent when there is an error during ad playback.
                         * @param {Array} paramArray Array of length 1, contains an instance of
                         * OO.Analytics.EVENT_DATA.AdErrorData
                         */
                        AD_ERROR:                       'ad_error',

                        /**
                         * @public
                         * @event OO.Analytics.EVENTS#AD_IMPRESSION
                         * @description This message is sent when the ad video element first plays.
                         */
                        AD_IMPRESSION:                  'ad_impression',

                        /**
                         * @public
                         * @event OO.Analytics.EVENTS#AD_CLICKTHROUGH_OPENED
                         * @description This message is sent when an ad clickthrough event has occurred.
                         */
                        AD_CLICKTHROUGH_OPENED:         'ad_clickthrough_opened',

                        /**
                         * @public
                         * @event OO.Analytics.EVENTS#FULLSCREEN_CHANGED
                         * @description This message is sent when the player enters and exits fullscreen.
                         * @param {Array} paramArray Array of length 1, contains an instance of
                         * OO.Analytics.EVENT_DATA.FullscreenChangedData
                         */
                        FULLSCREEN_CHANGED:             'fullscreen_changed',

                        /**
                         * @public
                         * @event OO.Analytics.EVENTS#VOLUME_CHANGED
                         * @description This message is sent when the player volume has changed.
                         * @param {Array} paramArray Array of length 1, contains an instance of
                         * OO.Analytics.EVENT_DATA.VolumeChangedData
                         */
                        VOLUME_CHANGED:                 'volume_changed',

                        /**
                         * @public
                         * @event OO.Analytics.EVENTS#DESTROY
                         * @description This message is sent when the player and its plugins are destroying.
                         */
                        DESTROY:                        'destroy',

                        /**
                         * @public
                         * @event OO.Analytics.EVENTS.ERROR
                         * @description This property contains different the categories of Ooyala Player Errors.
                         */
                        ERROR:
                            {
                                /**
                                 * @public
                                 * @event OO.Analytics.EVENTS.ERROR#GENERAL
                                 * @description This message is sent when a general error occurs.
                                 * @param {Array} paramArray Array of length 1, contains an instance of
                                 * OO.Analytics.EVENT_DATA.GeneralErrorData
                                 */
                                GENERAL:                      'general_error',

                                /**
                                 * @public
                                 * @event OO.Analytics.EVENTS.ERROR#METADATA_LOADING
                                 * @description This message is sent when a metadata loading error occurs
                                 * (invalid metadata, invalid content, or a network error when loading metadata).
                                 * @param {Array} paramArray Array of length 1, contains an instance of
                                 * OO.Analytics.EVENT_DATA.MetadataLoadingError
                                 */
                                METADATA_LOADING:             'metadata_loading_error',

                                /**
                                 * @public
                                 * @event OO.Analytics.EVENTS.ERROR#VIDEO_PLAYBACK
                                 * @description This message is sent when a video playback error occurs.
                                 * @param {Array} paramArray Array of length 1, contains an instance of
                                 * OO.Analytics.EVENT_DATA.VideoPlaybackErrorData
                                 */
                                VIDEO_PLAYBACK:               'video_playback_error',

                                /**
                                 * @public
                                 * @event OO.Analytics.EVENTS.ERROR#AUTHORIZATION
                                 * @description This message is sent when a stream authorization server (SAS) error occurs.
                                 * @param {Array} paramArray Array of length 1, contains an instance of
                                 * OO.Analytics.EVENT_DATA.AuthorizationErrorData
                                 */
                                AUTHORIZATION:                'authorization_error'
                            }
                    };
                OO.Analytics.EVENTS = EVENTS;
            }

            if (!OO.Analytics.EVENT_DATA)
            {
                var EVENT_DATA = {};

                /**
                 * @public
                 * @class Analytics.EVENT_DATA#VideoElementData
                 * @classdesc Contains the data passed along with VIDEO_ELEMENT_CREATED. This includes
                 * the stream url of the video element.
                 * @property {string} streamUrl This is the video element's stream URL
                 */
                EVENT_DATA.VideoElementData = function(streamUrl)
                {
                    var checkElementData = OO._.bind(checkDataType, this, "VideoElementData");
                    this.streamUrl = checkElementData(streamUrl, "streamUrl", ["string"]);
                };

                /**
                 * @public
                 * @class Analytics.EVENT_DATA#VideoSourceData
                 * @classdesc Contains the data passed along with VIDEO_SOURCE_CHANGED. This
                 * includes the embed code (video id) and any metadata this video stream needs
                 * pass along to other plugins (for example, it could contain ad tag data or analytics
                 * account information).
                 * @property  {string} embedCode This is the video stream's unique id
                 * @property  {object} metadata   An object containing metadata about the video stream and player id to be used
                 */
                EVENT_DATA.VideoSourceData = function(embedCode, metadata)
                {
                    var checkSourceData = OO._.bind(checkDataType, this, "VideoSourceData");
                    this.embedCode = checkSourceData(embedCode, "embedCode", ["string"]);
                    this.metadata  = checkSourceData(metadata, "metadata", ["object"]);
                };

                /**
                 * @public
                 * @class Analytics.EVENT_DATA#VideoContentMetadata
                 * @classdesc Contains information about the content of the video stream,
                 * such as title and description.
                 * @property  {string} title Title of the video
                 * @property  {string} description Video description
                 * @property  {number} duration Duration of the video in milliseconds
                 * @property  {object} closedCaptions Object containing information about the closed captions available
                 * @property  {string} contentType A string indicating the type of content in the stream (ex. "video").
                 * @property  {string} hostedAtURL The url the video is being hosted from
                 */
                EVENT_DATA.VideoContentMetadata = function(title, description, duration, closedCaptions, contentType, hostedAtURL)
                {
                    var checkContentData = OO._.bind(checkDataType, this, "VideoContentMetadata");
                    this.title          = checkContentData(title, "title", ["string"]);
                    this.description    = checkContentData(description, "description", ["string"]);
                    this.duration       = checkContentData(duration, "duration", ["number"]);
                    this.closedCaptions = checkContentData(closedCaptions, "closedCaptions", ["object"]);
                    this.contentType    = checkContentData(contentType, "contentType", ["string"]);
                    this.hostedAtURL    = checkContentData(hostedAtURL, "hostedAtURL", ["string"]);
                };

                /**
                 * public
                 * @class Analytics.EVENT_DATA#StreamTypeMetadata
                 * @classdesc Contains information about the content stream type
                 * @property {string} streamType OO.Analytics.STREAM_TYPE of the stream.
                 */
                EVENT_DATA.StreamTypeMetadata = function(streamType)
                {
                    var checkStreamTypeData = OO._.bind(checkDataType, this, "StreamTypeMetadata");
                    this.streamType         = checkStreamTypeData(streamType, "streamType", ["string"]);
                };

                /**
                 * @public
                 * @class Analytics.EVENT_DATA#VideoDownloadingMetadata
                 * @classdesc Contains information about the stream that is being downloaded.
                 * @property {number} currentTime The current time of the player
                 * @property {number} totalStreamDuration The duration of the video stream
                 * @property {number} streamBufferedUntilTime The stream is buffered until this timestamp
                 * @property {number} seekableRangeStart The earliest time the user can seek to
                 * @property {number} seekableRangeEnd The latest time the user can seek to
                 */
                EVENT_DATA.VideoDownloadingMetadata = function(currentTime, totalStreamDuration, streamBufferedUntilTime, seekableRangeStart, seekableRangeEnd)
                {
                    var checkDownloadData = OO._.bind(checkDataType, this, "VideoDownloadingMetadata");
                    this.currentTime             = checkDownloadData(currentTime, "currentTime", ["number"]);
                    this.totalStreamDuration     = checkDownloadData(totalStreamDuration, "totalStreamDuration", ["number"]);
                    this.streamBufferedUntilTime = checkDownloadData(streamBufferedUntilTime, "streamBufferedUntilTime", ["number"]);
                    this.seekableRangeStart      = checkDownloadData(seekableRangeStart, "seekableRangeStart", ["number"]);
                    this.seekableRangeEnd        = checkDownloadData(seekableRangeEnd, "seekableRangeEnd", ["number"]);
                };

                /**
                 * @public
                 * @class Analytics.EVENT_DATA#VideoBufferingStartedData
                 * @classdesc Contains information about the stream that has started buffering.
                 * @property {string} streamUrl The url of the stream that is buffering
                 */
                EVENT_DATA.VideoBufferingStartedData = function(streamUrl)
                {
                    var checkBufferingStartedData = OO._.bind(checkDataType, this, "VideoBufferingStartedData");
                    this.streamUrl = checkBufferingStartedData(streamUrl, "streamUrl", ["string"]);
                };

                /**
                 * @public
                 * @class Analytics.EVENT_DATA#VideoBufferingEndedData
                 * @classdesc Contains information about the stream that finished buffering.
                 * @property {string} streamUrl The url of the stream that finished buffering
                 */
                EVENT_DATA.VideoBufferingEndedData = function(streamUrl)
                {
                    var checkBufferingEndedData = OO._.bind(checkDataType, this, "VideoBufferingEndedData");
                    this.streamUrl = checkBufferingEndedData(streamUrl, "streamUrl", ["string"]);
                };

                /**
                 * @public
                 * @class Analytics.EVENT_DATA#VideoBitrateProfileLookupData
                 * @classdesc Contains a lookup table for all the possible bitrates available. The
                 * keys are the profile ids for each profile.
                 * @property {object} profiles A lookup table containing instances of VideoBitrateProfileData. The key is the 'id' of each VideoBitrateProfileData.
                 *
                 * @constructor
                 * @param {object} bitrateProfileArray An array of objects containing profile data
                 * (bitrate, width, height, and id)
                 */
                EVENT_DATA.VideoBitrateProfileLookupData = function(bitrateProfileArray)
                {
                    var checkBitrateProfileList = OO._.bind(checkDataType, this, "VideoBitrateProfileLookupData");
                    var list = checkBitrateProfileList(bitrateProfileArray, "bitrateProfileArray", ["array"]) || [];
                    this.profiles = {};
                    for (var i = 0; i < list.length; i++)
                    {
                        var entry = list[i];
                        if (entry && entry.id)
                        {
                            this.profiles[entry.id] = entry;
                        }
                    }
                }

                /**
                 * @public
                 * @class Analytics.EVENT_DATA#VideoBitrateProfileData
                 * @classdesc Contains information about a bitrate profile.
                 * @property {string} id The id of this profile
                 * @property {number} bitrate The bitrate of this profile
                 * @property {number} width The width of this profile
                 * @property {number} height The height of this profile
                 */
                EVENT_DATA.VideoBitrateProfileData = function(bitrateProfile)
                {
                    var checkBitrateProfile = OO._.bind(checkDataType, this, "VideoBitrateProfileData");
                    this.bitrate = checkBitrateProfile(bitrateProfile.bitrate, "bitrate", ["number","string"]);
                    this.height = checkBitrateProfile(bitrateProfile.height, "height", ["number"]);
                    this.width = checkBitrateProfile(bitrateProfile.width, "width", ["number"]);
                    this.id = checkBitrateProfile(bitrateProfile.id, "id", ["string"]);
                }

                /**
                 * @public
                 * @class Analytics.EVENT_DATA#VideoTargetBitrateData
                 * @classdesc Contains information what bitrate profile is being requested.
                 * @property {string} targetProfile The id of the bitrate profile being requested.
                 */
                EVENT_DATA.VideoTargetBitrateData = function(targetProfile)
                {
                    var checkTargetBitrate = OO._.bind(checkDataType, this, "VideoTargetBitrateData");
                    this.targetProfile = checkTargetBitrate(targetProfile, "targetProfile", ["string"]);
                }

                /**
                 * @public
                 * @class Analytics.EVENT_DATA#VideoSeekRequestedData
                 * @classdesc Contains information about seeking to a particular time in the stream.
                 * @property {number} seekingToTime The time requested to be seeked to
                 */
                EVENT_DATA.VideoSeekRequestedData = function(seekingToTime)
                {
                    var checkSeekStartedData = OO._.bind(checkDataType, this, "VideoSeekRequestedData");
                    this.seekingToTime = checkSeekStartedData(seekingToTime, "seekingToTime", ["number"]);
                };

                /**
                 * @public
                 * @class Analytics.EVENT_DATA#VideoSeekCompletedData
                 * @classdesc Contains information about the result of seeking to a particular
                 * time in the stream.
                 * @property {number} timeSeekedTo The time that was actually seeked to
                 */
                EVENT_DATA.VideoSeekCompletedData = function(timeSeekedTo)
                {
                    var checkSeekEndedData = OO._.bind(checkDataType, this, "VideoSeekCompletedData");
                    this.timeSeekedTo = checkSeekEndedData(timeSeekedTo, "timeSeekedTo", ["number"]);
                };

                /**
                 * @public
                 * @class Analytics.EVENT_DATA#VideoStreamPositionChangedData
                 * @classdesc Contains information about the current stream position and the length of the stream.
                 * @property {number} streamPosition The current stream position
                 * @property {number} totalStreamDuration The total length/duration of the stream
                 * @property {string} videoId Id used to differentiate between various streams (such as ad vs content playback).
                 *                            Possible values are defined in OO.VIDEO.
                 */
                EVENT_DATA.VideoStreamPositionChangedData = function(streamPosition, totalStreamDuration, videoId)
                {
                    var checkVideoStreamPositionChangedData = OO._.bind(checkDataType, this, "VideoStreamPositionChangedData");
                    this.streamPosition = checkVideoStreamPositionChangedData(streamPosition, "streamPosition", ["number"]);
                    this.totalStreamDuration = checkVideoStreamPositionChangedData(totalStreamDuration, "totalStreamDuration", ["number"]);
                    this.videoId = checkVideoStreamPositionChangedData(videoId, "videoId", ["string"]);
                };

                /**
                 * @public
                 * @class Analytics.EVENT_DATA#VideoErrorData
                 * @classdesc [DEPRECATED]
                 * (NOTE: replaced by Analytics.EVENT_DATA.VideoPlaybackErrorData)
                 * Contains information about the error code and message of the video error.
                 * @property {string} errorCode The error code
                 * @property {string} errorMessage The error message
                 *
                 * @constructor
                 * @param {string} errorCode The error code
                 */
                EVENT_DATA.VideoErrorData = function(errorCode)
                {
                    var checkVideoErrorData = OO._.bind(checkDataType, this, "VideoErrorData");
                    this.errorCode = checkVideoErrorData(errorCode, "errorCode", ["string"]);
                    this.errorMessage = translateErrorCode(errorCode);
                };

                /**
                 * @public
                 * @class Analytics.EVENT_DATA#GeneralErrorData
                 * @classdesc Contains information about the error code and message of a general error.
                 * @property {string} errorCode The error code
                 * @property {string} errorMessage The error message
                 */
                EVENT_DATA.GeneralErrorData = function(errorCode, errorMessage)
                {
                    var checkGeneralErrorData = OO._.bind(checkDataType, this, "GeneralErrorData");
                    this.errorCode = checkGeneralErrorData(errorCode, "errorCode", ["string"]);
                    this.errorMessage = checkGeneralErrorData(errorMessage, "errorMessage", ["string"]);
                };

                /**
                 * @public
                 * @class Analytics.EVENT_DATA#MetadataLoadingErrorData
                 * @classdesc Contains information about the error code and message of a metadata loading
                 * error.
                 * @property {string} errorCode The error code
                 * @property {string} errorMessage The error message
                 */
                EVENT_DATA.MetadataLoadingErrorData = function(errorCode, errorMessage)
                {
                    var checkMetadataLoadingErrorData = OO._.bind(checkDataType, this, "MetadataLoadingErrorData");
                    this.errorCode = checkMetadataLoadingErrorData(errorCode, "errorCode", ["string"]);
                    this.errorMessage = checkMetadataLoadingErrorData(errorMessage, "errorMessage", ["string"]);
                };

                /**
                 * @public
                 * @class Analytics.EVENT_DATA#VideoPlaybackErrorData
                 * @classdesc Contains information about the error code and message of the video error.
                 * @property {string} errorCode The error code
                 * @property {string} errorMessage The error message
                 */
                EVENT_DATA.VideoPlaybackErrorData = function(errorCode, errorMessage)
                {
                    var checkVideoPlaybackErrorData = OO._.bind(checkDataType, this, "VideoPlaybackErrorData");
                    this.errorCode = checkVideoPlaybackErrorData(errorCode, "errorCode", ["string"]);
                    this.errorMessage = checkVideoPlaybackErrorData(errorMessage, "errorMessage", ["string"]);
                };

                /**
                 * @public
                 * @class Analytics.EVENT_DATA#AuthorizationErrorData
                 * @classdesc Contains information about the error code and message of the authorization error.
                 * @property {string} errorCode The error code
                 * @property {string} errorMessage The error message
                 */
                EVENT_DATA.AuthorizationErrorData = function(errorCode, errorMessage)
                {
                    var checkAuthorizationErrorData = OO._.bind(checkDataType, this, "AuthorizationErrorData");
                    this.errorCode = checkAuthorizationErrorData(errorCode, "errorCode", ["string"]);
                    this.errorMessage = checkAuthorizationErrorData(errorMessage, "errorMessage", ["string"]);
                };

                /**
                 * @public
                 * @class Analytics.EVENT_DATA#AdPodStartedData
                 * @classdesc Contain information about how many ads are in the ad pod.
                 * @property {number} numberOfAds The number of ads in the pod
                 */
                EVENT_DATA.AdPodStartedData = function(numberOfAds)
                {
                    var checkAdPodStartedData = OO._.bind(checkDataType, this, "AdPodStartedData");
                    this.numberOfAds = checkAdPodStartedData(numberOfAds, "numberOfAds", ["number"]);
                };

                /**
                 * @public
                 * @class Analytics.EVENT_DATA#AdPodEndedData
                 * @classdesc Contain information about the adId of the ad pod.
                 * @property {string} adId The id of the ad pod
                 */
                EVENT_DATA.AdPodEndedData = function(adId)
                {
                    var checkAdPodEndedData = OO._.bind(checkDataType, this, "AdPodEndedData");
                    this.adId = checkAdPodEndedData(adId, "adId", ["string"]);
                };

                /**
                 * @public
                 * @class Analytics.EVENT_DATA#AdStartedData
                 * @classdesc Contains information about the type of ad that has started and its ad data.
                 * @property {string} adType The type of ad (linear video, linear overlay, nonlinear overlay)
                 * @property {object} adMetadata The metadata associated with the ad(i.e. EVENT_DATA.LinearVideoData or EVENT_DATA.NonLinearOverlayData)
                 */
                EVENT_DATA.AdStartedData = function(adType, adMetadataIn)
                {
                    var checkAdStartedData = OO._.bind(checkDataType, this, "AdStartedData");
                    this.adType = checkAdStartedData(adType, "adType", ["string"]);
                    this.adMetadata = selectAdType(adType, adMetadataIn);
                };

                /**
                 * @public
                 * @class Analytics.EVENT_DATA#LinearVideoData
                 * @classdesc Contains information about the linear video ad data.
                 * @property {string} adId The id of the ad
                 * @property {number} adDuration The duration of the ad video stream
                 * @property {number} adPodPosition The index of the current ad in its ad pod
                 */
                EVENT_DATA.LinearVideoData = function(adId, adDuration, adPodPosition)
                {
                    var checkLinearVideoData = OO._.bind(checkDataType, this, "LinearVideoData");
                    this.adId = checkLinearVideoData(adId, "adId", ["string"]);
                    this.adDuration = checkLinearVideoData(adDuration, "adDuration", ["number"]);
                    this.adPodPosition = checkLinearVideoData(adPodPosition, "adPodPosition", ["number"]);
                };

                /**
                 * @public
                 * @class Analytics.EVENT_DATA#NonLinearOverlayData
                 * @classdesc Contains information about the non linear overlay ad data.
                 * @property {string} adId The id of the ad
                 */
                EVENT_DATA.NonLinearOverlayData = function(adId)
                {
                    var checkNonLinearOverlayData = OO._.bind(checkDataType, this, "NonLinearOverlayData");
                    this.adId = checkNonLinearOverlayData(adId, "adId", ["string"]);
                };

                /**
                 * @public
                 * @class Analytics.EVENT_DATA#AdEndedData
                 * @classdesc Contains information about the type of ad that has ended and its ad data.
                 * @property {string} adType The type of ad (linear video, linear overlay, nonlinear overlay)
                 * @property {string} adId The id of the ad
                 */
                EVENT_DATA.AdEndedData = function(adType, adId)
                {
                    var checkAdEndedData = OO._.bind(checkDataType, this, "AdEndedData");
                    this.adType = checkAdEndedData(adType, "adType", ["string"]);
                    this.adId = checkAdEndedData(adId, "adId", ["string"]);
                };

                /**
                 * @public
                 * @class Analytics.EVENT_DATA#AdErrorData
                 * @classdesc Contains information about the ad error.
                 * @property {object|string} The error object or string
                 */
                EVENT_DATA.AdErrorData = function(error)
                {
                    var checkAdErrorData = OO._.bind(checkDataType, this, "AdErrorData");
                    this.error = checkAdErrorData(error, "error", ["string", "object"]);
                };

                /**
                 * @public
                 * @class Analytics.EVENT_DATA#FullscreenChangedData
                 * @classdesc Contains information about whether the player is entering or exiting fullscreen.
                 * @property {boolean} changingToFullscreen Whether or not the player is entering fullscreen.
                 * true represents that the player is entering fullscreen. false represents that the player is
                 * exiting fullscreen.
                 */
                EVENT_DATA.FullscreenChangedData = function(changingToFullscreen)
                {
                    var checkFullscreenChangedData = OO._.bind(checkDataType, this, "FullscreenChangedData");
                    this.changingToFullscreen = checkFullscreenChangedData(changingToFullscreen, "changingToFullscreen", ["boolean"]);
                };

                /**
                 * @public
                 * @class Analytics.EVENT_DATA#VolumeChangedData
                 * @classdesc Contains information about the value of the current volume.
                 * @property {number} volume  The current volume after the change; the volume is a value from 0 - 1, with 0
                 * representing a muted state and 1 representing the maximum volume.
                 */
                EVENT_DATA.VolumeChangedData = function(currentVolume)
                {
                    var checkVolumeChangedData = OO._.bind(checkDataType, this, "VolumeChangedData");
                    this.currentVolume = checkVolumeChangedData(currentVolume, "currentVolume", ["number"]);
                };

                var checkDataType = function(className, data, varName, expectedTypes)
                {
                    var error = true;
                    var toRet = data;
                    for (var i = 0; i < expectedTypes.length; i++)
                    {
                        var expectedType = expectedTypes[i];
                        if (expectedType === "string")
                        {
                            if (OO._.isString(toRet))
                            {
                                error = false;
                                break;
                            }
                        }
                        else if (expectedType === "object")
                        {
                            if (toRet && OO._.isObject(toRet))
                            {
                                error = false;
                                break;
                            }
                        }
                        else if (expectedType === "array")
                        {
                            if (toRet && OO._.isArray(toRet))
                            {
                                error = false;

                            }
                        }
                        else if (expectedType === "number")
                        {
                            // in the case number comes in as a string, try parsing it.
                            var toRetFloat = parseFloat(toRet);
                            if (OO._.isNumber(toRet))
                            {
                                error = false;
                                break;
                            }
                            else if (!isNaN(toRetFloat))
                            {
                                toRet = toRetFloat;
                                error = false;
                                break;
                            }
                        }
                        else if (expectedType === "boolean")
                        {
                            if (OO._.isBoolean(toRet))
                            {
                                error = false;
                            }
                            else if (toRet === "true")
                            {
                                toRet = true;
                                error = false;
                                break;
                            }
                            else if (toRet === "false")
                            {
                                toRet = false;
                                error = false;
                                break;
                            }
                        }
                    }

                    if (error)
                    {
                        logErrorString
                        (
                            "Analytics.EVENT_DATA." + className + " being created with invalid " + varName +
                            ". Should be one of these types [" + expectedTypes + "] but was [" + typeof(data) + "]."
                        );
                        return undefined;
                    }

                    return toRet;
                };

                /**
                 * @private
                 * @class Analytics#selectAdType
                 * @classdesc Checks for a recognized Ad Type and returns the corresponding EVENT_DATA object.
                 * @property {string} adType The type of ad (linear video, linear overlay, nonlinear overlay)
                 * @property {object} adMetadata The metadata associated with the ad
                 * @returns {object} The EVENT_DATA object that associates with the Ad Type.
                 */
                var selectAdType = function(adType, adMetadataIn)
                {
                    var adMetadataOut;
                    switch (adType)
                    {
                        case OO.Analytics.AD_TYPE.LINEAR_VIDEO:
                            adMetadataOut = new EVENT_DATA.LinearVideoData
                            (
                                adMetadataIn.name,
                                adMetadataIn.duration,
                                adMetadataIn.indexInPod
                            );
                            break;
                        case OO.Analytics.AD_TYPE.NONLINEAR_OVERLAY:
                            adMetadataOut = new EVENT_DATA.NonLinearOverlayData
                            (
                                adMetadataIn.id
                            );
                            break;
                        default:
                            logErrorString
                            (
                                "Ad Type not recognized. Should be one of these values [" +
                                OO._.values(OO.Analytics.AD_TYPE) + "] but was [" + adType + "]."
                            );
                            break;
                    }
                    return adMetadataOut;
                };

                /**
                 * @private
                 * @class Analytics#translateErrorCode
                 * @classdesc Translates the error code provided into the corresponding error message.
                 * @property {number} code The error code
                 * @returns {string} The error string associated with the error code number.
                 */
                var translateErrorCode = function(code)
                {
                    var errorMessage;
                    if (_.has(ERROR_CODE, code))
                    {
                        errorMessage = ERROR_CODE[code];
                    }
                    else
                    {
                        logErrorString("Error code not recognized. Error code provided was: " + code);
                    }
                    return errorMessage;
                };

                /**
                 * @private
                 * @class Analytics#logErrorString
                 * @classdesc Helper function to return an error string with the Analytics Constants prefix.
                 * @property {string} origStr the error string
                 * @returns {string} The new error string.
                 */
                var logErrorString = function(origStr)
                {
                    OO.log("Error AnalyticsConstants: " + origStr);
                };

                OO.Analytics.EVENT_DATA = EVENT_DATA;
            }

            if (!OO.Analytics.REQUIRED_PLUGIN_FUNCTIONS)
            {
                /**
                 * @public
                 * @constant
                 * @type string[]
                 * @description This is a list of the required functions for a plugin to
                 * be considered valid by the Analytics Framework.
                 * <ul>
                 *    <li>getName() - Returns a non-empty string containing the name of the plugin.</li>
                 *    <li>getVersion() - Returns a non-empty string containing the version of the plugin.</li>
                 *    <li>setPluginID(id) - A function for setting the plugin id on an instance of the plugin.</li>
                 *    <li>getPluginID() - Returns the plugin id assigned by setPluginID().</li>
                 *    <li>init() - A function for initializing the plugin.</li>
                 *    <li>setMetadata(metadata) - A function for passing metadata specific to this plugin.</li>
                 *    <li>destroy() - Destructor function for cleanup.</li>
                 *    <li>processEvent(eventName, paramArray) - A function to receive events that are published through the framework.</li>
                 * </ul>
                 */
                var REQUIRED_PLUGIN_FUNCTIONS =
                    [
                        "getName",
                        "getVersion",
                        "setPluginID",
                        "getPluginID",
                        "init",
                        "setMetadata",
                        "destroy",
                        "processEvent"
                    ];
                OO.Analytics.REQUIRED_PLUGIN_FUNCTIONS = REQUIRED_PLUGIN_FUNCTIONS;
            }

        },{"./InitAnalyticsNamespace.js":5}],4:[function(require,module,exports){
            require("../../html5-common/js/utils/InitModules/InitOOUnderscore.js")
            require("./InitAnalyticsNamespace.js");
            require("./AnalyticsConstants.js");

            /**
             * @public
             * @class OO.Analytics.RecordedEvent
             * @classdesc Store the information for a published event, including the time
             * was sent.
             * @param  {int}    timeStamp The time the event was published
             * @param  {string} eventName The event name
             * @param  {Array}  params The parameters passed in with the event
             */
            OO.Analytics.RecordedEvent = function(timeStamp, eventName, params)
            {
                this.timeStamp = timeStamp;
                this.eventName = eventName;
                this.params = params;
            };

            /**
             * @public
             * @class OO.Analytics.Framework
             * @classdesc The Analytics Framework's goal is to abstract capturing all the events
             * in code for the purpose of analytics reporting (from any source). When a plugin
             * is registered with the framework, it will be validated, registered and automatically
             * receive all messages that are published to the framework.  The list of events that are
             * currently supported are located in AnalyticsConstants.js.  That file also contains
             * all the methods that need to be implemented by a plugin for it to be considered valid.
             */
            OO.Analytics.Framework = function()
            {
                var _ = OO._;
                var _registeredPlugins = {};
                var _recordedEventList = [];
                var _recording = true;
                var _pluginMetadata;
                var _eventExistenceLookup = {};
                var _uniquePluginId = 0;
                var MAX_PLUGINS = 20; //this is an arbitrary limit but we shouldn't ever reach this (not even close).
                var MAX_EVENTS_RECORDED = 500;

                /**
                 * Helper function for readability mainly. Binds private functions to 'this' instance
                 * of Framework, to give access to private variables.
                 * @private
                 * @method OO.Analytics.Framework#privateMember
                 * @param  {function} functionVar The function to be bound to this instance of Framework
                 * @return {function}             Bound function.
                 */
                var privateMember = _.bind(function(functionVar)
                {
                    if (!_.isFunction(functionVar))
                    {
                        throw (createErrorString("Trying to make private function but " + functionVar + " is not a function."));
                        return;
                    }
                    return _.bind(functionVar, this);
                }, this);


                /**
                 * Set the metadata for all plugins. Each plugin will only receive the data
                 * pluginMetadata["myPluginName"]. This can only be set once per framework instance.
                 * @public
                 * @method OO.Analytics.Framework#setPluginMetadata
                 * @param  {object}  pluginMetadata Object containing metadata for all plugins
                 * @return {boolean}                Return true if metadata is valid and has not been set before.
                 */
                this.setPluginMetadata = function(pluginMetadata)
                {
                    var success = false;
                    //just a warning if we are setting the metadata multiple times. This may be valid
                    //if so, this can be removed.
                    if (_pluginMetadata)
                    {
                        OO.log(createErrorString("Trying to run setPluginMetadata more than once. Ignoring new data."));
                    }

                    if (_.isObject(pluginMetadata))
                    {
                        //set the metadata and then set it on any plugin that is already registered
                        _pluginMetadata = pluginMetadata
                        var pluginList = this.getPluginIDList();
                        for (var i = 0; i < pluginList.length; i++)
                        {
                            var plugin = getPluginInstance(pluginList[i]);
                            passMetadataToPlugin(plugin);
                        }

                        success = true;
                    }
                    else
                    {
                        OO.log(createErrorString("Calling setPluginMetadata without valid metadata object. Defaulting to no metadata"));
                    }

                    return success;
                }

                /**
                 * Destructor/cleanup for OO.Analytics.Framework.
                 * @public
                 * @method OO.Analytics.Framework#destroy
                 */
                this.destroy = privateMember(function()
                {
                    OO.Analytics.UnregisterFrameworkInstance(this);
                    for (var pluginID in _registeredPlugins)
                    {
                        this.unregisterPlugin(pluginID);
                    }
                    _ = null;
                    _registeredPlugins = null;
                    _recordedEventList = null;
                    _pluginMetadata = null;
                    _eventExistenceLookup = null;
                });

                /**
                 * Adds event and params to list of recorded events.  Plugins can later grab
                 * this info in case events are published before the plugin is ready to process
                 * them.
                 * @private
                 * @method OO.Analytics.Framework#recordEvent
                 * @param  {string} eventName Event name to record
                 * @param  {Array}  params    The params sent along with the event.
                 */
                var recordEvent = privateMember(function(eventName, params)
                {
                    if (_recording && _recordedEventList.length < MAX_EVENTS_RECORDED)
                    {
                        var timeStamp = new Date().getTime();
                        var eventToRecord = new OO.Analytics.RecordedEvent(timeStamp, eventName, params);
                        _recordedEventList.push(eventToRecord);
                    }
                    else
                    {
                        stopRecordingEvents();
                    }
                });

                /**
                 * Clears the list of recorded events.
                 * @private
                 * @method OO.Analytics.Framework#clearRecordedEvents
                 */
                var clearRecordedEvents = privateMember(function()
                {
                    _recordedEventList = [];
                });

                /**
                 * Enable recording of events.
                 * @private
                 * @method OO.Analytics.Framework#startRecordingEvents
                 */
                var startRecordingEvents = privateMember(function()
                {
                    _recording = true;
                });

                /**
                 * Disable recording of events.
                 * @private
                 * @method OO.Analytics.Framework#stopRecordingEvents
                 */
                var stopRecordingEvents = privateMember(function()
                {
                    _recording = false;
                });

                /**
                 * Returns a shallow copy array of the currently stored recordedEvents in chronological
                 * order.
                 * @public
                 * @method OO.Analytics.Framework#getRecordedEvents
                 * @return {Array} Shallow copy of recordedEvents in chronological order.
                 */
                this.getRecordedEvents = function()
                {
                    if (_recordedEventList)
                    {
                        return _.clone(_recordedEventList);
                    }

                    return [];
                };

                /**
                 * Register plugin as a factory. It will be validated and an instance of it will
                 * be maintained internally.  The plugin will then be able to receive events
                 * from the framework. Multiple of the same plugin factory can be registered.
                 * Each one will have its own unique plugin id.
                 * @public
                 * @method OO.Analytics.Framework#registerPlugin
                 * @param  {function} pluginFactory Plugin factory function
                 * @return {string}                 Returns a unique plugin id for this plugin factory.
                 */
                this.registerPlugin = function(pluginFactory)
                {
                    var pluginID;
                    var plugin;
                    var errorOccured = false;

                    //sanity check
                    if (!pluginFactory)
                    {
                        OO.log(createErrorString("Trying to register plugin class that is a falsy value."));
                        errorOccured = true;
                    }

                    if (!errorOccured)
                    {
                        try
                        {
                            plugin = new pluginFactory(this);
                        }
                        catch (error)
                        {
                            OO.log(error);
                            OO.log(createErrorString("Error was thrown during plugin creation."))
                            errorOccured = true;
                        }
                    }

                    if (!errorOccured)
                    {
                        if (!this.validatePlugin(plugin))
                        {
                            errorOccured = true;
                        }
                        else
                        {
                            //initialize the plugin. If we have metadata then give it to the plugin. Otherwise it will be sent in Analytics.Framework.setPluginMetadata;
                            safeFunctionCall(plugin, "init");
                            if (_pluginMetadata)
                            {
                                passMetadataToPlugin(plugin);
                            }
                        }
                    }

                    if (!errorOccured)
                    {
                        pluginID = createPluginId(plugin);
                        if (!pluginID)
                        {
                            errorOccured = true;
                        }
                        else if (!_registeredPlugins[pluginID])
                        {
                            _registeredPlugins[pluginID] = {factory:pluginFactory, instance:plugin, active:true};
                            safeFunctionCall(plugin, "setPluginID", [pluginID]);
                        }
                    }

                    if (errorOccured)
                    {
                        if(pluginID)
                        {
                            OO.log(createErrorString("\'" + pluginID + "\' is not valid and was not registered."));
                        }
                        else
                        {
                            var pluginName = safeFunctionCall(plugin, "getName");
                            if (pluginName)
                            {
                                OO.log(createErrorString("\'" + pluginName + "\' is not valid and was not registered."));
                            }
                            else
                            {
                                OO.log(createErrorString("Plugin validation failed and was not registered."));
                            }
                        }
                    }

                    return pluginID;
                };

                /**
                 * Remove plugin from the framework. All instances will stop receiving messages from
                 * the framework.
                 * @public
                 * @method OO.Analytics.Framework#unregisterPlugin
                 * @param  {string}  pluginIDToRemove Plugin id to be removed
                 * @return {boolean}                  Return true if plugin was found and removed.
                 */
                this.unregisterPlugin = function(pluginIDToRemove)
                {
                    var removedSuccessfully = false;

                    if (pluginIDToRemove && _registeredPlugins && _registeredPlugins[pluginIDToRemove])
                    {
                        var plugin = getPluginInstance(pluginIDToRemove);
                        safeFunctionCall(plugin, "destroy");
                        delete _registeredPlugins[pluginIDToRemove];
                        removedSuccessfully = true;
                    }

                    return removedSuccessfully;
                };

                /**
                 * Validates that a plugin instance has all the correct functions.
                 * @public
                 * @method OO.Analytics.Framework#validatePlugin
                 * @param  {object} plugin Plugin instance to be validated
                 * @return {boolean}       Return true if plugin contains all the correct functions.
                 */
                this.validatePlugin = function(plugin)
                {
                    var isValid = true;
                    if (!plugin)
                    {
                        isValid = false;
                        OO.log(createErrorString("Plugin has falsy value and is not valid. Actual value: "), plugin);
                    }

                    /////////////////////////////////////////////////////////////////////////////////////////////
                    ///IMPORTANT: This should be the only function to break the rule of using safeFunctionCall
                    ///           for calling plugin functions, since it's checking if the plugin is valid to
                    ///           begin with.
                    /////////////////////////////////////////////////////////////////////////////////////////////

                    if (isValid)
                    {
                        //test if all required functions are in the plugin
                        for ( var i = 0; i < OO.Analytics.REQUIRED_PLUGIN_FUNCTIONS.length; i++)
                        {
                            var reqFunc = OO.Analytics.REQUIRED_PLUGIN_FUNCTIONS[i];
                            if(!plugin.hasOwnProperty(reqFunc) || typeof plugin[reqFunc] !== 'function')
                            {
                                isValid = false;
                                if(plugin.getName && typeof plugin.getName === 'function')
                                {
                                    try
                                    {
                                        OO.log(createErrorString("Plugin \'" + plugin.getName() + "\' missing function: " + reqFunc));
                                    }
                                    catch(e)
                                    {
                                        OO.log(createErrorString("Plugin missing function: " + reqFunc));
                                    }
                                }
                                else
                                {
                                    OO.log(createErrorString("Plugin missing function: " + reqFunc));
                                }
                                break;
                            }
                        }

                        //if it's still valid check whether the getName returns a non empty string
                        if (isValid)
                        {
                            try
                            {
                                var name = plugin.getName();
                                if (!name || !_.isString(name))
                                {
                                    OO.log(createErrorString("Plugin does not have \'string\' as return type of getName() or is empty string"));
                                    isValid = false;
                                }
                            }
                            catch (e)
                            {
                                OO.log(createErrorString("Plugin throws error on call to getName"));
                                isValid = false;
                            }

                        }

                        //if it's still valid check whether the getVersion returns a non empty string
                        if (isValid)
                        {
                            try
                            {
                                var version = plugin.getVersion();
                                if (!version || !_.isString(version))
                                {
                                    OO.log(createErrorString("Plugin does not have \'string\' as return type of getVersion() or is empty string"));
                                    isValid = false;
                                }
                            }
                            catch(e)
                            {
                                OO.log(createErrorString("Plugin throws error on call to getVersion"));
                                isValid = false;
                            }
                        }
                    }
                    return isValid;
                };

                /**
                 * Get a list of plugin ids for the currently registered plugins.
                 * @public
                 * @method OO.Analytics.Framework#getPluginIDList
                 * @return {Array} An array of plugin IDs.
                 */
                this.getPluginIDList = function()
                {
                    var list = [];
                    if (_registeredPlugins)
                    {
                        for (var pluginID in _registeredPlugins)
                        {
                            list.push(pluginID);
                        }
                    }
                    return list;
                };

                /**
                 * Return the instance of the plugin for a given id. This is for convinience
                 * since the factory and instance are stored together in an object.
                 * @private
                 * @method OO.Analytics.Framework#getPluginInstance
                 * @param  {string} pluginID The id of the plugin.
                 * @return {object}          Returns the plugin instance.
                 */
                var getPluginInstance = privateMember(function(pluginID)
                {
                    var toReturn;
                    if (_registeredPlugins && _registeredPlugins[pluginID])
                    {
                        toReturn = _registeredPlugins[pluginID].instance;
                    }
                    return toReturn;
                });

                /**
                 * Return whether or not a plugin is active and able to receive events.
                 * @public
                 * @method OO.Analytics.Framework#isPluginActive
                 * @param {string}  pluginID Plugin id to check
                 * @return {boolean}         Returns true if plugin is active. If plugin isn't registered, it will return false.
                 */
                this.isPluginActive = function(pluginID)
                {
                    if (pluginID &&
                        _registeredPlugins &&
                        _registeredPlugins[pluginID] &&
                        _.isBoolean(_registeredPlugins[pluginID].active))
                    {
                        return _registeredPlugins[pluginID].active;
                    }
                    return false;
                };

                /**
                 * Set a plugin to be active and receive messages.
                 * @public
                 * @method OO.Analytics.Framework#makePluginActive
                 * @param {string}   pluginID Plugin id to set to active
                 * @return {boolean}          Returns true if plugin found and was able to be activated.
                 */
                this.makePluginActive = function(pluginID)
                {
                    var success = false;
                    if (pluginID && _registeredPlugins && _registeredPlugins[pluginID])
                    {
                        _registeredPlugins[pluginID].active = true;
                        success = true;
                    }
                    return success;
                };

                /**
                 * Set a plugin to be inactive.
                 * @public
                 * @method OO.Analytics.Framework#makePluginInactive
                 * @param  {string}  pluginID Plugin id to set to inactive
                 * @return {boolean}          Returns true if plugin found and was able to be deactivated.
                 */
                this.makePluginInactive = function(pluginID)
                {
                    var success = false;
                    if (pluginID && _registeredPlugins && _registeredPlugins[pluginID])
                    {
                        _registeredPlugins[pluginID].active = false;
                        success = true;
                    }
                    return success;
                };

                /**
                 * Helper function to flatten an object with a nested objects into a single array of values.
                 * @public
                 * @method OO.Analytics.Framework#flattenEvents
                 * @param {object} eventObject The event key-value pair to flatten
                 * @returns {string[]} An array of strings representing the flattened values of the object.
                 */
                this.flattenEvents = function(eventObject)
                {
                    var eventArray = [];
                    var eventKeys = _.keys(eventObject);
                    for (var i = 0; i < eventKeys.length; i++)
                    {
                        var eventKey = eventKeys[i];
                        var eventValue = eventObject[eventKey];
                        if (typeof eventValue === "object")
                        {
                            var innerEvents = this.flattenEvents(eventValue);
                            for (var j = 0; j < innerEvents.length; j++)
                            {
                                var innerEvent = innerEvents[j];
                                eventArray.push(innerEvent);
                            }
                        }
                        else
                        {
                            eventArray.push(eventValue);
                        }
                    }
                    return eventArray;
                };

                /**
                 * Helper function to create the events lookup dictionary.
                 * @public
                 * @method OO.Analytics.Framework#createEventDictionary
                 * @returns {object|null} The created events dictionary. Returns null if there are any errors.
                 */
                this.createEventDictionary = function()
                {
                    var eventDictionary = null;
                    var eventArray = this.flattenEvents(OO.Analytics.EVENTS);
                    if (eventArray && eventArray instanceof Array)
                    {
                        eventDictionary = {};
                        for (var i = 0; i < eventArray.length; i++)
                        {
                            var eventName = eventArray[i];
                            eventDictionary[eventName] = true;
                        }
                    }
                    return eventDictionary;
                };

                _eventExistenceLookup = this.createEventDictionary();

                /**
                 * Publish an event to all registered and active plugins.
                 * @public
                 * @method OO.Analytics.Framework#publishEvent
                 * @param  {string} eventName Name of event to publish
                 * @param  {Array}  params    Parameters to pass along with the event.
                 * @return {boolean}          Return true if message is in OO.Analytics.EVENTS and was successfully published.
                 */
                this.publishEvent = function(eventName, params)
                {
                    var eventPublished = false;
                    if (_eventExistenceLookup[eventName])
                    {
                        //if the params don't come in as an Array then create an empty array to pass in for everything.
                        if (!_.isArray(params))
                        {
                            params = [];
                        }
                        //record the message
                        if(_recording)
                        {
                            recordEvent(eventName, params);
                        }
                        //propogate the message to all active plugins.
                        var pluginID;
                        for (pluginID in _registeredPlugins)
                        {
                            if (this.isPluginActive(pluginID))
                            {
                                var plugin = getPluginInstance(pluginID);
                                safeFunctionCall(plugin, "processEvent",[eventName, params]);
                            }
                        }
                        eventPublished = true;
                    }
                    else
                    {
                        OO.log(createErrorString("Event \'" + eventName + "\' being published and it's not in the list of OO.Analytics.EVENTS"));
                    }
                    return eventPublished;
                };

                /**
                 * Create a unique id for a given plugin/factory. In case someone needs to register
                 * multiple of the same plugin or two plugins  have the same name, this creates
                 * unique ids for each.
                 * @private
                 * @method OO.Analytics.Framework#createPluginId
                 * @param  {object} plugin Instance of plugin to create id for.
                 * @return {string}        The plugin id.
                 */
                var createPluginId = privateMember(function(plugin)
                {
                    var id = null;
                    var error;
                    //Plugin ID's are create using sequential numbers. Nothing fancy but this
                    //way the framework can keep track of how many have been registered. There is
                    //a chance that someone could have an infinite loop where plugins get registered
                    //unregistered all the time, so this will output some error messages to help
                    //debug that.
                    if (plugin)
                    {
                        var name = safeFunctionCall(plugin, "getName");
                        var version = safeFunctionCall(plugin, "getVersion");
                        if (name && version)
                        {
                            id = _uniquePluginId + "_" + name + "_" + version;
                            //we shouldn't have any naming conflicts but just in case, throw an error
                            if (!_registeredPlugins[id])
                            {
                                _uniquePluginId++;
                            }
                            else
                            {
                                OO.log(createErrorString("Failed to create a unique name for plugin " + name + "_" + version));
                                id = null;
                            }

                            if (_uniquePluginId > MAX_PLUGINS)
                            {
                                OO.log(createErrorString("You have tried to create more than " + MAX_PLUGINS + " unique plugin ids. There is probably an infinite loop or some other error."));
                            }
                        }
                    }
                    return id;
                });

                /**
                 * Helper function to give a plugin it's correct set of metadata.
                 * @private
                 * @method OO.Analytics.Framework#passMetadataToPlugin
                 * @param  {object} plugin The plugin instance to give the metadata to
                 */
                var passMetadataToPlugin = privateMember(function(plugin)
                {
                    if (_pluginMetadata)
                    {
                        var pluginName = safeFunctionCall(plugin, "getName");
                        if (!pluginName)
                        {
                            OO.log(createErrorString("Trying to pass in metadata to plugin that does not have valid name"));
                            return;
                        }

                        var metadataForThisPlugin = _pluginMetadata[pluginName];
                        safeFunctionCall(plugin, "setMetadata", [metadataForThisPlugin]);
                    }
                });

                /**
                 * Helper function to create consistent error messages.
                 * @private
                 * @method OO.Analytics.Framework#createErrorString
                 * @param  {string} errorDetails The error details.
                 * @return {string}              The new error message.
                 */
                var createErrorString = function(errorDetails)
                {
                    return "ERROR Analytics Framework: " + errorDetails;
                };

                /**
                 * This function does several things:
                 * -Safely call a function on an instance of a plugin.
                 * -Elminates checking to see if function exists.
                 * -If an error is thrown while calling the function, this will catch it and
                 * output a message and the framework can continue running.
                 * -If OO.DEBUG is true, safeFunctionCall will check if the function being called
                 * is in the list of required functions. If it's not, then it will output a message.
                 * Only functions in the required list should be called in the framework code.
                 * @private
                 * @method OO.Analytics.Framework#safeFunctionCall
                 * @param  {object} plugin   Plugin instance to call function on.
                 * @param  {string} funcName Name of function to call.
                 * @param  {array}  params   The parameters to pass into the function.
                 * @return {varies}          Returns the function's return value. If an error occurred, returns null.
                 */
                var safeFunctionCall = privateMember(function(plugin, funcName, params)
                {
                    if (OO.DEBUG)
                    {
                        debugCheckFunctionIsInRequiredList(funcName);
                    }

                    try
                    {
                        if (_.isFunction(plugin[funcName]))
                        {
                            return plugin[funcName].apply(plugin, params);
                        }
                    }
                    catch (err)
                    {
                        try
                        {
                            if (plugin && _.isFunction(plugin.getName))
                            {
                                OO.log(createErrorString("Error occurred during call to function \'" + funcName + "\' on plugin \'" + plugin.getName() + "\'\n", err));
                            }
                        }
                        catch(e)
                        {
                            OO.log(createErrorString("Error occurred during call to function \'" + funcName + "\' on plugin\n", err));
                        }
                    }

                    return null;
                });

                /**
                 * Check if function name exists in the list of require functions for plugins.
                 * Outputs error message if it doesn't exist.
                 * @private
                 * @method OO.Analytics.Framework#safeFunctionCall
                 * @param  {string} funcName Name of the function to check.
                 */
                var debugCheckFunctionIsInRequiredList = privateMember(function(funcName)
                {
                    if(!_.contains(OO.Analytics.REQUIRED_PLUGIN_FUNCTIONS, funcName))
                    {
                        OO.log(createErrorString("Calling function \'" + funcName + "\' in framework code and it's not in the REQUIRED_PLUGIN_FUNCTIONS list."));
                    }
                });

                //Register this instance so it will register all the plugin factories currently loaded.
                OO.Analytics.RegisterFrameworkInstance(this);
            };

        },{"../../html5-common/js/utils/InitModules/InitOOUnderscore.js":2,"./AnalyticsConstants.js":3,"./InitAnalyticsNamespace.js":5}],5:[function(require,module,exports){
            require("../../html5-common/js/utils/InitModules/InitOO.js");
            require("../../html5-common/js/utils/InitModules/InitOOUnderscore.js");

            if (!OO.Analytics)
            {
                OO.Analytics = {};
            }

            if (!OO.Analytics.FrameworkInstanceList)
            {
                OO.Analytics.FrameworkInstanceList = [];
            }

            if (!OO.Analytics.PluginFactoryList)
            {
                OO.Analytics.PluginFactoryList = [];
            }

            if (!OO.Analytics.RegisterPluginFactory)
            {
                /**
                 * Registers a plugin factory in a global list of factories and then
                 * registers the factory with any existing framework instances.
                 * @public
                 * @method OO.Analytics.Framework#RegisterPluginFactory
                 * @param  {object} factory The factory creation function
                 */
                OO.Analytics.RegisterPluginFactory = function(factory)
                {
                    //Add plugin to the factory list.
                    OO.Analytics.PluginFactoryList.push(factory);

                    //Register this plugin with any existing frameworks.
                    if (OO.Analytics.FrameworkInstanceList && OO.Analytics.FrameworkInstanceList.length)
                    {
                        for(var i = 0; i < OO.Analytics.FrameworkInstanceList.length; i++)
                        {
                            OO.Analytics.FrameworkInstanceList[i].registerPluginFactory(factory);
                        }
                    }
                }
            }


            if (!OO.Analytics.FrameworkRegistrationObject)
            {
                /**
                 * @class FrameworkRegistrationObject
                 * @classdesc This class wraps a framework object to only expose
                 * registerPluginFactory.  It will be used to let plugins register to frameworks
                 * at the global scope. Please note that this class is not important to analytics plugins. You only need to use this class if you're creating your own version of the Analytics Framework.
                 * @public
                 * @param  {object} framework Analytics framework instance
                 */
                OO.Analytics.FrameworkRegistrationObject = function(framework)
                {
                    this.registerPluginFactory = function(pluginFactory)
                    {
                        framework.registerPlugin(pluginFactory);
                    }
                }
            }


            if (!OO.Analytics.RegisterFrameworkInstance)
            {
                /**
                 * Registers a framework instance in a global list of frameworks and then
                 * register any plugin factory that are in the global plugin factory list.
                 * @public
                 * @method OO.Analytics.Framework#RegisterFrameworkInstance
                 * @param  {object} framework Instance of the framework to register
                 */
                OO.Analytics.RegisterFrameworkInstance = function(framework)
                {
                    var frameworkRegistrationObject = new OO.Analytics.FrameworkRegistrationObject(framework);
                    framework.frameworkRegistrationObject = frameworkRegistrationObject;
                    OO.Analytics.FrameworkInstanceList.push(frameworkRegistrationObject);

                    //check to see if any plugin factories already existed and register them to this plugin.
                    if (OO._.isArray(OO.Analytics.PluginFactoryList) && OO.Analytics.PluginFactoryList.length > 0)
                    {
                        for (var i = 0; i < OO.Analytics.PluginFactoryList.length; i++)
                        {
                            framework.registerPlugin(OO.Analytics.PluginFactoryList[i]);
                        }
                    }
                }
            }

            if (!OO.Analytics.UnregisterFrameworkInstance)
            {
                /**
                 * Remove a framework instance from the global list of instance. You must have
                 * a reference to the FrameworkRegistrationObject from that framework to remove it.
                 * This is meant for framework instances to remove themselves from the list only.
                 * @public
                 * @method OO.Analytics.Framework#UnregisterFrameworkInstance
                 * @param  {object} framework Instance of the FrameworkRegistrationObject created when framework instance was registered
                 */
                OO.Analytics.UnregisterFrameworkInstance = function(framework)
                {
                    if (framework)
                    {
                        var regObj = framework.frameworkRegistrationObject;
                        if (regObj)
                        {
                            OO.Analytics.FrameworkInstanceList = OO._.without(OO.Analytics.FrameworkInstanceList, regObj);
                        }
                    }
                }
            }

        },{"../../html5-common/js/utils/InitModules/InitOO.js":1,"../../html5-common/js/utils/InitModules/InitOOUnderscore.js":2}],6:[function(require,module,exports){
//     Underscore.js 1.3.3
//     (c) 2009-2012 Jeremy Ashkenas, DocumentCloud Inc.
//     Underscore is freely distributable under the MIT license.
//     Portions of Underscore are inspired or borrowed from Prototype,
//     Oliver Steele's Functional, and John Resig's Micro-Templating.
//     For all details and documentation:
//     http://documentcloud.github.com/underscore

            (function() {

                // Baseline setup
                // --------------

                // Establish the root object, `window` in the browser, or `global` on the server.
                var root = this;

                // Save the previous value of the `_` variable.
                var previousUnderscore = root._;

                // Establish the object that gets returned to break out of a loop iteration.
                var breaker = {};

                // Save bytes in the minified (but not gzipped) version:
                var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;

                // Create quick reference variables for speed access to core prototypes.
                var slice            = ArrayProto.slice,
                    unshift          = ArrayProto.unshift,
                    toString         = ObjProto.toString,
                    hasOwnProperty   = ObjProto.hasOwnProperty;

                // All **ECMAScript 5** native function implementations that we hope to use
                // are declared here.
                var
                    nativeForEach      = ArrayProto.forEach,
                    nativeMap          = ArrayProto.map,
                    nativeReduce       = ArrayProto.reduce,
                    nativeReduceRight  = ArrayProto.reduceRight,
                    nativeFilter       = ArrayProto.filter,
                    nativeEvery        = ArrayProto.every,
                    nativeSome         = ArrayProto.some,
                    nativeIndexOf      = ArrayProto.indexOf,
                    nativeLastIndexOf  = ArrayProto.lastIndexOf,
                    nativeIsArray      = Array.isArray,
                    nativeKeys         = Object.keys,
                    nativeBind         = FuncProto.bind;

                // Create a safe reference to the Underscore object for use below.
                var _ = function(obj) { return new wrapper(obj); };

                // Export the Underscore object for **Node.js**, with
                // backwards-compatibility for the old `require()` API. If we're in
                // the browser, add `_` as a global object via a string identifier,
                // for Closure Compiler "advanced" mode.
                if (typeof exports !== 'undefined') {
                    if (typeof module !== 'undefined' && module.exports) {
                        exports = module.exports = _;
                    }
                    exports._ = _;
                } else {
                    root['_'] = _;
                }

                // Current version.
                _.VERSION = '1.3.3';

                // Collection Functions
                // --------------------

                // The cornerstone, an `each` implementation, aka `forEach`.
                // Handles objects with the built-in `forEach`, arrays, and raw objects.
                // Delegates to **ECMAScript 5**'s native `forEach` if available.
                var each = _.each = _.forEach = function(obj, iterator, context) {
                    if (obj == null) return;
                    if (nativeForEach && obj.forEach === nativeForEach) {
                        obj.forEach(iterator, context);
                    } else if (obj.length === +obj.length) {
                        for (var i = 0, l = obj.length; i < l; i++) {
                            if (i in obj && iterator.call(context, obj[i], i, obj) === breaker) return;
                        }
                    } else {
                        for (var key in obj) {
                            if (_.has(obj, key)) {
                                if (iterator.call(context, obj[key], key, obj) === breaker) return;
                            }
                        }
                    }
                };

                // Return the results of applying the iterator to each element.
                // Delegates to **ECMAScript 5**'s native `map` if available.
                _.map = _.collect = function(obj, iterator, context) {
                    var results = [];
                    if (obj == null) return results;
                    if (nativeMap && obj.map === nativeMap) return obj.map(iterator, context);
                    each(obj, function(value, index, list) {
                        results[results.length] = iterator.call(context, value, index, list);
                    });
                    if (obj.length === +obj.length) results.length = obj.length;
                    return results;
                };

                // **Reduce** builds up a single result from a list of values, aka `inject`,
                // or `foldl`. Delegates to **ECMAScript 5**'s native `reduce` if available.
                _.reduce = _.foldl = _.inject = function(obj, iterator, memo, context) {
                    var initial = arguments.length > 2;
                    if (obj == null) obj = [];
                    if (nativeReduce && obj.reduce === nativeReduce) {
                        if (context) iterator = _.bind(iterator, context);
                        return initial ? obj.reduce(iterator, memo) : obj.reduce(iterator);
                    }
                    each(obj, function(value, index, list) {
                        if (!initial) {
                            memo = value;
                            initial = true;
                        } else {
                            memo = iterator.call(context, memo, value, index, list);
                        }
                    });
                    if (!initial) throw new TypeError('Reduce of empty array with no initial value');
                    return memo;
                };

                // The right-associative version of reduce, also known as `foldr`.
                // Delegates to **ECMAScript 5**'s native `reduceRight` if available.
                _.reduceRight = _.foldr = function(obj, iterator, memo, context) {
                    var initial = arguments.length > 2;
                    if (obj == null) obj = [];
                    if (nativeReduceRight && obj.reduceRight === nativeReduceRight) {
                        if (context) iterator = _.bind(iterator, context);
                        return initial ? obj.reduceRight(iterator, memo) : obj.reduceRight(iterator);
                    }
                    var reversed = _.toArray(obj).reverse();
                    if (context && !initial) iterator = _.bind(iterator, context);
                    return initial ? _.reduce(reversed, iterator, memo, context) : _.reduce(reversed, iterator);
                };

                // Return the first value which passes a truth test. Aliased as `detect`.
                _.find = _.detect = function(obj, iterator, context) {
                    var result;
                    any(obj, function(value, index, list) {
                        if (iterator.call(context, value, index, list)) {
                            result = value;
                            return true;
                        }
                    });
                    return result;
                };

                // Return all the elements that pass a truth test.
                // Delegates to **ECMAScript 5**'s native `filter` if available.
                // Aliased as `select`.
                _.filter = _.select = function(obj, iterator, context) {
                    var results = [];
                    if (obj == null) return results;
                    if (nativeFilter && obj.filter === nativeFilter) return obj.filter(iterator, context);
                    each(obj, function(value, index, list) {
                        if (iterator.call(context, value, index, list)) results[results.length] = value;
                    });
                    return results;
                };

                // Return all the elements for which a truth test fails.
                _.reject = function(obj, iterator, context) {
                    var results = [];
                    if (obj == null) return results;
                    each(obj, function(value, index, list) {
                        if (!iterator.call(context, value, index, list)) results[results.length] = value;
                    });
                    return results;
                };

                // Determine whether all of the elements match a truth test.
                // Delegates to **ECMAScript 5**'s native `every` if available.
                // Aliased as `all`.
                _.every = _.all = function(obj, iterator, context) {
                    var result = true;
                    if (obj == null) return result;
                    if (nativeEvery && obj.every === nativeEvery) return obj.every(iterator, context);
                    each(obj, function(value, index, list) {
                        if (!(result = result && iterator.call(context, value, index, list))) return breaker;
                    });
                    return !!result;
                };

                // Determine if at least one element in the object matches a truth test.
                // Delegates to **ECMAScript 5**'s native `some` if available.
                // Aliased as `any`.
                var any = _.some = _.any = function(obj, iterator, context) {
                    iterator || (iterator = _.identity);
                    var result = false;
                    if (obj == null) return result;
                    if (nativeSome && obj.some === nativeSome) return obj.some(iterator, context);
                    each(obj, function(value, index, list) {
                        if (result || (result = iterator.call(context, value, index, list))) return breaker;
                    });
                    return !!result;
                };

                // Determine if a given value is included in the array or object using `===`.
                // Aliased as `contains`.
                _.include = _.contains = function(obj, target) {
                    var found = false;
                    if (obj == null) return found;
                    if (nativeIndexOf && obj.indexOf === nativeIndexOf) return obj.indexOf(target) != -1;
                    found = any(obj, function(value) {
                        return value === target;
                    });
                    return found;
                };

                // Invoke a method (with arguments) on every item in a collection.
                _.invoke = function(obj, method) {
                    var args = slice.call(arguments, 2);
                    return _.map(obj, function(value) {
                        return (_.isFunction(method) ? method || value : value[method]).apply(value, args);
                    });
                };

                // Convenience version of a common use case of `map`: fetching a property.
                _.pluck = function(obj, key) {
                    return _.map(obj, function(value){ return value[key]; });
                };

                // Return the maximum element or (element-based computation).
                _.max = function(obj, iterator, context) {
                    if (!iterator && _.isArray(obj) && obj[0] === +obj[0]) return Math.max.apply(Math, obj);
                    if (!iterator && _.isEmpty(obj)) return -Infinity;
                    var result = {computed : -Infinity};
                    each(obj, function(value, index, list) {
                        var computed = iterator ? iterator.call(context, value, index, list) : value;
                        computed >= result.computed && (result = {value : value, computed : computed});
                    });
                    return result.value;
                };

                // Return the minimum element (or element-based computation).
                _.min = function(obj, iterator, context) {
                    if (!iterator && _.isArray(obj) && obj[0] === +obj[0]) return Math.min.apply(Math, obj);
                    if (!iterator && _.isEmpty(obj)) return Infinity;
                    var result = {computed : Infinity};
                    each(obj, function(value, index, list) {
                        var computed = iterator ? iterator.call(context, value, index, list) : value;
                        computed < result.computed && (result = {value : value, computed : computed});
                    });
                    return result.value;
                };

                // Shuffle an array.
                _.shuffle = function(obj) {
                    var shuffled = [], rand;
                    each(obj, function(value, index, list) {
                        rand = Math.floor(Math.random() * (index + 1));
                        shuffled[index] = shuffled[rand];
                        shuffled[rand] = value;
                    });
                    return shuffled;
                };

                // Sort the object's values by a criterion produced by an iterator.
                _.sortBy = function(obj, val, context) {
                    var iterator = _.isFunction(val) ? val : function(obj) { return obj[val]; };
                    return _.pluck(_.map(obj, function(value, index, list) {
                        return {
                            value : value,
                            criteria : iterator.call(context, value, index, list)
                        };
                    }).sort(function(left, right) {
                        var a = left.criteria, b = right.criteria;
                        if (a === void 0) return 1;
                        if (b === void 0) return -1;
                        return a < b ? -1 : a > b ? 1 : 0;
                    }), 'value');
                };

                // Groups the object's values by a criterion. Pass either a string attribute
                // to group by, or a function that returns the criterion.
                _.groupBy = function(obj, val) {
                    var result = {};
                    var iterator = _.isFunction(val) ? val : function(obj) { return obj[val]; };
                    each(obj, function(value, index) {
                        var key = iterator(value, index);
                        (result[key] || (result[key] = [])).push(value);
                    });
                    return result;
                };

                // Use a comparator function to figure out at what index an object should
                // be inserted so as to maintain order. Uses binary search.
                _.sortedIndex = function(array, obj, iterator) {
                    iterator || (iterator = _.identity);
                    var low = 0, high = array.length;
                    while (low < high) {
                        var mid = (low + high) >> 1;
                        iterator(array[mid]) < iterator(obj) ? low = mid + 1 : high = mid;
                    }
                    return low;
                };

                // Safely convert anything iterable into a real, live array.
                _.toArray = function(obj) {
                    if (!obj)                                     return [];
                    if (_.isArray(obj))                           return slice.call(obj);
                    if (_.isArguments(obj))                       return slice.call(obj);
                    if (obj.toArray && _.isFunction(obj.toArray)) return obj.toArray();
                    return _.values(obj);
                };

                // Return the number of elements in an object.
                _.size = function(obj) {
                    return _.isArray(obj) ? obj.length : _.keys(obj).length;
                };

                // Array Functions
                // ---------------

                // Get the first element of an array. Passing **n** will return the first N
                // values in the array. Aliased as `head` and `take`. The **guard** check
                // allows it to work with `_.map`.
                _.first = _.head = _.take = function(array, n, guard) {
                    return (n != null) && !guard ? slice.call(array, 0, n) : array[0];
                };

                // Returns everything but the last entry of the array. Especcialy useful on
                // the arguments object. Passing **n** will return all the values in
                // the array, excluding the last N. The **guard** check allows it to work with
                // `_.map`.
                _.initial = function(array, n, guard) {
                    return slice.call(array, 0, array.length - ((n == null) || guard ? 1 : n));
                };

                // Get the last element of an array. Passing **n** will return the last N
                // values in the array. The **guard** check allows it to work with `_.map`.
                _.last = function(array, n, guard) {
                    if ((n != null) && !guard) {
                        return slice.call(array, Math.max(array.length - n, 0));
                    } else {
                        return array[array.length - 1];
                    }
                };

                // Returns everything but the first entry of the array. Aliased as `tail`.
                // Especially useful on the arguments object. Passing an **index** will return
                // the rest of the values in the array from that index onward. The **guard**
                // check allows it to work with `_.map`.
                _.rest = _.tail = function(array, index, guard) {
                    return slice.call(array, (index == null) || guard ? 1 : index);
                };

                // Trim out all falsy values from an array.
                _.compact = function(array) {
                    return _.filter(array, function(value){ return !!value; });
                };

                // Return a completely flattened version of an array.
                _.flatten = function(array, shallow) {
                    return _.reduce(array, function(memo, value) {
                        if (_.isArray(value)) return memo.concat(shallow ? value : _.flatten(value));
                        memo[memo.length] = value;
                        return memo;
                    }, []);
                };

                // Return a version of the array that does not contain the specified value(s).
                _.without = function(array) {
                    return _.difference(array, slice.call(arguments, 1));
                };

                // Produce a duplicate-free version of the array. If the array has already
                // been sorted, you have the option of using a faster algorithm.
                // Aliased as `unique`.
                _.uniq = _.unique = function(array, isSorted, iterator) {
                    var initial = iterator ? _.map(array, iterator) : array;
                    var results = [];
                    // The `isSorted` flag is irrelevant if the array only contains two elements.
                    if (array.length < 3) isSorted = true;
                    _.reduce(initial, function (memo, value, index) {
                        if (isSorted ? _.last(memo) !== value || !memo.length : !_.include(memo, value)) {
                            memo.push(value);
                            results.push(array[index]);
                        }
                        return memo;
                    }, []);
                    return results;
                };

                // Produce an array that contains the union: each distinct element from all of
                // the passed-in arrays.
                _.union = function() {
                    return _.uniq(_.flatten(arguments, true));
                };

                // Produce an array that contains every item shared between all the
                // passed-in arrays. (Aliased as "intersect" for back-compat.)
                _.intersection = _.intersect = function(array) {
                    var rest = slice.call(arguments, 1);
                    return _.filter(_.uniq(array), function(item) {
                        return _.every(rest, function(other) {
                            return _.indexOf(other, item) >= 0;
                        });
                    });
                };

                // Take the difference between one array and a number of other arrays.
                // Only the elements present in just the first array will remain.
                _.difference = function(array) {
                    var rest = _.flatten(slice.call(arguments, 1), true);
                    return _.filter(array, function(value){ return !_.include(rest, value); });
                };

                // Zip together multiple lists into a single array -- elements that share
                // an index go together.
                _.zip = function() {
                    var args = slice.call(arguments);
                    var length = _.max(_.pluck(args, 'length'));
                    var results = new Array(length);
                    for (var i = 0; i < length; i++) results[i] = _.pluck(args, "" + i);
                    return results;
                };

                // If the browser doesn't supply us with indexOf (I'm looking at you, **MSIE**),
                // we need this function. Return the position of the first occurrence of an
                // item in an array, or -1 if the item is not included in the array.
                // Delegates to **ECMAScript 5**'s native `indexOf` if available.
                // If the array is large and already in sort order, pass `true`
                // for **isSorted** to use binary search.
                _.indexOf = function(array, item, isSorted) {
                    if (array == null) return -1;
                    var i, l;
                    if (isSorted) {
                        i = _.sortedIndex(array, item);
                        return array[i] === item ? i : -1;
                    }
                    if (nativeIndexOf && array.indexOf === nativeIndexOf) return array.indexOf(item);
                    for (i = 0, l = array.length; i < l; i++) if (i in array && array[i] === item) return i;
                    return -1;
                };

                // Delegates to **ECMAScript 5**'s native `lastIndexOf` if available.
                _.lastIndexOf = function(array, item) {
                    if (array == null) return -1;
                    if (nativeLastIndexOf && array.lastIndexOf === nativeLastIndexOf) return array.lastIndexOf(item);
                    var i = array.length;
                    while (i--) if (i in array && array[i] === item) return i;
                    return -1;
                };

                // Generate an integer Array containing an arithmetic progression. A port of
                // the native Python `range()` function. See
                // [the Python documentation](http://docs.python.org/library/functions.html#range).
                _.range = function(start, stop, step) {
                    if (arguments.length <= 1) {
                        stop = start || 0;
                        start = 0;
                    }
                    step = arguments[2] || 1;

                    var len = Math.max(Math.ceil((stop - start) / step), 0);
                    var idx = 0;
                    var range = new Array(len);

                    while(idx < len) {
                        range[idx++] = start;
                        start += step;
                    }

                    return range;
                };

                // Function (ahem) Functions
                // ------------------

                // Reusable constructor function for prototype setting.
                var ctor = function(){};

                // Create a function bound to a given object (assigning `this`, and arguments,
                // optionally). Binding with arguments is also known as `curry`.
                // Delegates to **ECMAScript 5**'s native `Function.bind` if available.
                // We check for `func.bind` first, to fail fast when `func` is undefined.
                _.bind = function bind(func, context) {
                    var bound, args;
                    if (func.bind === nativeBind && nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
                    if (!_.isFunction(func)) throw new TypeError;
                    args = slice.call(arguments, 2);
                    return bound = function() {
                        if (!(this instanceof bound)) return func.apply(context, args.concat(slice.call(arguments)));
                        ctor.prototype = func.prototype;
                        var self = new ctor;
                        var result = func.apply(self, args.concat(slice.call(arguments)));
                        if (Object(result) === result) return result;
                        return self;
                    };
                };

                // Bind all of an object's methods to that object. Useful for ensuring that
                // all callbacks defined on an object belong to it.
                _.bindAll = function(obj) {
                    var funcs = slice.call(arguments, 1);
                    if (funcs.length == 0) funcs = _.functions(obj);
                    each(funcs, function(f) { obj[f] = _.bind(obj[f], obj); });
                    return obj;
                };

                // Memoize an expensive function by storing its results.
                _.memoize = function(func, hasher) {
                    var memo = {};
                    hasher || (hasher = _.identity);
                    return function() {
                        var key = hasher.apply(this, arguments);
                        return _.has(memo, key) ? memo[key] : (memo[key] = func.apply(this, arguments));
                    };
                };

                // Delays a function for the given number of milliseconds, and then calls
                // it with the arguments supplied.
                _.delay = function(func, wait) {
                    var args = slice.call(arguments, 2);
                    return setTimeout(function(){ return func.apply(null, args); }, wait);
                };

                // Defers a function, scheduling it to run after the current call stack has
                // cleared.
                _.defer = function(func) {
                    return _.delay.apply(_, [func, 1].concat(slice.call(arguments, 1)));
                };

                // Returns a function, that, when invoked, will only be triggered at most once
                // during a given window of time.
                _.throttle = function(func, wait) {
                    var context, args, timeout, throttling, more, result;
                    var whenDone = _.debounce(function(){ more = throttling = false; }, wait);
                    return function() {
                        context = this; args = arguments;
                        var later = function() {
                            timeout = null;
                            if (more) func.apply(context, args);
                            whenDone();
                        };
                        if (!timeout) timeout = setTimeout(later, wait);
                        if (throttling) {
                            more = true;
                        } else {
                            result = func.apply(context, args);
                        }
                        whenDone();
                        throttling = true;
                        return result;
                    };
                };

                // Returns a function, that, as long as it continues to be invoked, will not
                // be triggered. The function will be called after it stops being called for
                // N milliseconds. If `immediate` is passed, trigger the function on the
                // leading edge, instead of the trailing.
                _.debounce = function(func, wait, immediate) {
                    var timeout;
                    return function() {
                        var context = this, args = arguments;
                        var later = function() {
                            timeout = null;
                            if (!immediate) func.apply(context, args);
                        };
                        if (immediate && !timeout) func.apply(context, args);
                        clearTimeout(timeout);
                        timeout = setTimeout(later, wait);
                    };
                };

                // Returns a function that will be executed at most one time, no matter how
                // often you call it. Useful for lazy initialization.
                _.once = function(func) {
                    var ran = false, memo;
                    return function() {
                        if (ran) return memo;
                        ran = true;
                        return memo = func.apply(this, arguments);
                    };
                };

                // Returns the first function passed as an argument to the second,
                // allowing you to adjust arguments, run code before and after, and
                // conditionally execute the original function.
                _.wrap = function(func, wrapper) {
                    return function() {
                        var args = [func].concat(slice.call(arguments, 0));
                        return wrapper.apply(this, args);
                    };
                };

                // Returns a function that is the composition of a list of functions, each
                // consuming the return value of the function that follows.
                _.compose = function() {
                    var funcs = arguments;
                    return function() {
                        var args = arguments;
                        for (var i = funcs.length - 1; i >= 0; i--) {
                            args = [funcs[i].apply(this, args)];
                        }
                        return args[0];
                    };
                };

                // Returns a function that will only be executed after being called N times.
                _.after = function(times, func) {
                    if (times <= 0) return func();
                    return function() {
                        if (--times < 1) { return func.apply(this, arguments); }
                    };
                };

                // Object Functions
                // ----------------

                // Retrieve the names of an object's properties.
                // Delegates to **ECMAScript 5**'s native `Object.keys`
                _.keys = nativeKeys || function(obj) {
                        if (obj !== Object(obj)) throw new TypeError('Invalid object');
                        var keys = [];
                        for (var key in obj) if (_.has(obj, key)) keys[keys.length] = key;
                        return keys;
                    };

                // Retrieve the values of an object's properties.
                _.values = function(obj) {
                    return _.map(obj, _.identity);
                };

                // Return a sorted list of the function names available on the object.
                // Aliased as `methods`
                _.functions = _.methods = function(obj) {
                    var names = [];
                    for (var key in obj) {
                        if (_.isFunction(obj[key])) names.push(key);
                    }
                    return names.sort();
                };

                // Extend a given object with all the properties in passed-in object(s).
                _.extend = function(obj) {
                    each(slice.call(arguments, 1), function(source) {
                        for (var prop in source) {
                            obj[prop] = source[prop];
                        }
                    });
                    return obj;
                };

                // Return a copy of the object only containing the whitelisted properties.
                _.pick = function(obj) {
                    var result = {};
                    each(_.flatten(slice.call(arguments, 1)), function(key) {
                        if (key in obj) result[key] = obj[key];
                    });
                    return result;
                };

                // Fill in a given object with default properties.
                _.defaults = function(obj) {
                    each(slice.call(arguments, 1), function(source) {
                        for (var prop in source) {
                            if (obj[prop] == null) obj[prop] = source[prop];
                        }
                    });
                    return obj;
                };

                // Create a (shallow-cloned) duplicate of an object.
                _.clone = function(obj) {
                    if (!_.isObject(obj)) return obj;
                    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
                };

                // Invokes interceptor with the obj, and then returns obj.
                // The primary purpose of this method is to "tap into" a method chain, in
                // order to perform operations on intermediate results within the chain.
                _.tap = function(obj, interceptor) {
                    interceptor(obj);
                    return obj;
                };

                // Internal recursive comparison function.
                function eq(a, b, stack) {
                    // Identical objects are equal. `0 === -0`, but they aren't identical.
                    // See the Harmony `egal` proposal: http://wiki.ecmascript.org/doku.php?id=harmony:egal.
                    if (a === b) return a !== 0 || 1 / a == 1 / b;
                    // A strict comparison is necessary because `null == undefined`.
                    if (a == null || b == null) return a === b;
                    // Unwrap any wrapped objects.
                    if (a._chain) a = a._wrapped;
                    if (b._chain) b = b._wrapped;
                    // Invoke a custom `isEqual` method if one is provided.
                    if (a.isEqual && _.isFunction(a.isEqual)) return a.isEqual(b);
                    if (b.isEqual && _.isFunction(b.isEqual)) return b.isEqual(a);
                    // Compare `[[Class]]` names.
                    var className = toString.call(a);
                    if (className != toString.call(b)) return false;
                    switch (className) {
                        // Strings, numbers, dates, and booleans are compared by value.
                        case '[object String]':
                            // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
                            // equivalent to `new String("5")`.
                            return a == String(b);
                        case '[object Number]':
                            // `NaN`s are equivalent, but non-reflexive. An `egal` comparison is performed for
                            // other numeric values.
                            return a != +a ? b != +b : (a == 0 ? 1 / a == 1 / b : a == +b);
                        case '[object Date]':
                        case '[object Boolean]':
                            // Coerce dates and booleans to numeric primitive values. Dates are compared by their
                            // millisecond representations. Note that invalid dates with millisecond representations
                            // of `NaN` are not equivalent.
                            return +a == +b;
                        // RegExps are compared by their source patterns and flags.
                        case '[object RegExp]':
                            return a.source == b.source &&
                                a.global == b.global &&
                                a.multiline == b.multiline &&
                                a.ignoreCase == b.ignoreCase;
                    }
                    if (typeof a != 'object' || typeof b != 'object') return false;
                    // Assume equality for cyclic structures. The algorithm for detecting cyclic
                    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.
                    var length = stack.length;
                    while (length--) {
                        // Linear search. Performance is inversely proportional to the number of
                        // unique nested structures.
                        if (stack[length] == a) return true;
                    }
                    // Add the first object to the stack of traversed objects.
                    stack.push(a);
                    var size = 0, result = true;
                    // Recursively compare objects and arrays.
                    if (className == '[object Array]') {
                        // Compare array lengths to determine if a deep comparison is necessary.
                        size = a.length;
                        result = size == b.length;
                        if (result) {
                            // Deep compare the contents, ignoring non-numeric properties.
                            while (size--) {
                                // Ensure commutative equality for sparse arrays.
                                if (!(result = size in a == size in b && eq(a[size], b[size], stack))) break;
                            }
                        }
                    } else {
                        // Objects with different constructors are not equivalent.
                        if ('constructor' in a != 'constructor' in b || a.constructor != b.constructor) return false;
                        // Deep compare objects.
                        for (var key in a) {
                            if (_.has(a, key)) {
                                // Count the expected number of properties.
                                size++;
                                // Deep compare each member.
                                if (!(result = _.has(b, key) && eq(a[key], b[key], stack))) break;
                            }
                        }
                        // Ensure that both objects contain the same number of properties.
                        if (result) {
                            for (key in b) {
                                if (_.has(b, key) && !(size--)) break;
                            }
                            result = !size;
                        }
                    }
                    // Remove the first object from the stack of traversed objects.
                    stack.pop();
                    return result;
                }

                // Perform a deep comparison to check if two objects are equal.
                _.isEqual = function(a, b) {
                    return eq(a, b, []);
                };

                // Is a given array, string, or object empty?
                // An "empty" object has no enumerable own-properties.
                _.isEmpty = function(obj) {
                    if (obj == null) return true;
                    if (_.isArray(obj) || _.isString(obj)) return obj.length === 0;
                    for (var key in obj) if (_.has(obj, key)) return false;
                    return true;
                };

                // Is a given value a DOM element?
                _.isElement = function(obj) {
                    return !!(obj && obj.nodeType == 1);
                };

                // Is a given value an array?
                // Delegates to ECMA5's native Array.isArray
                _.isArray = nativeIsArray || function(obj) {
                        return toString.call(obj) == '[object Array]';
                    };

                // Is a given variable an object?
                _.isObject = function(obj) {
                    return obj === Object(obj);
                };

                // Is a given variable an arguments object?
                _.isArguments = function(obj) {
                    return toString.call(obj) == '[object Arguments]';
                };
                if (!_.isArguments(arguments)) {
                    _.isArguments = function(obj) {
                        return !!(obj && _.has(obj, 'callee'));
                    };
                }

                // Is a given value a function?
                _.isFunction = function(obj) {
                    return toString.call(obj) == '[object Function]';
                };

                // Is a given value a string?
                _.isString = function(obj) {
                    return toString.call(obj) == '[object String]';
                };

                // Is a given value a number?
                _.isNumber = function(obj) {
                    return toString.call(obj) == '[object Number]';
                };

                // Is a given object a finite number?
                _.isFinite = function(obj) {
                    return _.isNumber(obj) && isFinite(obj);
                };

                // Is the given value `NaN`?
                _.isNaN = function(obj) {
                    // `NaN` is the only value for which `===` is not reflexive.
                    return obj !== obj;
                };

                // Is a given value a boolean?
                _.isBoolean = function(obj) {
                    return obj === true || obj === false || toString.call(obj) == '[object Boolean]';
                };

                // Is a given value a date?
                _.isDate = function(obj) {
                    return toString.call(obj) == '[object Date]';
                };

                // Is the given value a regular expression?
                _.isRegExp = function(obj) {
                    return toString.call(obj) == '[object RegExp]';
                };

                // Is a given value equal to null?
                _.isNull = function(obj) {
                    return obj === null;
                };

                // Is a given variable undefined?
                _.isUndefined = function(obj) {
                    return obj === void 0;
                };

                // Has own property?
                _.has = function(obj, key) {
                    return hasOwnProperty.call(obj, key);
                };

                // Utility Functions
                // -----------------

                // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
                // previous owner. Returns a reference to the Underscore object.
                _.noConflict = function() {
                    root._ = previousUnderscore;
                    return this;
                };

                // Keep the identity function around for default iterators.
                _.identity = function(value) {
                    return value;
                };

                // Run a function **n** times.
                _.times = function (n, iterator, context) {
                    for (var i = 0; i < n; i++) iterator.call(context, i);
                };

                // Escape a string for HTML interpolation.
                _.escape = function(string) {
                    return (''+string).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;').replace(/'/g, '&#x27;').replace(/\//g,'&#x2F;');
                };

                // If the value of the named property is a function then invoke it;
                // otherwise, return it.
                _.result = function(object, property) {
                    if (object == null) return null;
                    var value = object[property];
                    return _.isFunction(value) ? value.call(object) : value;
                };

                // Add your own custom functions to the Underscore object, ensuring that
                // they're correctly added to the OOP wrapper as well.
                _.mixin = function(obj) {
                    each(_.functions(obj), function(name){
                        addToWrapper(name, _[name] = obj[name]);
                    });
                };

                // Generate a unique integer id (unique within the entire client session).
                // Useful for temporary DOM ids.
                var idCounter = 0;
                _.uniqueId = function(prefix) {
                    var id = idCounter++;
                    return prefix ? prefix + id : id;
                };

                // By default, Underscore uses ERB-style template delimiters, change the
                // following template settings to use alternative delimiters.
                _.templateSettings = {
                    evaluate    : /<%([\s\S]+?)%>/g,
                    interpolate : /<%=([\s\S]+?)%>/g,
                    escape      : /<%-([\s\S]+?)%>/g
                };

                // When customizing `templateSettings`, if you don't want to define an
                // interpolation, evaluation or escaping regex, we need one that is
                // guaranteed not to match.
                var noMatch = /.^/;

                // Certain characters need to be escaped so that they can be put into a
                // string literal.
                var escapes = {
                    '\\': '\\',
                    "'": "'",
                    'r': '\r',
                    'n': '\n',
                    't': '\t',
                    'u2028': '\u2028',
                    'u2029': '\u2029'
                };

                for (var p in escapes) escapes[escapes[p]] = p;
                var escaper = /\\|'|\r|\n|\t|\u2028|\u2029/g;
                var unescaper = /\\(\\|'|r|n|t|u2028|u2029)/g;

                // Within an interpolation, evaluation, or escaping, remove HTML escaping
                // that had been previously added.
                var unescape = function(code) {
                    return code.replace(unescaper, function(match, escape) {
                        return escapes[escape];
                    });
                };

                // JavaScript micro-templating, similar to John Resig's implementation.
                // Underscore templating handles arbitrary delimiters, preserves whitespace,
                // and correctly escapes quotes within interpolated code.
                _.template = function(text, data, settings) {
                    settings = _.defaults(settings || {}, _.templateSettings);

                    // Compile the template source, taking care to escape characters that
                    // cannot be included in a string literal and then unescape them in code
                    // blocks.
                    var source = "__p+='" + text
                            .replace(escaper, function(match) {
                                return '\\' + escapes[match];
                            })
                            .replace(settings.escape || noMatch, function(match, code) {
                                return "'+\n_.escape(" + unescape(code) + ")+\n'";
                            })
                            .replace(settings.interpolate || noMatch, function(match, code) {
                                return "'+\n(" + unescape(code) + ")+\n'";
                            })
                            .replace(settings.evaluate || noMatch, function(match, code) {
                                return "';\n" + unescape(code) + "\n;__p+='";
                            }) + "';\n";

                    // If a variable is not specified, place data values in local scope.
                    if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';

                    source = "var __p='';" +
                        "var print=function(){__p+=Array.prototype.join.call(arguments, '')};\n" +
                        source + "return __p;\n";

                    var render = new Function(settings.variable || 'obj', '_', source);
                    if (data) return render(data, _);
                    var template = function(data) {
                        return render.call(this, data, _);
                    };

                    // Provide the compiled function source as a convenience for build time
                    // precompilation.
                    template.source = 'function(' + (settings.variable || 'obj') + '){\n' +
                        source + '}';

                    return template;
                };

                // Add a "chain" function, which will delegate to the wrapper.
                _.chain = function(obj) {
                    return _(obj).chain();
                };

                // The OOP Wrapper
                // ---------------

                // If Underscore is called as a function, it returns a wrapped object that
                // can be used OO-style. This wrapper holds altered versions of all the
                // underscore functions. Wrapped objects may be chained.
                var wrapper = function(obj) { this._wrapped = obj; };

                // Expose `wrapper.prototype` as `_.prototype`
                _.prototype = wrapper.prototype;

                // Helper function to continue chaining intermediate results.
                var result = function(obj, chain) {
                    return chain ? _(obj).chain() : obj;
                };

                // A method to easily add functions to the OOP wrapper.
                var addToWrapper = function(name, func) {
                    wrapper.prototype[name] = function() {
                        var args = slice.call(arguments);
                        unshift.call(args, this._wrapped);
                        return result(func.apply(_, args), this._chain);
                    };
                };

                // Add all of the Underscore functions to the wrapper object.
                _.mixin(_);

                // Add all mutator Array functions to the wrapper.
                each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {
                    var method = ArrayProto[name];
                    wrapper.prototype[name] = function() {
                        var wrapped = this._wrapped;
                        method.apply(wrapped, arguments);
                        var length = wrapped.length;
                        if ((name == 'shift' || name == 'splice') && length === 0) delete wrapped[0];
                        return result(wrapped, this._chain);
                    };
                });

                // Add all accessor Array functions to the wrapper.
                each(['concat', 'join', 'slice'], function(name) {
                    var method = ArrayProto[name];
                    wrapper.prototype[name] = function() {
                        return result(method.apply(this._wrapped, arguments), this._chain);
                    };
                });

                // Start chaining a wrapped Underscore object.
                wrapper.prototype.chain = function() {
                    this._chain = true;
                    return this;
                };

                // Extracts the result from a wrapped and chained object.
                wrapper.prototype.value = function() {
                    return this._wrapped;
                };

            }).call(this);

        },{}]},{},[4]);


        OO.exposeStaticApi("Analytics", OO.Analytics);


        OO.plugin("AnalyticsFrameworkTranslator", function (OO, _, $, W)
        {
            var mb;
            var af;
            var adMode = false;
            var singleAdStarted = false;
            var lastAdPodStartedParam = null;
            var impressionMade = false;

            // used for OO.EVENTS.ERROR message
            var errorCategoryDictionary = {};
            errorCategoryDictionary.SAS = OO.ERROR.API.SAS;
            errorCategoryDictionary.PLAYBACK = OO.ERROR.PLAYBACK;
            errorCategoryDictionary.METADATA_LOADING = OO.ERROR.API;
            errorCategoryDictionary.GENERAL = OO.ERROR;

            /**
             * Helper function for readability mainly. Binds private functions to 'this' instance
             * of Framework, to give access to private variables.
             * @private
             * @method OO.Analytics.Framework#privateMember
             * @param  {function} functionVar The function to be bound to this instance of Framework
             * @return {function}             Bound function.
             */
            var privateMember = _.bind(function(functionVar)
            {
                if (!_.isFunction(functionVar))
                {
                    throw (createErrorString("Trying to make private function but " + functionVar + " is not a function."));
                }
                return _.bind(functionVar, this);
            }, this);


            var AnalyticsFrameworkTranslator = function(mbIn, id)
            {
                this.id = id;
                mb = mbIn;
                af = new OO.Analytics.Framework();
                mb.subscribe(OO.EVENTS.PLAYER_CREATED, "AnalyticsFrameworkTranslator", onPlayerCreated);
                mb.subscribe(OO.EVENTS.EMBED_CODE_CHANGED, "AnalyticsFrameworkTranslator", onEmbedCodeChanged);
                mb.subscribe(OO.EVENTS.CONTENT_TREE_FETCHED, "AnalyticsFrameworkTranslator", onContentTreeFetched);
                mb.subscribe(OO.EVENTS.METADATA_FETCHED, "AnalyticsFrameworkTranslator", onMetadataFetched);
                mb.subscribe(OO.EVENTS.AUTHORIZATION_FETCHED, "AnalyticsFrameworkTranslator", onAuthorizationFetched);
                mb.subscribe(OO.EVENTS.INITIAL_PLAY, "AnalyticsFrameworkTranslator", onInitialPlay);
                mb.subscribe(OO.EVENTS.PLAY, "AnalyticsFrameworkTranslator", onPlay);
                mb.subscribe(OO.EVENTS.DOWNLOADING, "AnalyticsFrameworkTranslator", onDownloading);
                mb.subscribe(OO.EVENTS.BUFFERING, "AnalyticsFrameworkTranslator", onBuffering);
                mb.subscribe(OO.EVENTS.BUFFERED, "AnalyticsFrameworkTranslator", onBuffered);
                mb.subscribe(OO.EVENTS.BITRATE_INFO_AVAILABLE, "AnalyticsFrameworkTranslator", onBitrateInfoAvailable);
                mb.subscribe(OO.EVENTS.SET_TARGET_BITRATE, "AnalyticsFrameworkTranslator", onSetTargetBitrate);
                mb.subscribe(OO.EVENTS.BITRATE_CHANGED, "AnalyticsFrameworkTranslator", onBitrateChanged);
                mb.subscribe(OO.EVENTS.PLAYING, "AnalyticsFrameworkTranslator", onPlaying);
                mb.subscribe(OO.EVENTS.PLAYHEAD_TIME_CHANGED, "AnalyticsFrameworkTranslator", onPlayheadTimeChanged);
                mb.subscribe(OO.EVENTS.PLAYED, "AnalyticsFrameworkTranslator", onPlayed);
                mb.subscribe(OO.EVENTS.PAUSE, "AnalyticsFrameworkTranslator", onPause);
                mb.subscribe(OO.EVENTS.PAUSED, "AnalyticsFrameworkTranslator", onPaused);
                mb.subscribe(OO.EVENTS.REPLAY, "AnalyticsFrameworkTranslator", onReplay);
                mb.subscribe(OO.EVENTS.SEEK, "AnalyticsFrameworkTranslator", onSeek);
                mb.subscribe(OO.EVENTS.SEEKED, "AnalyticsFrameworkTranslator", onSeeked);
                mb.subscribe(OO.EVENTS.WILL_PLAY_ADS, "AnalyticsFrameworkTranslator", onWillPlayAds);
                mb.subscribe(OO.EVENTS.AD_POD_STARTED, "AnalyticsFrameworkTranslator", onAdPodStarted);
                mb.subscribe(OO.EVENTS.AD_POD_ENDED, "AnalyticsFrameworkTranslator", onAdPodEnded);
                mb.subscribe(OO.EVENTS.WILL_PLAY_SINGLE_AD, "AnalyticsFrameworkTranslator", onWillPlaySingleAd);
                mb.subscribe(OO.EVENTS.SINGLE_AD_PLAYED, "AnalyticsFrameworkTranslator", onSingleAdPlayed);
                mb.subscribe(OO.EVENTS.WILL_PLAY_NONLINEAR_AD, "AnalyticsFrameworkTranslator", onWillPlayNonlinearAd);
                mb.subscribe(OO.EVENTS.NONLINEAR_AD_PLAYED, "AnalyticsFrameworkTranslator", onNonlinearAdPlayed);
                mb.subscribe(OO.EVENTS.ADS_PLAYED, "AnalyticsFrameworkTranslator", onAdsPlayed);
                mb.subscribe(OO.EVENTS.SKIP_AD, "AnalyticsFrameworkTranslator", onSkipAd);
                mb.subscribe(OO.EVENTS.ADS_ERROR, "AnalyticsFrameworkTranslator", onAdsError);
                mb.subscribe(OO.EVENTS.ADS_CLICKTHROUGH_OPENED, "AnalyticsFrameworkTranslator", onAdsClickthroughOpened);
                mb.subscribe(OO.EVENTS.FULLSCREEN_CHANGED, "AnalyticsFrameworkTranslator", onFullscreenChanged);
                mb.subscribe(OO.EVENTS.VOLUME_CHANGED, "AnalyticsFrameworkTranslator", onVolumeChanged);
                mb.subscribe(OO.EVENTS.DESTROY, "AnalyticsFrameworkTranslator", onDestroy);
                mb.subscribe(OO.EVENTS.VC_PLAYED, "AnalyticsFrameworkTranslator", onVideoPlayed);
                mb.subscribe(OO.EVENTS.VC_PLAYING, "AnalyticsFrameworkTranslator", onVideoPlaying);
                mb.subscribe(OO.EVENTS.VC_VIDEO_ELEMENT_CREATED, "AnalyticsFrameworkTranslator", onVideoElementCreated);
                mb.subscribe(OO.EVENTS.ERROR, "AnalyticsFrameworkTranslator", onError);

                // [DEPRECATED] (NOTE: Is being replaced by OO.EVENTS.ERROR)
                mb.subscribe(OO.EVENTS.VC_PLAY_FAILED, "AnalyticsFrameworkTranslator", onVideoPlayFailed);

            };

            // Event Callbacks
            /**
             * Callback to map core message bus event to AnalyticsFramework event:
             * OO.EVENTS.PLAYER_CREATED -> OO.Analytics.EVENTS.VIDEO_PLAYER_CREATED.
             * @private
             * @method AnalyticsFrameworkTranslator#onPlayerCreated
             * @param {string} eventName Core message bus event name
             * @param {string} elementId The id of the DOM element that contains the player
             * @param {object} metadata The configuration metadata associated with the player
             * (i.e. pcode, playerBrandingId, skin configuration, player configuration parameters)
             */
            var onPlayerCreated = privateMember(function(eventName, elementId, metadata)
            {
                var param1;
                try
                {
                    // TODO checkDataType
                    param1 = metadata;
                }
                catch(e)
                {
                    logEventDataError(eventName);
                    param1 = {};
                }
                af.setPluginMetadata(param1);
                af.publishEvent(OO.Analytics.EVENTS.VIDEO_PLAYER_CREATED, [param1]);
            });

            /**
             * Callback to map core message bus event to AnalyticsFramework event:
             * OO.EVENTS.EMBED_CODE_CHANGED -> OO.Analytics.EVENTS.VIDEO_SOURCE_CHANGED.
             * @private
             * @method AnalyticsFrameworkTranslator#onEmbedCodeChanged
             * @param {string} eventName Core message bus event name
             * @param {string} embedCode The embed code
             * @param {object} params The configuration metadata associated with the player
             * (i.e. pcode, playerBrandingId, skin configuration, player configuration parameters)
             */
            var onEmbedCodeChanged = privateMember(function(eventName, embedCode, params)
            {
                var param1;
                try
                {
                    param1 = new OO.Analytics.EVENT_DATA.VideoSourceData(embedCode, params);
                }
                catch(e)
                {
                    logEventDataError(eventName);
                    param1 = {};
                }
                af.publishEvent(OO.Analytics.EVENTS.VIDEO_SOURCE_CHANGED, [param1]);
            });

            /**
             * Callback to map core mesesage bus event to AnalyticsFramework event:
             * OO.EVENTS.CONTENT_TREE_FETCHED -> OO.Analytics.EVENTS.VIDEO_CONTENT_METADATA_UPDATED.
             * @private
             * @method AnalyticsFrameworkTranslator#onContentTreeFetched
             * @param {string} eventName Core message bus event name
             * @param {object} content The metadata associated with the content
             * (i.e. title, description, duration, etc)
             */
            var onContentTreeFetched = privateMember(function(eventName, content)
            {
                var param1;
                try
                {
                    var contentInfo = content;
                    param1 = new OO.Analytics.EVENT_DATA.VideoContentMetadata(contentInfo.title,
                        contentInfo.description,
                        contentInfo.duration,
                        contentInfo.closed_captions,
                        contentInfo.content_type,
                        contentInfo.hostedAtURL);
                }
                catch(e)
                {
                    logEventDataError(eventName);
                    param1 = {};
                }
                af.publishEvent(OO.Analytics.EVENTS.VIDEO_CONTENT_METADATA_UPDATED, [param1]);
            });

            /**
             * Callback to map core message bus event to AnalyticsFramework event:
             * OO.EVENTS.METADATA_FETCHED -> OO.Analytics.EVENTS.VIDEO_STREAM_METADATA_UPDATED.
             * @private
             * @method AnalyticsFrameworkTranslator#onMetadataFetched
             * @param {string} eventName Core message bus event name
             * @param {object} metadata The Backdoor and Backlot metadata
             */
            var onMetadataFetched = privateMember(function(eventName, metadata)
            {
                var param1;
                try
                {
                    // TODO checkDataType
                    param1 = metadata;
                }
                catch(e)
                {
                    logEventDataError(eventName);
                    param1 = {};
                }
                af.publishEvent(OO.Analytics.EVENTS.VIDEO_STREAM_METADATA_UPDATED, [param1]);
            });

            /**
             * Callback to map core message bus event to AnalyticsFramework event:
             * OO.EVENTS.AUTHORIZATION_FETCHED -> OO.Analytics.STREAM_TYPE_UPDATED
             * @private
             * @method AnalyticsFrameworkTranslator#onAuthorizationFetched
             * @param {string} eventName Core message bus event name
             * @param {object} authMetadata Authorization metadata
             */
            var onAuthorizationFetched = privateMember(function(eventName, authMetadata)
            {
                var param1;
                try
                {
                    var streamType;

                    if (authMetadata && authMetadata.streams && authMetadata.streams[0]
                        && authMetadata.streams[0]['is_live_stream'])
                    {
                        streamType = OO.Analytics.STREAM_TYPE.LIVE_STREAM;
                    }
                    else
                    {
                        streamType = OO.Analytics.STREAM_TYPE.VOD;
                    }
                    param1 = new OO.Analytics.EVENT_DATA.StreamTypeMetadata(streamType);
                }
                catch(e)
                {
                    logEventDataError(eventName);
                    param1 = {};
                }
                af.publishEvent(OO.Analytics.EVENTS.STREAM_TYPE_UPDATED, [param1]);
            });

            /**
             * Callback to map core message bus event to AnalyticsFramework event:
             * OO.EVENTS.INITIAL_PLAY -> OO.Analytics.EVENTS.VIDEO_PLAY_REQUESTED.
             * @private
             * @method AnalyticsFrameworkTranslator#onInitialPlay
             * @param {string} eventName Core message bus event name
             */
            var onInitialPlay = privateMember(function(eventName)
            {
                af.publishEvent(OO.Analytics.EVENTS.INITIAL_PLAYBACK_REQUESTED);
            });

            /**
             * Callback to map core message bus event to AnalyticsFramework event:
             * OO.EVENTS.PLAY -> OO.Analytics.EVENTS.VIDEO_PLAY_REQUESTED.
             * @private
             * @method AnalyticsFrameworkTranslator#onPlay
             * @param {string} eventName Core message bus event name
             */
            var onPlay = privateMember(function(eventName)
            {
                af.publishEvent(OO.Analytics.EVENTS.VIDEO_PLAY_REQUESTED);
            });

            /**
             * Callback to map core message bus event to AnalyticsFramework event:
             * OO.EVENTS.DOWNLOADING -> OO.Analytics.EVENTS.VIDEO_STREAM_DOWNLOADING.
             * @private
             * @method AnalyticsFrameworkTranslator#onDownloading
             * @param {string} eventName Core message bus event name
             * @param {number} currentTime The current video position represented in seconds
             * @param {number} duration The total stream duration represented in seconds
             * @param {number} buffer Represents up until what time / video stream position (in seconds)
             * has been buffered
             * @param {object} seekRange Represents the range in which a user is able to seek
             */
            var onDownloading = privateMember(function(eventName, currentTime, duration, buffer, seekRange)
            {
                var param1;
                try
                {
                    param1 = new OO.Analytics.EVENT_DATA.VideoDownloadingMetadata(currentTime,
                        duration,
                        buffer,
                        seekRange.start,
                        seekRange.end);
                }
                catch(e)
                {
                    param1 = {};
                    logEventDataError(eventName);
                }
                af.publishEvent(OO.Analytics.EVENTS.VIDEO_STREAM_DOWNLOADING, [param1]);
            });

            /**
             * Callback to map core message bus event to AnalyticsFramework event:
             * OO.EVENTS.BUFFERING -> OO.Analytics.EVENTS.VIDEO_BUFFERING_STARTED.
             * @private
             * @method AnalyticsFrameworkTranslator#onBuffering
             * @param {string} eventName Core message bus event name
             * @param {string} url The stream url
             */
            var onBuffering = privateMember(function(eventName, url)
            {
                var param1;
                try
                {
                    param1 = new OO.Analytics.EVENT_DATA.VideoBufferingStartedData(url);
                }
                catch(e)
                {
                    logEventDataError(eventName);
                    param1 = {};
                }
                af.publishEvent(OO.Analytics.EVENTS.VIDEO_BUFFERING_STARTED, [param1]);
            });

            /**
             * Callback to map core message bus event to AnalyticsFramework event:
             * OO.EVENTS.BUFFERED -> OO.Analytics.EVENTS.VIDEO_BUFFERING_ENDED.
             * @private
             * @method AnalyticsFrameworkTranslator#onBuffered
             * @param {string} eventName Core message bus event name
             * @param {string} url The stream url
             */
            var onBuffered = privateMember(function(eventName, url)
            {
                var param1;
                try
                {
                    param1 = new OO.Analytics.EVENT_DATA.VideoBufferingEndedData(url);
                }
                catch(e)
                {
                    logEventDataError(eventName);
                    param1 = {};
                }
                af.publishEvent(OO.Analytics.EVENTS.VIDEO_BUFFERING_ENDED, [param1]);
            });

            /**
             * Callback to map core message bus event to AnalyticsFramework event:
             * OO.EVENTS.BITRATE_INFO_AVAILABLE -> OO.Analytics.EVENTS.VIDEO_STREAM_BITRATE_PROFILES.
             * @private
             * @method AnalyticsFrameworkTranslator#onBitrateInfoAvailable
             * @param {string} eventName Core message bus event name
             * @param {array} bitrateProfiles An array of all the bitrate profiles
             */
            var onBitrateInfoAvailable = privateMember(function(eventName, bitrateProfiles)
            {
                var param1;
                try
                {
                    param1 = new OO.Analytics.EVENT_DATA.VideoBitrateProfileLookupData(bitrateProfiles.bitrates);
                }
                catch(e)
                {
                    logEventDataError(eventName);
                    param1 = {};
                }
                af.publishEvent(OO.Analytics.EVENTS.VIDEO_STREAM_BITRATE_PROFILES, [param1]);
            });

            /**
             * Callback to map core message bus event to AnalyticsFramework event:
             * OO.EVENTS.SET_TARGET_BITRATE -> OO.Analytics.EVENTS.VIDEO_STREAM_TARGET_BITRATE_REQUESTED.
             * @private
             * @method AnalyticsFrameworkTranslator#onSetTargetBitrate
             * @param {string} eventName Core message bus event name
             * @param {string} bitrateProfileId The id of the bitrate profile requested
             */
            var onSetTargetBitrate = privateMember(function(eventName, bitrateProfileId)
            {
                var param1;
                try
                {
                    param1 = new OO.Analytics.EVENT_DATA.VideoTargetBitrateData(bitrateProfileId);
                }
                catch(e)
                {
                    logEventDataError(eventName);
                    param1 = {};
                }
                af.publishEvent(OO.Analytics.EVENTS.VIDEO_STREAM_TARGET_BITRATE_REQUESTED, [param1]);
            });

            /**
             * Callback to map core message bus event to AnalyticsFramework event:
             * OO.EVENTS.BITRATE_CHANGED -> OO.Analytics.EVENTS.VIDEO_STREAM_BITRATE_CHANGED.
             * @private
             * @method AnalyticsFrameworkTranslator#onBitrateChanged
             * @param {string} eventName Core message bus event name
             * @param {object} bitrateProfile An object containing the bitrate profile data of the new stream
             */
            var onBitrateChanged = privateMember(function(eventName, bitrateProfile)
            {
                var param1;
                try
                {
                    param1 = new OO.Analytics.EVENT_DATA.VideoBitrateProfileData(bitrateProfile);
                }
                catch(e)
                {
                    logEventDataError(eventName);
                    param1 = {};
                }
                af.publishEvent(OO.Analytics.EVENTS.VIDEO_STREAM_BITRATE_CHANGED, [param1]);
            });

            /**
             * Callback to map core message bus event to AnalyticsFramework event:
             * OO.EVENTS.PLAYING -> OO.Analytics.EVENTS.VIDEO_PLAYING.
             * @private
             * @method AnalyticsFrameworkTranslator#onPlaying
             * @param {string} eventName Core message bus event name
             */
            var onPlaying = privateMember(function(eventName)
            {
                af.publishEvent(OO.Analytics.EVENTS.VIDEO_PLAYING);
            });

            /**
             * Callback to map core message bus event to AnalyticsFramework event:
             * OO.EVENTS.PLAYHEAD_TIME_CHANGED -> OO.Analytics.EVENTS.VIDEO_STREAM_POSITION_CHANGED.
             * @private
             * @method AnalyticsFrameworkTranslator#onPlayheadTimeChanged
             * @param {string} eventName Core message bus event name
             * @param {number} playheadPosition New playhead position in the current stream
             * @param {number} streamDuration Current streams total duration
             * @param {number} buffer The amount of the stream that has been buffered
             * @param {object} seekRange The available seek range given as {end:number, start:number}
             * @param {string} videoId Id used to differentiate between various streams (such as ad vs content playback).
             *                         Possible values are defined in OO.VIDEO.
             */
            var onPlayheadTimeChanged = privateMember(function(eventName, playheadPosition, streamDuration, buffer, seekRange, videoId)
            {
                var param1;
                try
                {
                    param1 = new OO.Analytics.EVENT_DATA.VideoStreamPositionChangedData(playheadPosition, streamDuration, videoId);
                }
                catch(e)
                {
                    logEventDataError(eventName);
                    param1 = {};
                }
                af.publishEvent(OO.Analytics.EVENTS.VIDEO_STREAM_POSITION_CHANGED, [param1]);
            });

            /**
             * Callback to map core message bus event to AnalyticsFramework event:
             * OO.EVENTS.PLAYED -> OO.Analytics.EVENTS.PLAYBACK_COMPLETED.
             * @private
             * @method AnalyticsFrameworkTranslator#onPlayed
             * @param {string} eventName Core message bus event name
             */
            var onPlayed = privateMember(function(eventName)
            {
                af.publishEvent(OO.Analytics.EVENTS.PLAYBACK_COMPLETED);
            });

            /**
             * Callback to map core message bus event to AnalyticsFramework event:
             * OO.EVENTS.PAUSE -> OO.Analytics.EVENTS.VIDEO_PAUSE_REQUESTED.
             * @private
             * @method AnalyticsFrameworkTranslator#onPause
             * @param {string} eventName Core message bus event name
             */
            var onPause = privateMember(function(eventName)
            {
                af.publishEvent(OO.Analytics.EVENTS.VIDEO_PAUSE_REQUESTED);
            });

            /**
             * Callback to map core message bus event to AnalyticsFramework event:
             * OO.EVENTS.PAUSED -> OO.Analytics.EVENTS.VIDEO_PAUSED.
             * @private
             * @method AnalyticsFrameworkTranslator#onPaused
             * @param {string} eventName Core message bus event name
             */
            var onPaused = privateMember(function(eventName)
            {
                af.publishEvent(OO.Analytics.EVENTS.VIDEO_PAUSED);
            });

            /**
             * Callback to map core message bus event to AnalyticsFramework event:
             * OO.EVENTS.REPLAY -> OO.Analytics.EVENTS.VIDEO_REPLAY_REQUESTED.
             * @private
             * @method AnalyticsFrameworkTranslator#onReplay
             * @param {string} eventName Core message bus event name
             */
            var onReplay = privateMember(function(eventName)
            {
                af.publishEvent(OO.Analytics.EVENTS.VIDEO_REPLAY_REQUESTED);
            });

            /**
             * Callback to map core message bus event to AnalyticsFramework event:
             * OO.EVENTS.SEEK -> OO.Analytics.EVENTS.VIDEO_SEEK_REQUESTED.
             * @private
             * @method AnalyticsFrameworkTranslator#onSeek
             * @param {string} eventName Core message bus event name
             * @param {number} playhead The video stream position (in seconds) to seek to
             */
            var onSeek = privateMember(function(eventName, playhead)
            {
                var param1;
                try
                {
                    param1 = new OO.Analytics.EVENT_DATA.VideoSeekRequestedData(playhead);
                }
                catch(e)
                {
                    logEventDataError(eventName);
                    param1 = {};
                }
                af.publishEvent(OO.Analytics.EVENTS.VIDEO_SEEK_REQUESTED, [param1]);
            });

            /**
             * Callback to map core message bus event to AnalyticsFramework event:
             * OO.EVENTS.SEEKED -> OO.Analytics.EVENTS.VIDEO_SEEK_COMPLETED.
             * @private
             * @method AnalyticsFrameworkTranslator#onSeeked
             * @param {string} eventName Core message bus event name
             * @param {number} playhead The video stream position (in seconds) after seeking
             */
            var onSeeked = privateMember(function(eventName, playhead)
            {
                var param1;
                try
                {
                    param1 = new OO.Analytics.EVENT_DATA.VideoSeekCompletedData(playhead);
                }
                catch(e)
                {
                    logEventDataError(eventName);
                    param1 = {};
                }
                af.publishEvent(OO.Analytics.EVENTS.VIDEO_SEEK_COMPLETED, [param1]);
            });

            /**
             * Callback from core message bus event OO.EVENTS.WILL_PLAY_ADS.
             * @private
             * @method AnalyticsFrameworkTranslator#onWillPlayAds
             * @param {string} eventName Core message bus event name
             */
            var onWillPlayAds = privateMember(function(eventName)
            {
                adMode = true;
            });

            /**
             * Callback to map core message bus event to AnalyticsFramework event:
             * OO.EVENTS.AD_POD_STARTED -> OO.Analytics.EVENTS.AD_POD_STARTED.
             * @private
             * @method AnalyticsFrameworkTranslator#onAdPodStarted
             * @param {string} eventName Core message bus event name
             * @param {number} numberOfAds The number of ads in the ad pod
             */
            var onAdPodStarted = privateMember(function(eventName, numberOfAds)
            {
                var param1;
                try
                {
                    param1 = new OO.Analytics.EVENT_DATA.AdPodStartedData(numberOfAds);
                }
                catch(e)
                {
                    logEventDataError(eventName);
                    param1 = {};
                }

                var eventParam = [param1];
                if (singleAdStarted)
                {
                    sendAdPodStartedEvent(eventParam);
                }
                else
                {
                    lastAdPodStartedParam = eventParam;
                }
            });

            /**
             * Publishes the OO.Analytics.AD_POD_STARTED analytics event.
             * @private
             * @method AnalyticsFrameworkTranslator#sendAdPodStartedEvent
             * @param {object} param The desired parameter to publish with the event
             */
            var sendAdPodStartedEvent = privateMember(function(param)
            {
                param = param ? param : [{}];
                af.publishEvent(OO.Analytics.EVENTS.AD_POD_STARTED, param);
            });

            /**
             * Callback to map core message bus event to AnalyticsFramework event:
             * OO.EVENTS.AD_POD_ENDED -> OO.Analytics.EVENTS.AD_POD_ENDED.
             * @private
             * @method AnalyticsFrameworkTranslator#onAdPodEnded
             * @param {string} eventName Core message bus event name
             * @param {string} adId The id of the ad pod
             */
            var onAdPodEnded = privateMember(function(eventName, adId)
            {
                if (singleAdStarted)
                {
                    var param1;
                    try
                    {
                        param1 = new OO.Analytics.EVENT_DATA.AdPodEndedData(adId);
                    }
                    catch(e)
                    {
                        logEventDataError(eventName);
                        param1 = {};
                    }
                    af.publishEvent(OO.Analytics.EVENTS.AD_POD_ENDED, [param1]);
                }
            });

            /**
             * Callback to map core message bus event to AnalyticsFramework event:
             * OO.EVENTS.WILL_PLAY_SINGLE_AD -> OO.Analytics.EVENTS.AD_STARTED.
             * @private
             * @method AnalyticsFrameworkTranslator#onWillPlaySingleAd
             * @param {string} eventName Core message bus event name
             * @param {object} adMetadata The ad metadata
             */
            var onWillPlaySingleAd = privateMember(function(eventName, adMetadata)
            {
                // If we have not started an ad yet, we need to publish the AD_BREAK
                // and AD_POD started events
                if (!singleAdStarted)
                {
                    af.publishEvent(OO.Analytics.EVENTS.AD_BREAK_STARTED);

                    sendAdPodStartedEvent(lastAdPodStartedParam);
                    lastAdPodStartedParam = null;
                }

                singleAdStarted = true;

                impressionMade = false;
                var param1;
                try
                {
                    param1 = new OO.Analytics.EVENT_DATA.AdStartedData(OO.Analytics.AD_TYPE.LINEAR_VIDEO, adMetadata);
                }
                catch(e)
                {
                    logEventDataError(eventName);
                    param1 = {};
                }
                af.publishEvent(OO.Analytics.EVENTS.AD_STARTED, [param1]);
            });

            /**
             * Callback to map core message bus event to AnalyticsFramework event:
             * OO.EVENTS.SINGLE_AD_PLAYED -> OO.Analytics.EVENTS.AD_ENDED.
             * @private
             * @method AnalyticsFrameworkTranslator#onSingleAdPlayed
             * @param {string} eventName Core message bus event name
             * @param {string} adId The id of the ad
             */
            var onSingleAdPlayed = privateMember(function(eventName, adId)
            {
                var param1;
                try
                {
                    param1 = new OO.Analytics.EVENT_DATA.AdEndedData(OO.Analytics.AD_TYPE.LINEAR_VIDEO, adId);
                }
                catch(e)
                {
                    logEventDataError(eventName);
                    param1 = {};
                }
                af.publishEvent(OO.Analytics.EVENTS.AD_ENDED, [param1]);
            });

            /**
             * Callback to map core message bus event to AnalyticsFramework event:
             * OO.EVENTS.WILL_PLAY_NONLINEAR_AD -> OO.Analytics.EVENTS.AD_STARTED.
             * @private
             * @method AnalyticsFrameworkTranslator#onWillPlayNonlinearAd
             * @param {string} eventName Core message bus event name
             * @param {string} adMetadata The ad metadata
             */
            var onWillPlayNonlinearAd = privateMember(function(eventName, adMetadata)
            {
                var param1;
                try
                {
                    param1 = new OO.Analytics.EVENT_DATA.AdStartedData(OO.Analytics.AD_TYPE.NONLINEAR_OVERLAY, adMetadata);
                }
                catch(e)
                {
                    logEventDataError(eventName);
                    param1 = {};
                }
                af.publishEvent(OO.Analytics.EVENTS.AD_STARTED, [param1]);
            });

            /**
             * Callback to map core message bus event to AnalyticsFramework event:
             * OO.EVENTS.NONLINEAR_AD_PLAYED -> OO.Analytics.EVENTS.AD_ENDED.
             * @private
             * @method AnalyticsFrameworkTranslator#onNonlinearAdPlayed
             * @param {string} eventName Core message bus event name
             * @param {string} adId The id of the ad
             */
            var onNonlinearAdPlayed = privateMember(function(eventName, adId)
            {
                var param1;
                try
                {
                    param1 = new OO.Analytics.EVENT_DATA.AdEndedData(OO.Analytics.AD_TYPE.NONLINEAR_OVERLAY, adId);
                }
                catch(e)
                {
                    logEventDataError(eventName);
                    param1 = {};
                }
                af.publishEvent(OO.Analytics.EVENTS.AD_ENDED, [param1]);
            });

            /**
             * Callback to map core message bus event to AnalyticsFramework event:
             * OO.EVENTS.ADS_PLAYED -> OO.Analytics.EVENTS.AD_BREAK_ENDED.
             * @private
             * @method AnalyticsFrameworkTranslator#onAdsPlayed
             * @param {string} eventName Core message bus event name
             */
            var onAdsPlayed = privateMember(function(eventName)
            {
                adMode = false;
                impressionMade = false;
                if (singleAdStarted)
                {
                    af.publishEvent(OO.Analytics.EVENTS.AD_BREAK_ENDED);
                }
                singleAdStarted = false;
                lastAdPodStartedParam = null;
            });

            /**
             * Callback to map core message bus event to AnalyticsFramework event:
             * OO.EVENTS.SKIP_AD -> OO.Analytics.EVENTS.AD_SKIPPED.
             * @private
             * @method AnalyticsFrameworkTranslator#onSkipAd
             * @param {string} eventName Core message bus event name
             */
            var onSkipAd = privateMember(function(eventName)
            {
                af.publishEvent(OO.Analytics.EVENTS.AD_SKIPPED);
            });

            /**
             * Callback to map core message bus event to AnalyticsFramework event:
             * OO.EVENTS.ADS_ERROR -> OO.Analytics.EVENTS.AD_ERROR.
             * @private
             * @method AnalyticsFrameworkTranslator#onAdsError
             * @param {string} eventName Core message bus event name
             * @param {string|object} error The string or object containing the error information
             */
            var onAdsError = privateMember(function(eventName, error)
            {
                var param1;
                try
                {
                    param1 = new OO.Analytics.EVENT_DATA.AdErrorData(error);
                }
                catch(e)
                {
                    logEventDataError(eventName);
                    param1 = {};
                }
                af.publishEvent(OO.Analytics.EVENTS.AD_ERROR, [param1]);
            });

            /**
             * Callback to map core message bus event to AnalyticsFramework event:
             * OO.EVENTS.ADS_CLICKTHROUGH_OPENED -> OO.Analytics.EVENTS.AD_CLICKTHROUGH_OPENED.
             * @private
             * @method AnalyticsFrameworkTranslator#onAdsClickthroughOpened
             * @param {string} eventName Core message bus event name
             */
            var onAdsClickthroughOpened = privateMember(function(eventName)
            {
                af.publishEvent(OO.Analytics.EVENTS.AD_CLICKTHROUGH_OPENED);
            });

            /**
             * Callback to map core message bus event to AnalyticsFramework event:
             * OO.EVENTS.FULLSCREEN_CHANGED -> OO.Analytics.EVENTS.FULLSCREEN_CHANGED.
             * @private
             * @method AnalyticsFrameworkTranslator#onFullscreenChanged
             * @param {string} eventName Core message bus event name
             * @param {boolean} changingToFullscreen Whether or not the player is entering fullscreen.
             * true represents that the player is entering fullscreen. false represents that the player is
             * exiting fullscreen.
             */
            var onFullscreenChanged = privateMember(function(eventName, changingToFullscreen)
            {
                var param1;
                try
                {
                    param1 = new OO.Analytics.EVENT_DATA.FullscreenChangedData(changingToFullscreen);
                }
                catch(e)
                {
                    logEventDataError(eventName);
                    param1 = {};
                }
                af.publishEvent(OO.Analytics.EVENTS.FULLSCREEN_CHANGED, [param1]);
            });

            /**
             * Callback to map core message bus event to AnalyticsFramework event:
             * OO.EVENTS.VOLUME_CHANGED -> OO.Analytics.EVENTS.VOLUME_CHANGED.
             * @private
             * @method AnalyticsFrameworkTranslator#onVolumeChanged
             * @param {string} eventName Core message bus event name
             * @param {number} volume The current volume after the change; the volume is a
             * value from 0 - 1, with 0 representing a muted state and 1 representing
             * the maximum volume.
             */
            var onVolumeChanged = privateMember(function(eventName, volume)
            {
                var param1;
                try
                {
                    param1 = new OO.Analytics.EVENT_DATA.VolumeChangedData(volume);
                }
                catch(e)
                {
                    logEventDataError(eventName);
                    param1 = {};
                }
                af.publishEvent(OO.Analytics.EVENTS.VOLUME_CHANGED, [param1]);
            });

            /**
             * Callback to map core message bus event to AnalyticsFramework event:
             * OO.EVENTS.DESTROY -> OO.Analytics.EVENTS.DESTROY.
             * @private
             * @method AnalyticsFrameworkTranslator#onDestroy
             * @param {string} eventName Core message bus event name
             */
            var onDestroy = privateMember(function(eventName)
            {
                af.publishEvent(OO.Analytics.EVENTS.DESTROY);
            });

            /**
             * Callback to map core message bus event to AnalyticsFramework event:
             * OO.EVENTS.VC_PLAYED -> OO.Analytics.EVENTS.VIDEO_CONTENT_COMPLETED.
             * @private
             * @method AnalyticsFrameworkTranslator#onVideoPlayed
             * @param {string} eventName Core message bus event name
             * @param {string} videoType The video type. It is either OO.VIDEO.MAIN or
             * OO.VIDEO.ADS.
             */
            var onVideoPlayed = privateMember(function(eventName, videoType)
            {
                if (videoType === OO.VIDEO.MAIN)
                {
                    af.publishEvent(OO.Analytics.EVENTS.VIDEO_CONTENT_COMPLETED);
                }
            });

            /**
             * Callback to map core message bus event to AnalyticsFramework event:
             * OO.EVENTS.VC_PLAYING -> OO.Analytics.EVENTS.AD_IMPRESSION.
             * @private
             * @method AnalyticsFrameworkTranslator#onVideoPlaying
             * @param {string} eventName Core message bus event name
             * @param {string} videoType The video type. It is either OO.VIDEO.MAIN or
             * OO.VIDEO.ADS.
             */
            var onVideoPlaying = privateMember(function(eventName, videoType)
            {
                if (videoType === OO.VIDEO.ADS && adMode && !impressionMade)
                {
                    impressionMade = true;
                    af.publishEvent(OO.Analytics.EVENTS.AD_IMPRESSION);
                }
            });

            /**
             * [DEPRECATED]
             * Callback to map core message bus event to AnalyticsFramework event:
             * OO.EVENTS.VC_PLAY_FAILED -> OO.Analytics.EVENTS.VIDEO_ERROR.
             * @private
             * @method AnalyticsFrameworkTranslator#onVideoPlayFailed
             * @param {string} eventName Core message bus event name
             * @param {string} videoType The video type. It is either OO.VIDEO.MAIN or
             * OO.VIDEO.ADS.
             * @param {string} code The error code number as a string
             */
            var onVideoPlayFailed = privateMember(function(eventName, videoType, code)
            {
                var param1;
                try
                {
                    param1 = new OO.Analytics.EVENT_DATA.VideoErrorData(code);
                }
                catch(e)
                {
                    logEventDataError(eventName);
                    param1 = {};
                }
                af.publishEvent(OO.Analytics.EVENTS.VIDEO_ERROR, [param1]);
            });

            /**
             * Callback to map core message bus event to AnalyticsFramework event:
             * OO.EVENTS.VC_VIDEO_ELEMENT_CREATED -> OO.Analytics.EVENTS.VIDEO_ELEMENT_CREATED.
             * @private
             * @method AnalyticsFrameworkTranslator#onVideoElementCreated
             * @param {string} eventName Core message bus event name
             * @param {string} videoType The video type. It is either OO.VIDEO.MAIN or
             * OO.VIDEO.ADS.
             */
            var onVideoElementCreated = privateMember(function(eventName, videoType)
            {
                if (videoType)
                {
                    var videoId = videoType.videoId;
                    //We only want to publish this info for main content
                    if (videoId === OO.VIDEO.MAIN)
                    {
                        var param1 = null;
                        try
                        {
                            param1 = new OO.Analytics.EVENT_DATA.VideoElementData(videoType.streamUrl);
                        }
                        catch(e)
                        {
                            logEventDataError(eventName);
                            param1 = {};
                        }
                        af.publishEvent(OO.Analytics.EVENTS.VIDEO_ELEMENT_CREATED, [param1]);
                    }
                }
            });

            /**
             * Callback to map core message bus event to AnalyticsFramework event:
             * OO.EVENTS.ERROR -> {OO.Analytics.EVENTS.ERROR.VIDEO, OO.Analytics.EVENTS.ERROR.AUTHORIZATION}.
             * @private
             * @method AnalyticsFrameworkTranslator#onError
             * @param {string} eventName Core message bus event name
             * @param {object} errorData Contains error code information
             * @param {string} errorData.code The Ooyala Error Event code
             */
            var onError = privateMember(function(eventName, errorData)
            {
                if (errorData && errorData.code)
                {
                    var errorCode = errorData.code;
                    var errorCategory = getErrorCategory(errorCode);
                    if (errorCategory)
                    {
                        var param1;
                        var errorMessage = OO.getLocalizedMessage(errorCode);
                        switch(errorCategory)
                        {
                            case "SAS":
                                param1 = new OO.Analytics.EVENT_DATA.AuthorizationErrorData(errorCode, errorMessage);
                                af.publishEvent(OO.Analytics.EVENTS.ERROR.AUTHORIZATION, [param1]);
                                break;
                            case "PLAYBACK":
                                param1 = new OO.Analytics.EVENT_DATA.VideoPlaybackErrorData(errorCode, errorMessage);
                                af.publishEvent(OO.Analytics.EVENTS.ERROR.VIDEO_PLAYBACK, [param1]);
                                break;
                            case "METADATA_LOADING":
                                param1 = new OO.Analytics.EVENT_DATA.MetadataLoadingErrorData(errorCode, errorMessage);
                                af.publishEvent(OO.Analytics.EVENTS.ERROR.METADATA_LOADING, [param1]);
                                break;
                            case "GENERAL":
                                param1 = new OO.Analytics.EVENT_DATA.GeneralErrorData(errorCode, errorMessage);
                                af.publishEvent(OO.Analytics.EVENTS.ERROR.GENERAL, [param1]);
                                break;
                        }
                    }
                    else
                    {
                        createErrorString("error while reporting error message - " +
                            "error code does not fall under a recognized category. " +
                            "error code provided is: " + errorCode);
                    }
                }
                else
                {
                    createErrorString("error while reporting error message - " +
                        "expected errorData is malformed: " + errorData);
                }
            });

            /**
             * Helper function to return the category (SAS/PLAYBACK) that the error falls under.
             * @private
             * @method AnalyticsFrameworkTranslator#getErrorCategory
             * @param {string} errorCode The Ooyala Player Error Code emitted by the error event
             * @returns {string} The corresponding error category.
             */
            var getErrorCategory = privateMember(function(errorCode)
            {
                var resultingCategory = null;
                var categories = _.keys(errorCategoryDictionary);
                for (var i = 0; i < categories.length; i++)
                {
                    var category = categories[i];
                    var availableErrors =  _.values(errorCategoryDictionary[category]);
                    if (_.contains(availableErrors, errorCode))
                    {
                        resultingCategory = category;
                        break;
                    }
                }
                return resultingCategory;
            });

            /**
             * Helper function to return an error string with the Analytics Framework Translator
             * prefix.
             * @private
             * @method AnalyticsFrameworkTranslator#createErrorString
             * @param {string} origStr the error string
             * @returns The new error string.
             */
            var createErrorString = privateMember(function(origStr)
            {
                return "Error AnalyticsFrameworkTranslator: " + origStr;
            });

            /**
             * Helper function to log the error string.
             * @private
             * @method AnalyticsFrameworkTranslator#logEventDataError
             * @param {string} eventName Core message bus event name
             */
            var logEventDataError = privateMember(function(eventName)
            {
                OO.log(createErrorString(eventName + " data changed and is causing an error."));
            });

            return AnalyticsFrameworkTranslator;
        });

        (function(OO, $, _) {
            //Reporter.js pulled from http://player.ooyala.com/static/cacheable/e2cf372a6253740de642bd014b679bfc/reporter.js on 5/10/17
            (function(){var a=typeof process!=="undefined"&&process.versions&&process.versions.node?global:window;if(typeof a.Ooyala=="undefined")a.Ooyala={};Ooyala.Util={};var b=function(c){if(typeof c!="string")throw"The namespace name must be a string.";var d=c.split(".");if(!(d.length>0))throw"The namespace '"+c+"' is not valid.";for(var e=a,f=0;f<d.length;f++){var h=d[f];if(!(h.length>0))throw"The namespace '"+c+"' is not valid.";if(e[h]){var i=d.slice(0,f).join(".");if(typeof e[h]!="object")throw"Namespace error: the name '"+
            i+"' already exists and is not a namespace.";}else e[h]={};e=e[h]}};b("Ooyala.Util");Ooyala.Util.createNamespace=b})();Ooyala.Util.getOwnProperties=function(a){var b=[];for(var c in a)a.hasOwnProperty(c)&&b.push(c);return b};Ooyala.Util.extend=function(a,b){for(var c in b)if(b.hasOwnProperty(c)&&a[c]==undefined)a[c]=b[c]};Ooyala.Util.createNamespace("Ooyala.Util");Ooyala.Util.bind=function(a,b){var c=Array.prototype.slice.call(arguments,2);return function(){return a.apply(b,c.concat(Array.prototype.slice.call(arguments)))}};Ooyala.Util.createNamespace("Ooyala.Util.Enumerable");
            Ooyala.Util.extend(Ooyala.Util.Enumerable,{_checkFunction:function(a){if(typeof a!="function")throw new TypeError;},foreach:function(a,b){this._checkFunction(b);for(var c=0;c<a.length;c++)b.call(undefined,a[c])},map:function(a,b){this._checkFunction(b);var c=[];Ooyala.Util.Enumerable.foreach(a,function(d){c.push(b.call(undefined,d))});return c},select:function(a,b){this._checkFunction(b);var c=[];Ooyala.Util.Enumerable.foreach(a,function(d){b.call(undefined,d)&&c.push(d)});return c},reject:function(a,
b){return this.select(a,function(c){return!b.call(undefined,c)})}});Ooyala.Util.createNamespace("Ooyala.Util.Http");Ooyala.Util.Http._XMLHttpRequestFactories=[function(){return new XMLHttpRequest},function(){return new ActiveXObject("Microsoft.XMLHTTP")},function(){return new ActiveXObject("MSXML2.XMLHTTP.3.0")},function(){return new ActiveXObject("MSXML2.XMLHTTP")}];Ooyala.Util.Http._XMLHttpRequestFactory=null;
            Ooyala.Util.Http.createXMLHttpRequest=function(){if(Ooyala.Util.Http._XMLHttpRequestFactory!=null)return Ooyala.Util.Http._XMLHttpRequestFactory();for(var a=0;a<Ooyala.Util.Http._XMLHttpRequestFactories.length;a++)try{var b=Ooyala.Util.Http._XMLHttpRequestFactories[a],c=b();if(c!=null){Ooyala.Util.Http._XMLHttpRequestFactory=b;return c}}catch(d){}Ooyala.Util.Http._XMLHttpRequestFactory=function(){throw"XMLHttpRequest not supported.";};Ooyala.Util.Http._XMLHttpRequestFactory()};Ooyala.Util.CookieManager=function(a,b,c){this._cookieName=a;this._daysToLive=b;this._compareFn=c;this._keysValuesHash={};this._cookiesEnabled=window.navigator.cookieEnabled;Ooyala.Util.CookieManager.cookieNames.push(a)};Ooyala.Util.CookieManager.MAX_COOKIE_SIZE=2048;Ooyala.Util.CookieManager.cookieNames=[];
            Ooyala.Util.CookieManager.prototype={deDupe:function(){for(var a=this._readAllCookies(this._cookieName),b=0;b<a.length;b++)this._updateHashFromString(a[b]);this._writeCookie(this._cookieName,this._updateStringFromHash());this._destroyCookies(this._cookieName)},get:function(a){if(!this._cookiesEnabled)return null;this._updateHashFromString(this._readCookie(this._cookieName));return(a=this._keysValuesHash[a])?a:null},set:function(a,b){if(this._cookiesEnabled){this._keysValuesHash[a]=b.toString();this._writeCookie(this._cookieName,
                this._updateStringFromHash())}},_compare:function(a,b){return this._compareFn(this._keysValuesHash[b],this._keysValuesHash[a])},_updateHashFromString:function(a){if(a){a=a.split("&");for(var b=0;b<a.length;b++){var c=a[b],d=c.indexOf(":");if(d!=-1){var e=c.substring(0,d);c=c.substring(d+1);if(this._compareFn(this._keysValuesHash[e],c)<0)this._keysValuesHash[e]=c}}}},_updateStringFromHash:function(){for(var a=Ooyala.Util.getOwnProperties(this._keysValuesHash).sort(Ooyala.Util.bind(this._compare,this)),
                                                                                                                                                                                                                                                                                                                                                                                                                                          b="",c=this._cookieOverhead(this._cookieName),d=0;d<Ooyala.Util.CookieManager.cookieNames.length;d++){var e=Ooyala.Util.CookieManager.cookieNames[d];if(e!=this._cookieName)c+=this._cookieOverhead(e)+(this._readCookie(e)||"").length}for(d=0;d<a.length;d++){e=a[d];var f=this._keysValuesHash[e];if(c+b.length+e.length+f.length+(d==0?1:2)>Ooyala.Util.CookieManager.MAX_COOKIE_SIZE)break;b+=(d==0?"":"&")+e+":"+f}return b},_writeCookie:function(a,b){document.cookie=a+"="+b+"; expires="+this._getExpiryDate()+
                "; path=/;"},_readCookie:function(a){var b=document.cookie;if(!b)return null;a=a+"=";b=b.split(";");for(var c=0;c<b.length;c++){for(var d=b[c];d.charAt(0)==" ";)d=d.substring(1);if(d.indexOf(a)==0){a=d.substring(a.length,d.length);return a.length>0?a:null}}return null},_readAllCookies:function(a){var b=document.cookie,c=[];if(!b)return c;a=a+"=";b=b.split(";");for(var d=0;d<b.length;d++){for(var e=b[d];e.charAt(0)==" ";)e=e.substring(1);if(e.indexOf(a)==0){e=e.substring(a.length,e.length);e.length>
            0&&c.push(e)}}return c},_destroyCookies:function(a,b){if(a){b||(b=false);for(var c=document.location.pathname;;){var d=c.lastIndexOf("/");if(d===-1)break;if(d===0&&c.length===1)break;document.cookie=a+"=; expires=Thu, 01 Jan 1970 00:00:01 GMT; path="+c+";";c=c.substring(0,d)}if(b)document.cookie=a+"=; expires=Thu, 01 Jan 1970 00:00:01 GMT; path=/;"}},_cookieOverhead:function(a){return a.length+this._getExpiryDate().length+10+9},_getExpiryDate:function(){var a=(new Date).getTime();return(new Date(a+
                this._daysToLive*24*60*60*1E3)).toGMTString()}};Ooyala.Util.createNamespace("Ooyala.Util");
            Ooyala.Util.extend(Ooyala.Util,{base64Encode:function(a){for(var b="",c,d,e,f,h,i,g=0;g<a.length;){c=a[g++];d=a[g++];e=a[g++];f=c>>2;c=(c&3)<<4|d>>4;h=(d&15)<<2|e>>6;i=e&63;if(isNaN(d))h=i=64;else if(isNaN(e))i=64;b=b+"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".charAt(f)+"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".charAt(c)+"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".charAt(h)+"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".charAt(i)}return b},utf8Encode:function(a){a=
                a.replace(/\r\n/g,"\n");for(var b="",c=0;c<a.length;c++){var d=a.charCodeAt(c);if(d<128)b+=String.fromCharCode(d);else{if(d>127&&d<2048)b+=String.fromCharCode(d>>6|192);else{b+=String.fromCharCode(d>>12|224);b+=String.fromCharCode(d>>6&63|128)}b+=String.fromCharCode(d&63|128)}}return b},encodeDouble:function(a){var b=Array(8),c=a,d={len:8,mLen:52,rt:0},e,f,h,i,g,j;h=d.mLen;i=d.len*8-d.mLen-1;j=(1<<i)-1;g=j>>1;a=c<0?1:0;c=Math.abs(c);if(isNaN(c)||c==Infinity){c=isNaN(c)?1:0;e=j}else{e=Math.floor(Math.log(c)/
                Math.LN2);if(c*(f=Math.pow(2,-e))<1){e--;f*=2}c+=e+g>=1?d.rt/f:d.rt*Math.pow(2,1-g);if(c*f>=2){e++;f/=2}if(e+g>=j){c=0;e=j}else if(e+g>=1){c=(c*f-1)*Math.pow(2,h);e+=g}else{c=c*Math.pow(2,g-1)*Math.pow(2,h);e=0}}for(d=d.len-1;h>=8;b[0+d]=c&255,d+=-1,c/=256,h-=8);e=e<<h|c;for(i+=h;i>0;b[0+d]=e&255,d+=-1,e/=256,i-=8);b[0+d- -1]|=a*128;return b}});(function(){var a={Type:{STOP:0,VOID:1,BOOL:2,BYTE:3,I08:3,DOUBLE:4,I16:6,I32:8,I64:10,STRING:11,UTF7:11,STRUCT:12,MAP:13,SET:14,LIST:15,UTF8:16,UTF16:17},MessageType:{CALL:1,REPLY:2,EXCEPTION:3}};a.TException={};a.TException.prototype={initialize:function(b,c){this.message=b;this.code=c==null?0:c}};a.TApplicationExceptionType={UNKNOWN:0,UNKNOWN_METHOD:1,INVALID_MESSAGE_TYPE:2,WRONG_METHOD_NAME:3,BAD_SEQUENCE_ID:4,MISSING_RESULT:5};a.TApplicationException=function(b,c){this.message=b;this.code=c==
            null?0:c};a.TApplicationException.prototype={read:function(b){var c,d=b.readStructBegin(fname);for(this.fname=d.fname;;){d=b.readFieldBegin();if(d.ftype==TType.STOP)break;c=d.fid;switch(c){case 1:if(d.ftype==Type.STRING){d=b.readString();this.message=d.value}else b.skip(d.ftype);break;case 2:if(d.ftype==Type.I32){d=b.readI32();this.code=d.value}else b.skip(d.ftype);break;default:b.skip(d.ftype);break}b.readFieldEnd()}b.readStructEnd()},write:function(b){b.writeStructBegin("TApplicationException");
                if(this.message){b.writeFieldBegin("message",Type.STRING,1);b.writeString(this.getMessage());b.writeFieldEnd()}if(this.code){b.writeFieldBegin("type",Type.I32,2);b.writeI32(this.code);b.writeFieldEnd()}b.writeFieldStop();b.writeStructEnd()},getCode:function(){return this.code},getMessage:function(){return this.message}};a.Transport=function(b){this.url=b;this.rpos=this.wpos=0;this.recv_buf=this.send_buf=""};a.Transport.prototype={getXmlHttpRequestObject:function(){try{return new XMLHttpRequest}catch(b){}try{return new ActiveXObject("Msxml2.XMLHTTP")}catch(c){}try{return new ActiveXObject("Microsoft.XMLHTTP")}catch(d){}throw"Your browser doesn't support the XmlHttpRequest object.  Try upgrading to Firefox.";
            },flush:function(){if(this.url==undefined||this.url=="")return this.send_buf;var b=this.getXmlHttpRequestObject();b.overrideMimeType&&b.overrideMimeType("application/json");b.open("POST",this.url,false);b.send(this.send_buf);if(b.readyState!=4)throw"encountered an unknown ajax ready state: "+b.readyState;if(b.status!=200)throw"encountered a unknown request status: "+b.status;this.recv_buf=b.responseText;this.wpos=this.recv_buf_sz=this.recv_buf.length;this.rpos=0},setRecvBuffer:function(b){this.recv_buf=
                b;this.wpos=this.recv_buf_sz=this.recv_buf.length;this.rpos=0},isOpen:function(){return true},open:function(){},close:function(){},read:function(b){var c=this.wpos-this.rpos;if(c==0)return"";var d=b;if(c<b)d=c;b=this.read_buf.substr(this.rpos,d);this.rpos+=d;return b},readAll:function(){return this.recv_buf},write:function(b){this.send_buf=b},getSendBuffer:function(){return this.send_buf}};a.Protocol=function(b){this.transport=b};a.Protocol.Type={};a.Protocol.Type[a.Type.BOOL]='"tf"';a.Protocol.Type[a.Type.BYTE]=
                '"i8"';a.Protocol.Type[a.Type.I16]='"i16"';a.Protocol.Type[a.Type.I32]='"i32"';a.Protocol.Type[a.Type.I64]='"i64"';a.Protocol.Type[a.Type.DOUBLE]='"dbl"';a.Protocol.Type[a.Type.STRUCT]='"rec"';a.Protocol.Type[a.Type.STRING]='"str"';a.Protocol.Type[a.Type.MAP]='"map"';a.Protocol.Type[a.Type.LIST]='"lst"';a.Protocol.Type[a.Type.SET]='"set"';a.Protocol.RType={};a.Protocol.RType.tf=a.Type.BOOL;a.Protocol.RType.i8=a.Type.BYTE;a.Protocol.RType.i16=a.Type.I16;a.Protocol.RType.i32=a.Type.I32;a.Protocol.RType.i64=
                a.Type.I64;a.Protocol.RType.dbl=a.Type.DOUBLE;a.Protocol.RType.rec=a.Type.STRUCT;a.Protocol.RType.str=a.Type.STRING;a.Protocol.RType.map=a.Type.MAP;a.Protocol.RType.lst=a.Type.LIST;a.Protocol.RType.set=a.Type.SET;a.Protocol.Version=1;a.Protocol.prototype={getTransport:function(){return this.transport},writeMessageBegin:function(b,c,d){this.tstack=[];this.tpos=[];this.tstack.push([a.Protocol.Version,'"'+b+'"',c,d])},writeMessageEnd:function(){var b=this.tstack.pop();this.wobj=this.tstack.pop();this.wobj.push(b);
                this.wbuf="["+this.wobj.join(",")+"]";this.transport.write(this.wbuf)},writeStructBegin:function(){this.tpos.push(this.tstack.length);this.tstack.push({})},writeStructEnd:function(){var b=this.tpos.pop(),c=this.tstack[b],d="{",e=true;for(var f in c){if(e)e=false;else d+=",";d+=f+":"+c[f]}d+="}";this.tstack[b]=d},writeFieldBegin:function(b,c,d){this.tpos.push(this.tstack.length);this.tstack.push({fieldId:'"'+d+'"',fieldType:a.Protocol.Type[c]})},writeFieldEnd:function(){var b=this.tstack.pop(),c=this.tstack.pop();
                this.tstack[this.tstack.length-1][c.fieldId]="{"+c.fieldType+":"+b+"}";this.tpos.pop()},writeFieldStop:function(){},writeMapBegin:function(b,c){this.tpos.push(this.tstack.length);this.tstack.push([a.Protocol.Type[b],a.Protocol.Type[c],0])},writeMapEnd:function(){var b=this.tpos.pop();if(b!=this.tstack.length){(this.tstack.length-b-1)%2!=0&&this.tstack.push("");this.tstack[b][this.tstack[b].length-1]=(this.tstack.length-b-1)/2;for(var c="{",d=true;this.tstack.length>b+1;){var e=this.tstack.pop(),f=
                this.tstack.pop();if(d)d=false;else c+=",";c+='"'+f+'":'+e}c+="}";this.tstack[b].push(c);this.tstack[b]="["+this.tstack[b].join(",")+"]"}},writeListBegin:function(b,c){this.tpos.push(this.tstack.length);this.tstack.push([a.Protocol.Type[b],c])},writeListEnd:function(){for(var b=this.tpos.pop();this.tstack.length>b+1;){var c=this.tstack[b+1];this.tstack.splice(b+1,1);this.tstack[b].push(c)}this.tstack[b]="["+this.tstack[b].join(",")+"]"},writeSetBegin:function(b,c){this.tpos.push(this.tstack.length);
                this.tstack.push([a.Protocol.Type[b],c])},writeSetEnd:function(){for(var b=this.tpos.pop();this.tstack.length>b+1;){var c=this.tstack[b+1];this.tstack.splice(b+1,1);this.tstack[b].push(c)}this.tstack[b]="["+this.tstack[b].join(",")+"]"},writeBool:function(b){this.tstack.push(b?1:0)},writeByte:function(b){this.tstack.push(b)},writeI16:function(b){this.tstack.push(b)},writeI32:function(b){this.tstack.push(b)},writeI64:function(b){this.tstack.push(b)},writeDouble:function(b){this.tstack.push(b)},writeString:function(b){this.tstack.push('"'+
                encodeURIComponent(b)+'"')},writeBinary:function(b){this.writeString(b)},readMessageBegin:function(){this.rstack=[];this.rpos=[];this.robj=eval(this.transport.readAll());var b={},c=this.robj.shift();if(c!=a.Protocol.Version)throw"Wrong thrift protocol version: "+c;b.fname=this.robj.shift();b.mtype=this.robj.shift();b.rseqid=this.robj.shift();this.rstack.push(this.robj.shift());return b},readMessageEnd:function(){},readStructBegin:function(){var b={};b.fname="";this.rstack[this.rstack.length-1]instanceof
            Array&&this.rstack.push(this.rstack[this.rstack.length-1].shift());return b},readStructEnd:function(){this.rstack[this.rstack.length-2]instanceof Array&&this.rstack.pop()},readFieldBegin:function(){var b={},c=-1,d=a.Type.STOP;for(var e in this.rstack[this.rstack.length-1])if(e!=null){c=parseInt(e);this.rpos.push(this.rstack.length);var f=this.rstack[this.rstack.length-1][c];delete this.rstack[this.rstack.length-1][c];this.rstack.push(f);break}if(c!=-1)for(e in this.rstack[this.rstack.length-1])if(a.Protocol.RType[e]!=
                null){d=a.Protocol.RType[e];this.rstack[this.rstack.length-1]=this.rstack[this.rstack.length-1][e]}b.fname="";b.ftype=d;b.fid=c;return b},readFieldEnd:function(){for(var b=this.rpos.pop();this.rstack.length>b;)this.rstack.pop()},readMapBegin:function(){var b=this.rstack.pop(),c={};c.ktype=a.Protocol.RType[b.shift()];c.vtype=a.Protocol.RType[b.shift()];c.size=b.shift();this.rpos.push(this.rstack.length);this.rstack.push(b.shift());return c},readMapEnd:function(){this.readFieldEnd()},readListBegin:function(){var b=
                this.rstack[this.rstack.length-1],c={};c.etype=a.Protocol.RType[b.shift()];c.size=b.shift();this.rpos.push(this.rstack.length);this.rstack.push(b);return c},readListEnd:function(){this.readFieldEnd()},readSetBegin:function(b,c){return this.readListBegin(b,c)},readSetEnd:function(){return this.readListEnd()},readBool:function(){var b=this.readI32();b.value=b!=null&&b.value=="1"?true:false;return b},readByte:function(){return this.readI32()},readI16:function(){return this.readI32()},readI32:function(b){if(b==
                undefined)b=this.rstack[this.rstack.length-1];var c={};if(b instanceof Array)c.value=b.length==0?undefined:b.shift();else if(b instanceof Object)for(var d in b){if(d!=null){this.rstack.push(b[d]);delete b[d];c.value=d;break}}else c.value=b;return c},readI64:function(){return this.readI32()},readDouble:function(){return this.readI32()},readString:function(){var b=this.readI32();b.value=decodeURIComponent(b.value);return b},readBinary:function(){return this.readString()},skip:function(){throw"skip not supported yet";
            }};Ooyala.Thrift=a})();Ooyala.Thrift.BinaryProtocol=function(a){this.transport=a};Ooyala.Thrift.BinaryProtocol.VERSION_MASK=4294901760;Ooyala.Thrift.BinaryProtocol.VERSION_1=2147549184;Ooyala.Thrift.BinaryProtocol.TYPE_MASK=255;
            Ooyala.Thrift.BinaryProtocol.prototype={getTransport:function(){return this.transport},writeMessageBegin:function(a,b,c){this.writeI16(Ooyala.Thrift.BinaryProtocol.VERSION_1>>16);this.writeI16(b);this.writeString(a);this.writeI32(c)},writeMessageEnd:function(){},writeStructBegin:function(){},writeStructEnd:function(){},writeFieldBegin:function(a,b,c){this.writeByte(b);this.writeI16(c)},writeFieldEnd:function(){},writeFieldStop:function(){this.writeByte(Ooyala.Thrift.Type.STOP)},writeMapBegin:function(a,
b,c){this.writeByte(a);this.writeByte(b);this.writeI32(c)},writeMapEnd:function(){},writeListBegin:function(a,b){this.writeByte(a);this.writeI32(b)},writeListEnd:function(){},writeSetBegin:function(a,b){this.writeByte(a);this.writeI32(b)},writeSetEnd:function(){},writeBool:function(a){this.writeByte(a?1:0)},writeByte:function(a){this.transport.write([a])},writeI16:function(a){this.transport.write([(a&65280)>>8,a&255])},writeI32:function(a){var b=a&65535;this.writeI16((a&4294901760)>>16);this.writeI16(b)},
                writeI64:function(a){var b=a&4294967295;this.writeI32(a/4294967296&4294967295);this.writeI32(b)},writeDouble:function(a){this.transport.write(Ooyala.Util.encodeDouble(a))},writeString:function(a){a=Ooyala.Util.utf8Encode(a);this.writeI32(a.length);for(var b=0;b<a.length;b++)this.writeByte(a.charCodeAt(b))},readMessageBegin:function(){},readMessageEnd:function(){},readStructBegin:function(){},readStructEnd:function(){},readFieldBegin:function(){},readFieldEnd:function(){},readMapBegin:function(){},
                readMapEnd:function(){},readListBegin:function(){},readListEnd:function(){},readSetBegin:function(){},readSetEnd:function(){},readBool:function(){},readByte:function(){},readI16:function(){},readI32:function(){},readI64:function(){},readDouble:function(){},readString:function(){},skip:function(){throw"skip not supported yet";}};Ooyala.Thrift.MemoryBufferTransport=function(a){this.buf=a||[];this.index=0};Ooyala.Thrift.MemoryBufferTransport.prototype={isOpen:function(){return true},open:function(){},close:function(){},read:function(a){var b=this.buf.slice(this.index,this.index+a);this.index+=a;if(this.index>this.buf.length)this.index=this.buf.length;return b},readAll:function(){return this.buf},write:function(a){this.buf=this.buf.concat(a)},flush:function(){},resetBuffer:function(){this.buf=[];this.index=0}};Ooyala.Thrift.Serializer=function(){this.transport=new Ooyala.Thrift.MemoryBufferTransport(null);this.protocol=new Ooyala.Thrift.BinaryProtocol(this.transport)};Ooyala.Thrift.Serializer.prototype={serialize:function(a){this.transport.resetBuffer();a.write(this.protocol);return this.transport.readAll()}};if(typeof Ooyala==="undefined")Ooyala={};if(typeof Ooyala.AdsLogging==="undefined")Ooyala.AdsLogging={};Ooyala.AdsLogging.AdFormat={VIDEO:1,OVERLAY:2,ENDCAP:3,COMPANION:4};Ooyala.AdsLogging.AdSourceId={OOYALA:1,DOUBLECLICK:2,LIGHTNINGCAST:3,YUME:4,TREMOR:5,ADSENSE:6,TV2N:7,OAS:8,ADTECH:9,SCANSCOUT:10,ATLAS:11,FREEWHEEL:12,OPENX:13,LIVERAIL:14,VAST:15,ADIFY:16,DART_ENTERPRISE:17,CBSI:18,BRIGHTROLL:19,UNKNOWN:20,ADAPTV:21,VIDEOPLAZA:22,SPOTXCHANGE:23};
            Ooyala.AdsLogging.AdPositionType={PREROLL:1,MIDROLL:2,POSTROLL:3,OVERLAY_POSITION:4,ENDSLATE:5,STANDALONE:6};Ooyala.AdsLogging.AdFailureReason={LOAD_ERROR:1,LOAD_TIMEOUT:2,LOAD_IO_ERROR:3,PREFETCH_ERROR:4,PREFETCH_TIMEOUT:5,PREFETCH_IO_ERROR:6,PLAY_ERROR:7,PLAY_TIMEOUT:8,PLAY_IO_ERROR:9,INVALID_PLAYER_CONFIGURATION:10,INVALID_AD_CONFIGURATION:11,AD_NOT_FOUND:12,EXCEPTION:13,AD_ERROR:14,INVALID_AD_RESPONSE:15,CONNECTION_ERROR:16,BUFFERING_TIMEOUT:17,POLICY_RESTRICTION:18};
            Ooyala.AdsLogging.AD_FORMAT_MAP={1:"video",2:"overlay",3:"endcap",4:"companion"};Ooyala.AdsLogging.AD_SOURCE_MAP={1:"ooyala",2:"doubleclick",3:"lightningcast",4:"yume",5:"tremor",6:"adsense",7:"tv2n",8:"oas",9:"adtech",10:"scanscout",11:"atlas",12:"freewheel",13:"openx",14:"liverail",15:"vast",16:"adify",17:"dart_enterprise",18:"cbsi",19:"brightroll",21:"adap-tv",22:"videoplaza",23:"spotxchange",20:"[unknown]"};
            Ooyala.AdsLogging.AD_POSITION_TYPE_MAP={1:"preroll",2:"midroll",3:"postroll",4:"overlay",5:"endslate",6:"standalone"};Ooyala.AdsLogging.AD_FAILURE_REASON_MAP={1:"loadError",2:"loadTimeout",3:"loadIOError",4:"prefetchError",5:"prefetchTimeout",6:"prefetchIOError",7:"playError",8:"playTimeout",9:"playIOError",10:"invalidPlayerConfiguration",11:"invalidAdConfiguration",12:"adNotFound",13:"exception",14:"adError",15:"invalidAdResponse",16:"connectionError",17:"bufferingTimeout",18:"policyRestriction"};
            Ooyala.AdsLogging.AdParams=function(a){this.string_key="";this.integer_key=0;this.value="";if(a!=null){if(null!=a.string_key)this.string_key=a.string_key;if(null!=a.integer_key)this.integer_key=a.integer_key;if(null!=a.value)this.value=a.value}};Ooyala.AdsLogging.AdParams.prototype={};
            Ooyala.AdsLogging.AdParams.prototype.read=function(a){for(var b=a.readStructBegin();;){b=a.readFieldBegin();var c=b.ftype;if(c==Ooyala.Thrift.Type.STOP)break;switch(b.fid){case 1:if(c==Ooyala.Thrift.Type.STRING){b=a.readString();this.string_key=b.value}else a.skip(c);break;case 2:if(c==Ooyala.Thrift.Type.I32){b=a.readI32();this.integer_key=b.value}else a.skip(c);break;case 3:if(c==Ooyala.Thrift.Type.STRING){b=a.readString();this.value=b.value}else a.skip(c);break;default:a.skip(c)}a.readFieldEnd()}a.readStructEnd()};
            Ooyala.AdsLogging.AdParams.prototype.write=function(a){a.writeStructBegin("AdParams");if(null!=this.string_key){a.writeFieldBegin("string_key",Ooyala.Thrift.Type.STRING,1);a.writeString(this.string_key);a.writeFieldEnd()}if(null!=this.integer_key){a.writeFieldBegin("integer_key",Ooyala.Thrift.Type.I32,2);a.writeI32(this.integer_key);a.writeFieldEnd()}if(null!=this.value){a.writeFieldBegin("value",Ooyala.Thrift.Type.STRING,3);a.writeString(this.value);a.writeFieldEnd()}a.writeFieldStop();a.writeStructEnd()};
            Ooyala.AdsLogging.AdClick=function(a){this.clickUrl="";this.realTime=this.playheadTimeMillis=0;if(a!=null){if(null!=a.clickUrl)this.clickUrl=a.clickUrl;if(null!=a.playheadTimeMillis)this.playheadTimeMillis=a.playheadTimeMillis;if(null!=a.realTime)this.realTime=a.realTime}};Ooyala.AdsLogging.AdClick.prototype={};
            Ooyala.AdsLogging.AdClick.prototype.read=function(a){for(var b=a.readStructBegin();;){b=a.readFieldBegin();var c=b.ftype;if(c==Ooyala.Thrift.Type.STOP)break;switch(b.fid){case 1:if(c==Ooyala.Thrift.Type.STRING){b=a.readString();this.clickUrl=b.value}else a.skip(c);break;case 2:if(c==Ooyala.Thrift.Type.I32){b=a.readI32();this.playheadTimeMillis=b.value}else a.skip(c);break;case 3:if(c==Ooyala.Thrift.Type.I32){b=a.readI32();this.realTime=b.value}else a.skip(c);break;default:a.skip(c)}a.readFieldEnd()}a.readStructEnd()};
            Ooyala.AdsLogging.AdClick.prototype.write=function(a){a.writeStructBegin("AdClick");if(null!=this.clickUrl){a.writeFieldBegin("clickUrl",Ooyala.Thrift.Type.STRING,1);a.writeString(this.clickUrl);a.writeFieldEnd()}if(null!=this.playheadTimeMillis){a.writeFieldBegin("playheadTimeMillis",Ooyala.Thrift.Type.I32,2);a.writeI32(this.playheadTimeMillis);a.writeFieldEnd()}if(null!=this.realTime){a.writeFieldBegin("realTime",Ooyala.Thrift.Type.I32,3);a.writeI32(this.realTime);a.writeFieldEnd()}a.writeFieldStop();
                a.writeStructEnd()};
            Ooyala.AdsLogging.AdSpot=function(a){this.adSourceContentId=this.parentContentReportingIdIndex=this.adPositionInMillis=this.ooyalaAdReportingIdIndex=this.adPositionType=this.adFormat=this.adSource=0;this.passthroughParameters=this.tagUrl="";this.adId=0;if(a!=null){if(null!=a.adSource)this.adSource=a.adSource;if(null!=a.adFormat)this.adFormat=a.adFormat;if(null!=a.adPositionType)this.adPositionType=a.adPositionType;if(null!=a.ooyalaAdReportingIdIndex)this.ooyalaAdReportingIdIndex=a.ooyalaAdReportingIdIndex;
                if(null!=a.adPositionInMillis)this.adPositionInMillis=a.adPositionInMillis;if(null!=a.parentContentReportingIdIndex)this.parentContentReportingIdIndex=a.parentContentReportingIdIndex;if(null!=a.adSourceContentId)this.adSourceContentId=a.adSourceContentId;if(null!=a.tagUrl)this.tagUrl=a.tagUrl;if(null!=a.passthroughParameters)this.passthroughParameters=a.passthroughParameters;if(null!=a.adId)this.adId=a.adId}};Ooyala.AdsLogging.AdSpot.prototype={};
            Ooyala.AdsLogging.AdSpot.prototype.read=function(a){for(var b=a.readStructBegin();;){b=a.readFieldBegin();var c=b.ftype;if(c==Ooyala.Thrift.Type.STOP)break;switch(b.fid){case 1:if(c==Ooyala.Thrift.Type.BYTE){b=a.readByte();this.adSource=b.value}else a.skip(c);break;case 2:if(c==Ooyala.Thrift.Type.BYTE){b=a.readByte();this.adFormat=b.value}else a.skip(c);break;case 3:if(c==Ooyala.Thrift.Type.BYTE){b=a.readByte();this.adPositionType=b.value}else a.skip(c);break;case 4:if(c==Ooyala.Thrift.Type.BYTE){b=
                a.readByte();this.ooyalaAdReportingIdIndex=b.value}else a.skip(c);break;case 5:if(c==Ooyala.Thrift.Type.I32){b=a.readI32();this.adPositionInMillis=b.value}else a.skip(c);break;case 6:if(c==Ooyala.Thrift.Type.BYTE){b=a.readByte();this.parentContentReportingIdIndex=b.value}else a.skip(c);break;case 7:if(c==Ooyala.Thrift.Type.I32){b=a.readI32();this.adSourceContentId=b.value}else a.skip(c);break;case 8:if(c==Ooyala.Thrift.Type.STRING){b=a.readString();this.tagUrl=b.value}else a.skip(c);break;case 9:if(c==
                Ooyala.Thrift.Type.STRING){b=a.readString();this.passthroughParameters=b.value}else a.skip(c);break;case 10:if(c==Ooyala.Thrift.Type.I32){b=a.readI32();this.adId=b.value}else a.skip(c);break;default:a.skip(c)}a.readFieldEnd()}a.readStructEnd()};
            Ooyala.AdsLogging.AdSpot.prototype.write=function(a){a.writeStructBegin("AdSpot");if(null!=this.adSource){a.writeFieldBegin("adSource",Ooyala.Thrift.Type.BYTE,1);a.writeByte(this.adSource);a.writeFieldEnd()}if(null!=this.adFormat){a.writeFieldBegin("adFormat",Ooyala.Thrift.Type.BYTE,2);a.writeByte(this.adFormat);a.writeFieldEnd()}if(null!=this.adPositionType){a.writeFieldBegin("adPositionType",Ooyala.Thrift.Type.BYTE,3);a.writeByte(this.adPositionType);a.writeFieldEnd()}if(null!=this.ooyalaAdReportingIdIndex){a.writeFieldBegin("ooyalaAdReportingIdIndex",
                Ooyala.Thrift.Type.BYTE,4);a.writeByte(this.ooyalaAdReportingIdIndex);a.writeFieldEnd()}if(null!=this.adPositionInMillis){a.writeFieldBegin("adPositionInMillis",Ooyala.Thrift.Type.I32,5);a.writeI32(this.adPositionInMillis);a.writeFieldEnd()}if(null!=this.parentContentReportingIdIndex){a.writeFieldBegin("parentContentReportingIdIndex",Ooyala.Thrift.Type.BYTE,6);a.writeByte(this.parentContentReportingIdIndex);a.writeFieldEnd()}if(null!=this.adSourceContentId){a.writeFieldBegin("adSourceContentId",Ooyala.Thrift.Type.I32,
                7);a.writeI32(this.adSourceContentId);a.writeFieldEnd()}if(null!=this.tagUrl){a.writeFieldBegin("tagUrl",Ooyala.Thrift.Type.STRING,8);a.writeString(this.tagUrl);a.writeFieldEnd()}if(null!=this.passthroughParameters){a.writeFieldBegin("passthroughParameters",Ooyala.Thrift.Type.STRING,9);a.writeString(this.passthroughParameters);a.writeFieldEnd()}if(null!=this.adId){a.writeFieldBegin("adId",Ooyala.Thrift.Type.I32,10);a.writeI32(this.adId);a.writeFieldEnd()}a.writeFieldStop();a.writeStructEnd()};
            Ooyala.AdsLogging.AdTracking=function(a){this.playThroughCompletion=this.adSpotIndex=0;this.clickToVideo=false;this.clickUrl="";this.failureAfterAdImpression=this.dupClick=false;this.failureReason=0;if(a!=null){if(null!=a.adSpotIndex)this.adSpotIndex=a.adSpotIndex;if(null!=a.playThroughCompletion)this.playThroughCompletion=a.playThroughCompletion;if(null!=a.clickToVideo)this.clickToVideo=a.clickToVideo;if(null!=a.clickUrl)this.clickUrl=a.clickUrl;if(null!=a.dupClick)this.dupClick=a.dupClick;if(null!=
                a.failureAfterAdImpression)this.failureAfterAdImpression=a.failureAfterAdImpression;if(null!=a.failureReason)this.failureReason=a.failureReason}};Ooyala.AdsLogging.AdTracking.prototype={};
            Ooyala.AdsLogging.AdTracking.prototype.read=function(a){for(var b=a.readStructBegin();;){b=a.readFieldBegin();var c=b.ftype;if(c==Ooyala.Thrift.Type.STOP)break;switch(b.fid){case 1:if(c==Ooyala.Thrift.Type.BYTE){b=a.readByte();this.adSpotIndex=b.value}else a.skip(c);break;case 2:if(c==Ooyala.Thrift.Type.I16){b=a.readI16();this.playThroughCompletion=b.value}else a.skip(c);break;case 3:if(c==Ooyala.Thrift.Type.BOOL){b=a.readBool();this.clickToVideo=b.value}else a.skip(c);break;case 4:if(c==Ooyala.Thrift.Type.STRING){b=
                a.readString();this.clickUrl=b.value}else a.skip(c);break;case 5:if(c==Ooyala.Thrift.Type.BOOL){b=a.readBool();this.dupClick=b.value}else a.skip(c);break;case 6:if(c==Ooyala.Thrift.Type.BOOL){b=a.readBool();this.failureAfterAdImpression=b.value}else a.skip(c);break;case 7:if(c==Ooyala.Thrift.Type.BYTE){b=a.readByte();this.failureReason=b.value}else a.skip(c);break;default:a.skip(c)}a.readFieldEnd()}a.readStructEnd()};
            Ooyala.AdsLogging.AdTracking.prototype.write=function(a){a.writeStructBegin("AdTracking");if(null!=this.adSpotIndex){a.writeFieldBegin("adSpotIndex",Ooyala.Thrift.Type.BYTE,1);a.writeByte(this.adSpotIndex);a.writeFieldEnd()}if(null!=this.playThroughCompletion){a.writeFieldBegin("playThroughCompletion",Ooyala.Thrift.Type.I16,2);a.writeI16(this.playThroughCompletion);a.writeFieldEnd()}if(null!=this.clickToVideo){a.writeFieldBegin("clickToVideo",Ooyala.Thrift.Type.BOOL,3);a.writeBool(this.clickToVideo);
                a.writeFieldEnd()}if(null!=this.clickUrl){a.writeFieldBegin("clickUrl",Ooyala.Thrift.Type.STRING,4);a.writeString(this.clickUrl);a.writeFieldEnd()}if(null!=this.dupClick){a.writeFieldBegin("dupClick",Ooyala.Thrift.Type.BOOL,5);a.writeBool(this.dupClick);a.writeFieldEnd()}if(null!=this.failureAfterAdImpression){a.writeFieldBegin("failureAfterAdImpression",Ooyala.Thrift.Type.BOOL,6);a.writeBool(this.failureAfterAdImpression);a.writeFieldEnd()}if(null!=this.failureReason){a.writeFieldBegin("failureReason",
                Ooyala.Thrift.Type.BYTE,7);a.writeByte(this.failureReason);a.writeFieldEnd()}a.writeFieldStop();a.writeStructEnd()};if(typeof Ooyala==="undefined")Ooyala={};if(typeof Ooyala.CustomEventsLogging==="undefined")Ooyala.CustomEventsLogging={};Ooyala.CustomEventsLogging.Callee={AS:1,JS:2,OPF:3,OTHER:4};Ooyala.CustomEventsLogging.CalleeFormat={1:"actionscript api",2:"javascript api",3:"OPF api",4:"unknown api"};
            Ooyala.CustomEventsLogging.CustomEvent=function(a){this.event="";this.operations=[];this.callee=0;this.process=false;this.value=0;if(a!=null){if(null!=a.event)this.event=a.event;if(null!=a.operations)this.operations=a.operations;if(null!=a.callee)this.callee=a.callee;if(null!=a.process)this.process=a.process;if(null!=a.value)this.value=a.value}};Ooyala.CustomEventsLogging.CustomEvent.prototype={};
            Ooyala.CustomEventsLogging.CustomEvent.prototype.read=function(a){for(var b=a.readStructBegin();;){b=a.readFieldBegin();var c=b.ftype;if(c==Ooyala.Thrift.Type.STOP)break;switch(b.fid){case 1:if(c==Ooyala.Thrift.Type.STRING){var d=a.readString();this.event=d.value}else a.skip(c);break;case 2:if(c==Ooyala.Thrift.Type.LIST){b=0;this.operations=[];b=a.readListBegin().size;for(c=0;c<b;++c){d=null;d=a.readString();d=d.value;this.operations.push(d)}a.readListEnd()}else a.skip(c);break;case 3:if(c==Ooyala.Thrift.Type.BYTE){d=
                a.readByte();this.callee=d.value}else a.skip(c);break;case 4:if(c==Ooyala.Thrift.Type.BOOL){d=a.readBool();this.process=d.value}else a.skip(c);break;case 5:if(c==Ooyala.Thrift.Type.I32){d=a.readI32();this.value=d.value}else a.skip(c);break;default:a.skip(c)}a.readFieldEnd()}a.readStructEnd()};
            Ooyala.CustomEventsLogging.CustomEvent.prototype.write=function(a){a.writeStructBegin("CustomEvent");if(null!=this.event){a.writeFieldBegin("event",Ooyala.Thrift.Type.STRING,1);a.writeString(this.event);a.writeFieldEnd()}if(null!=this.operations){a.writeFieldBegin("operations",Ooyala.Thrift.Type.LIST,2);a.writeListBegin(Ooyala.Thrift.Type.STRING,this.operations.length);for(var b=0;b<this.operations.length;b++)a.writeString(this.operations[b]);a.writeListEnd();a.writeFieldEnd()}if(null!=this.callee){a.writeFieldBegin("callee",
                Ooyala.Thrift.Type.BYTE,3);a.writeByte(this.callee);a.writeFieldEnd()}if(null!=this.process){a.writeFieldBegin("process",Ooyala.Thrift.Type.BOOL,4);a.writeBool(this.process);a.writeFieldEnd()}if(null!=this.value){a.writeFieldBegin("value",Ooyala.Thrift.Type.I32,5);a.writeI32(this.value);a.writeFieldEnd()}a.writeFieldStop();a.writeStructEnd()};if(typeof Ooyala==="undefined")Ooyala={};if(typeof Ooyala.MetricsLogging==="undefined")Ooyala.MetricsLogging={};
            Ooyala.MetricsLogging.MetricsKey={TIME_TO_UI_READY:1,TIME_TO_PLAYBACK_READY:2,TIME_TO_START_SCREEN_IMAGE_DISPLAYED:3,TIME_FROM_PLAY_CLICK_TO_PLAY:4,TIME_TO_START_PLAY_WITH_AUTOPLAY:5,TIME_TO_LOAD_AD:6,TIME_TO_PREFETCH_AD:7,TIME_TO_PLAY_AD:8,USER_VIEWABLE_LATENCY_FOR_AD:9,TIME_TO_LOAD_AD_FAILURE:10,TIME_TO_PREFETCH_AD_FAILURE:11,TIME_TO_PLAY_AD_FAILURE:12,USER_VIEWABLE_LATENCY_FOR_AD_FAILURE:13,TIME_SPENT_BUFFERING:20,TIME_FROM_LOAD_TO_API_READY:30,TIME_FROM_PLAY_TO_PLAYBACK_STARTED:31};
            Ooyala.MetricsLogging.METRICS_KEY_TYPENAMES={1:"timeToUIReady",2:"timeToPlaybackReady",3:"timeToStartScreenImageDisplayed",5:"timeToStartPlayWithAutoplay",4:"timeFromPlayClickToPlay",6:"timeToLoadAd",7:"timeToPrefetchAd",8:"timeToPlayAd",9:"userViewableLatencyForAd",10:"timeToLoadAdFailure",11:"timeToPrefetchAdFailure",12:"timeToPlayAdFailure",13:"userViewableLatencyForAdFailure",20:"timeSpentBuffering",30:"timeFromLoadToAPIReady",31:"timeFromPlayToPlaybackStarted"};
            Ooyala.MetricsLogging.Metric=function(a){this.key=0;this.values=[];if(a!=null){if(null!=a.key)this.key=a.key;if(null!=a.values)this.values=a.values}};Ooyala.MetricsLogging.Metric.prototype={};
            Ooyala.MetricsLogging.Metric.prototype.read=function(a){for(var b=a.readStructBegin();;){b=a.readFieldBegin();var c=b.ftype;if(c==Ooyala.Thrift.Type.STOP)break;switch(b.fid){case 1:if(c==Ooyala.Thrift.Type.I16){var d=a.readI16();this.key=d.value}else a.skip(c);break;case 2:if(c==Ooyala.Thrift.Type.LIST){b=0;this.values=[];b=a.readListBegin().size;for(c=0;c<b;++c){d=null;d=a.readI32();d=d.value;this.values.push(d)}a.readListEnd()}else a.skip(c);break;default:a.skip(c)}a.readFieldEnd()}a.readStructEnd()};
            Ooyala.MetricsLogging.Metric.prototype.write=function(a){a.writeStructBegin("Metric");if(null!=this.key){a.writeFieldBegin("key",Ooyala.Thrift.Type.I16,1);a.writeI16(this.key);a.writeFieldEnd()}if(null!=this.values){a.writeFieldBegin("values",Ooyala.Thrift.Type.LIST,2);a.writeListBegin(Ooyala.Thrift.Type.I32,this.values.length);for(var b=0;b<this.values.length;b++)a.writeI32(this.values[b]);a.writeListEnd();a.writeFieldEnd()}a.writeFieldStop();a.writeStructEnd()};if(typeof Ooyala==="undefined")Ooyala={};if(typeof Ooyala.Logging==="undefined")Ooyala.Logging={};
            Ooyala.Logging.PlayerEventType={UNKNOWN:0,DISPLAY:1,PLAY:2,PERCENTAGE_WATCHED:3,SEEK:4,REPLAY:5,PAUSE:6,BUCKETS_WATCHED:7,TOTAL_TIME_PLAYED:8,BITRATE_PLAYED:9,DOWNLOAD:10,CHUNK_FAILOVER:11,BUFFER:12,CV_INFO:13,AD_CLICK:14,AD_IMPRESSION:15,AD_PLAYTHROUGH:16,AD_PLAY_FAILED:17,METRIC:18,PLAYER_LOAD:19,BITRATE_TRANSITION:20,BITRATES_AVAILABLE:21,SHARE:22,PAY_PER_VIEW:23,SAS_AUTHORIZE:24,SAS_AUTHORIZE_V2:25,AD_REQUESTED:26,AD_MOUSEOVER:27,VIDEO_START:28,CUSTOM:29,RELATED_VIDEO_SELECTED:30,RELATED_VIDEOS_DISPLAYED:31,
                PLAYTHROUGH_PERCENT:32};Ooyala.Logging.FileType={VIDEO_FILE:1,IMAGE:2,PLAYER:3,MODULE:4,XML:5};Ooyala.Logging.ChunkFailoverReason={UNKNOWN_REASON:0,READ_TIMEOUT:1,CONNECTION_TIMEOUT:2,CONNECTION_ERROR:3,CLOSE:4,DISCONNECTED:5};Ooyala.Logging.StreamFormat={VP6:1,H264:2,OTHER:3};Ooyala.Logging.PlayerEmbedType={JS:1,OBJECT:2,FLASH_IN_FLASH:3,EXTERNAL_ANALYTICS:4};Ooyala.Logging.BufferType={UNKNOWN_BUFFER_TYPE:0,LOW_BANDWIDTH:1,USER_INITIATED:2,CONNECTION_LOST:3};Ooyala.Logging.Gateway={PAYPAL:1,PAYMO:2};
            Ooyala.Logging.PayPerViewCheckoutType={CHECKOUT_PRESENTED:1,CHECKOUT_STARTED:2,CHECKOUT_FINISHED:3,CHECKOUT_CANCELLED:4,CHECKOUT_FAILED:5};Ooyala.Logging.ReportingIdType={GLOBAL:1,VIDEO:2,CHANNEL:3,CHANNEL_SET:4,PROVIDER:5};Ooyala.Logging.UserInfoSource={AKAMAI:1,MAXMIND:2,ENCRYPTED_SAS:3};
            Ooyala.Logging.PLAYER_EVENT_TYPENAMES={0:"unknown",1:"display",2:"play",3:"percentageWatched",4:"seek",5:"replay",6:"pause",7:"bucketsWatched",8:"totalTimePlayed",9:"bitratePlayed",10:"download",11:"chunkFailover",12:"buffer",13:"cvInfo",14:"adClick",27:"adMouseover",26:"adRequested",15:"adImpression",16:"adPlaythrough",17:"adPlayFailed",18:"metric",19:"playerLoad",20:"bitrateTransition",21:"bitratesAvailable",22:"share",23:"payPerView",24:"sasAuthorize",25:"sasAuthorizeV2",28:"videoStart",29:"customEvent",
                30:"relatedVideoSelected",31:"relatedVideoDisplayed",32:"playthroughPercent"};Ooyala.Logging.FILE_TYPENAMES={1:"video",2:"image",3:"player",4:"module",5:"xml"};Ooyala.Logging.STREAM_FORMAT_TYPENAMES={1:"vp6",2:"h264",3:"other"};Ooyala.Logging.PLAYER_EMBED_TYPENAMES={1:"js",2:"object",3:"flashInFlash",4:"externalAnalytics"};Ooyala.Logging.BUFFER_TYPENAMES={0:"unknown",1:"lowBandwidth",2:"userInitiated",3:"connectionLost"};Ooyala.Logging.GATEWAY_TYPENAMES={1:"paypal",2:"paymo"};
            Ooyala.Logging.PAY_PER_VIEW_CHECKOUT_TYPENAMES={1:"checkoutPresented",2:"checkoutStarted",3:"checkoutFinished",4:"checkoutCancelled",5:"checkoutFailed"};Ooyala.Logging.REPORTING_ID_TYPE_MAP={1:"global",2:"video",3:"channel",4:"channelSet",5:"provider"};
            Ooyala.Logging.DownloadStats=function(a){this.servingDomainId=0;this.fileTypeToBytesDownloaded={};this.servingDomain="";this.timesToFirstByte=[];this.avgTimeToFirstByte=this.numLatencyPoints=this.downloadTime=0;this.percentSingleConnection=100;this.totalSingleStreamPlayTime=this.totalSingleStreamBytes=this.bytesDownloadedFromSingleConnection=0;this.filetype=1;this.timeToFirstByte=this.bytesDownloaded=0;if(a!=null){if(null!=a.servingDomainId)this.servingDomainId=a.servingDomainId;if(null!=a.fileTypeToBytesDownloaded)this.fileTypeToBytesDownloaded=
                a.fileTypeToBytesDownloaded;if(null!=a.servingDomain)this.servingDomain=a.servingDomain;if(null!=a.timesToFirstByte)this.timesToFirstByte=a.timesToFirstByte;if(null!=a.downloadTime)this.downloadTime=a.downloadTime;if(null!=a.numLatencyPoints)this.numLatencyPoints=a.numLatencyPoints;if(null!=a.avgTimeToFirstByte)this.avgTimeToFirstByte=a.avgTimeToFirstByte;if(null!=a.percentSingleConnection)this.percentSingleConnection=a.percentSingleConnection;if(null!=a.bytesDownloadedFromSingleConnection)this.bytesDownloadedFromSingleConnection=
                a.bytesDownloadedFromSingleConnection;if(null!=a.totalSingleStreamBytes)this.totalSingleStreamBytes=a.totalSingleStreamBytes;if(null!=a.totalSingleStreamPlayTime)this.totalSingleStreamPlayTime=a.totalSingleStreamPlayTime;if(null!=a.filetype)this.filetype=a.filetype;if(null!=a.bytesDownloaded)this.bytesDownloaded=a.bytesDownloaded;if(null!=a.timeToFirstByte)this.timeToFirstByte=a.timeToFirstByte}};Ooyala.Logging.DownloadStats.prototype={};
            Ooyala.Logging.DownloadStats.prototype.read=function(a){for(var b=a.readStructBegin();;){b=a.readFieldBegin();var c=b.ftype;if(c==Ooyala.Thrift.Type.STOP)break;switch(b.fid){case 2:if(c==Ooyala.Thrift.Type.I32){b=a.readI32();this.servingDomainId=b.value}else a.skip(c);break;case 11:if(c==Ooyala.Thrift.Type.MAP){c=0;this.fileTypeToBytesDownloaded={};b=a.readMapBegin();c=b.size;for(var d=0;d<c;++d){val6=key5=0;b=a.readByte();key5=b.value;b=a.readI32();val6=b.value;this.fileTypeToBytesDownloaded[key5]=
                val6}a.readMapEnd()}else a.skip(c);break;case 15:if(c==Ooyala.Thrift.Type.STRING){b=a.readString();this.servingDomain=b.value}else a.skip(c);break;case 12:if(c==Ooyala.Thrift.Type.LIST){c=0;this.timesToFirstByte=[];b=a.readListBegin();c=b.size;for(d=0;d<c;++d){b=null;b=a.readI16();b=b.value;this.timesToFirstByte.push(b)}a.readListEnd()}else a.skip(c);break;case 5:if(c==Ooyala.Thrift.Type.I32){b=a.readI32();this.downloadTime=b.value}else a.skip(c);break;case 13:if(c==Ooyala.Thrift.Type.I16){b=a.readI16();
                this.numLatencyPoints=b.value}else a.skip(c);break;case 14:if(c==Ooyala.Thrift.Type.I16){b=a.readI16();this.avgTimeToFirstByte=b.value}else a.skip(c);break;case 6:if(c==Ooyala.Thrift.Type.BYTE){b=a.readByte();this.percentSingleConnection=b.value}else a.skip(c);break;case 7:if(c==Ooyala.Thrift.Type.I32){b=a.readI32();this.bytesDownloadedFromSingleConnection=b.value}else a.skip(c);break;case 8:if(c==Ooyala.Thrift.Type.I32){b=a.readI32();this.totalSingleStreamBytes=b.value}else a.skip(c);break;case 9:if(c==
                Ooyala.Thrift.Type.I32){b=a.readI32();this.totalSingleStreamPlayTime=b.value}else a.skip(c);break;case 1:if(c==Ooyala.Thrift.Type.BYTE){b=a.readByte();this.filetype=b.value}else a.skip(c);break;case 3:if(c==Ooyala.Thrift.Type.I32){b=a.readI32();this.bytesDownloaded=b.value}else a.skip(c);break;case 4:if(c==Ooyala.Thrift.Type.I32){b=a.readI32();this.timeToFirstByte=b.value}else a.skip(c);break;default:a.skip(c)}a.readFieldEnd()}a.readStructEnd()};
            Ooyala.Logging.DownloadStats.prototype.write=function(a){a.writeStructBegin("DownloadStats");if(null!=this.servingDomainId){a.writeFieldBegin("servingDomainId",Ooyala.Thrift.Type.I32,2);a.writeI32(this.servingDomainId);a.writeFieldEnd()}if(null!=this.fileTypeToBytesDownloaded){a.writeFieldBegin("fileTypeToBytesDownloaded",Ooyala.Thrift.Type.MAP,11);var b=0;for(key in this.fileTypeToBytesDownloaded)this.fileTypeToBytesDownloaded.hasOwnProperty(key)&&b++;a.writeMapBegin(Ooyala.Thrift.Type.BYTE,Ooyala.Thrift.Type.I32,
                b);for(var c in this.fileTypeToBytesDownloaded){b=this.fileTypeToBytesDownloaded[c];a.writeByte(c);a.writeI32(b)}a.writeMapEnd();a.writeFieldEnd()}if(null!=this.servingDomain){a.writeFieldBegin("servingDomain",Ooyala.Thrift.Type.STRING,15);a.writeString(this.servingDomain);a.writeFieldEnd()}if(null!=this.timesToFirstByte){a.writeFieldBegin("timesToFirstByte",Ooyala.Thrift.Type.LIST,12);a.writeListBegin(Ooyala.Thrift.Type.I16,this.timesToFirstByte.length);for(c=0;c<this.timesToFirstByte.length;c++)a.writeI16(this.timesToFirstByte[c]);
                a.writeListEnd();a.writeFieldEnd()}if(null!=this.downloadTime){a.writeFieldBegin("downloadTime",Ooyala.Thrift.Type.I32,5);a.writeI32(this.downloadTime);a.writeFieldEnd()}if(null!=this.numLatencyPoints){a.writeFieldBegin("numLatencyPoints",Ooyala.Thrift.Type.I16,13);a.writeI16(this.numLatencyPoints);a.writeFieldEnd()}if(null!=this.avgTimeToFirstByte){a.writeFieldBegin("avgTimeToFirstByte",Ooyala.Thrift.Type.I16,14);a.writeI16(this.avgTimeToFirstByte);a.writeFieldEnd()}if(null!=this.percentSingleConnection){a.writeFieldBegin("percentSingleConnection",
                Ooyala.Thrift.Type.BYTE,6);a.writeByte(this.percentSingleConnection);a.writeFieldEnd()}if(null!=this.bytesDownloadedFromSingleConnection){a.writeFieldBegin("bytesDownloadedFromSingleConnection",Ooyala.Thrift.Type.I32,7);a.writeI32(this.bytesDownloadedFromSingleConnection);a.writeFieldEnd()}if(null!=this.totalSingleStreamBytes){a.writeFieldBegin("totalSingleStreamBytes",Ooyala.Thrift.Type.I32,8);a.writeI32(this.totalSingleStreamBytes);a.writeFieldEnd()}if(null!=this.totalSingleStreamPlayTime){a.writeFieldBegin("totalSingleStreamPlayTime",
                Ooyala.Thrift.Type.I32,9);a.writeI32(this.totalSingleStreamPlayTime);a.writeFieldEnd()}if(null!=this.filetype){a.writeFieldBegin("filetype",Ooyala.Thrift.Type.BYTE,1);a.writeByte(this.filetype);a.writeFieldEnd()}if(null!=this.bytesDownloaded){a.writeFieldBegin("bytesDownloaded",Ooyala.Thrift.Type.I32,3);a.writeI32(this.bytesDownloaded);a.writeFieldEnd()}if(null!=this.timeToFirstByte){a.writeFieldBegin("timeToFirstByte",Ooyala.Thrift.Type.I32,4);a.writeI32(this.timeToFirstByte);a.writeFieldEnd()}a.writeFieldStop();
                a.writeStructEnd()};Ooyala.Logging.ChunkFailoverInfo=function(a){this.servingDomainId=this.reason=0;this.chunkShortUrl="";this.firstForUrl=this.firstForChunk=false;if(a!=null){if(null!=a.reason)this.reason=a.reason;if(null!=a.servingDomainId)this.servingDomainId=a.servingDomainId;if(null!=a.chunkShortUrl)this.chunkShortUrl=a.chunkShortUrl;if(null!=a.firstForChunk)this.firstForChunk=a.firstForChunk;if(null!=a.firstForUrl)this.firstForUrl=a.firstForUrl}};Ooyala.Logging.ChunkFailoverInfo.prototype={};
            Ooyala.Logging.ChunkFailoverInfo.prototype.read=function(a){for(var b=a.readStructBegin();;){b=a.readFieldBegin();var c=b.ftype;if(c==Ooyala.Thrift.Type.STOP)break;switch(b.fid){case 1:if(c==Ooyala.Thrift.Type.I32){b=a.readI32();this.reason=b.value}else a.skip(c);break;case 2:if(c==Ooyala.Thrift.Type.I32){b=a.readI32();this.servingDomainId=b.value}else a.skip(c);break;case 3:if(c==Ooyala.Thrift.Type.STRING){b=a.readString();this.chunkShortUrl=b.value}else a.skip(c);break;case 4:if(c==Ooyala.Thrift.Type.BOOL){b=
                a.readBool();this.firstForChunk=b.value}else a.skip(c);break;case 5:if(c==Ooyala.Thrift.Type.BOOL){b=a.readBool();this.firstForUrl=b.value}else a.skip(c);break;default:a.skip(c)}a.readFieldEnd()}a.readStructEnd()};
            Ooyala.Logging.ChunkFailoverInfo.prototype.write=function(a){a.writeStructBegin("ChunkFailoverInfo");if(null!=this.reason){a.writeFieldBegin("reason",Ooyala.Thrift.Type.I32,1);a.writeI32(this.reason);a.writeFieldEnd()}if(null!=this.servingDomainId){a.writeFieldBegin("servingDomainId",Ooyala.Thrift.Type.I32,2);a.writeI32(this.servingDomainId);a.writeFieldEnd()}if(null!=this.chunkShortUrl){a.writeFieldBegin("chunkShortUrl",Ooyala.Thrift.Type.STRING,3);a.writeString(this.chunkShortUrl);a.writeFieldEnd()}if(null!=
                this.firstForChunk){a.writeFieldBegin("firstForChunk",Ooyala.Thrift.Type.BOOL,4);a.writeBool(this.firstForChunk);a.writeFieldEnd()}if(null!=this.firstForUrl){a.writeFieldBegin("firstForUrl",Ooyala.Thrift.Type.BOOL,5);a.writeBool(this.firstForUrl);a.writeFieldEnd()}a.writeFieldStop();a.writeStructEnd()};
            Ooyala.Logging.PlayheadStatus=function(a){this.fromSeekTimeMillis=this.lastSeekTimeMillis=this.playheadTimeMillis=0;this.DEPRECATED_firstForVideo=this.DEPRECATED_firstForUser=false;if(a!=null){if(null!=a.playheadTimeMillis)this.playheadTimeMillis=a.playheadTimeMillis;if(null!=a.lastSeekTimeMillis)this.lastSeekTimeMillis=a.lastSeekTimeMillis;if(null!=a.fromSeekTimeMillis)this.fromSeekTimeMillis=a.fromSeekTimeMillis;if(null!=a.DEPRECATED_firstForUser)this.DEPRECATED_firstForUser=a.DEPRECATED_firstForUser;
                if(null!=a.DEPRECATED_firstForVideo)this.DEPRECATED_firstForVideo=a.DEPRECATED_firstForVideo}};Ooyala.Logging.PlayheadStatus.prototype={};
            Ooyala.Logging.PlayheadStatus.prototype.read=function(a){for(var b=a.readStructBegin();;){b=a.readFieldBegin();var c=b.ftype;if(c==Ooyala.Thrift.Type.STOP)break;switch(b.fid){case 1:if(c==Ooyala.Thrift.Type.I32){b=a.readI32();this.playheadTimeMillis=b.value}else a.skip(c);break;case 2:if(c==Ooyala.Thrift.Type.I32){b=a.readI32();this.lastSeekTimeMillis=b.value}else a.skip(c);break;case 4:if(c==Ooyala.Thrift.Type.I32){b=a.readI32();this.fromSeekTimeMillis=b.value}else a.skip(c);break;case 3:if(c==Ooyala.Thrift.Type.BOOL){b=
                a.readBool();this.DEPRECATED_firstForUser=b.value}else a.skip(c);break;case 5:if(c==Ooyala.Thrift.Type.BOOL){b=a.readBool();this.DEPRECATED_firstForVideo=b.value}else a.skip(c);break;default:a.skip(c)}a.readFieldEnd()}a.readStructEnd()};
            Ooyala.Logging.PlayheadStatus.prototype.write=function(a){a.writeStructBegin("PlayheadStatus");if(null!=this.playheadTimeMillis){a.writeFieldBegin("playheadTimeMillis",Ooyala.Thrift.Type.I32,1);a.writeI32(this.playheadTimeMillis);a.writeFieldEnd()}if(null!=this.lastSeekTimeMillis){a.writeFieldBegin("lastSeekTimeMillis",Ooyala.Thrift.Type.I32,2);a.writeI32(this.lastSeekTimeMillis);a.writeFieldEnd()}if(null!=this.fromSeekTimeMillis){a.writeFieldBegin("fromSeekTimeMillis",Ooyala.Thrift.Type.I32,4);a.writeI32(this.fromSeekTimeMillis);
                a.writeFieldEnd()}if(null!=this.DEPRECATED_firstForUser){a.writeFieldBegin("DEPRECATED_firstForUser",Ooyala.Thrift.Type.BOOL,3);a.writeBool(this.DEPRECATED_firstForUser);a.writeFieldEnd()}if(null!=this.DEPRECATED_firstForVideo){a.writeFieldBegin("DEPRECATED_firstForVideo",Ooyala.Thrift.Type.BOOL,5);a.writeBool(this.DEPRECATED_firstForVideo);a.writeFieldEnd()}a.writeFieldStop();a.writeStructEnd()};
            Ooyala.Logging.CvObjectClickInfo=function(a){this.oid=this.trackId="";this.clickTime=this.mouseY=this.mouseX=0;this.link=this.label="";this.outline=[];if(a!=null){if(null!=a.trackId)this.trackId=a.trackId;if(null!=a.oid)this.oid=a.oid;if(null!=a.mouseX)this.mouseX=a.mouseX;if(null!=a.mouseY)this.mouseY=a.mouseY;if(null!=a.clickTime)this.clickTime=a.clickTime;if(null!=a.label)this.label=a.label;if(null!=a.link)this.link=a.link;if(null!=a.outline)this.outline=a.outline}};
            Ooyala.Logging.CvObjectClickInfo.prototype={};
            Ooyala.Logging.CvObjectClickInfo.prototype.read=function(a){for(var b=a.readStructBegin();;){b=a.readFieldBegin();var c=b.ftype;if(c==Ooyala.Thrift.Type.STOP)break;switch(b.fid){case 1:if(c==Ooyala.Thrift.Type.STRING){var d=a.readString();this.trackId=d.value}else a.skip(c);break;case 2:if(c==Ooyala.Thrift.Type.STRING){d=a.readString();this.oid=d.value}else a.skip(c);break;case 3:if(c==Ooyala.Thrift.Type.DOUBLE){d=a.readDouble();this.mouseX=d.value}else a.skip(c);break;case 4:if(c==Ooyala.Thrift.Type.DOUBLE){d=
                a.readDouble();this.mouseY=d.value}else a.skip(c);break;case 5:if(c==Ooyala.Thrift.Type.DOUBLE){d=a.readDouble();this.clickTime=d.value}else a.skip(c);break;case 6:if(c==Ooyala.Thrift.Type.STRING){d=a.readString();this.label=d.value}else a.skip(c);break;case 7:if(c==Ooyala.Thrift.Type.STRING){d=a.readString();this.link=d.value}else a.skip(c);break;case 8:if(c==Ooyala.Thrift.Type.LIST){b=0;this.outline=[];b=a.readListBegin().size;for(c=0;c<b;++c){d=null;d=a.readDouble();d=d.value;this.outline.push(d)}a.readListEnd()}else a.skip(c);
                break;default:a.skip(c)}a.readFieldEnd()}a.readStructEnd()};
            Ooyala.Logging.CvObjectClickInfo.prototype.write=function(a){a.writeStructBegin("CvObjectClickInfo");if(null!=this.trackId){a.writeFieldBegin("trackId",Ooyala.Thrift.Type.STRING,1);a.writeString(this.trackId);a.writeFieldEnd()}if(null!=this.oid){a.writeFieldBegin("oid",Ooyala.Thrift.Type.STRING,2);a.writeString(this.oid);a.writeFieldEnd()}if(null!=this.mouseX){a.writeFieldBegin("mouseX",Ooyala.Thrift.Type.DOUBLE,3);a.writeDouble(this.mouseX);a.writeFieldEnd()}if(null!=this.mouseY){a.writeFieldBegin("mouseY",
                Ooyala.Thrift.Type.DOUBLE,4);a.writeDouble(this.mouseY);a.writeFieldEnd()}if(null!=this.clickTime){a.writeFieldBegin("clickTime",Ooyala.Thrift.Type.DOUBLE,5);a.writeDouble(this.clickTime);a.writeFieldEnd()}if(null!=this.label){a.writeFieldBegin("label",Ooyala.Thrift.Type.STRING,6);a.writeString(this.label);a.writeFieldEnd()}if(null!=this.link){a.writeFieldBegin("link",Ooyala.Thrift.Type.STRING,7);a.writeString(this.link);a.writeFieldEnd()}if(null!=this.outline){a.writeFieldBegin("outline",Ooyala.Thrift.Type.LIST,
                8);a.writeListBegin(Ooyala.Thrift.Type.DOUBLE,this.outline.length);for(var b=0;b<this.outline.length;b++)a.writeDouble(this.outline[b]);a.writeListEnd();a.writeFieldEnd()}a.writeFieldStop();a.writeStructEnd()};Ooyala.Logging.WatchedBuckets=function(a){this.maxPerMille=this.minPerMille=0;if(a!=null){if(null!=a.minPerMille)this.minPerMille=a.minPerMille;if(null!=a.maxPerMille)this.maxPerMille=a.maxPerMille}};Ooyala.Logging.WatchedBuckets.prototype={};
            Ooyala.Logging.WatchedBuckets.prototype.read=function(a){for(var b=a.readStructBegin();;){b=a.readFieldBegin();var c=b.ftype;if(c==Ooyala.Thrift.Type.STOP)break;switch(b.fid){case 1:if(c==Ooyala.Thrift.Type.I16){b=a.readI16();this.minPerMille=b.value}else a.skip(c);break;case 2:if(c==Ooyala.Thrift.Type.I16){b=a.readI16();this.maxPerMille=b.value}else a.skip(c);break;default:a.skip(c)}a.readFieldEnd()}a.readStructEnd()};
            Ooyala.Logging.WatchedBuckets.prototype.write=function(a){a.writeStructBegin("WatchedBuckets");if(null!=this.minPerMille){a.writeFieldBegin("minPerMille",Ooyala.Thrift.Type.I16,1);a.writeI16(this.minPerMille);a.writeFieldEnd()}if(null!=this.maxPerMille){a.writeFieldBegin("maxPerMille",Ooyala.Thrift.Type.I16,2);a.writeI16(this.maxPerMille);a.writeFieldEnd()}a.writeFieldStop();a.writeStructEnd()};
            Ooyala.Logging.BitratePlayed=function(a){this.userBandwidthInKbps=this.audioKbps=this.videoFormat=this.videoKbps=this.timePlayed=0;if(a!=null){if(null!=a.timePlayed)this.timePlayed=a.timePlayed;if(null!=a.videoKbps)this.videoKbps=a.videoKbps;if(null!=a.videoFormat)this.videoFormat=a.videoFormat;if(null!=a.audioKbps)this.audioKbps=a.audioKbps;if(null!=a.userBandwidthInKbps)this.userBandwidthInKbps=a.userBandwidthInKbps}};Ooyala.Logging.BitratePlayed.prototype={};
            Ooyala.Logging.BitratePlayed.prototype.read=function(a){for(var b=a.readStructBegin();;){b=a.readFieldBegin();var c=b.ftype;if(c==Ooyala.Thrift.Type.STOP)break;switch(b.fid){case 1:if(c==Ooyala.Thrift.Type.I32){b=a.readI32();this.timePlayed=b.value}else a.skip(c);break;case 2:if(c==Ooyala.Thrift.Type.I32){b=a.readI32();this.videoKbps=b.value}else a.skip(c);break;case 3:if(c==Ooyala.Thrift.Type.I32){b=a.readI32();this.videoFormat=b.value}else a.skip(c);break;case 4:if(c==Ooyala.Thrift.Type.I32){b=
                a.readI32();this.audioKbps=b.value}else a.skip(c);break;case 5:if(c==Ooyala.Thrift.Type.I32){b=a.readI32();this.userBandwidthInKbps=b.value}else a.skip(c);break;default:a.skip(c)}a.readFieldEnd()}a.readStructEnd()};
            Ooyala.Logging.BitratePlayed.prototype.write=function(a){a.writeStructBegin("BitratePlayed");if(null!=this.timePlayed){a.writeFieldBegin("timePlayed",Ooyala.Thrift.Type.I32,1);a.writeI32(this.timePlayed);a.writeFieldEnd()}if(null!=this.videoKbps){a.writeFieldBegin("videoKbps",Ooyala.Thrift.Type.I32,2);a.writeI32(this.videoKbps);a.writeFieldEnd()}if(null!=this.videoFormat){a.writeFieldBegin("videoFormat",Ooyala.Thrift.Type.I32,3);a.writeI32(this.videoFormat);a.writeFieldEnd()}if(null!=this.audioKbps){a.writeFieldBegin("audioKbps",
                Ooyala.Thrift.Type.I32,4);a.writeI32(this.audioKbps);a.writeFieldEnd()}if(null!=this.userBandwidthInKbps){a.writeFieldBegin("userBandwidthInKbps",Ooyala.Thrift.Type.I32,5);a.writeI32(this.userBandwidthInKbps);a.writeFieldEnd()}a.writeFieldStop();a.writeStructEnd()};
            Ooyala.Logging.BitrateTransition=function(a){this.transitionTimeInMillis=this.newAudioKbps=this.oldAudioKbps=this.newVideoKbps=this.oldVideoKbps=0;if(a!=null){if(null!=a.oldVideoKbps)this.oldVideoKbps=a.oldVideoKbps;if(null!=a.newVideoKbps)this.newVideoKbps=a.newVideoKbps;if(null!=a.oldAudioKbps)this.oldAudioKbps=a.oldAudioKbps;if(null!=a.newAudioKbps)this.newAudioKbps=a.newAudioKbps;if(null!=a.transitionTimeInMillis)this.transitionTimeInMillis=a.transitionTimeInMillis}};
            Ooyala.Logging.BitrateTransition.prototype={};
            Ooyala.Logging.BitrateTransition.prototype.read=function(a){for(var b=a.readStructBegin();;){b=a.readFieldBegin();var c=b.ftype;if(c==Ooyala.Thrift.Type.STOP)break;switch(b.fid){case 1:if(c==Ooyala.Thrift.Type.I32){b=a.readI32();this.oldVideoKbps=b.value}else a.skip(c);break;case 2:if(c==Ooyala.Thrift.Type.I32){b=a.readI32();this.newVideoKbps=b.value}else a.skip(c);break;case 3:if(c==Ooyala.Thrift.Type.I32){b=a.readI32();this.oldAudioKbps=b.value}else a.skip(c);break;case 4:if(c==Ooyala.Thrift.Type.I32){b=
                a.readI32();this.newAudioKbps=b.value}else a.skip(c);break;case 5:if(c==Ooyala.Thrift.Type.I32){b=a.readI32();this.transitionTimeInMillis=b.value}else a.skip(c);break;default:a.skip(c)}a.readFieldEnd()}a.readStructEnd()};
            Ooyala.Logging.BitrateTransition.prototype.write=function(a){a.writeStructBegin("BitrateTransition");if(null!=this.oldVideoKbps){a.writeFieldBegin("oldVideoKbps",Ooyala.Thrift.Type.I32,1);a.writeI32(this.oldVideoKbps);a.writeFieldEnd()}if(null!=this.newVideoKbps){a.writeFieldBegin("newVideoKbps",Ooyala.Thrift.Type.I32,2);a.writeI32(this.newVideoKbps);a.writeFieldEnd()}if(null!=this.oldAudioKbps){a.writeFieldBegin("oldAudioKbps",Ooyala.Thrift.Type.I32,3);a.writeI32(this.oldAudioKbps);a.writeFieldEnd()}if(null!=
                this.newAudioKbps){a.writeFieldBegin("newAudioKbps",Ooyala.Thrift.Type.I32,4);a.writeI32(this.newAudioKbps);a.writeFieldEnd()}if(null!=this.transitionTimeInMillis){a.writeFieldBegin("transitionTimeInMillis",Ooyala.Thrift.Type.I32,5);a.writeI32(this.transitionTimeInMillis);a.writeFieldEnd()}a.writeFieldStop();a.writeStructEnd()};
            Ooyala.Logging.Sharing=function(a){this.urlCopy=this.twitter=this.facebook=this.stumbleUpon=this.digg=this.embedCodeCopy=this.email=false;if(a!=null){if(null!=a.email)this.email=a.email;if(null!=a.embedCodeCopy)this.embedCodeCopy=a.embedCodeCopy;if(null!=a.digg)this.digg=a.digg;if(null!=a.stumbleUpon)this.stumbleUpon=a.stumbleUpon;if(null!=a.facebook)this.facebook=a.facebook;if(null!=a.twitter)this.twitter=a.twitter;if(null!=a.urlCopy)this.urlCopy=a.urlCopy}};Ooyala.Logging.Sharing.prototype={};
            Ooyala.Logging.Sharing.prototype.read=function(a){for(var b=a.readStructBegin();;){b=a.readFieldBegin();var c=b.ftype;if(c==Ooyala.Thrift.Type.STOP)break;switch(b.fid){case 1:if(c==Ooyala.Thrift.Type.BOOL){b=a.readBool();this.email=b.value}else a.skip(c);break;case 2:if(c==Ooyala.Thrift.Type.BOOL){b=a.readBool();this.embedCodeCopy=b.value}else a.skip(c);break;case 3:if(c==Ooyala.Thrift.Type.BOOL){b=a.readBool();this.digg=b.value}else a.skip(c);break;case 4:if(c==Ooyala.Thrift.Type.BOOL){b=a.readBool();
                this.stumbleUpon=b.value}else a.skip(c);break;case 5:if(c==Ooyala.Thrift.Type.BOOL){b=a.readBool();this.facebook=b.value}else a.skip(c);break;case 6:if(c==Ooyala.Thrift.Type.BOOL){b=a.readBool();this.twitter=b.value}else a.skip(c);break;case 7:if(c==Ooyala.Thrift.Type.BOOL){b=a.readBool();this.urlCopy=b.value}else a.skip(c);break;default:a.skip(c)}a.readFieldEnd()}a.readStructEnd()};
            Ooyala.Logging.Sharing.prototype.write=function(a){a.writeStructBegin("Sharing");if(null!=this.email){a.writeFieldBegin("email",Ooyala.Thrift.Type.BOOL,1);a.writeBool(this.email);a.writeFieldEnd()}if(null!=this.embedCodeCopy){a.writeFieldBegin("embedCodeCopy",Ooyala.Thrift.Type.BOOL,2);a.writeBool(this.embedCodeCopy);a.writeFieldEnd()}if(null!=this.digg){a.writeFieldBegin("digg",Ooyala.Thrift.Type.BOOL,3);a.writeBool(this.digg);a.writeFieldEnd()}if(null!=this.stumbleUpon){a.writeFieldBegin("stumbleUpon",
                Ooyala.Thrift.Type.BOOL,4);a.writeBool(this.stumbleUpon);a.writeFieldEnd()}if(null!=this.facebook){a.writeFieldBegin("facebook",Ooyala.Thrift.Type.BOOL,5);a.writeBool(this.facebook);a.writeFieldEnd()}if(null!=this.twitter){a.writeFieldBegin("twitter",Ooyala.Thrift.Type.BOOL,6);a.writeBool(this.twitter);a.writeFieldEnd()}if(null!=this.urlCopy){a.writeFieldBegin("urlCopy",Ooyala.Thrift.Type.BOOL,7);a.writeBool(this.urlCopy);a.writeFieldEnd()}a.writeFieldStop();a.writeStructEnd()};
            Ooyala.Logging.PersonalizationBucketInfo=function(a){this.bucketInfo="";if(a!=null)if(null!=a.bucketInfo)this.bucketInfo=a.bucketInfo};Ooyala.Logging.PersonalizationBucketInfo.prototype={};Ooyala.Logging.PersonalizationBucketInfo.prototype.read=function(a){for(var b=a.readStructBegin();;){b=a.readFieldBegin();var c=b.ftype;if(c==Ooyala.Thrift.Type.STOP)break;switch(b.fid){case 1:if(c==Ooyala.Thrift.Type.STRING)this.bucketInfo=a.readString().value;else a.skip(c);break;default:a.skip(c)}a.readFieldEnd()}a.readStructEnd()};
            Ooyala.Logging.PersonalizationBucketInfo.prototype.write=function(a){a.writeStructBegin("PersonalizationBucketInfo");if(null!=this.bucketInfo){a.writeFieldBegin("bucketInfo",Ooyala.Thrift.Type.STRING,1);a.writeString(this.bucketInfo);a.writeFieldEnd()}a.writeFieldStop();a.writeStructEnd()};
            Ooyala.Logging.PayPerView=function(a){this.mobilePrice=this.price=this.gateway=this.checkoutType=0;this.currency="";this.playheadTimeInMillis=this.previewWindowInMillis=0;this.error="";if(a!=null){if(null!=a.checkoutType)this.checkoutType=a.checkoutType;if(null!=a.gateway)this.gateway=a.gateway;if(null!=a.price)this.price=a.price;if(null!=a.mobilePrice)this.mobilePrice=a.mobilePrice;if(null!=a.currency)this.currency=a.currency;if(null!=a.previewWindowInMillis)this.previewWindowInMillis=a.previewWindowInMillis;
                if(null!=a.playheadTimeInMillis)this.playheadTimeInMillis=a.playheadTimeInMillis;if(null!=a.error)this.error=a.error}};Ooyala.Logging.PayPerView.prototype={};
            Ooyala.Logging.PayPerView.prototype.read=function(a){for(var b=a.readStructBegin();;){b=a.readFieldBegin();var c=b.ftype;if(c==Ooyala.Thrift.Type.STOP)break;switch(b.fid){case 1:if(c==Ooyala.Thrift.Type.BYTE){b=a.readByte();this.checkoutType=b.value}else a.skip(c);break;case 2:if(c==Ooyala.Thrift.Type.BYTE){b=a.readByte();this.gateway=b.value}else a.skip(c);break;case 3:if(c==Ooyala.Thrift.Type.DOUBLE){b=a.readDouble();this.price=b.value}else a.skip(c);break;case 4:if(c==Ooyala.Thrift.Type.DOUBLE){b=
                a.readDouble();this.mobilePrice=b.value}else a.skip(c);break;case 5:if(c==Ooyala.Thrift.Type.STRING){b=a.readString();this.currency=b.value}else a.skip(c);break;case 6:if(c==Ooyala.Thrift.Type.I32){b=a.readI32();this.previewWindowInMillis=b.value}else a.skip(c);break;case 7:if(c==Ooyala.Thrift.Type.I32){b=a.readI32();this.playheadTimeInMillis=b.value}else a.skip(c);break;case 8:if(c==Ooyala.Thrift.Type.STRING){b=a.readString();this.error=b.value}else a.skip(c);break;default:a.skip(c)}a.readFieldEnd()}a.readStructEnd()};
            Ooyala.Logging.PayPerView.prototype.write=function(a){a.writeStructBegin("PayPerView");if(null!=this.checkoutType){a.writeFieldBegin("checkoutType",Ooyala.Thrift.Type.BYTE,1);a.writeByte(this.checkoutType);a.writeFieldEnd()}if(null!=this.gateway){a.writeFieldBegin("gateway",Ooyala.Thrift.Type.BYTE,2);a.writeByte(this.gateway);a.writeFieldEnd()}if(null!=this.price){a.writeFieldBegin("price",Ooyala.Thrift.Type.DOUBLE,3);a.writeDouble(this.price);a.writeFieldEnd()}if(null!=this.mobilePrice){a.writeFieldBegin("mobilePrice",
                Ooyala.Thrift.Type.DOUBLE,4);a.writeDouble(this.mobilePrice);a.writeFieldEnd()}if(null!=this.currency){a.writeFieldBegin("currency",Ooyala.Thrift.Type.STRING,5);a.writeString(this.currency);a.writeFieldEnd()}if(null!=this.previewWindowInMillis){a.writeFieldBegin("previewWindowInMillis",Ooyala.Thrift.Type.I32,6);a.writeI32(this.previewWindowInMillis);a.writeFieldEnd()}if(null!=this.playheadTimeInMillis){a.writeFieldBegin("playheadTimeInMillis",Ooyala.Thrift.Type.I32,7);a.writeI32(this.playheadTimeInMillis);
                a.writeFieldEnd()}if(null!=this.error){a.writeFieldBegin("error",Ooyala.Thrift.Type.STRING,8);a.writeString(this.error);a.writeFieldEnd()}a.writeFieldStop();a.writeStructEnd()};
            Ooyala.Logging.SasAuthorize=function(a){this.authorized=false;this.latency=this.requestTime=0;this.messages=this.codes="";this.isAuthorizedInPlayerXML=false;if(a!=null){if(null!=a.authorized)this.authorized=a.authorized;if(null!=a.requestTime)this.requestTime=a.requestTime;if(null!=a.latency)this.latency=a.latency;if(null!=a.codes)this.codes=a.codes;if(null!=a.messages)this.messages=a.messages;if(null!=a.isAuthorizedInPlayerXML)this.isAuthorizedInPlayerXML=a.isAuthorizedInPlayerXML}};
            Ooyala.Logging.SasAuthorize.prototype={};
            Ooyala.Logging.SasAuthorize.prototype.read=function(a){for(var b=a.readStructBegin();;){b=a.readFieldBegin();var c=b.ftype;if(c==Ooyala.Thrift.Type.STOP)break;switch(b.fid){case 1:if(c==Ooyala.Thrift.Type.BOOL){b=a.readBool();this.authorized=b.value}else a.skip(c);break;case 2:if(c==Ooyala.Thrift.Type.I32){b=a.readI32();this.requestTime=b.value}else a.skip(c);break;case 3:if(c==Ooyala.Thrift.Type.I32){b=a.readI32();this.latency=b.value}else a.skip(c);break;case 4:if(c==Ooyala.Thrift.Type.STRING){b=
                a.readString();this.codes=b.value}else a.skip(c);break;case 5:if(c==Ooyala.Thrift.Type.STRING){b=a.readString();this.messages=b.value}else a.skip(c);break;case 6:if(c==Ooyala.Thrift.Type.BOOL){b=a.readBool();this.isAuthorizedInPlayerXML=b.value}else a.skip(c);break;default:a.skip(c)}a.readFieldEnd()}a.readStructEnd()};
            Ooyala.Logging.SasAuthorize.prototype.write=function(a){a.writeStructBegin("SasAuthorize");if(null!=this.authorized){a.writeFieldBegin("authorized",Ooyala.Thrift.Type.BOOL,1);a.writeBool(this.authorized);a.writeFieldEnd()}if(null!=this.requestTime){a.writeFieldBegin("requestTime",Ooyala.Thrift.Type.I32,2);a.writeI32(this.requestTime);a.writeFieldEnd()}if(null!=this.latency){a.writeFieldBegin("latency",Ooyala.Thrift.Type.I32,3);a.writeI32(this.latency);a.writeFieldEnd()}if(null!=this.codes){a.writeFieldBegin("codes",
                Ooyala.Thrift.Type.STRING,4);a.writeString(this.codes);a.writeFieldEnd()}if(null!=this.messages){a.writeFieldBegin("messages",Ooyala.Thrift.Type.STRING,5);a.writeString(this.messages);a.writeFieldEnd()}if(null!=this.isAuthorizedInPlayerXML){a.writeFieldBegin("isAuthorizedInPlayerXML",Ooyala.Thrift.Type.BOOL,6);a.writeBool(this.isAuthorizedInPlayerXML);a.writeFieldEnd()}a.writeFieldStop();a.writeStructEnd()};
            Ooyala.Logging.SasAuthorizeV2=function(a){this.rootEmbedCode=this.requestId="";this.clientSideLatencyForLastRequest=this.clientSideLatency=this.serverSideLatency=this.responseCode=0;this.continent=this.country="";if(a!=null){if(null!=a.requestId)this.requestId=a.requestId;if(null!=a.rootEmbedCode)this.rootEmbedCode=a.rootEmbedCode;if(null!=a.responseCode)this.responseCode=a.responseCode;if(null!=a.serverSideLatency)this.serverSideLatency=a.serverSideLatency;if(null!=a.clientSideLatency)this.clientSideLatency=
                a.clientSideLatency;if(null!=a.clientSideLatencyForLastRequest)this.clientSideLatencyForLastRequest=a.clientSideLatencyForLastRequest;if(null!=a.country)this.country=a.country;if(null!=a.continent)this.continent=a.continent}};Ooyala.Logging.SasAuthorizeV2.prototype={};
            Ooyala.Logging.SasAuthorizeV2.prototype.read=function(a){for(var b=a.readStructBegin();;){b=a.readFieldBegin();var c=b.ftype;if(c==Ooyala.Thrift.Type.STOP)break;switch(b.fid){case 1:if(c==Ooyala.Thrift.Type.STRING){b=a.readString();this.requestId=b.value}else a.skip(c);break;case 2:if(c==Ooyala.Thrift.Type.STRING){b=a.readString();this.rootEmbedCode=b.value}else a.skip(c);break;case 3:if(c==Ooyala.Thrift.Type.I32){b=a.readI32();this.responseCode=b.value}else a.skip(c);break;case 4:if(c==Ooyala.Thrift.Type.DOUBLE){b=
                a.readDouble();this.serverSideLatency=b.value}else a.skip(c);break;case 5:if(c==Ooyala.Thrift.Type.DOUBLE){b=a.readDouble();this.clientSideLatency=b.value}else a.skip(c);break;case 6:if(c==Ooyala.Thrift.Type.DOUBLE){b=a.readDouble();this.clientSideLatencyForLastRequest=b.value}else a.skip(c);break;case 7:if(c==Ooyala.Thrift.Type.STRING){b=a.readString();this.country=b.value}else a.skip(c);break;case 8:if(c==Ooyala.Thrift.Type.STRING){b=a.readString();this.continent=b.value}else a.skip(c);break;default:a.skip(c)}a.readFieldEnd()}a.readStructEnd()};
            Ooyala.Logging.SasAuthorizeV2.prototype.write=function(a){a.writeStructBegin("SasAuthorizeV2");if(null!=this.requestId){a.writeFieldBegin("requestId",Ooyala.Thrift.Type.STRING,1);a.writeString(this.requestId);a.writeFieldEnd()}if(null!=this.rootEmbedCode){a.writeFieldBegin("rootEmbedCode",Ooyala.Thrift.Type.STRING,2);a.writeString(this.rootEmbedCode);a.writeFieldEnd()}if(null!=this.responseCode){a.writeFieldBegin("responseCode",Ooyala.Thrift.Type.I32,3);a.writeI32(this.responseCode);a.writeFieldEnd()}if(null!=
                this.serverSideLatency){a.writeFieldBegin("serverSideLatency",Ooyala.Thrift.Type.DOUBLE,4);a.writeDouble(this.serverSideLatency);a.writeFieldEnd()}if(null!=this.clientSideLatency){a.writeFieldBegin("clientSideLatency",Ooyala.Thrift.Type.DOUBLE,5);a.writeDouble(this.clientSideLatency);a.writeFieldEnd()}if(null!=this.clientSideLatencyForLastRequest){a.writeFieldBegin("clientSideLatencyForLastRequest",Ooyala.Thrift.Type.DOUBLE,6);a.writeDouble(this.clientSideLatencyForLastRequest);a.writeFieldEnd()}if(null!=
                this.country){a.writeFieldBegin("country",Ooyala.Thrift.Type.STRING,7);a.writeString(this.country);a.writeFieldEnd()}if(null!=this.continent){a.writeFieldBegin("continent",Ooyala.Thrift.Type.STRING,8);a.writeString(this.continent);a.writeFieldEnd()}a.writeFieldStop();a.writeStructEnd()};
            Ooyala.Logging.ReportingIdDescriptor=function(a){this.adSetId=this.syndicationDestinationIdIndex=this.parentContentIdIndex=this.providerReportingIdIndex=this.reportingIdType=0;if(a!=null){if(null!=a.reportingIdType)this.reportingIdType=a.reportingIdType;if(null!=a.providerReportingIdIndex)this.providerReportingIdIndex=a.providerReportingIdIndex;if(null!=a.parentContentIdIndex)this.parentContentIdIndex=a.parentContentIdIndex;if(null!=a.syndicationDestinationIdIndex)this.syndicationDestinationIdIndex=
                a.syndicationDestinationIdIndex;if(null!=a.adSetId)this.adSetId=a.adSetId}};Ooyala.Logging.ReportingIdDescriptor.prototype={};
            Ooyala.Logging.ReportingIdDescriptor.prototype.read=function(a){for(var b=a.readStructBegin();;){b=a.readFieldBegin();var c=b.ftype;if(c==Ooyala.Thrift.Type.STOP)break;switch(b.fid){case 1:if(c==Ooyala.Thrift.Type.BYTE){b=a.readByte();this.reportingIdType=b.value}else a.skip(c);break;case 2:if(c==Ooyala.Thrift.Type.BYTE){b=a.readByte();this.providerReportingIdIndex=b.value}else a.skip(c);break;case 3:if(c==Ooyala.Thrift.Type.BYTE){b=a.readByte();this.parentContentIdIndex=b.value}else a.skip(c);break;
                case 4:if(c==Ooyala.Thrift.Type.BYTE){b=a.readByte();this.syndicationDestinationIdIndex=b.value}else a.skip(c);break;case 5:if(c==Ooyala.Thrift.Type.I32){b=a.readI32();this.adSetId=b.value}else a.skip(c);break;default:a.skip(c)}a.readFieldEnd()}a.readStructEnd()};
            Ooyala.Logging.ReportingIdDescriptor.prototype.write=function(a){a.writeStructBegin("ReportingIdDescriptor");if(null!=this.reportingIdType){a.writeFieldBegin("reportingIdType",Ooyala.Thrift.Type.BYTE,1);a.writeByte(this.reportingIdType);a.writeFieldEnd()}if(null!=this.providerReportingIdIndex){a.writeFieldBegin("providerReportingIdIndex",Ooyala.Thrift.Type.BYTE,2);a.writeByte(this.providerReportingIdIndex);a.writeFieldEnd()}if(null!=this.parentContentIdIndex){a.writeFieldBegin("parentContentIdIndex",
                Ooyala.Thrift.Type.BYTE,3);a.writeByte(this.parentContentIdIndex);a.writeFieldEnd()}if(null!=this.syndicationDestinationIdIndex){a.writeFieldBegin("syndicationDestinationIdIndex",Ooyala.Thrift.Type.BYTE,4);a.writeByte(this.syndicationDestinationIdIndex);a.writeFieldEnd()}if(null!=this.adSetId){a.writeFieldBegin("adSetId",Ooyala.Thrift.Type.I32,5);a.writeI32(this.adSetId);a.writeFieldEnd()}a.writeFieldStop();a.writeStructEnd()};
            Ooyala.Logging.PlayerEvent=function(a){this.reportingIdIndex=0;this.reportingIdIndices=[];this.eventType=0;this.param2=this.param1="";this.download=new Ooyala.Logging.DownloadStats;this.chunkFailover=new Ooyala.Logging.ChunkFailoverInfo;this.playhead=new Ooyala.Logging.PlayheadStatus;this.cvinfo=new Ooyala.Logging.CvObjectClickInfo;this.DEPRECATED_adClick=new Ooyala.AdsLogging.AdClick;this.buckets=new Ooyala.Logging.WatchedBuckets;this.timePlayed=0;this.bitratePlayed=new Ooyala.Logging.BitratePlayed;
                this.adTracking=new Ooyala.AdsLogging.AdTracking;this.metric=new Ooyala.MetricsLogging.Metric;this.lastEventTime=0;this.firstForVideo=this.firstForRootContent=this.firstForPlayer=false;this.bufferType=0;this.bitrateTransition=new Ooyala.Logging.BitrateTransition;this.bitratesAvailable=[];this.sharing=new Ooyala.Logging.Sharing;this.payPerView=new Ooyala.Logging.PayPerView;this.sasAuthorize=new Ooyala.Logging.SasAuthorize;this.sasAuthorizeV2=new Ooyala.Logging.SasAuthorizeV2;this.autoplay=false;this.customEvent=
                    new Ooyala.CustomEventsLogging.CustomEvent;this.personalizationBucketInfo=new Ooyala.Logging.PersonalizationBucketInfo;this.reportingIdIndexToPlayheadPositionMillis={};this.seqnum=this.playthroughPercent=0;if(a!=null){if(null!=a.reportingIdIndex)this.reportingIdIndex=a.reportingIdIndex;if(null!=a.reportingIdIndices)this.reportingIdIndices=a.reportingIdIndices;if(null!=a.eventType)this.eventType=a.eventType;if(null!=a.param1)this.param1=a.param1;if(null!=a.param2)this.param2=a.param2;if(null!=a.download)this.download=
                    a.download;if(null!=a.chunkFailover)this.chunkFailover=a.chunkFailover;if(null!=a.playhead)this.playhead=a.playhead;if(null!=a.cvinfo)this.cvinfo=a.cvinfo;if(null!=a.DEPRECATED_adClick)this.DEPRECATED_adClick=a.DEPRECATED_adClick;if(null!=a.buckets)this.buckets=a.buckets;if(null!=a.timePlayed)this.timePlayed=a.timePlayed;if(null!=a.bitratePlayed)this.bitratePlayed=a.bitratePlayed;if(null!=a.adTracking)this.adTracking=a.adTracking;if(null!=a.metric)this.metric=a.metric;if(null!=a.lastEventTime)this.lastEventTime=
                    a.lastEventTime;if(null!=a.firstForPlayer)this.firstForPlayer=a.firstForPlayer;if(null!=a.firstForRootContent)this.firstForRootContent=a.firstForRootContent;if(null!=a.firstForVideo)this.firstForVideo=a.firstForVideo;if(null!=a.bufferType)this.bufferType=a.bufferType;if(null!=a.bitrateTransition)this.bitrateTransition=a.bitrateTransition;if(null!=a.bitratesAvailable)this.bitratesAvailable=a.bitratesAvailable;if(null!=a.sharing)this.sharing=a.sharing;if(null!=a.payPerView)this.payPerView=a.payPerView;
                    if(null!=a.sasAuthorize)this.sasAuthorize=a.sasAuthorize;if(null!=a.sasAuthorizeV2)this.sasAuthorizeV2=a.sasAuthorizeV2;if(null!=a.autoplay)this.autoplay=a.autoplay;if(null!=a.customEvent)this.customEvent=a.customEvent;if(null!=a.personalizationBucketInfo)this.personalizationBucketInfo=a.personalizationBucketInfo;if(null!=a.reportingIdIndexToPlayheadPositionMillis)this.reportingIdIndexToPlayheadPositionMillis=a.reportingIdIndexToPlayheadPositionMillis;if(null!=a.playthroughPercent)this.playthroughPercent=
                        a.playthroughPercent;if(null!=a.seqnum)this.seqnum=a.seqnum}};Ooyala.Logging.PlayerEvent.prototype={};
            Ooyala.Logging.PlayerEvent.prototype.read=function(a){for(var b=a.readStructBegin();;){b=a.readFieldBegin();var c=b.ftype;if(c==Ooyala.Thrift.Type.STOP)break;switch(b.fid){case 1:if(c==Ooyala.Thrift.Type.BYTE){b=a.readByte();this.reportingIdIndex=b.value}else a.skip(c);break;case 11:if(c==Ooyala.Thrift.Type.LIST){c=0;this.reportingIdIndices=[];b=a.readListBegin();c=b.size;for(var d=0;d<c;++d){b=null;b=a.readByte();b=b.value;this.reportingIdIndices.push(b)}a.readListEnd()}else a.skip(c);break;case 2:if(c==
                Ooyala.Thrift.Type.BYTE){b=a.readByte();this.eventType=b.value}else a.skip(c);break;case 3:if(c==Ooyala.Thrift.Type.STRING){b=a.readString();this.param1=b.value}else a.skip(c);break;case 4:if(c==Ooyala.Thrift.Type.STRING){b=a.readString();this.param2=b.value}else a.skip(c);break;case 5:if(c==Ooyala.Thrift.Type.STRUCT){this.download=new Ooyala.Logging.DownloadStats;this.download.read(a)}else a.skip(c);break;case 7:if(c==Ooyala.Thrift.Type.STRUCT){this.chunkFailover=new Ooyala.Logging.ChunkFailoverInfo;
                this.chunkFailover.read(a)}else a.skip(c);break;case 8:if(c==Ooyala.Thrift.Type.STRUCT){this.playhead=new Ooyala.Logging.PlayheadStatus;this.playhead.read(a)}else a.skip(c);break;case 9:if(c==Ooyala.Thrift.Type.STRUCT){this.cvinfo=new Ooyala.Logging.CvObjectClickInfo;this.cvinfo.read(a)}else a.skip(c);break;case 10:if(c==Ooyala.Thrift.Type.STRUCT){this.DEPRECATED_adClick=new Ooyala.AdsLogging.AdClick;this.DEPRECATED_adClick.read(a)}else a.skip(c);break;case 12:if(c==Ooyala.Thrift.Type.STRUCT){this.buckets=
                new Ooyala.Logging.WatchedBuckets;this.buckets.read(a)}else a.skip(c);break;case 13:if(c==Ooyala.Thrift.Type.I32){b=a.readI32();this.timePlayed=b.value}else a.skip(c);break;case 14:if(c==Ooyala.Thrift.Type.STRUCT){this.bitratePlayed=new Ooyala.Logging.BitratePlayed;this.bitratePlayed.read(a)}else a.skip(c);break;case 15:if(c==Ooyala.Thrift.Type.STRUCT){this.adTracking=new Ooyala.AdsLogging.AdTracking;this.adTracking.read(a)}else a.skip(c);break;case 16:if(c==Ooyala.Thrift.Type.STRUCT){this.metric=
                new Ooyala.MetricsLogging.Metric;this.metric.read(a)}else a.skip(c);break;case 6:if(c==Ooyala.Thrift.Type.I32){b=a.readI32();this.lastEventTime=b.value}else a.skip(c);break;case 17:if(c==Ooyala.Thrift.Type.BOOL){b=a.readBool();this.firstForPlayer=b.value}else a.skip(c);break;case 18:if(c==Ooyala.Thrift.Type.BOOL){b=a.readBool();this.firstForRootContent=b.value}else a.skip(c);break;case 19:if(c==Ooyala.Thrift.Type.BOOL){b=a.readBool();this.firstForVideo=b.value}else a.skip(c);break;case 20:if(c==Ooyala.Thrift.Type.BYTE){b=
                a.readByte();this.bufferType=b.value}else a.skip(c);break;case 21:if(c==Ooyala.Thrift.Type.STRUCT){this.bitrateTransition=new Ooyala.Logging.BitrateTransition;this.bitrateTransition.read(a)}else a.skip(c);break;case 22:if(c==Ooyala.Thrift.Type.LIST){c=0;this.bitratesAvailable=[];b=a.readListBegin();c=b.size;for(d=0;d<c;++d){b=null;b=a.readI16();b=b.value;this.bitratesAvailable.push(b)}a.readListEnd()}else a.skip(c);break;case 23:if(c==Ooyala.Thrift.Type.STRUCT){this.sharing=new Ooyala.Logging.Sharing;
                this.sharing.read(a)}else a.skip(c);break;case 24:if(c==Ooyala.Thrift.Type.STRUCT){this.payPerView=new Ooyala.Logging.PayPerView;this.payPerView.read(a)}else a.skip(c);break;case 25:if(c==Ooyala.Thrift.Type.STRUCT){this.sasAuthorize=new Ooyala.Logging.SasAuthorize;this.sasAuthorize.read(a)}else a.skip(c);break;case 26:if(c==Ooyala.Thrift.Type.STRUCT){this.sasAuthorizeV2=new Ooyala.Logging.SasAuthorizeV2;this.sasAuthorizeV2.read(a)}else a.skip(c);break;case 28:if(c==Ooyala.Thrift.Type.BOOL){b=a.readBool();
                this.autoplay=b.value}else a.skip(c);break;case 29:if(c==Ooyala.Thrift.Type.STRUCT){this.customEvent=new Ooyala.CustomEventsLogging.CustomEvent;this.customEvent.read(a)}else a.skip(c);break;case 30:if(c==Ooyala.Thrift.Type.STRUCT){this.personalizationBucketInfo=new Ooyala.Logging.PersonalizationBucketInfo;this.personalizationBucketInfo.read(a)}else a.skip(c);break;case 31:if(c==Ooyala.Thrift.Type.MAP){c=0;this.reportingIdIndexToPlayheadPositionMillis={};b=a.readMapBegin();c=b.size;for(d=0;d<c;++d){val43=
                key42=0;b=a.readByte();key42=b.value;b=a.readI32();val43=b.value;this.reportingIdIndexToPlayheadPositionMillis[key42]=val43}a.readMapEnd()}else a.skip(c);break;case 32:if(c==Ooyala.Thrift.Type.I32){b=a.readI32();this.playthroughPercent=b.value}else a.skip(c);break;case 33:if(c==Ooyala.Thrift.Type.I32){b=a.readI32();this.seqnum=b.value}else a.skip(c);break;default:a.skip(c)}a.readFieldEnd()}a.readStructEnd()};
            Ooyala.Logging.PlayerEvent.prototype.write=function(a){a.writeStructBegin("PlayerEvent");if(null!=this.reportingIdIndex){a.writeFieldBegin("reportingIdIndex",Ooyala.Thrift.Type.BYTE,1);a.writeByte(this.reportingIdIndex);a.writeFieldEnd()}if(null!=this.reportingIdIndices){a.writeFieldBegin("reportingIdIndices",Ooyala.Thrift.Type.LIST,11);a.writeListBegin(Ooyala.Thrift.Type.BYTE,this.reportingIdIndices.length);for(var b=0;b<this.reportingIdIndices.length;b++)a.writeByte(this.reportingIdIndices[b]);
                a.writeListEnd();a.writeFieldEnd()}if(null!=this.eventType){a.writeFieldBegin("eventType",Ooyala.Thrift.Type.BYTE,2);a.writeByte(this.eventType);a.writeFieldEnd()}if(null!=this.param1){a.writeFieldBegin("param1",Ooyala.Thrift.Type.STRING,3);a.writeString(this.param1);a.writeFieldEnd()}if(null!=this.param2){a.writeFieldBegin("param2",Ooyala.Thrift.Type.STRING,4);a.writeString(this.param2);a.writeFieldEnd()}if(null!=this.download){a.writeFieldBegin("download",Ooyala.Thrift.Type.STRUCT,5);this.download.write(a);
                a.writeFieldEnd()}if(null!=this.chunkFailover){a.writeFieldBegin("chunkFailover",Ooyala.Thrift.Type.STRUCT,7);this.chunkFailover.write(a);a.writeFieldEnd()}if(null!=this.playhead){a.writeFieldBegin("playhead",Ooyala.Thrift.Type.STRUCT,8);this.playhead.write(a);a.writeFieldEnd()}if(null!=this.cvinfo){a.writeFieldBegin("cvinfo",Ooyala.Thrift.Type.STRUCT,9);this.cvinfo.write(a);a.writeFieldEnd()}if(null!=this.DEPRECATED_adClick){a.writeFieldBegin("DEPRECATED_adClick",Ooyala.Thrift.Type.STRUCT,10);this.DEPRECATED_adClick.write(a);
                a.writeFieldEnd()}if(null!=this.buckets){a.writeFieldBegin("buckets",Ooyala.Thrift.Type.STRUCT,12);this.buckets.write(a);a.writeFieldEnd()}if(null!=this.timePlayed){a.writeFieldBegin("timePlayed",Ooyala.Thrift.Type.I32,13);a.writeI32(this.timePlayed);a.writeFieldEnd()}if(null!=this.bitratePlayed){a.writeFieldBegin("bitratePlayed",Ooyala.Thrift.Type.STRUCT,14);this.bitratePlayed.write(a);a.writeFieldEnd()}if(null!=this.adTracking){a.writeFieldBegin("adTracking",Ooyala.Thrift.Type.STRUCT,15);this.adTracking.write(a);
                a.writeFieldEnd()}if(null!=this.metric){a.writeFieldBegin("metric",Ooyala.Thrift.Type.STRUCT,16);this.metric.write(a);a.writeFieldEnd()}if(null!=this.lastEventTime){a.writeFieldBegin("lastEventTime",Ooyala.Thrift.Type.I32,6);a.writeI32(this.lastEventTime);a.writeFieldEnd()}if(null!=this.firstForPlayer){a.writeFieldBegin("firstForPlayer",Ooyala.Thrift.Type.BOOL,17);a.writeBool(this.firstForPlayer);a.writeFieldEnd()}if(null!=this.firstForRootContent){a.writeFieldBegin("firstForRootContent",Ooyala.Thrift.Type.BOOL,
                18);a.writeBool(this.firstForRootContent);a.writeFieldEnd()}if(null!=this.firstForVideo){a.writeFieldBegin("firstForVideo",Ooyala.Thrift.Type.BOOL,19);a.writeBool(this.firstForVideo);a.writeFieldEnd()}if(null!=this.bufferType){a.writeFieldBegin("bufferType",Ooyala.Thrift.Type.BYTE,20);a.writeByte(this.bufferType);a.writeFieldEnd()}if(null!=this.bitrateTransition){a.writeFieldBegin("bitrateTransition",Ooyala.Thrift.Type.STRUCT,21);this.bitrateTransition.write(a);a.writeFieldEnd()}if(null!=this.bitratesAvailable){a.writeFieldBegin("bitratesAvailable",
                Ooyala.Thrift.Type.LIST,22);a.writeListBegin(Ooyala.Thrift.Type.I16,this.bitratesAvailable.length);for(b=0;b<this.bitratesAvailable.length;b++)a.writeI16(this.bitratesAvailable[b]);a.writeListEnd();a.writeFieldEnd()}if(null!=this.sharing){a.writeFieldBegin("sharing",Ooyala.Thrift.Type.STRUCT,23);this.sharing.write(a);a.writeFieldEnd()}if(null!=this.payPerView){a.writeFieldBegin("payPerView",Ooyala.Thrift.Type.STRUCT,24);this.payPerView.write(a);a.writeFieldEnd()}if(null!=this.sasAuthorize){a.writeFieldBegin("sasAuthorize",
                Ooyala.Thrift.Type.STRUCT,25);this.sasAuthorize.write(a);a.writeFieldEnd()}if(null!=this.sasAuthorizeV2){a.writeFieldBegin("sasAuthorizeV2",Ooyala.Thrift.Type.STRUCT,26);this.sasAuthorizeV2.write(a);a.writeFieldEnd()}if(null!=this.autoplay){a.writeFieldBegin("autoplay",Ooyala.Thrift.Type.BOOL,28);a.writeBool(this.autoplay);a.writeFieldEnd()}if(null!=this.customEvent){a.writeFieldBegin("customEvent",Ooyala.Thrift.Type.STRUCT,29);this.customEvent.write(a);a.writeFieldEnd()}if(null!=this.personalizationBucketInfo){a.writeFieldBegin("personalizationBucketInfo",
                Ooyala.Thrift.Type.STRUCT,30);this.personalizationBucketInfo.write(a);a.writeFieldEnd()}if(null!=this.reportingIdIndexToPlayheadPositionMillis){a.writeFieldBegin("reportingIdIndexToPlayheadPositionMillis",Ooyala.Thrift.Type.MAP,31);b=0;for(key in this.reportingIdIndexToPlayheadPositionMillis)this.reportingIdIndexToPlayheadPositionMillis.hasOwnProperty(key)&&b++;a.writeMapBegin(Ooyala.Thrift.Type.BYTE,Ooyala.Thrift.Type.I32,b);for(var c in this.reportingIdIndexToPlayheadPositionMillis){b=this.reportingIdIndexToPlayheadPositionMillis[c];
                a.writeByte(c);a.writeI32(b)}a.writeMapEnd();a.writeFieldEnd()}if(null!=this.playthroughPercent){a.writeFieldBegin("playthroughPercent",Ooyala.Thrift.Type.I32,32);a.writeI32(this.playthroughPercent);a.writeFieldEnd()}if(null!=this.seqnum){a.writeFieldBegin("seqnum",Ooyala.Thrift.Type.I32,33);a.writeI32(this.seqnum);a.writeFieldEnd()}a.writeFieldStop();a.writeStructEnd()};
            Ooyala.Logging.User=function(a){this.city=this.county=this.region=this.country="";this.lon=this.lat=0;this.clientIP="";this.source=this.pmsaCode=this.dmaCode=0;this.cookie="";if(a!=null){if(null!=a.country)this.country=a.country;if(null!=a.region)this.region=a.region;if(null!=a.county)this.county=a.county;if(null!=a.city)this.city=a.city;if(null!=a.lat)this.lat=a.lat;if(null!=a.lon)this.lon=a.lon;if(null!=a.clientIP)this.clientIP=a.clientIP;if(null!=a.dmaCode)this.dmaCode=a.dmaCode;if(null!=a.pmsaCode)this.pmsaCode=
                a.pmsaCode;if(null!=a.source)this.source=a.source;if(null!=a.cookie)this.cookie=a.cookie}};Ooyala.Logging.User.prototype={};
            Ooyala.Logging.User.prototype.read=function(a){for(var b=a.readStructBegin();;){b=a.readFieldBegin();var c=b.ftype;if(c==Ooyala.Thrift.Type.STOP)break;switch(b.fid){case 1:if(c==Ooyala.Thrift.Type.STRING){b=a.readString();this.country=b.value}else a.skip(c);break;case 2:if(c==Ooyala.Thrift.Type.STRING){b=a.readString();this.region=b.value}else a.skip(c);break;case 3:if(c==Ooyala.Thrift.Type.STRING){b=a.readString();this.county=b.value}else a.skip(c);break;case 4:if(c==Ooyala.Thrift.Type.STRING){b=
                a.readString();this.city=b.value}else a.skip(c);break;case 6:if(c==Ooyala.Thrift.Type.I32){b=a.readI32();this.lat=b.value}else a.skip(c);break;case 7:if(c==Ooyala.Thrift.Type.I32){b=a.readI32();this.lon=b.value}else a.skip(c);break;case 8:if(c==Ooyala.Thrift.Type.STRING){b=a.readString();this.clientIP=b.value}else a.skip(c);break;case 9:if(c==Ooyala.Thrift.Type.I16){b=a.readI16();this.dmaCode=b.value}else a.skip(c);break;case 10:if(c==Ooyala.Thrift.Type.I16){b=a.readI16();this.pmsaCode=b.value}else a.skip(c);
                break;case 11:if(c==Ooyala.Thrift.Type.BYTE){b=a.readByte();this.source=b.value}else a.skip(c);break;case 12:if(c==Ooyala.Thrift.Type.STRING){b=a.readString();this.cookie=b.value}else a.skip(c);break;default:a.skip(c)}a.readFieldEnd()}a.readStructEnd()};
            Ooyala.Logging.User.prototype.write=function(a){a.writeStructBegin("User");if(null!=this.country){a.writeFieldBegin("country",Ooyala.Thrift.Type.STRING,1);a.writeString(this.country);a.writeFieldEnd()}if(null!=this.region){a.writeFieldBegin("region",Ooyala.Thrift.Type.STRING,2);a.writeString(this.region);a.writeFieldEnd()}if(null!=this.county){a.writeFieldBegin("county",Ooyala.Thrift.Type.STRING,3);a.writeString(this.county);a.writeFieldEnd()}if(null!=this.city){a.writeFieldBegin("city",Ooyala.Thrift.Type.STRING,
                4);a.writeString(this.city);a.writeFieldEnd()}if(null!=this.lat){a.writeFieldBegin("lat",Ooyala.Thrift.Type.I32,6);a.writeI32(this.lat);a.writeFieldEnd()}if(null!=this.lon){a.writeFieldBegin("lon",Ooyala.Thrift.Type.I32,7);a.writeI32(this.lon);a.writeFieldEnd()}if(null!=this.clientIP){a.writeFieldBegin("clientIP",Ooyala.Thrift.Type.STRING,8);a.writeString(this.clientIP);a.writeFieldEnd()}if(null!=this.dmaCode){a.writeFieldBegin("dmaCode",Ooyala.Thrift.Type.I16,9);a.writeI16(this.dmaCode);a.writeFieldEnd()}if(null!=
                this.pmsaCode){a.writeFieldBegin("pmsaCode",Ooyala.Thrift.Type.I16,10);a.writeI16(this.pmsaCode);a.writeFieldEnd()}if(null!=this.source){a.writeFieldBegin("source",Ooyala.Thrift.Type.BYTE,11);a.writeByte(this.source);a.writeFieldEnd()}if(null!=this.cookie){a.writeFieldBegin("cookie",Ooyala.Thrift.Type.STRING,12);a.writeString(this.cookie);a.writeFieldEnd()}a.writeFieldStop();a.writeStructEnd()};
            Ooyala.Logging.PlayerLogEntry=function(a){this.version=1;this.user=new Ooyala.Logging.User;this.logTime=0;this.logServer=this.userAgent=this.ipaddr="";this.userTimezone=this.userTime=0;this.documentUrl=this.country=this.guid="";this.authenticationTime=0;this.reportingIds=[];this.reportingIdDescriptors=[];this.tags=[];this.timezoneIds=[];this.clientStat="";this.events=[];this.adSpots=[];this.flashCookieAge=this.playerEmbedType=this.rootContentReportingIdIndex=this.providerReportingIdIndex=0;this.isUntrustedDocUrl=
                false;this.bucketInfo="";this.customEvents=[];this.accountId="";this.variationIds=[];this.playerBrandingId="";this.userTimeMillis=this.logTimeMillis=this.randomSessionSeed=this.sessionStartTimeMillis=0;if(a!=null){if(null!=a.version)this.version=a.version;if(null!=a.user)this.user=a.user;if(null!=a.logTime)this.logTime=a.logTime;if(null!=a.ipaddr)this.ipaddr=a.ipaddr;if(null!=a.userAgent)this.userAgent=a.userAgent;if(null!=a.logServer)this.logServer=a.logServer;if(null!=a.userTime)this.userTime=a.userTime;
                if(null!=a.userTimezone)this.userTimezone=a.userTimezone;if(null!=a.guid)this.guid=a.guid;if(null!=a.country)this.country=a.country;if(null!=a.documentUrl)this.documentUrl=a.documentUrl;if(null!=a.authenticationTime)this.authenticationTime=a.authenticationTime;if(null!=a.reportingIds)this.reportingIds=a.reportingIds;if(null!=a.reportingIdDescriptors)this.reportingIdDescriptors=a.reportingIdDescriptors;if(null!=a.tags)this.tags=a.tags;if(null!=a.timezoneIds)this.timezoneIds=a.timezoneIds;if(null!=
                    a.clientStat)this.clientStat=a.clientStat;if(null!=a.events)this.events=a.events;if(null!=a.adSpots)this.adSpots=a.adSpots;if(null!=a.providerReportingIdIndex)this.providerReportingIdIndex=a.providerReportingIdIndex;if(null!=a.rootContentReportingIdIndex)this.rootContentReportingIdIndex=a.rootContentReportingIdIndex;if(null!=a.playerEmbedType)this.playerEmbedType=a.playerEmbedType;if(null!=a.flashCookieAge)this.flashCookieAge=a.flashCookieAge;if(null!=a.isUntrustedDocUrl)this.isUntrustedDocUrl=a.isUntrustedDocUrl;
                if(null!=a.bucketInfo)this.bucketInfo=a.bucketInfo;if(null!=a.customEvents)this.customEvents=a.customEvents;if(null!=a.accountId)this.accountId=a.accountId;if(null!=a.variationIds)this.variationIds=a.variationIds;if(null!=a.playerBrandingId)this.playerBrandingId=a.playerBrandingId;if(null!=a.sessionStartTimeMillis)this.sessionStartTimeMillis=a.sessionStartTimeMillis;if(null!=a.randomSessionSeed)this.randomSessionSeed=a.randomSessionSeed;if(null!=a.logTimeMillis)this.logTimeMillis=a.logTimeMillis;
                if(null!=a.userTimeMillis)this.userTimeMillis=a.userTimeMillis}};Ooyala.Logging.PlayerLogEntry.prototype={};
            Ooyala.Logging.PlayerLogEntry.prototype.read=function(a){for(var b=a.readStructBegin();;){b=a.readFieldBegin();var c=b.ftype;if(c==Ooyala.Thrift.Type.STOP)break;switch(b.fid){case 1:if(c==Ooyala.Thrift.Type.BYTE){b=a.readByte();this.version=b.value}else a.skip(c);break;case 21:if(c==Ooyala.Thrift.Type.STRUCT){this.user=new Ooyala.Logging.User;this.user.read(a)}else a.skip(c);break;case 2:if(c==Ooyala.Thrift.Type.I32){b=a.readI32();this.logTime=b.value}else a.skip(c);break;case 3:if(c==Ooyala.Thrift.Type.STRING){b=
                a.readString();this.ipaddr=b.value}else a.skip(c);break;case 16:if(c==Ooyala.Thrift.Type.STRING){b=a.readString();this.userAgent=b.value}else a.skip(c);break;case 22:if(c==Ooyala.Thrift.Type.STRING){b=a.readString();this.logServer=b.value}else a.skip(c);break;case 8:if(c==Ooyala.Thrift.Type.I32){b=a.readI32();this.userTime=b.value}else a.skip(c);break;case 9:if(c==Ooyala.Thrift.Type.I16){b=a.readI16();this.userTimezone=b.value}else a.skip(c);break;case 4:if(c==Ooyala.Thrift.Type.STRING){b=a.readString();
                this.guid=b.value}else a.skip(c);break;case 5:if(c==Ooyala.Thrift.Type.STRING){b=a.readString();this.country=b.value}else a.skip(c);break;case 6:if(c==Ooyala.Thrift.Type.STRING){b=a.readString();this.documentUrl=b.value}else a.skip(c);break;case 7:if(c==Ooyala.Thrift.Type.I32){b=a.readI32();this.authenticationTime=b.value}else a.skip(c);break;case 10:if(c==Ooyala.Thrift.Type.LIST){c=0;this.reportingIds=[];b=a.readListBegin();c=b.size;for(var d=0;d<c;++d){b=null;b=a.readString();b=b.value;this.reportingIds.push(b)}a.readListEnd()}else a.skip(c);
                break;case 20:if(c==Ooyala.Thrift.Type.LIST){b=0;this.reportingIdDescriptors=[];b=a.readListBegin();b=b.size;for(c=0;c<b;++c){d=null;d=new Ooyala.Logging.ReportingIdDescriptor;d.read(a);this.reportingIdDescriptors.push(d)}a.readListEnd()}else a.skip(c);break;case 24:if(c==Ooyala.Thrift.Type.LIST){c=0;this.tags=[];b=a.readListBegin();c=b.size;for(d=0;d<c;++d){b=null;b=a.readString();b=b.value;this.tags.push(b)}a.readListEnd()}else a.skip(c);break;case 12:if(c==Ooyala.Thrift.Type.LIST){c=0;this.timezoneIds=
                [];b=a.readListBegin();c=b.size;for(d=0;d<c;++d){b=null;b=a.readI32();b=b.value;this.timezoneIds.push(b)}a.readListEnd()}else a.skip(c);break;case 13:if(c==Ooyala.Thrift.Type.STRING){b=a.readString();this.clientStat=b.value}else a.skip(c);break;case 11:if(c==Ooyala.Thrift.Type.LIST){b=0;this.events=[];b=a.readListBegin();b=b.size;for(c=0;c<b;++c){d=null;d=new Ooyala.Logging.PlayerEvent;d.read(a);this.events.push(d)}a.readListEnd()}else a.skip(c);break;case 14:if(c==Ooyala.Thrift.Type.LIST){b=0;this.adSpots=
                [];b=a.readListBegin();b=b.size;for(c=0;c<b;++c){d=null;d=new Ooyala.AdsLogging.AdSpot;d.read(a);this.adSpots.push(d)}a.readListEnd()}else a.skip(c);break;case 17:if(c==Ooyala.Thrift.Type.BYTE){b=a.readByte();this.providerReportingIdIndex=b.value}else a.skip(c);break;case 18:if(c==Ooyala.Thrift.Type.BYTE){b=a.readByte();this.rootContentReportingIdIndex=b.value}else a.skip(c);break;case 15:if(c==Ooyala.Thrift.Type.BYTE){b=a.readByte();this.playerEmbedType=b.value}else a.skip(c);break;case 19:if(c==
                Ooyala.Thrift.Type.I32){b=a.readI32();this.flashCookieAge=b.value}else a.skip(c);break;case 23:if(c==Ooyala.Thrift.Type.BOOL){b=a.readBool();this.isUntrustedDocUrl=b.value}else a.skip(c);break;case 25:if(c==Ooyala.Thrift.Type.STRING){b=a.readString();this.bucketInfo=b.value}else a.skip(c);break;case 26:if(c==Ooyala.Thrift.Type.LIST){b=0;this.customEvents=[];b=a.readListBegin();b=b.size;for(c=0;c<b;++c){d=null;d=new Ooyala.CustomEventsLogging.CustomEvent;d.read(a);this.customEvents.push(d)}a.readListEnd()}else a.skip(c);
                break;case 27:if(c==Ooyala.Thrift.Type.STRING){b=a.readString();this.accountId=b.value}else a.skip(c);break;case 28:if(c==Ooyala.Thrift.Type.LIST){c=0;this.variationIds=[];b=a.readListBegin();c=b.size;for(d=0;d<c;++d){b=null;b=a.readI32();b=b.value;this.variationIds.push(b)}a.readListEnd()}else a.skip(c);break;case 29:if(c==Ooyala.Thrift.Type.STRING){b=a.readString();this.playerBrandingId=b.value}else a.skip(c);break;case 30:if(c==Ooyala.Thrift.Type.I64){b=a.readI64();this.sessionStartTimeMillis=
                b.value}else a.skip(c);break;case 31:if(c==Ooyala.Thrift.Type.I64){b=a.readI64();this.randomSessionSeed=b.value}else a.skip(c);break;case 32:if(c==Ooyala.Thrift.Type.I64){b=a.readI64();this.logTimeMillis=b.value}else a.skip(c);break;case 33:if(c==Ooyala.Thrift.Type.I64){b=a.readI64();this.userTimeMillis=b.value}else a.skip(c);break;default:a.skip(c)}a.readFieldEnd()}a.readStructEnd()};
            Ooyala.Logging.PlayerLogEntry.prototype.write=function(a){a.writeStructBegin("PlayerLogEntry");if(null!=this.version){a.writeFieldBegin("version",Ooyala.Thrift.Type.BYTE,1);a.writeByte(this.version);a.writeFieldEnd()}if(null!=this.user){a.writeFieldBegin("user",Ooyala.Thrift.Type.STRUCT,21);this.user.write(a);a.writeFieldEnd()}if(null!=this.logTime){a.writeFieldBegin("logTime",Ooyala.Thrift.Type.I32,2);a.writeI32(this.logTime);a.writeFieldEnd()}if(null!=this.ipaddr){a.writeFieldBegin("ipaddr",Ooyala.Thrift.Type.STRING,
                3);a.writeString(this.ipaddr);a.writeFieldEnd()}if(null!=this.userAgent){a.writeFieldBegin("userAgent",Ooyala.Thrift.Type.STRING,16);a.writeString(this.userAgent);a.writeFieldEnd()}if(null!=this.logServer){a.writeFieldBegin("logServer",Ooyala.Thrift.Type.STRING,22);a.writeString(this.logServer);a.writeFieldEnd()}if(null!=this.userTime){a.writeFieldBegin("userTime",Ooyala.Thrift.Type.I32,8);a.writeI32(this.userTime);a.writeFieldEnd()}if(null!=this.userTimezone){a.writeFieldBegin("userTimezone",Ooyala.Thrift.Type.I16,
                9);a.writeI16(this.userTimezone);a.writeFieldEnd()}if(null!=this.guid){a.writeFieldBegin("guid",Ooyala.Thrift.Type.STRING,4);a.writeString(this.guid);a.writeFieldEnd()}if(null!=this.country){a.writeFieldBegin("country",Ooyala.Thrift.Type.STRING,5);a.writeString(this.country);a.writeFieldEnd()}if(null!=this.documentUrl){a.writeFieldBegin("documentUrl",Ooyala.Thrift.Type.STRING,6);a.writeString(this.documentUrl);a.writeFieldEnd()}if(null!=this.authenticationTime){a.writeFieldBegin("authenticationTime",
                Ooyala.Thrift.Type.I32,7);a.writeI32(this.authenticationTime);a.writeFieldEnd()}if(null!=this.reportingIds){a.writeFieldBegin("reportingIds",Ooyala.Thrift.Type.LIST,10);a.writeListBegin(Ooyala.Thrift.Type.STRING,this.reportingIds.length);for(var b=0;b<this.reportingIds.length;b++)a.writeString(this.reportingIds[b]);a.writeListEnd();a.writeFieldEnd()}if(null!=this.reportingIdDescriptors){a.writeFieldBegin("reportingIdDescriptors",Ooyala.Thrift.Type.LIST,20);a.writeListBegin(Ooyala.Thrift.Type.STRUCT,
                this.reportingIdDescriptors.length);for(b=0;b<this.reportingIdDescriptors.length;b++)this.reportingIdDescriptors[b].write(a);a.writeListEnd();a.writeFieldEnd()}if(null!=this.tags){a.writeFieldBegin("tags",Ooyala.Thrift.Type.LIST,24);a.writeListBegin(Ooyala.Thrift.Type.STRING,this.tags.length);for(b=0;b<this.tags.length;b++)a.writeString(this.tags[b]);a.writeListEnd();a.writeFieldEnd()}if(null!=this.timezoneIds){a.writeFieldBegin("timezoneIds",Ooyala.Thrift.Type.LIST,12);a.writeListBegin(Ooyala.Thrift.Type.I32,
                this.timezoneIds.length);for(b=0;b<this.timezoneIds.length;b++)a.writeI32(this.timezoneIds[b]);a.writeListEnd();a.writeFieldEnd()}if(null!=this.clientStat){a.writeFieldBegin("clientStat",Ooyala.Thrift.Type.STRING,13);a.writeString(this.clientStat);a.writeFieldEnd()}if(null!=this.events){a.writeFieldBegin("events",Ooyala.Thrift.Type.LIST,11);a.writeListBegin(Ooyala.Thrift.Type.STRUCT,this.events.length);for(b=0;b<this.events.length;b++)this.events[b].write(a);a.writeListEnd();a.writeFieldEnd()}if(null!=
                this.adSpots){a.writeFieldBegin("adSpots",Ooyala.Thrift.Type.LIST,14);a.writeListBegin(Ooyala.Thrift.Type.STRUCT,this.adSpots.length);for(b=0;b<this.adSpots.length;b++)this.adSpots[b].write(a);a.writeListEnd();a.writeFieldEnd()}if(null!=this.providerReportingIdIndex){a.writeFieldBegin("providerReportingIdIndex",Ooyala.Thrift.Type.BYTE,17);a.writeByte(this.providerReportingIdIndex);a.writeFieldEnd()}if(null!=this.rootContentReportingIdIndex){a.writeFieldBegin("rootContentReportingIdIndex",Ooyala.Thrift.Type.BYTE,
                18);a.writeByte(this.rootContentReportingIdIndex);a.writeFieldEnd()}if(null!=this.playerEmbedType){a.writeFieldBegin("playerEmbedType",Ooyala.Thrift.Type.BYTE,15);a.writeByte(this.playerEmbedType);a.writeFieldEnd()}if(null!=this.flashCookieAge){a.writeFieldBegin("flashCookieAge",Ooyala.Thrift.Type.I32,19);a.writeI32(this.flashCookieAge);a.writeFieldEnd()}if(null!=this.isUntrustedDocUrl){a.writeFieldBegin("isUntrustedDocUrl",Ooyala.Thrift.Type.BOOL,23);a.writeBool(this.isUntrustedDocUrl);a.writeFieldEnd()}if(null!=
                this.bucketInfo){a.writeFieldBegin("bucketInfo",Ooyala.Thrift.Type.STRING,25);a.writeString(this.bucketInfo);a.writeFieldEnd()}if(null!=this.customEvents){a.writeFieldBegin("customEvents",Ooyala.Thrift.Type.LIST,26);a.writeListBegin(Ooyala.Thrift.Type.STRUCT,this.customEvents.length);for(b=0;b<this.customEvents.length;b++)this.customEvents[b].write(a);a.writeListEnd();a.writeFieldEnd()}if(null!=this.accountId){a.writeFieldBegin("accountId",Ooyala.Thrift.Type.STRING,27);a.writeString(this.accountId);
                a.writeFieldEnd()}if(null!=this.variationIds){a.writeFieldBegin("variationIds",Ooyala.Thrift.Type.LIST,28);a.writeListBegin(Ooyala.Thrift.Type.I32,this.variationIds.length);for(b=0;b<this.variationIds.length;b++)a.writeI32(this.variationIds[b]);a.writeListEnd();a.writeFieldEnd()}if(null!=this.playerBrandingId){a.writeFieldBegin("playerBrandingId",Ooyala.Thrift.Type.STRING,29);a.writeString(this.playerBrandingId);a.writeFieldEnd()}if(null!=this.sessionStartTimeMillis){a.writeFieldBegin("sessionStartTimeMillis",
                Ooyala.Thrift.Type.I64,30);a.writeI64(this.sessionStartTimeMillis);a.writeFieldEnd()}if(null!=this.randomSessionSeed){a.writeFieldBegin("randomSessionSeed",Ooyala.Thrift.Type.I64,31);a.writeI64(this.randomSessionSeed);a.writeFieldEnd()}if(null!=this.logTimeMillis){a.writeFieldBegin("logTimeMillis",Ooyala.Thrift.Type.I64,32);a.writeI64(this.logTimeMillis);a.writeFieldEnd()}if(null!=this.userTimeMillis){a.writeFieldBegin("userTimeMillis",Ooyala.Thrift.Type.I64,33);a.writeI64(this.userTimeMillis);a.writeFieldEnd()}a.writeFieldStop();
                a.writeStructEnd()};if(typeof Ooyala==="undefined")Ooyala={};if(typeof Ooyala.Logging==="undefined")Ooyala.Logging={};Ooyala.Logging.Session=function(a){this.log_entries=[];if(a!=null)if(null!=a.log_entries)this.log_entries=a.log_entries};Ooyala.Logging.Session.prototype={};
            Ooyala.Logging.Session.prototype.read=function(a){for(var b=a.readStructBegin();;){b=a.readFieldBegin();var c=b.ftype;if(c==Ooyala.Thrift.Type.STOP)break;switch(b.fid){case 1:if(c==Ooyala.Thrift.Type.LIST){b=0;this.log_entries=[];b=a.readListBegin().size;for(c=0;c<b;++c){var d=null;d=new Ooyala.Logging.PlayerLogEntry;d.read(a);this.log_entries.push(d)}a.readListEnd()}else a.skip(c);break;default:a.skip(c)}a.readFieldEnd()}a.readStructEnd()};
            Ooyala.Logging.Session.prototype.write=function(a){a.writeStructBegin("Session");if(null!=this.log_entries){a.writeFieldBegin("log_entries",Ooyala.Thrift.Type.LIST,1);a.writeListBegin(Ooyala.Thrift.Type.STRUCT,this.log_entries.length);for(var b=0;b<this.log_entries.length;b++)this.log_entries[b].write(a);a.writeListEnd();a.writeFieldEnd()}a.writeFieldStop();a.writeStructEnd()};/*
             http://www.gnu.org/licenses/gpl.html [GNU General Public License]
             @param {jQuery} {sha1:function(string))
             @return string
             */
            Ooyala.Util.createNamespace("Ooyala.ThirdParty.CRC32");
            (function(){Ooyala.ThirdParty.CRC32.computeCrc=function(a){var b=a;a=void 0;b=b;b=b.replace(/\x0d\x0a/g,"\n");for(var c="",d=0;d<b.length;d++){var e=b.charCodeAt(d);if(e<128)c+=String.fromCharCode(e);else{if(e>127&&e<2048)c+=String.fromCharCode(e>>6|192);else{c+=String.fromCharCode(e>>12|224);c+=String.fromCharCode(e>>6&63|128)}c+=String.fromCharCode(e&63|128)}}b=c;if(typeof a=="undefined")a=0;e=e=0;a^=-1;c=0;for(d=b.length;c<d;c++){e=(a^b.charCodeAt(c))&255;e="0x"+"00000000 77073096 EE0E612C 990951BA 076DC419 706AF48F E963A535 9E6495A3 0EDB8832 79DCB8A4 E0D5E91E 97D2D988 09B64C2B 7EB17CBD E7B82D07 90BF1D91 1DB71064 6AB020F2 F3B97148 84BE41DE 1ADAD47D 6DDDE4EB F4D4B551 83D385C7 136C9856 646BA8C0 FD62F97A 8A65C9EC 14015C4F 63066CD9 FA0F3D63 8D080DF5 3B6E20C8 4C69105E D56041E4 A2677172 3C03E4D1 4B04D447 D20D85FD A50AB56B 35B5A8FA 42B2986C DBBBC9D6 ACBCF940 32D86CE3 45DF5C75 DCD60DCF ABD13D59 26D930AC 51DE003A C8D75180 BFD06116 21B4F4B5 56B3C423 CFBA9599 B8BDA50F 2802B89E 5F058808 C60CD9B2 B10BE924 2F6F7C87 58684C11 C1611DAB B6662D3D 76DC4190 01DB7106 98D220BC EFD5102A 71B18589 06B6B51F 9FBFE4A5 E8B8D433 7807C9A2 0F00F934 9609A88E E10E9818 7F6A0DBB 086D3D2D 91646C97 E6635C01 6B6B51F4 1C6C6162 856530D8 F262004E 6C0695ED 1B01A57B 8208F4C1 F50FC457 65B0D9C6 12B7E950 8BBEB8EA FCB9887C 62DD1DDF 15DA2D49 8CD37CF3 FBD44C65 4DB26158 3AB551CE A3BC0074 D4BB30E2 4ADFA541 3DD895D7 A4D1C46D D3D6F4FB 4369E96A 346ED9FC AD678846 DA60B8D0 44042D73 33031DE5 AA0A4C5F DD0D7CC9 5005713C 270241AA BE0B1010 C90C2086 5768B525 206F85B3 B966D409 CE61E49F 5EDEF90E 29D9C998 B0D09822 C7D7A8B4 59B33D17 2EB40D81 B7BD5C3B C0BA6CAD EDB88320 9ABFB3B6 03B6E20C 74B1D29A EAD54739 9DD277AF 04DB2615 73DC1683 E3630B12 94643B84 0D6D6A3E 7A6A5AA8 E40ECF0B 9309FF9D 0A00AE27 7D079EB1 F00F9344 8708A3D2 1E01F268 6906C2FE F762575D 806567CB 196C3671 6E6B06E7 FED41B76 89D32BE0 10DA7A5A 67DD4ACC F9B9DF6F 8EBEEFF9 17B7BE43 60B08ED5 D6D6A3E8 A1D1937E 38D8C2C4 4FDFF252 D1BB67F1 A6BC5767 3FB506DD 48B2364B D80D2BDA AF0A1B4C 36034AF6 41047A60 DF60EFC3 A867DF55 316E8EEF 4669BE79 CB61B38C BC66831A 256FD2A0 5268E236 CC0C7795 BB0B4703 220216B9 5505262F C5BA3BBE B2BD0B28 2BB45A92 5CB36A04 C2D7FFA7 B5D0CF31 2CD99E8B 5BDEAE1D 9B64C2B0 EC63F226 756AA39C 026D930A 9C0906A9 EB0E363F 72076785 05005713 95BF4A82 E2B87A14 7BB12BAE 0CB61B38 92D28E9B E5D5BE0D 7CDCEFB7 0BDBDF21 86D3D2D4 F1D4E242 68DDB3F8 1FDA836E 81BE16CD F6B9265B 6FB077E1 18B74777 88085AE6 FF0F6A70 66063BCA 11010B5C 8F659EFF F862AE69 616BFFD3 166CCF45 A00AE278 D70DD2EE 4E048354 3903B3C2 A7672661 D06016F7 4969474D 3E6E77DB AED16A4A D9D65ADC 40DF0B66 37D83BF0 A9BCAE53 DEBB9EC5 47B2CF7F 30B5FFE9 BDBDF21C CABAC28A 53B39330 24B4A3A6 BAD03605 CDD70693 54DE5729 23D967BF B3667A2E C4614AB8 5D681B02 2A6F2B94 B40BBE37 C30C8EA1 5A05DF1B 2D02EF8D".substr(e*
                    9,8);a=a>>>8^e}a=a^-1;return(a>>>1)*2+(a&1)}})();Ooyala.Util.createNamespace("Ooyala.ThirdParty.SHA256");
            (function(){function a(f,h){var i=(f&65535)+(h&65535);return(f>>16)+(h>>16)+(i>>16)<<16|i&65535}function b(f,h){return f>>>h|f<<32-h}function c(f,h){var i=Array(1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,
                666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298),g=Array(1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225),j=Array(64),l,n,o,r,m,p,q,s,t,k,u,v;f[h>>5]|=128<<24-h%32;f[(h+
            64>>9<<4)+15]=h;for(t=0;t<f.length;t+=16){l=g[0];n=g[1];o=g[2];r=g[3];m=g[4];p=g[5];q=g[6];s=g[7];for(k=0;k<64;k++){j[k]=k<16?f[k+t]:a(a(a(b(j[k-2],17)^b(j[k-2],19)^j[k-2]>>>10,j[k-7]),b(j[k-15],7)^b(j[k-15],18)^j[k-15]>>>3),j[k-16]);u=a(a(a(a(s,b(m,6)^b(m,11)^b(m,25)),m&p^~m&q),i[k]),j[k]);v=a(b(l,2)^b(l,13)^b(l,22),l&n^l&o^n&o);s=q;q=p;p=m;m=a(r,u);r=o;o=n;n=l;l=a(u,v)}g[0]=a(l,g[0]);g[1]=a(n,g[1]);g[2]=a(o,g[2]);g[3]=a(r,g[3]);g[4]=a(m,g[4]);g[5]=a(p,g[5]);g[6]=a(q,g[6]);g[7]=a(s,g[7])}return g}
                function d(f){for(var h=[],i=(1<<e)-1,g=0;g<f.length*e;g+=e)h[g>>5]|=(f.charCodeAt(g/e)&i)<<24-g%32;return h}var e=8;Ooyala.ThirdParty.SHA256.sha256ToHexString=function(f){f=c(d(f),f.length*e);for(var h="",i=0;i<f.length*4;i++)h+="0123456789abcdef".charAt(f[i>>2]>>(3-i%4)*8+4&15)+"0123456789abcdef".charAt(f[i>>2]>>(3-i%4)*8&15);return h};Ooyala.ThirdParty.SHA256.sha256ToBase64String=function(f){f=c(d(f),f.length*e);for(var h="",i=0;i<f.length*4;i+=3)for(var g=(f[i>>2]>>8*(3-i%4)&255)<<16|(f[i+1>>
                    2]>>8*(3-(i+1)%4)&255)<<8|f[i+2>>2]>>8*(3-(i+2)%4)&255,j=0;j<4;j++)h+=i*8+j*6>f.length*32?"":"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".charAt(g>>6*(3-j)&63);return h};Ooyala.ThirdParty.SHA256.sha256ToString=function(f){f=c(d(f),f.length*e);for(var h="",i=(1<<e)-1,g=0;g<f.length*32;g+=e)h+=String.fromCharCode(f[g>>5]>>>24-g%32&i);return h}})();Ooyala.Constants={LOGGING_SERVER_DOMAIN:(window.location.protocol=="https:"?"https:":"http:")+"//l.ooyala.com",IFRAME_PINGER_PATH:"/analytics/iframe.html",SAS_URL:(window.location.protocol=="https:"?"https:":"http:")+"//player.ooyala.com/sas/analytics",HIGH_PRIORITY_EVENT:0,LOW_PRIORITY_EVENT:1,HIGH_PRIORITY_EVENT_FLUSH_INTERVAL_MS:1E3,LOW_PRIORITY_EVENT_FLUSH_INTERVAL_MS:1E4,MIN_DURATION_FOR_STEP_BACKOFF:24E4};Ooyala.Util.createNamespace("Ooyala.Pinger");Ooyala.Pinger.ALIVE_MESSAGE="&handshake!";Ooyala.Pinger.COOKIE_NAME="gi";Ooyala.Pinger.DAYS_TO_LIVE=7300;Ooyala.Pinger._numCompare=function(){return-1};Ooyala.Pinger.RegisterMessageListener=function(a){window.addEventListener?window.addEventListener("message",a,false):window.attachEvent("onmessage",a)};Ooyala.Pinger.RemoveMessageListener=function(a){window.removeEventListener?window.removeEventListener("message",a):window.detachEvent("onmessage",a)};
            Ooyala.Pinger._createAndSetGuid=function(){var a=(new Date).getTime(),b=window.navigator.userAgent,c=Math.random();c=c>0?c.toString(16).split(".")[1]:"00000000";a=Ooyala.ThirdParty.SHA256.sha256ToBase64String(a+b+c);(new Ooyala.Util.CookieManager(Ooyala.Pinger.COOKIE_NAME,Ooyala.Pinger.DAYS_TO_LIVE,Ooyala.Pinger._numCompare)).set("guid",a);return a};
            Ooyala.Pinger.getOrCreateGuid=function(){var a=(new Ooyala.Util.CookieManager(Ooyala.Pinger.COOKIE_NAME,Ooyala.Pinger.DAYS_TO_LIVE,Ooyala.Pinger._numCompare)).get("guid");if(a==null)a=Ooyala.Pinger._createAndSetGuid();return a};Ooyala.Pinger.Listener=function(a){this._reconstructor=new Ooyala.Pinger.ChunkReconstructor(a)};Ooyala.Pinger.Listener.POLL_INTERVAL=500;
            Ooyala.Pinger.Listener.prototype={_pollAndSend:function(){var a=window.location.hash;if(a.length>1){window.location.hash="";this._reconstructor.push(a.substring(1))}window.setTimeout(Ooyala.Util.bind(this._pollAndSend,this),Ooyala.Pinger.Listener.POLL_INTERVAL)},_messageHandler:function(a){this._reconstructor.push(a.data)},start:function(){if(window.postMessage){try{parent.postMessage(Ooyala.Pinger.ALIVE_MESSAGE+";"+Ooyala.Pinger.getOrCreateGuid(),"*")}catch(a){}Ooyala.Pinger.RegisterMessageListener(Ooyala.Util.bind(this._messageHandler,
                this))}else this._pollAndSend()}};Ooyala.Pinger.ChunkReconstructor=function(a){this._receiver=a;this._reset()};
            Ooyala.Pinger.ChunkReconstructor.prototype={_parseChunk:function(a){var b=a.split("~");if(b.length!=3){window.console&&console.log("Warning - Ooyala iframe is receiving data from non-Ooyala sources. Shouldn't be the case, ignored the data: "+a);return null}a={};a.data=b[0];a.id=parseInt(b[1]);a.count=parseInt(b[2]);if(a.id<=0||a.count<=0||a.id>a.count)throw"Bad chunk ID or total chunk count in ping chunk.";return a},_reset:function(){this._data="";this._totalChunks=this._chunksSeen=0},_handleChunk:function(a){if(this._totalChunks==
                0){if(!(a.id>1))if(a.count==1)this._receiver.sendPing(a.data);else{this._chunksSeen=1;this._totalChunks=a.count;this._data=a.data}}else if(a.count==this._totalChunks&&a.id==this._chunksSeen+1)if(a.count==a.id){a=this._data+a.data;this._reset();this._receiver.sendPing(a)}else{this._chunksSeen+=1;this._data+=a.data}else{this._reset();this._handleChunk(a)}},push:function(a){a=this._parseChunk(a);a!==null&&this._handleChunk(a)}};Ooyala.Pinger.ServerPinger=function(a){this._pingUrl=a};
            Ooyala.Pinger.MAX_XVERIFY_HEADER_LENGTH=7500;Ooyala.Pinger.ServerPinger.prototype={sendPing:function(a){if(a.length>Ooyala.Pinger.MAX_XVERIFY_HEADER_LENGTH)throw"Ping (length = "+a.length+") is too long.";var b=Ooyala.Util.Http.createXMLHttpRequest();b.open("POST",this._pingUrl,true);b.setRequestHeader("X-Verify",a);b.send(null)}};Ooyala.Util.createNamespace("Ooyala.Pinger");Ooyala.Pinger.OuterPinger=function(a){this._pingerIFrameWindow=this._pingerIFrame=null;this._browserCompatible=true;this._onReadyFn=a;this._initializePingerIFrame();this._bufferedChunks=[];this._scheduleFlushInMillis(Ooyala.Pinger.OuterPinger.SEND_INTERVAL_MILLIS)};Ooyala.Pinger.OuterPinger.IFRAME_BASE_URL=Ooyala.Constants.LOGGING_SERVER_DOMAIN+Ooyala.Constants.IFRAME_PINGER_PATH;Ooyala.Pinger.OuterPinger.MAX_MESSAGE_LENGTH=7500;
            Ooyala.Pinger.OuterPinger.MAX_CHUNKS_PER_MESSAGE=2;Ooyala.Pinger.OuterPinger.MAX_CHUNK_LENGTH=Math.ceil(Ooyala.Pinger.OuterPinger.MAX_MESSAGE_LENGTH/Ooyala.Pinger.OuterPinger.MAX_CHUNKS_PER_MESSAGE);Ooyala.Pinger.OuterPinger.SEND_INTERVAL_MILLIS=1E3;
            Ooyala.Pinger.OuterPinger.prototype={sendMessage:function(a){if(window.navigator.userAgent.indexOf("Netgem")!==-1){if(a.length>7500)throw"Ping (length = "+a.length+") is too long.";var b=Ooyala.Util.Http.createXMLHttpRequest();b.open("POST",Ooyala.Constants.LOGGING_SERVER_DOMAIN+"/verify",true);b.setRequestHeader("X-Verify",a);b.send(null)}else if(this._browserCompatible)this._bufferedChunks=this._bufferedChunks.concat(this._convertMessageToChunks(a))},_convertMessageToChunks:function(a){if(a.length<=
                Ooyala.Pinger.OuterPinger.MAX_MESSAGE_LENGTH){for(var b=[],c=Math.ceil(a.length/Ooyala.Pinger.OuterPinger.MAX_CHUNK_LENGTH),d=0;d<c;d++){var e=a.substr(d*Ooyala.Pinger.OuterPinger.MAX_CHUNK_LENGTH,Ooyala.Pinger.OuterPinger.MAX_CHUNK_LENGTH)+"~"+(d+1).toString()+"~"+c.toString();b.push(e)}return b}else throw Error("Message (length = "+a.length+") is too long.");},_flushNextChunk:function(){var a=this._bufferedChunks.length>0?this._bufferedChunks.shift():null;if(a)window.postMessage?this._pingerIFrameWindow.postMessage(a,
                    Ooyala.Constants.LOGGING_SERVER_DOMAIN):this._pingerIFrame.setAttribute("src",Ooyala.Pinger.OuterPinger.IFRAME_BASE_URL+"#"+a);this._scheduleFlushInMillis(Ooyala.Pinger.OuterPinger.SEND_INTERVAL_MILLIS)},_scheduleFlushInMillis:function(a){setTimeout(Ooyala.Util.bind(this._flushNextChunk,this),a)},_getUnusedId:function(a){for(var b=0;document.getElementById(a+b.toString());)b+=1;return a+b.toString()},_initializePingerIFrame:function(){var a=this._getUnusedId("OoyalaPingerIFrame");if(window.postMessage){this._pingerIFrame=
                document.createElement("iframe");this._setUpHiddenIFrame(this._pingerIFrame,a);document.body.appendChild(this._pingerIFrame);this._pingerIFrameWindow=window.frames[a];Ooyala.Pinger.RegisterMessageListener(Ooyala.Util.bind(this._handleHandshake,this))}else if(window.navigator.userAgent.indexOf("Netgem")!==-1){document.write("<IFRAME id='"+a+"'></IFRAME>");this._pingerIFrame=document.getElementById(a);this._setUpHiddenIFrame(this._pingerIFrame,a);this._pingerIFrameWindow=null;this._onReadyFn&&this._onReadyFn()}else if(window.ActiveXObject){var b=
                new ActiveXObject("htmlfile");b.open();b.write("<html><body><iframe id='"+a+"' src='"+Ooyala.Pinger.OuterPinger.IFRAME_BASE_URL+"'></iframe></body></html>");b.close();this._pingerIFrame=b.getElementById(a);this._pingerIFrameWindow=null;this._pingerIFrameDocument=b;this._onReadyFn&&this._onReadyFn()}else this._browserCompatible=false},_handleHandshake:function(a){if(!(!a||typeof a.data!="string")){a=a.data.split(";");a.length==2&&a[0]==Ooyala.Pinger.ALIVE_MESSAGE&&this._onReadyFn&&this._onReadyFn(a[1])}},
                _setUpHiddenIFrame:function(a,b){a.setAttribute("name",b);a.setAttribute("id",b);a.setAttribute("src",Ooyala.Pinger.OuterPinger.IFRAME_BASE_URL);a.style.visibility="hidden";a.style["border-style"]="none";a.style.width="1px";a.style.height="1px";a.style.position="absolute";a.style.top="-5px";a.style.left="-5px"}};Ooyala.PlaytimeTracker=function(a,b,c,d){this._lastPlayheadPosition=0;this._totalTimeBetweenPlayheadUpdates=Ooyala.PlaytimeTracker.INITIAL_ESTIMATE_FOR_TIME_BETWEEN_PLAYHEAD_UPDATES;this._numPlayheadUpdateDataPoints=1;this._bucketsWatched=Ooyala.Util.Enumerable.map(Array(Ooyala.PlaytimeTracker.NUM_BUCKETS),function(){return false});this._numBucketsWatched=0;this._updateWasSeek=false;this._lastBucketWatchedIndex=0;this._duration=a;this._reportTimePlayedHandle=b;this._reportBucketWatchedHandle=c;this._reportPercentageWatchedHandle=
                d};Ooyala.PlaytimeTracker.INITIAL_ESTIMATE_FOR_TIME_BETWEEN_PLAYHEAD_UPDATES=250;Ooyala.PlaytimeTracker.MILLIS_BETWEEN_PLAYHEAD_UPDATES_FOR_SEEK=5E3;Ooyala.PlaytimeTracker.PER_MILLE_PER_BUCKET=25;Ooyala.PlaytimeTracker.NUM_BUCKETS=1E3/Ooyala.PlaytimeTracker.PER_MILLE_PER_BUCKET;
            Ooyala.PlaytimeTracker.prototype={processPlayheadUpdate:function(a){var b=this._computeTimeDiff(a),c=this._getRangeBucketsWatched(a),d=c[0];c=c[1];this._lastPlayheadPosition=a;b>0&&this._reportTimePlayedHandle(b,a);a=0;for(d=d;d<c;d++){if(!this._bucketsWatched[d]){this._bucketsWatched[d]=true;a++}b=this._bucketToMinMaxPerMille(d);this._reportBucketWatchedHandle.call(undefined,b[0],b[1])}if(a>0){c=this._numBucketsWatched*Ooyala.PlaytimeTracker.PER_MILLE_PER_BUCKET+1;this._numBucketsWatched+=a;this._reportPercentageWatchedHandle.call(undefined,
                c,this._numBucketsWatched*Ooyala.PlaytimeTracker.PER_MILLE_PER_BUCKET)}},_computeTimeDiff:function(a){if(a==0){this._updateWasSeek=true;return 0}if(a-this._lastPlayheadPosition>Ooyala.PlaytimeTracker.MILLIS_BETWEEN_PLAYHEAD_UPDATES_FOR_SEEK||a<this._lastPlayheadPosition){this._updateWasSeek=true;return this._estimatedTimeBetweenPlayheadUpdates()}else{a=a-this._lastPlayheadPosition;this._updateEstimatedTimeBetweenPlayheadUpdates(a);this._updateWasSeek=false;return a}},_getRangeBucketsWatched:function(a){var b=
                [0,0];if(a==0)return b;if(this._updateWasSeek){a=this._timeToBucket(a);a==-1&&a++;b=[a,a+1]}else{b=this._timeToBucket(this._lastPlayheadPosition)+1;a=this._timeToBucket(a);b=[b,a+1]}return b},_timeToBucket:function(a){if(a<0)return 0;if(a>=this._duration)return Ooyala.PlaytimeTracker.NUM_BUCKETS-1;return this._perMilleToBucket(parseInt(a/this._duration*1E3))},_perMilleToBucket:function(a){if(a==0)return-1;return parseInt((a-1)/Ooyala.PlaytimeTracker.PER_MILLE_PER_BUCKET)},_bucketToMinMaxPerMille:function(a){return[a*
            Ooyala.PlaytimeTracker.PER_MILLE_PER_BUCKET+1,(a+1)*Ooyala.PlaytimeTracker.PER_MILLE_PER_BUCKET]},_estimatedTimeBetweenPlayheadUpdates:function(){return this._totalTimeBetweenPlayheadUpdates/this._numPlayheadUpdateDataPoints},_updateEstimatedTimeBetweenPlayheadUpdates:function(a){this._totalTimeBetweenPlayheadUpdates+=a;this._numPlayheadUpdateDataPoints+=1}};Ooyala.HistoryTracker=function(){this._cookieManager=new Ooyala.Util.CookieManager(Ooyala.HistoryTracker.COOKIE_NAME,Ooyala.HistoryTracker.DAYS_TO_LIVE,Ooyala.HistoryTracker.timestampCompare);this._cookieManager.deDupe()};Ooyala.HistoryTracker.COOKIE_NAME="Ooyala";Ooyala.HistoryTracker.DAYS_TO_LIVE=365;Ooyala.HistoryTracker.timestampCompare=function(a,b){var c=a==null?0:parseFloat(a),d=b==null?0:parseFloat(b);return c-d};
            Ooyala.HistoryTracker.prototype={getAndSetLastEventTime:function(a,b){if(a==null||b==null)return null;var c=a+"|"+b,d=this._cookieManager.get(c);d=d==null?null:parseFloat(d);this._currentTimestamp();this._cookieManager.set(c,this._currentTimestamp());return d},_currentTimestamp:function(){return Math.round((new Date).getTime()/1E3)}};Ooyala.Reporter=function(a,b){if(!a)throw"No Provider Code was provided to the Reporter";this._id=Ooyala.Reporter._next_id.toString();Ooyala.Reporter._next_id+=1;Ooyala.Reporter._map[this._id]=this;this._pCode=a;this._playerLoaded=false;this._resetState(null,null);var c=b&&b.accountId;if(typeof c!=="string")c=null;var d=b&&b.guid;if(typeof d!=="string")d=null;var e=b&&b.documentUrl;if(typeof e!=="string")e=null;var f=b&&b.playerBrandingId;if(typeof f!=="string")f=null;this._logger=new Ooyala.ThriftLogger(this._pCode,
                c,d,e,f);this._historyTracker=new Ooyala.HistoryTracker;this._logger.wait("SAS_Response");this._requestSasInformation();this._logger.logPlayerEvents(this._createEventWithLastEventTime(Ooyala.Logging.PlayerEventType.PLAYER_LOAD,[Ooyala.ThriftLogger.GLOBAL_REPORTING_ID_INDEX,Ooyala.ThriftLogger.PROVIDER_REPORTING_ID_INDEX]));this._playerLoaded=true;this._adSpot=new Ooyala.AdsLogging.AdSpot;this._adInfo={};(c=b&&b.tags)&&this.setTags(c);this._nextPlaythroughToReport=this._playthroughReportFrequency=
                25};Ooyala.Reporter._next_id=0;Ooyala.Reporter._map={};
            Ooyala.Reporter._NULL_PLAYER_EVENT_FIELDS=["bitratePlayed","download","chunkFailover","playhead","cvinfo","DEPRECATED_adClick","buckets","adTracking","metric","bitrateTransition","sharing","payPerView","sasAuthorize","sasAuthorizeV2","personalizationBucketInfo","customEvent","reportingIdIndex","lastEventTime","timePlayed","firstForPlayer","param1","param2","firstForRootContent","firstForVideo","bufferType","bitratesAvailable","reportingIdIndexToPlayheadPositionMillis","autoplay","playthroughPercent",
                "seqnum"];Ooyala.Reporter.AdSource={OOYALA:1,DOUBLECLICK:2,LIGHTNINGCAST:3,YUME:4,TREMOR:5,ADSENSE:6,TV2N:7,OAS:8,ADTECH:9,SCANSCOUT:10,ATLAS:11,FREEWHEEL:12,OPENX:13,LIVERAIL:14,VAST:15,ADIFY:16,DART_ENTERPRISE:17,CBSI:18,BRIGHTROLL:19,UNKNOWN:20,ADAPTV:21,VIDEOPLAZA:22,SPOTXCHANGE:23};Ooyala.Reporter.AdPositionType={PREROLL:1,MIDROLL:2,POSTROLL:3,OVERLAY:4,ENDSLATE:5,STANDALONE:6};Ooyala.Reporter.AdFormat={VIDEO:1,OVERLAY:2,ENDCAP:3,COMPANION:4};
            Ooyala.Reporter.AdFailureReason={LOAD_ERROR:1,LOAD_TIMEOUT:2,LOAD_IO_ERROR:3,PREFETCH_ERROR:4,PREFETCH_TIMEOUT:5,PREFETCH_IO_ERROR:6,PLAY_ERROR:7,PLAY_TIMEOUT:8,PLAY_IO_ERROR:9,INVALID_PLAYER_CONFIGURATION:10,INVALID_AD_CONFIGURATION:11,AD_NOT_FOUND:12,EXCEPTION:13,AD_ERROR:14,INVALID_AD_RESPONSE:15,CONNECTION_ERROR:16,BUFFERING_TIMEOUT:17,POLICY_RESTRICTION:18};
            Ooyala.Reporter.prototype={reportPlayerLoad:function(){},initializeVideo:function(a,b){if(window.Ooyala){this._resetState(a,b);this._backoff=Ooyala.Backoff.getAppropriateBackoff(b);this._logger.initializeVideo(a,this._backoff);this._reportGeneralEvent(Ooyala.Logging.PlayerEventType.DISPLAY,this._reportedDisplays,this._firstDisplayForPlayer);this._firstDisplayForPlayer=false;this._nextPlaythroughToReport=this._playthroughReportFrequency}},reportPlayRequested:function(){if(window.Ooyala){this._reportGeneralEvent(Ooyala.Logging.PlayerEventType.PLAY,
                this._reportedPlays,this._firstPlayForPlayer);this._firstPlayForPlayer=false}},reportPlayStarted:function(){this.reportPlayRequested()},reportVideoStarted:function(){if(window.Ooyala){this._reportGeneralEvent(Ooyala.Logging.PlayerEventType.VIDEO_START,this._reportedVideoStarts,this._firstVideoStartForPlayer);this._firstVideoStartForPlayer=false}},reportPlayheadUpdate:function(a){if(window.Ooyala){this._backoff.setPlayheadPosition(a);this._tracker.processPlayheadUpdate(a);if(a>0){this._reportGeneralEvent(Ooyala.Logging.PlayerEventType.PLAY,
                this._reportedPlays,this._firstPlayForPlayer);this._reportGeneralEvent(Ooyala.Logging.PlayerEventType.VIDEO_START,this._reportedVideoStarts,this._firstVideoStartForPlayer)}}},reportReplay:function(){window.Ooyala&&this._logger.logPlayerEvents(this._createEventWithLastEventTime(Ooyala.Logging.PlayerEventType.REPLAY,[Ooyala.ThriftLogger.GLOBAL_REPORTING_ID_INDEX,Ooyala.ThriftLogger.PROVIDER_REPORTING_ID_INDEX,Ooyala.ThriftLogger.VIDEO_REPORTING_ID_INDEX]))},setAdSource:function(a,b,c){if(typeof a!==
                "number"||a<=0||a>Object.keys(Ooyala.Reporter.AdSource).length)a=Ooyala.Reporter.AdSource.UNKNOWN;this._adSpot.adSource=a;if(a===Ooyala.Reporter.AdSource.OOYALA){if(!b||typeof b!=="string"||b.length!==32)throw"No valid embed code specified";this._adInfo.ooyalaEmbedCode=b;if(c&&typeof c!=="string")throw"Invalid Ad Click URL";this._adInfo.clickUrl=c}},setAdFormat:function(a){if(typeof a!=="number"||a<=0||a>Object.keys(Ooyala.Reporter.AdFormat).length)throw"Invalid Ad Format";this._adSpot.adFormat=a},
                setAdPositionType:function(a){if(typeof a!=="number"||a<=0||a>Object.keys(Ooyala.Reporter.AdPositionType).length)throw"Invalid Ad Position Type";this._adSpot.adPositionType=a},setAdPosition:function(a){if(typeof a!=="number")throw"Invalid Ad Position";this._adSpot.adPositionInMillis=a},setAdSourceContentId:function(a){if(typeof a!=="number")throw"Ad Source Content ID should be a number.";this._adSpot.adSourceContentId=a},setAdTagUrl:function(a){if(typeof a!=="string")throw"Invalid Tag URL";this._adSpot.tagUrl=
                    a},setAdId:function(a){if(typeof a!=="number")throw"Ad ID should be a number.";this._adSpot.adId=a},setAdPassthroughParameters:function(a){if(typeof a!=="object")throw"Passthrough params should be given as an object.";this._adSpot.passthroughParameters=a},resetAdInformation:function(){window.Ooyala&&this._resetAdState()},reportAdRequest:function(){this._reportAdEvent(Ooyala.Logging.PlayerEventType.AD_REQUESTED,new Ooyala.AdsLogging.AdTracking)},reportAdImpression:function(){this._adInfo.adImpression=
                    true;this._reportAdEvent(Ooyala.Logging.PlayerEventType.AD_IMPRESSION,new Ooyala.AdsLogging.AdTracking)},reportAdClickToSite:function(){var a=this._clickTracking();if(this._adSpot.adSource===1)a.clickUrl=this._adInfo.clickUrl;this._reportAdEvent(Ooyala.Logging.PlayerEventType.AD_CLICK,a)},reportAdClickToVideo:function(){var a=this._clickTracking();a.clickToVideo=true;this._reportAdEvent(Ooyala.Logging.PlayerEventType.AD_CLICK,a)},reportAdPlaythrough:function(a,b){if(typeof a!=="number"||typeof b!==
                    "number")throw"Playhead time and total time should be numbers.";if(!(b<=0)){a>=b*0.25&&this._reportPlaythroughIfNotReported(25);a>=b*0.5&&this._reportPlaythroughIfNotReported(50);a>=b*0.75&&this._reportPlaythroughIfNotReported(75);a>=b&&this._reportPlaythroughIfNotReported(100)}},reportAdPlayFailure:function(a){if(a&&(typeof a!=="number"||a<=0||a>Object.keys(Ooyala.Reporter.AdFailureReason).length))throw"Invalid Ad Failure Reason";var b=new Ooyala.AdsLogging.AdTracking;if(this._adInfo.adImpression)b.failureAfterAdImpression=
                    true;if(a)b.failureReason=a;this._reportAdEvent(Ooyala.Logging.PlayerEventType.AD_PLAY_FAILED,b)},reportDiscoveryImpression:function(a,b){if(window.Ooyala){if(a.constructor!==Array)throw"The relatedVideos argument must be an Array";else if(a.length===0)throw"The relatedVideos array must not be empty";else if(!a[0].bucket_info)throw"The relatedVideos[0] element does not have a bucket_info";var c=this._createPlayerEvent(Ooyala.Logging.PlayerEventType.RELATED_VIDEOS_DISPLAYED,[Ooyala.ThriftLogger.GLOBAL_REPORTING_ID_INDEX,
                    Ooyala.ThriftLogger.PROVIDER_REPORTING_ID_INDEX,Ooyala.ThriftLogger.VIDEO_REPORTING_ID_INDEX]),d=null;d=b?this._updateBucketInfoWithCustomData(a[0].bucket_info,b):a[0].bucket_info;c.personalizationBucketInfo=new Ooyala.Logging.PersonalizationBucketInfo;c.personalizationBucketInfo.bucketInfo=d;this._logger.logPlayerEvents([c])}},reportDiscoveryClick:function(a,b){if(window.Ooyala){if(a.bucket_info){if(!a.embed_code)throw"The clickedVideo argument does not have an embed_code";}else throw"The clickedVideo argument does not have a bucket_info";
                    var c=[Ooyala.ThriftLogger.GLOBAL_REPORTING_ID_INDEX],d=null;d=a.pcode?this._logger.getOrCreateExtraPcodeId(a.pcode):Ooyala.ThriftLogger.PROVIDER_REPORTING_ID_INDEX;c.push(d);d=this._logger.getOrCreateExtraEmbedCodeId(a.embed_code,d);c.push(d);c=this._createPlayerEvent(Ooyala.Logging.PlayerEventType.RELATED_VIDEO_SELECTED,c);d=null;d=b?this._updateBucketInfoWithCustomData(a.bucket_info,b):a.bucket_info;c.personalizationBucketInfo=new Ooyala.Logging.PersonalizationBucketInfo;c.personalizationBucketInfo.bucketInfo=
                        d;this._logger.logPlayerEvents([c])}},getSessionStartTimeMillis:function(){return this._logger.getSessionStartTimeMillis()},getRandomSessionSeed:function(){return this._logger.getRandomSessionSeed()},getAndIncrementNextEventSeqnum:function(){return this._logger.getAndIncrementNextEventSeqnum()},_reportAdEvent:function(a,b){if(window.Ooyala){var c=[Ooyala.ThriftLogger.GLOBAL_REPORTING_ID_INDEX,Ooyala.ThriftLogger.PROVIDER_REPORTING_ID_INDEX,Ooyala.ThriftLogger.VIDEO_REPORTING_ID_INDEX];if(this._adSpot.adSource===
                    1){var d=this._logger.addReportingId(this._adInfo.ooyalaEmbedCode);c.push(d)}c=this._createPlayerEvent(a,c);c.adTracking=b;c.adTracking.adSpotIndex=this._logger.getOrCreateAdSpotIndex(this._adSpot);this._adSpot.parentContentReportingIdIndex=Ooyala.ThriftLogger.VIDEO_REPORTING_ID_INDEX;this._logger.logPlayerEvents([c])}},_clickTracking:function(){var a=new Ooyala.AdsLogging.AdTracking;if(this._adInfo.clicked)a.dupClick=true;else this._adInfo.clicked=true;return a},_reportPlaythroughIfNotReported:function(a){if(!this._adInfo.playthrough)this._adInfo.playthrough=
                    Array(4);if(!this._adInfo.playthrough[a/25-1]){this._adInfo.playthrough[a/25-1]=true;var b=new Ooyala.AdsLogging.AdTracking;b.playThroughCompletion=a;this._reportAdEvent(Ooyala.Logging.PlayerEventType.AD_PLAYTHROUGH,b)}},setTags:function(a){this._logger.removeAllTags();for(var b=0;b<a.length;b++)this._logger.addTag(a[b]);return true},getTags:function(){return this._logger.getTags()},_reportTimePlayed:function(a,b){var c=this._createPlayerEvent(Ooyala.Logging.PlayerEventType.TOTAL_TIME_PLAYED,[Ooyala.ThriftLogger.GLOBAL_REPORTING_ID_INDEX,
                    Ooyala.ThriftLogger.PROVIDER_REPORTING_ID_INDEX,Ooyala.ThriftLogger.VIDEO_REPORTING_ID_INDEX]);c.timePlayed=a;c.reportingIdIndexToPlayheadPositionMillis={};c.reportingIdIndexToPlayheadPositionMillis[Ooyala.ThriftLogger.VIDEO_REPORTING_ID_INDEX]=b;this._logger.logPlayerEvents([c])},_reportBucketWatched:function(a,b){for(this._reportBucketWatchedEvent(Ooyala.Logging.PlayerEventType.BUCKETS_WATCHED,[Ooyala.ThriftLogger.VIDEO_REPORTING_ID_INDEX],a,b);b/10>this._nextPlaythroughToReport||this._nextPlaythroughToReport==
                100&&b/10>95;){this._reportPlaythrough(this._nextPlaythroughToReport,[Ooyala.ThriftLogger.VIDEO_REPORTING_ID_INDEX]);this._nextPlaythroughToReport+=this._playthroughReportFrequency}},_reportPercentageWatched:function(a,b){this._reportBucketWatchedEvent(Ooyala.Logging.PlayerEventType.PERCENTAGE_WATCHED,[Ooyala.ThriftLogger.VIDEO_REPORTING_ID_INDEX],a,b)},_reportBucketWatchedEvent:function(a,b,c,d){a=this._createPlayerEvent(a,b);a.buckets=new Ooyala.Logging.WatchedBuckets;a.buckets.minPerMille=c;a.buckets.maxPerMille=
                    d;this._logger.logPlayerEvents([a])},_reportPlaythrough:function(a,b){var c=this._createPlayerEvent(Ooyala.Logging.PlayerEventType.PLAYTHROUGH_PERCENT,b);c.playthroughPercent=a;this._logger.logPlayerEvents([c])},_filterAndUpdateAlreadyReported:function(a,b){return Ooyala.Util.Enumerable.select(a,function(c){if(!b[c])return b[c]=true;return false})},_reportGeneralEvent:function(a,b,c){var d=[];b=this._filterAndUpdateAlreadyReported([Ooyala.ThriftLogger.VIDEO_REPORTING_ID_INDEX],b);if(b.length>0){b.push(Ooyala.ThriftLogger.GLOBAL_REPORTING_ID_INDEX);
                    b.push(Ooyala.ThriftLogger.PROVIDER_REPORTING_ID_INDEX);d=this._createEventWithLastEventTime(a,b);c&&Ooyala.Util.Enumerable.foreach(d,function(e){e.firstForPlayer=true})}this._logger.logPlayerEvents(d);return d},_createEventWithLastEventTime:function(a,b){for(var c=[],d=0;d<b.length;d++){var e=this._createPlayerEvent(a,b[d]),f=this._getReportingCode(b[d]);e.lastEventTime=this._historyTracker.getAndSetLastEventTime(f,a);c.push(e)}return c},_getReportingCode:function(a){switch(a){case Ooyala.ThriftLogger.VIDEO_REPORTING_ID_INDEX:return this._embedCode;
                    case Ooyala.ThriftLogger.PROVIDER_REPORTING_ID_INDEX:return this._pCode;case Ooyala.ThriftLogger.GLOBAL_REPORTING_ID_INDEX:return Ooyala.ThriftLogger.OOYALA_GLOBAL_ID}return""},_createPlayerEvent:function(a,b){var c=new Ooyala.Logging.PlayerEvent;Ooyala.Util.Enumerable.foreach(Ooyala.Reporter._NULL_PLAYER_EVENT_FIELDS,function(e){c[e]=null});c.eventType=a;if(b.constructor.toString().indexOf("Array")==-1)c.reportingIdIndices.push(b);else for(var d=0;d<b.length;d++)c.reportingIdIndices.push(b[d]);return c},
                _resetState:function(a,b){var c=Ooyala.Util.bind(this._reportTimePlayed,this),d=Ooyala.Util.bind(this._reportBucketWatched,this),e=Ooyala.Util.bind(this._reportPercentageWatched,this);this._tracker=new Ooyala.PlaytimeTracker(b,c,d,e);this._embedCode=a;this._reportedDisplays={};this._firstDisplayForPlayer=true;this._reportedPlays={};this._firstPlayForPlayer=true;this._reportedVideoStarts={};this._firstVideoStartForPlayer=true},_resetAdState:function(){this._adInfo={};this._adSpot=new Ooyala.AdsLogging.AdSpot},
                _requestSasInformation:function(){var a="callback="+encodeURIComponent("Ooyala.Reporter.processSAS")+"&id="+this._id+"&pcode="+encodeURIComponent(this._pCode);a=Ooyala.Constants.SAS_URL+"?"+a;var b=document.createElement("script");b.setAttribute("src",a);b.setAttribute("type","text/javascript");document.body.appendChild(b)},_setSASInfo:function(a){this._logger.setKey(a.key);this._logger.setTimezoneId(a.timezone);this._logger.setAuthenticationTime(a.authentication_time);this._logger.setGeoData(a.geo_data);
                    this._logger.signal("SAS_Response")},_updateBucketInfoWithCustomData:function(a,b){if(a&&a.length>0&&a.charAt(0)=="2"){var c=JSON.parse(a.substring(1)),d=JSON.parse(window.atob(c.encoded));if(d.custom)for(var e in b){if(b.hasOwnProperty(e))d.custom[e]=b[e]}else d.custom=b;c.encoded=window.btoa(JSON.stringify(d));return"2"+JSON.stringify(c)}else throw"Not a version 2 bucket_info: "+a;}};Ooyala.Reporter.processSAS=function(a){var b=Ooyala.Reporter._map[a.id];b&&b._setSASInfo(a)};Ooyala.Util.createNamespace("Ooyala.Signing");Ooyala.Signing.getSignature=function(a,b){return Ooyala.ThirdParty.SHA256.sha256ToBase64String(a+b)};Ooyala.Signing.getXVerify=function(a,b){var c=Ooyala.Signing.getSignature(a,b),d=Ooyala.ThirdParty.CRC32.computeCrc(a);return a+"&sig="+c.substr(1,20)+"&crc="+d.toString()};Ooyala.Util.createNamespace("Ooyala.Backoff");Ooyala.Backoff.getAppropriateBackoff=function(a){return a>Ooyala.Constants.MIN_DURATION_FOR_LINEAR_BACKOFF?new Ooyala.Backoff.StepBackoff(a):new Ooyala.Backoff.NoBackoff};Ooyala.Backoff.StepBackoff=function(a){this._duration=a;this._playheadPosition=0;this.resetBackoffBehavior()};Ooyala.Backoff.StepBackoff.DURATION_FLUSH_FREQUENCY={};
            Ooyala.Backoff.StepBackoff.DURATION_FLUSH_FREQUENCY[Ooyala.Constants.LOW_PRIORITY_EVENT]=[[Ooyala.Constants.MIN_DURATION_FOR_STEP_BACKOFF*5,Ooyala.Constants.LOW_PRIORITY_EVENT_FLUSH_INTERVAL_MS*18],[Ooyala.Constants.MIN_DURATION_FOR_STEP_BACKOFF*2,Ooyala.Constants.LOW_PRIORITY_EVENT_FLUSH_INTERVAL_MS*6],[Ooyala.Constants.MIN_DURATION_FOR_STEP_BACKOFF,Ooyala.Constants.LOW_PRIORITY_EVENT_FLUSH_INTERVAL_MS*3],[-Infinity,Ooyala.Constants.LOW_PRIORITY_EVENT_FLUSH_INTERVAL_MS]];
            Ooyala.Backoff.StepBackoff.DURATION_FLUSH_FREQUENCY[Ooyala.Constants.HIGH_PRIORITY_EVENT]=[[Ooyala.Constants.MIN_DURATION_FOR_STEP_BACKOFF*2,Ooyala.Constants.HIGH_PRIORITY_EVENT_FLUSH_INTERVAL_MS*30],[Ooyala.Constants.MIN_DURATION_FOR_STEP_BACKOFF,Ooyala.Constants.HIGH_PRIORITY_EVENT_FLUSH_INTERVAL_MS*10],[-Infinity,Ooyala.Constants.HIGH_PRIORITY_EVENT_FLUSH_INTERVAL_MS]];
            Ooyala.Backoff.StepBackoff.prototype={setPlayheadPosition:function(a){this._playheadPosition=a},getFlushInterval:function(a){for(var b=Ooyala.Backoff.StepBackoff.DURATION_FLUSH_FREQUENCY[a],c=this._playheadPosition-this._resetPosition,d=null,e=0;e<b.length;e++){var f=b[e];if(f[0]<c){d=f;break}}return d!==null?d[1]:a==Ooyala.Constants.HIGH_PRIORITY_EVENT?Ooyala.Constants.HIGH_PRIORITY_EVENT_FLUSH_INTERVAL_MS:Ooyala.Constants.LOW_PRIORITY_EVENT_FLUSH_INTERVAL_MS},resetBackoffBehavior:function(){this._resetPosition=
                this._playheadPosition}};Ooyala.Backoff.NoBackoff=function(){};Ooyala.Backoff.NoBackoff.prototype={setPlayheadPosition:function(){},resetBackoffBehavior:function(){},getFlushInterval:function(a){if(a==Ooyala.Constants.HIGH_PRIORITY_EVENT)return Ooyala.Constants.HIGH_PRIORITY_EVENT_FLUSH_INTERVAL_MS;return Ooyala.Constants.LOW_PRIORITY_EVENT_FLUSH_INTERVAL_MS}};Ooyala.ThriftLogger=function(a,b,c,d,e){var f=this._createReportingIdDescriptor(Ooyala.Logging.ReportingIdType.GLOBAL),h=this._createReportingIdDescriptor(Ooyala.Logging.ReportingIdType.PROVIDER);this._reportingIdDescriptors=[f,h];this._reportingIds=[Ooyala.ThriftLogger.OOYALA_GLOBAL_ID,a];this._playerEvents=[];this._totalTimePlayedEvent=null;this._serializer=new Ooyala.Thrift.Serializer;this._logTimer=new Ooyala.LogTimer;this._waitConditions=[];this._documentUrl=d?d:window.location.href;this._signingKey=
                "";this._backoff=new Ooyala.Backoff.NoBackoff;this._adSpots=[];this._adSpotToIndex={};this._tags=[];this._flushInturruptedByWaitConditions=false;this._timezoneId=27;this._user=null;this._guid=c;this._accountId=b;this._playerBrandingId=e;this._sessionStartTimeMillis=Math.round((new Date).getTime());this._randomSessionSeed=Math.round(Math.random()*4503599627370496);this._nextEventSeqnum=1;this.wait("pinger_ready");this._pinger=new Ooyala.Pinger.OuterPinger(Ooyala.Util.bind(this._onReady,this))};
            Ooyala.ThriftLogger.OOYALA_GLOBAL_ID="o";Ooyala.ThriftLogger.GLOBAL_REPORTING_ID_INDEX=0;Ooyala.ThriftLogger.PROVIDER_REPORTING_ID_INDEX=1;Ooyala.ThriftLogger.VIDEO_REPORTING_ID_INDEX=2;Ooyala.ThriftLogger.ANALYTICS_VERSION=2;Ooyala.ThriftLogger.MAX_PLAYER_EVENTS=42;Ooyala.ThriftLogger.EVENT_PRIORITIES={HIGH:Ooyala.Constants.HIGH_PRIORITY_EVENT,LOW:Ooyala.Constants.LOW_PRIORITY_EVENT};
            Ooyala.ThriftLogger.HIGH_PRIORITY_EVENT_TYPES=[Ooyala.Logging.PlayerEventType.UNKNOWN,Ooyala.Logging.PlayerEventType.DISPLAY,Ooyala.Logging.PlayerEventType.PLAY,Ooyala.Logging.PlayerEventType.PERCENTAGE_WATCHED,Ooyala.Logging.PlayerEventType.SEEK,Ooyala.Logging.PlayerEventType.REPLAY,Ooyala.Logging.PlayerEventType.PAUSE,Ooyala.Logging.PlayerEventType.BUCKETS_WATCHED,Ooyala.Logging.PlayerEventType.AD_CLICK,Ooyala.Logging.PlayerEventType.AD_IMPRESSION,Ooyala.Logging.PlayerEventType.AD_PLAYTHROUGH,Ooyala.Logging.PlayerEventType.AD_PLAY_FAILED,
                Ooyala.Logging.PlayerEventType.PLAYER_LOAD,Ooyala.Logging.PlayerEventType.SHARE,Ooyala.Logging.PlayerEventType.PAY_PER_VIEW,Ooyala.Logging.PlayerEventType.SAS_AUTHORIZE,Ooyala.Logging.PlayerEventType.SAS_AUTHORIZE_V2,Ooyala.Logging.PlayerEventType.AD_REQUESTED,Ooyala.Logging.PlayerEventType.AD_MOUSEOVER,Ooyala.Logging.PlayerEventType.VIDEO_START,Ooyala.Logging.PlayerEventType.CUSTOM,Ooyala.Logging.PlayerEventType.RELATED_VIDEO_SELECTED,Ooyala.Logging.PlayerEventType.RELATED_VIDEOS_DISPLAYED];
            Ooyala.ThriftLogger.LOW_PRIORITY_EVENT_TYPES=[Ooyala.Logging.PlayerEventType.TOTAL_TIME_PLAYED,Ooyala.Logging.PlayerEventType.BITRATE_PLAYED,Ooyala.Logging.PlayerEventType.DOWNLOAD,Ooyala.Logging.PlayerEventType.CHUNK_FAILOVER,Ooyala.Logging.PlayerEventType.BUFFER,Ooyala.Logging.PlayerEventType.CV_INFO,Ooyala.Logging.PlayerEventType.METRIC,Ooyala.Logging.PlayerEventType.BITRATE_TRANSITION,Ooyala.Logging.PlayerEventType.BITRATES_AVAILABLE];Ooyala.ThriftLogger.EVENT_TYPE_TO_PRIORITY=null;
            Ooyala.ThriftLogger.BUCKETIZED_EVENT_TYPES=[Ooyala.Logging.PlayerEventType.PERCENTAGE_WATCHED,Ooyala.Logging.PlayerEventType.BUCKETS_WATCHED];Ooyala.ThriftLogger._NULL_PLAYER_LOG_ENTRY_FIELDS=["logTime","ipaddr","userAgent","logServer","country","clientStat","adSpots","rootContentReportingIdIndex","flashCookieAge","bucketInfo","accountId","logTimeMillis"];Ooyala.ThriftLogger._NULL_USER_FIELDS=["region","county","city","lat","lon","dmaCode","pmsaCode","cookie","clientIP"];
            Ooyala.ThriftLogger.prototype={initializeVideo:function(a,b){this._backoff=b||new Ooyala.Backoff.NoBackoff;if(this._reportingIds.length>=3&&this._reportingIds[Ooyala.ThriftLogger.VIDEO_REPORTING_ID_INDEX]!=a){this.flushEventBufferInAtMostMillis(0);this._reportingIds[Ooyala.ThriftLogger.VIDEO_REPORTING_ID_INDEX]=a}else if(this._reportingIds.length<3){var c=this._createReportingIdDescriptor(Ooyala.Logging.ReportingIdType.VIDEO);c.providerReportingIdIndex=Ooyala.ThriftLogger.PROVIDER_REPORTING_ID_INDEX;
                this._reportingIdDescriptors.push(c);this._reportingIds.push(a)}this._clearExtraReportingIds()},getOrCreateExtraPcodeId:function(a){for(var b=-1,c=0;c<this._reportingIds.length;c++)if(this._reportingIds[c]===a)b=c;if(b>=0)return b;else{b=this._reportingIds.length;this._reportingIds.push(a);this._reportingIdDescriptors.push(this._createReportingIdDescriptor(Ooyala.Logging.ReportingIdType.PROVIDER));return b}},getOrCreateExtraEmbedCodeId:function(a,b){for(var c=-1,d=0;d<this._reportingIds.length;d++)if(this._reportingIds[d]===
                a)c=d;if(c>=0)return c;else{c=this._reportingIds.length;this._reportingIds.push(a);d=this._createReportingIdDescriptor(Ooyala.Logging.ReportingIdType.VIDEO);d.providerReportingIdIndex=b;this._reportingIdDescriptors.push(d);return c}},_clearExtraReportingIds:function(){if(this._reportingIds.length>3){this._reportingIds=this._reportingIds.slice(0,3);this._reportingIdDescriptors=this._reportingIdDescriptors.slice(0,3)}},getOrCreateAdSpotIndex:function(a){var b=this._adSpotToIndex[a];if(!b){this._adSpotToIndex[a]=
                b=this._adSpots.length;this._adSpots.push(a)}return b},addReportingId:function(a){this._reportingIds.push(a);a=this._createReportingIdDescriptor(Ooyala.Logging.ReportingIdType.VIDEO);a.providerReportingIdIndex=Ooyala.ThriftLogger.PROVIDER_REPORTING_ID_INDEX;this._reportingIdDescriptors.push(a);return this._reportingIds.length-1},logPlayerEvents:function(a){for(var b=0;b<a.length;b++)this._logPlayerEvent(a[b]);this._playerEvents.length>=Ooyala.ThriftLogger.MAX_PLAYER_EVENTS&&this.flushEventBufferInAtMostMillis(0)},
                flushEventBufferInAtMostMillis:function(a){!a||a<=0?this.flushEventBuffer():this._logTimer.setLogTimeout(Ooyala.Util.bind(this.flushEventBuffer,this),a)},flushEventBuffer:function(){if(this._playerEvents.length!=0)if(this._waitConditions.length>0)this._flushInturruptedByWaitConditions=true;else{var a=this._serializer.serialize(this._playerEventsToPlayerLogEntry());a=Ooyala.Util.base64Encode(a);this._pinger.sendMessage(Ooyala.Signing.getXVerify(a,this._signingKey));this._resetPlayerEvents();this._clearExtraReportingIds()}},
                arrayIndexOf:function(a,b){for(var c=0;c<a.length;c++)if(a[c]===b)return c;return-1},wait:function(a){this._waitConditions.push(a)},signal:function(a){a=this.arrayIndexOf(this._waitConditions,a);if(a<0)return false;this._waitConditions[a]=this._waitConditions[this._waitConditions.length-1];this._waitConditions.pop();if(this._waitConditions.length==0&&this._flushInturruptedByWaitConditions){this._flushInturruptedByWaitConditions=false;this.flushEventBuffer()}return true},setKey:function(a){this._signingKey=
                    a},setTimezoneId:function(a){this._timezoneId=a},setAuthenticationTime:function(a){this._authenticationTime=a},setGeoData:function(a){var b=new Ooyala.Logging.User;Ooyala.Util.Enumerable.foreach(Ooyala.ThriftLogger._NULL_USER_FIELDS,function(c){b[c]=null});b.country=a;b.source=Ooyala.Logging.UserInfoSource.ENCRYPTED_SAS;this._user=b},addTag:function(a){if(this.arrayIndexOf(this._tags,a)>=0)return false;this._tags.push(a);return true},getTags:function(){return[].concat(this._tags)},removeTag:function(a){a=
                    this.arrayIndexOf(this._tags,a);if(a<0)return false;this._tags[a]=this._tags[this._tags.length-1];this._tags.pop();return true},removeAllTags:function(){this._tags=[];return true},getSessionStartTimeMillis:function(){return this._sessionStartTimeMillis},getRandomSessionSeed:function(){return this._randomSessionSeed},getAndIncrementNextEventSeqnum:function(){var a=this._nextEventSeqnum;this._nextEventSeqnum+=1;return a},_onReady:function(a){this._guid=this._guid||a;this.signal("pinger_ready")},_logPlayerEvent:function(a){switch(a.eventType){case Ooyala.Logging.PlayerEventType.TOTAL_TIME_PLAYED:this._logTotalTimePlayedEvent(a);
                    break;default:this._playerEvents.push(a);break}this.flushEventBufferInAtMostMillis(this._playerEventTypeToFlushInterval(a.eventType))},_logTotalTimePlayedEvent:function(a){var b=this._totalTimePlayedEvent;if(b){b.timePlayed+=a.timePlayed;b.reportingIdIndexToPlayheadPositionMillis=a.reportingIdIndexToPlayheadPositionMillis}else{this._totalTimePlayedEvent=a;this._playerEvents.push(a)}},_playerEventTypeToFlushInterval:function(a){Ooyala.ThriftLogger.EVENT_TYPE_TO_PRIORITY||this._initializeEventTypeToPriorityHash();
                    return this._backoff.getFlushInterval(Ooyala.ThriftLogger.EVENT_TYPE_TO_PRIORITY[a]||Ooyala.ThriftLogger.EVENT_PRIORITIES.HIGH)},_initializeEventTypeToPriorityHash:function(){if(!Ooyala.ThriftLogger.EVENT_TYPE_TO_PRIORITY){Ooyala.ThriftLogger.EVENT_TYPE_TO_PRIORITY={};for(var a=0;a<Ooyala.ThriftLogger.HIGH_PRIORITY_EVENT_TYPES.length;a++){var b=Ooyala.ThriftLogger.HIGH_PRIORITY_EVENT_TYPES[a];Ooyala.ThriftLogger.EVENT_TYPE_TO_PRIORITY[b]=Ooyala.ThriftLogger.EVENT_PRIORITIES.HIGH}for(a=0;a<Ooyala.ThriftLogger.LOW_PRIORITY_EVENT_TYPES.length;a++){b=
                    Ooyala.ThriftLogger.LOW_PRIORITY_EVENT_TYPES[a];Ooyala.ThriftLogger.EVENT_TYPE_TO_PRIORITY[b]=Ooyala.ThriftLogger.EVENT_PRIORITIES.LOW}}},_compressAllBucketizedEvents:function(a){for(var b=0;b<Ooyala.ThriftLogger.BUCKETIZED_EVENT_TYPES.length;b++)a=this._compressBucketizedEventsForType(Ooyala.ThriftLogger.BUCKETIZED_EVENT_TYPES[b],a);return a},_compressBucketizedEventsForType:function(a,b){if(!this._isBucketizedEventType(a))return b;var c=Ooyala.Util.Enumerable.select(b,function(i){return i.eventType==
                    a});if(!c||c.length<2)return b;c.sort(function(i,g){return i.buckets.minPerMille-g.buckets.minPerMille||i.buckets.maxPerMille-g.buckets.maxPerMille});for(var d=[],e=c.shift(),f=false;c.length!=0;){var h=c.shift();if(e.buckets.maxPerMille!=h.buckets.minPerMille-1){d.push(e);e=h}else{e.buckets.maxPerMille=h.buckets.maxPerMille;f=true}}if(!f)return b;d.push(e);b=Ooyala.Util.Enumerable.reject(b,function(i){return i.eventType==a});return b=b.concat(d)},_isBucketizedEventType:function(a){for(var b=0;b<
                Ooyala.ThriftLogger.BUCKETIZED_EVENT_TYPES.length;b++)if(a==Ooyala.ThriftLogger.BUCKETIZED_EVENT_TYPES[b])return true;return false},_resetPlayerEvents:function(){this._playerEvents=[];this._totalTimePlayedEvent=null},_playerEventsToPlayerLogEntry:function(){var a=new Ooyala.Logging.PlayerLogEntry,b=new Date,c=b.getTimezoneOffset();Ooyala.Util.Enumerable.foreach(Ooyala.ThriftLogger._NULL_PLAYER_LOG_ENTRY_FIELDS,function(d){a[d]=null});a.user=this._user;a.guid=this._guid;a.playerBrandingId=this._playerBrandingId;
                    a.version=Ooyala.ThriftLogger.ANALYTICS_VERSION;a.userTimeMillis=Math.round(b.getTime());a.userTime=Math.round(a.userTimeMillis/1E3);a.userTimezone=c;a.documentUrl=this._documentUrl;a.authenticationTime=this._authenticationTime;a.reportingIds=this._reportingIds.slice(0);if(Ooyala.ThriftLogger.VIDEO_REPORTING_ID_INDEX<a.reportingIds.length)a.rootContentReportingIdIndex=Ooyala.ThriftLogger.VIDEO_REPORTING_ID_INDEX;a.reportingIdDescriptors=this._reportingIdDescriptors.slice(0);a.timezoneIds=[0];a.tags=
                        this._tags;a.sessionStartTimeMillis=this._sessionStartTimeMillis;a.randomSessionSeed=this._randomSessionSeed;if(this._accountId)a.accountId=this._accountId;for(b=0;b<this._playerEvents.length;b++){c=this._playerEvents[b];if(c.adTracking&&typeof c.adTracking.adSpotIndex==="number"){if(!a.adSpots)a.adSpots=[];a.adSpots.push(this._adSpots[c.adTracking.adSpotIndex])}}for(;a.timezoneIds.length<a.reportingIds.length;)a.timezoneIds.push(this._timezoneId);a.events=this._compressAllBucketizedEvents(this._playerEvents);
                    a.providerReportingIdIndex=Ooyala.ThriftLogger.PROVIDER_REPORTING_ID_INDEX;a.playerEmbedType=Ooyala.Logging.PlayerEmbedType.EXTERNAL_ANALYTICS;a.isUntrustedDocUrl=false;for(b=0;b<a.events.length;b++){a.events[b].seqnum=this._nextEventSeqnum;this._nextEventSeqnum+=1}return a},_isPlayerLogEntryValid:function(a){if(!a.events||a.events.length==0||!a.documentUrl||a.documentUrl.length==0||!a.reportingIds||a.reportingIds.length==0||!a.reportingIdDescriptors||a.reportingIdDescriptors.length==0)return false;
                    return true},_createReportingIdDescriptor:function(a){var b=new Ooyala.Logging.ReportingIdDescriptor;b.reportingIdType=a;Ooyala.Util.Enumerable.foreach(["providerReportingIdIndex","parentContentIdIndex","syndicationDestinationIdIndex","adSetId"],function(c){b[c]=null});return b}};Ooyala.LogTimer=function(){this._nextTimeout=this._timeoutId=null};
            Ooyala.LogTimer.prototype={setLogTimeout:function(a,b){var c=(new Date).getTime(),d=c+b;if(this._nextTimeout!==null&&d>this._nextTimeout||d<c)return false;this._clearLogTimer();this._nextTimeout=d;c=Ooyala.Util.bind(this._clearTimerAndCallCallback,this,a);this._timeoutId=setTimeout(c,b);return true},_clearTimerAndCallCallback:function(a){this._clearLogTimer();a()},_clearLogTimer:function(){if(this._timeoutId!==null){clearTimeout(this._timeoutId);this._nextTimeout=this._timeoutId=null}}};global=this;global.Ooyala=Ooyala;global.Ooyala.Reporter=Ooyala.Reporter;global.Ooyala.Reporter.prototype.reportPlayerLoad=Ooyala.Reporter.prototype.reportPlayerLoad;global.Ooyala.Reporter.prototype.initializeVideo=Ooyala.Reporter.prototype.initializeVideo;global.Ooyala.Reporter.prototype.reportPlayheadUpdate=Ooyala.Reporter.prototype.reportPlayheadUpdate;global.Ooyala.Reporter.prototype.reportReplay=Ooyala.Reporter.prototype.reportReplay;
            //end Reporter.js
        }(OO, OO.$, OO._));
        (function(OO, $, _) {
            OO.AnalyticsBase = function(messageBus, id) { };

            _.extend(OO.AnalyticsBase.prototype, {
                loadSucceed: function() {}, // Override this function to do additional setup.

                reportEvent: function() {
                    throw "Please override this function";
                },

                // Private funciton:

                setup: function(messageBus, id, analyticsType) {
                    this.mb = messageBus;
                    this.elementId = id;

                    this._loaded = false;
                    this._bufferedEvents = [];
                    this.mb.subscribe('*', analyticsType, _.bind(this._onAnalyticsEvent,this));
                },

                loadExternalAnalyticsJs: function(url) {
                    $.getScriptRetry(url, _.bind(this._onLoaded, this), {
                        error: function() {
                            // TODO: report error to some log server.
                            OO.log("can not load url", url);
                        }
                    });
                },

                _onLoaded: function() {
                    this._loaded = true;
                    this.loadSucceed();
                    if (!this._bufferedEvents) { return; }
                    _.each(this._bufferedEvents, function(e){
                        this._safeReportEvent.apply(this, e);
                    }, this);
                },

                _onAnalyticsEvent: function() {
                    // TODO: white labeling here.
                    if (this._loaded) {
                        this._safeReportEvent.apply(this, arguments);
                    } else {
                        this._bufferedEvents.push(arguments);
                    }
                },

                _safeReportEvent: function() {
                    try {
                        this.reportEvent.apply(this, arguments);
                    } catch (e) {
                        OO.log("can not log event");
                    }
                },

                __place_holder: true
            });

        }(OO, OO.$, OO._));
        (function(OO, $, _) {
            var OOYALA_ANALYTICS = "ooyala_analytics";

            var OoyalaAnalytics = OO.inherit(OO.AnalyticsBase, function(messageBus, id) {
                if (!OO.requiredInEnvironment('html5-playback')) { return; }

                this.setup(messageBus, id, OOYALA_ANALYTICS);

                this.lastEmbedCode = '';
                this.currentEmbedcode = '';
                this.playingInstreamAd = false;
                this.guid = undefined;
                this.accountId = undefined;
                this.accountIdSet = false;
                this.guidSet = false;
                this.parameters = undefined;
                this.documentUrl = undefined;

                // Note: we load the external JS analytics after the SAS response comes back, so we can propagate the
                // accountId parameter into Reporter if there is one. However, we also need to listen for error events,
                // in case the SAS Authorization fails. If that happens, we also load external JS analytics and
                // instantiate Reporter without an accountId. In either case, we unsubscribe from future authorization
                // fetched or error events.
                // TODO(playback-team): are you guys sure there's no race with SAS authorization request here?
                messageBus.subscribe(OO.EVENTS.AUTHORIZATION_FETCHED, OOYALA_ANALYTICS,
                    _.bind(this._onAuthorizationFetched, this));
                messageBus.subscribe(OO.EVENTS.ERROR, OOYALA_ANALYTICS, _.bind(this._onErrorEvent, this));
                messageBus.subscribe(OO.EVENTS.GUID_SET, OOYALA_ANALYTICS, _.bind(this._onGuidSet, this));
                messageBus.subscribe(OO.EVENTS.REPORT_DISCOVERY_IMPRESSION, OOYALA_ANALYTICS,
                    _.bind(this._onReportDiscoveryImpression, this));
                messageBus.subscribe(OO.EVENTS.REPORT_DISCOVERY_CLICK, OOYALA_ANALYTICS,
                    _.bind(this._onReportDiscoveryClick, this));
                messageBus.subscribe(OO.EVENTS.PLAYER_CREATED, OOYALA_ANALYTICS,
                    _.bind(this._onPlayerCreated, this));
                messageBus.subscribe(OO.EVENTS.ASSET_CHANGED, OOYALA_ANALYTICS,
                    _.bind(this._onFirstAssetChanged, this));
            });

            _.extend(OoyalaAnalytics.prototype, {
                _onGuidSet: function(event, guid) {
                    this.guid = guid;
                    this.guidSet = true;
                    this._onGuidAndAccountIdSet();
                },

                _onPlayerCreated: function(event, elementId, params) {
                    this.parameters = params;
                    if (this.parameters && this.parameters.docUrl) {
                        this.documentUrl = this.parameters.docUrl;
                    } else if (this.parameters && this.parameters["flashParams"] && this.parameters["flashParams"]["docUrl"]) {
                        this.documentUrl = this.parameters["flashParams"]["docUrl"];
                    }
                },

                _onAuthorizationFetched: function(event, tree) {
                    if (tree.user_info && tree.user_info.account_id) {
                        this.accountId = tree.user_info.account_id;
                    } else if (tree.debug_data && tree.debug_data.user_info && tree.debug_data.user_info.account_id) {
                        this.accountId = tree.debug_data.user_info.account_id;
                    }
                    this.mb.unsubscribe(OO.EVENTS.ERROR, OOYALA_ANALYTICS);
                    this.mb.unsubscribe(OO.EVENTS.AUTHORIZATION_FETCHED, OOYALA_ANALYTICS);
                    if (_.isNumber(this.accountId)) {
                        // Convert numeric id to a string, since reporter.js does a strict type check for strings
                        this.accountId = this.accountId.toString();
                    }
                    if (!_.isString(this.accountId)) {
                        this.accountId = undefined;
                        OO.d("OO.OoyalaAnalytics: SAS authorization fetched without an accountId");
                    } else {
                        OO.d("OO.OoyalaAnalytics: SAS authorization fetched with accountId == " + this.accountId);
                    }
                    this.accountIdSet = true;
                    this._onGuidAndAccountIdSet();
                },

                _onGuidAndAccountIdSet: function() {
                    if (!this.guidSet || !this.accountIdSet) { return; }
                    OO.d("Loading Analytics Module...");
                    this._loadAnalytics();
                },

                _onErrorEvent: function(event, params) {
                    if (!params || !params["code"]) { return; }
                    var code = params["code"];
                    var isAuthError = false;
                    // Check if it's a SAS API error. If yes, call _onAuthorizationError, otherwise ignore.
                    _.each(OO.ERROR.API.SAS, function(value, key) {
                        if (value === code) { isAuthError = true; }
                    });
                    if (isAuthError) { this._onAuthorizationError(event, code); }
                },

                _onAuthorizationError: function(event, errorCode) {
                    this.mb.unsubscribe(OO.EVENTS.ERROR, OOYALA_ANALYTICS);
                    this.mb.unsubscribe(OO.EVENTS.AUTHORIZATION_FETCHED, OOYALA_ANALYTICS);
                    OO.d("OO.OoyalaAnalytics: SAS authorization failed, loading external analytics module ...");
                    this._loadAnalytics();
                },

                _onReportDiscoveryImpression: function(event, params) {
                    if (!this.reporter) { return; }
                    try {
                        this.reporter.reportDiscoveryImpression(params.relatedVideos, params.custom);
                    } catch (e) {
                        OO.log("Failed to report a discovery impression event with params " + JSON.stringify(params) +
                            ": " + e);
                    }
                },

                _onReportDiscoveryClick: function(event, params) {
                    if (!this.reporter) { return; }
                    try {
                        this.reporter.reportDiscoveryClick(params.clickedVideo, params.custom);
                    } catch (e) {
                        OO.log("Failed to report a discovery click event with params " + JSON.stringify(params) +
                            ": " + e);
                    }
                },

                _loadAnalytics: function() {
                    // PLAYER-970: Bundling the payload of reporter.js into this file
                    // Because of this, we will be calling the _onLoaded callback immediately

                    // The below line is the old code to fetch analytics.js
                    // this.loadExternalAnalyticsJs(OO.URLS.ANALYTICS({ server: OO.SERVER.ANALYTICS }));
                    _.bind(this._onLoaded, this)();
                },

                _onFirstAssetChanged: function(event, asset) {
                    if (!asset.ooyalaAsset) { return; }
                    this.mb.unsubscribe(OO.EVENTS.ASSET_CHANGED, OOYALA_ANALYTICS, this._onFirstAssetChanged);
                    this.accountId = undefined;
                    this.accountIdSet = true;

                    this._onGuidAndAccountIdSet();
                },

                loadSucceed: function() {
                    //todo this should not be possible
                    if (!window.Ooyala || !window.Ooyala.Reporter) { return; }
                    OoyalaAnalytics.Reporter = Ooyala.Reporter;
                    OoyalaAnalytics.Pinger = Ooyala.Pinger;
                    //this.guid = OoyalaAnalytics.Pinger.getOrCreateGuid();
                    //this.mb.publish(OO.EVENTS.GUID_SET, this.guid);
                    this.reporter = null;
                    // TODO: if pcode is not set, we may have an error.
                    if (!OO.playerParams.pcode) { return; }
                    var analyticsParams = {
                        accountId: this.accountId,
                        guid: this.guid,
                        playerBrandingId: OO.playerParams.playerBrandingId,
                    };
                    if (this.documentUrl) {
                        analyticsParams = _.extend(analyticsParams, {documentUrl: this.documentUrl});
                    }
                    this.reporter = new OoyalaAnalytics.Reporter(OO.playerParams.pcode, analyticsParams);
                },

                reportEvent: function(eventName, arg1, arg2) {
                    if (!this.reporter) { return; } // TODO report error here. should never happend
                    switch (eventName) {
                        case OO.EVENTS.PLAYER_CREATED :
                            this.reporter.reportPlayerLoad();
                            break;
                        case OO.EVENTS.EMBED_CODE_CHANGED :
                            // TODO: get the right duration for the video.
                            // When setEmbedCode is called on the same asset it is NOT treated as a replay
                            if (arg1 != this.currentEmbedcode) {
                                this.lastEmbedCode = this.currentEmbedcode;
                            } else {
                                this.lastEmbedCode = '';
                            }
                            this.currentEmbedcode = arg1;
                            break;
                        case OO.EVENTS.CONTENT_TREE_FETCHED :
                            // TODO: get the right duration for the video.
                            this.reporter.initializeVideo(this.currentEmbedcode, arg1.duration);
                            break;
                        case OO.EVENTS.ASSET_CHANGED :
                            if (!arg1) { break; }
                            if (arg1.id != this.currentEmbedcode) {
                                this.lastEmbedCode = this.currentEmbedcode;
                            } else {
                                this.lastEmbedCode = '';
                            }
                            if (!asset.ooyalaAsset) {
                                this.embedCode = '';
                                break;
                            }
                            this.mb.unsubscribe(OO.EVENTS.ERROR, OOYALA_ANALYTICS);
                            this.currentEmbedcode = arg1.id;
                            this.reporter.initializeVideo(this.currentEmbedcode, asset.content.duration);

                            break;
                        case OO.EVENTS.WILL_PLAY_FROM_BEGINNING:
                            if (this.lastEmbedCode === this.currentEmbedcode) {
                                this.reporter.reportReplay();
                            } else {
                                this.reporter.reportVideoStarted();
                                this.lastEmbedCode = this.currentEmbedcode;
                            }
                            break;
                        // TODO: reportAdRequest, reportAdClickToSite, reportAdPlayFailure
                        // TODO: Add ad metadata
                        case OO.EVENTS.WILL_PLAY_ADS :
                            this.playingInstreamAd = true;
                            var adSource = Ooyala.Reporter.AdSource.UNKNOWN;
                            if (arg1 && arg1.type && typeof(arg1.type) == "string") {
                                adSource = Ooyala.Reporter.AdSource[arg1.type.toUpperCase()];
                            }
                            this.reporter.setAdSource(adSource, this.currentEmbedcode, arg1 && arg1.click_url);
                            this.reporter.reportAdImpression();
                            break;
                        case OO.EVENTS.ADS_PLAYED :
                            this.playingInstreamAd = false;
                            // TODO, report ads end.
                            break;
                        case OO.EVENTS.ADS_CLICKED :
                            this.reporter.reportAdClickToVideo();
                            break;
                        case OO.EVENTS.PLAYHEAD_TIME_CHANGED:
                            if (this.playingInstreamAd) {
                                this.reporter.reportAdPlaythrough(arg1, arg2);
                            } else {
                                // [PBW-5863] currentTime for live videos is used only for display
                                // purposes, the actual playhead is the currentLiveTime parameter (arg6).
                                // When present, currentLiveTime should override currentTime for analytics purposes.
                                var currentTime = (typeof arguments[6] !== "undefined") ? arguments[6] : arg1;

                                if (_.isFinite(currentTime) && currentTime > 0) {
                                    this.reporter.reportPlayheadUpdate(Math.floor(currentTime * 1000));
                                }
                            }
                            break;
                        case OO.EVENTS.REPORT_EXPERIMENT_VARIATIONS:
                            this.reporter.reportExperimentVariation(arg1.variationIds);
                            break;
                        case OO.EVENTS.INITIAL_PLAY:
                            this.reporter.reportPlayRequested();
                            break;
                    }

                },

                __place_holder: true
            });

            OO.registerModule(OOYALA_ANALYTICS, function(messageBus, id) {
                return new OoyalaAnalytics(messageBus, id);
            });

        }(OO, OO.$, OO._));

        /*
         * Librato Plugin
         *
         * owner: PBS
         * version: 0.1
         *
         * The Librato plugin utilizes the librato.com API to handle instrumentation
         * of various events within the player. Note: The allowed use of this plugin is only
         * under the condition that this plugin does not send/store any user information along with
         * each request.
         */
        OO.plugin("Librato", function(OO, _, $, W) {
            // Throttling for now...logic by @gregm ;)
            var THROTTLE = Math.floor(Math.random() * 10);
            // Return an empty function or die
            if (THROTTLE > 0) { return (function(){}); }

            var RANGE_ABOVE_THRESHOLD_TEXT = "-above-range";
            var RANGE_BELOW_THRESHOLD_TEXT = "-below-range";
            var RANGE_WITHIN_THRESHOLD_TEXT = "-within-range";

            /**
             * The threshold configuration for each timed event
             * @private
             */
            var LibratoConfig = {
                "events": [
                    {
                        "name": "v4-load-time",
                        "low": 500,
                        "high": 2000
                    },
                    {
                        "name": "v4-playback-ready",
                        "low": 1000,
                        "high": 3000
                    },
                    {
                        "name": "v4-time-to-first-content-frame",
                        "low": 1000,
                        "high": 5000
                    },
                    {
                        "name": "v4-time-to-first-ad-frame",
                        "low": 1000,
                        "high": 5000
                    }
                ]
            };

            /**
             * @class LibratoHelper
             * @classdesc Helper class for Librato plugin; contains various helper methods like "reportSingleMetric", etc.
             * @public
             */
            var LibratoHelper = function() {
                // calculate authorization header
                this.basic_auth_token = "abelrios@ooyala.com" + ":" + "95d53e8841835839469f2a2f96fd95b564342ffadff759ad9d49f1897805db1b";
                if (window.btoa) {
                    this.basic_auth_token = btoa(this.basic_auth_token);
                } else {
                    this.basic_auth_token = window.base64.encode(this.basic_auth_token);
                }
                // figure out the source string
                this.source = this._generateSourceString();
            };

            _.extend(LibratoHelper.prototype, {

                /**
                 * Measures the millisecond difference from 2 millisecond values
                 * @method _measureDurationMilli
                 * @param {number} startTs Starting millisecond value
                 * @param {number} endTs Ending millisecond value
                 * @return {number} The difference of endTs and startTs milliseconds
                 */
                _measureDurationMilli: function(startTs, endTs) {
                    return endTs - startTs;
                },

                /**
                 * Creates a metric value object that is properly formatted for Librato
                 * @method _addMetricValue
                 * @param {object}  metrics The metrics value object
                 * @param {string} name The metric name to track
                 * @param {number} value The metric value (some sort of measurement)
                 * @return {object} The modified metrics object
                 */
                _addMetricValue: function(metrics, name, value) {
                    metrics[name] = { "value" : value, "source" : this.source };
                    return metrics;
                },

                /**
                 * Creates and sends a single metric value to Librato API
                 * @method _reportSingleMetric
                 * @param {string} name The metric name
                 * @param {number} value The metric value (some sorf of measurement)
                 */
                _reportSingleMetric: function(name, value) {
                    var metrics = {};
                    this._addMetricValue(metrics, name, value);
                    this._sendReport(metrics);
                },

                /**
                 * AJAX request to send metric call to Librato API
                 * @method _sendReport
                 * @param {metrics} The metrics object
                 */
                _sendReport: function(metrics) {
                    // send the ping
                    $.ajax({
                        url: "https://metrics-api.librato.com/v1/metrics",
                        type: "post",
                        data: { gauges: metrics },
                        dataType: "json",
                        headers: { "Authorization": "Basic " + this.basic_auth_token },
                        success: function (data) {
                        }
                    });
                },

                /**
                 * Evaluates where a counting measurement falls within a defined threshold
                 * @method _getThresholdText
                 * @param {number} value The metric value
                 * @param {object} item The configuration item that contains the threshold data
                 * @return {string} The the threshold value result
                 */
                _getThresholdText: function(value, item) {
                    var text = RANGE_WITHIN_THRESHOLD_TEXT;
                    if (value > item.high) {
                        text = RANGE_ABOVE_THRESHOLD_TEXT;
                    } else if (value < item.low) {
                        text = RANGE_BELOW_THRESHOLD_TEXT;
                    }

                    return item.name + text;
                },

                /**
                 * Matches a given event name with a name in configuration
                 * @method _matchEvent
                 * @param {string} name The event name to use as a key
                 * @return {object} The matched configuration object
                 */
                _matchEvent: function(name) {
                    var match;
                    _.each(LibratoConfig.events, function(item, idx) {
                        if(item.name === name) {
                            match = item;
                        }
                    });
                    return match;
                },

                /**
                 * Generates the source string to use in each metric call
                 * @method _generateSourceString
                 * @return {string} The properly formatted source string
                 */
                _generateSourceString: function() {
                    var source_data = {};
                    var source_template = _.template("<%= platform %>-<%= os %>-<%= browser %>");

                    // platform
                    if (OO.featureEnabled("flash-playback")) {
                        source_data.platform = "flash";
                    } else {
                        source_data.platform = "html5";
                    }

                    // OS
                    if (OO.isIos) {
                        source_data.os = "ios";
                    } else if (OO.isAndroid) {
                        source_data.os = "android";
                    } else if (OO.isMacOs) {
                        source_data.os = "macosx";
                    } else if (OO.isWinPhone) {
                        source_data.os = "winphone";
                    } else if (OO.isWindows) {
                        source_data.os = "windows";
                    } else {
                        source_data.os = "generic";
                    }

                    // browser
                    if (OO.isChrome) {
                        source_data.browser = "chrome";
                    } else if (OO.isFirefox) {
                        source_data.browser = "firefox";
                    } else if (OO.isIE11Plus) {
                        source_data.browser = "ie11plus";
                    } else if (OO.isIE) {
                        source_data.browser = "ieold";
                    } else if (OO.isSafari) {
                        source_data.browser = "safari";
                    } else {
                        source_data.browser = "generic";
                    }
                    return source_template(source_data);
                },

                /**
                 * Plugin Initializer
                 * @method start
                 */
                start: function() {
                    var metrics = {};
                    this._addMetricValue(metrics, "v4-load", 1);

                    // measure v4 load performance data
                    if (!!window.performance && !!window.performance.getEntries) {
                        // Get data about core.js
                        var regex = ".*v4.*core";
                        var v4_performance = _.find(window.performance.getEntriesByType("resource"), function(e) { return e.name.match(regex); } );

                        // timing data found
                        if (!!v4_performance) {
                            if (v4_performance.duration > 0) {
                                // We have the load time, so let's log that
                                this._addMetricValue(metrics, this._getThresholdText(v4_performance.duration, this._matchEvent("v4-load-time")), 1);
                            }
                        }
                    }

                    this._sendReport(metrics);
                }

            });

            // We must defer measuring player load times until after this script is processed
            // Since when this code is executed initially, it's part of the loading sequence
            var libratoHelper = new LibratoHelper();
            _.defer(_.bind(libratoHelper.start, libratoHelper));


            // ------------------------------- Instance Functions ----------------------

            var Librato = function(messageBus, id) {
                this.id = id;
                this.mb = messageBus;
                this.initializationTs = this._takeTimestamp();

                // track important events
                this.mb.subscribe(OO.EVENTS.SET_EMBED_CODE, 'librato', _.bind(this._onSetEmbedCode, this));
                this.mb.subscribe(OO.EVENTS.SET_EMBED_CODE_AFTER_OOYALA_AD, 'librato', _.bind(this._onSetEmbedCode, this));
                this.mb.subscribe(OO.EVENTS.PLAYBACK_READY, 'librato', _.bind(this._onPlaybackReady, this));
                this.mb.subscribe(OO.EVENTS.INITIAL_PLAY, 'librato', _.bind(this._onInitialPlay, this));
                this.mb.subscribe(OO.EVENTS.PLAY, 'librato', _.bind(this._onInitialPlay, this));
                this.mb.subscribe(OO.EVENTS.PLAYING, 'librato', _.bind(this._onInitialPlay, this));
                this.mb.subscribe(OO.EVENTS.ADS_PLAYED, 'librato', _.bind(this._onAdsPlayed, this));
                this.mb.subscribe(OO.EVENTS.PLAYHEAD_TIME_CHANGED, 'librato', _.bind(this._onPlayheadTimeChanged, this));
                this.mb.subscribe(OO.EVENTS.PLAY_FAILED, 'librato', _.bind(this._onPlayerPlayFailure, this));
                this.mb.subscribe(OO.EVENTS.ERROR, 'librato', _.bind(this._onPlayerError, this));
                this.mb.subscribe(OO.EVENTS.WILL_PLAY_ADS, 'librato', _.bind(this._willPlayAds, this));
            };

            _.extend(Librato.prototype, {
                /**
                 * Creates a timestamp
                 * @method _takeTimestamp
                 * @return {object} A date object
                 */
                _takeTimestamp: function() {
                    return new Date().getTime();
                },

                /**
                 * Set Embed Code Event Handler
                 * @method _onSetEmbedCode
                 */
                _onSetEmbedCode: function() {
                    this.setEmbedCodeTs = this._takeTimestamp();
                    this.wasPlayStartReported = false;
                    this.wasTimeToFirstFrameReported = false;
                    this.wasTimeToFirstAdFrameReported = false;
                    this.adsPlaying = false;
                },

                /**
                 * Playback Ready Event Handler
                 * @method _onPlaybackReady
                 */
                _onPlaybackReady: function() {
                    libratoHelper._reportSingleMetric("v4-playback-ready", 1);
                    this.playbackReadyTs = this._takeTimestamp();
                    var diff = libratoHelper._measureDurationMilli(this.setEmbedCodeTs, this.playbackReadyTs);
                    libratoHelper._reportSingleMetric(libratoHelper._getThresholdText(diff, libratoHelper._matchEvent("v4-playback-ready")), 1);
                },

                /**
                 * Initial Play Event Handler
                 * @method _onInitialPlay
                 */
                _onInitialPlay: function() {
                    if (this.wasPlayStartReported) { return; }

                    this.lastStateChangeTs = this._takeTimestamp();
                    this.wasPlayStartReported = true;
                    libratoHelper._reportSingleMetric("v4-play", 1);
                },

                /**
                 * Will Play Ads Event Handler
                 * @method _willPlayAds
                 */
                _willPlayAds: function() {
                    this.lastStateChangeTs = this._takeTimestamp(); // reset the state timestamp
                    this.adsPlaying = true;
                    libratoHelper._reportSingleMetric("v4-play-ad", 1);
                },

                /**
                 * Ads Played Event Handler
                 * @method _onAdsPlayed
                 */
                _onAdsPlayed: function() {
                    this.lastStateChangeTs = this._takeTimestamp(); // reset the state timestamp
                    this.adsPlaying = false;
                },

                /**
                 * Playhead Time Changed Event Handler
                 * @method _onPlayheadTimeChanged
                 */
                _onPlayheadTimeChanged: function(name, playhead) {
                    if (this.wasTimeToFirstFrameReported && this.wasTimeToFirstAdFrameReported) { return; }
                    if (!playhead || playhead <= 0) { return; }

                    // first frame appeared playhead seconds ago...
                    this.firstFrameTs = this._takeTimestamp(); // TODO do we need to account for already played frames?
                    var diff = libratoHelper._measureDurationMilli(this.lastStateChangeTs, this.firstFrameTs);

                    if (!this.wasTimeToFirstFrameReported && !this.adsPlaying) {
                        libratoHelper._reportSingleMetric(libratoHelper._getThresholdText(diff, libratoHelper._matchEvent("v4-time-to-first-content-frame")), 1);
                        this.wasTimeToFirstFrameReported = true;
                    }

                    if (this.adsPlaying && !this.wasTimeToFirstAdFrameReported) {
                        libratoHelper._reportSingleMetric(libratoHelper._getThresholdText(diff, libratoHelper._matchEvent("v4-time-to-first-ad-frame")), 1);
                        this.wasTimeToFirstAdFrameReported = true;
                    }
                },

                /**
                 * Player Play Failure Event Handler
                 * @method _onPlayerPlayFailure
                 */
                _onPlayerPlayFailure: function() {
                    libratoHelper._reportSingleMetric("v4-play-fail", 1);
                },

                /**
                 * Player Error Event Handler
                 * @method _onPlayerError
                 */
                _onPlayerError: function(type, error) {
                    this.errorTs = this._takeTimestamp();
                    // We essentially want to handle errors on a case by case basis to determine
                    // which errors have more weight
                    libratoHelper._reportSingleMetric("v4-error", 1);
                }

            });

            return Librato;
        });

        (function(OO, $, _){
            /*
             == mresize jQuery plugin (event based element resize fn) ==
             Version: 1.0.1
             Plugin URI: http://manos.malihu.gr/event-based-jquery-element-resize/
             Author: malihu
             Author URI: http://manos.malihu.gr
             License: MIT License (MIT)
             */

            /*
             Copyright 2014 Manos Malihutsakis (email: manos@malihu.gr)

             Permission is hereby granted, free of charge, to any person obtaining a copy
             of this software and associated documentation files (the "Software"), to deal
             in the Software without restriction, including without limitation the rights
             to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
             copies of the Software, and to permit persons to whom the Software is
             furnished to do so, subject to the following conditions:

             The above copyright notice and this permission notice shall be included in
             all copies or substantial portions of the Software.

             THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
             IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
             FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
             AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
             LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
             OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
             THE SOFTWARE.
             */
            $.event.special.mresize={
                add:function(){
                    var el=$(this);
                    if(el.data("mresize")) return;
                    if(el.css("position")==="static") el.css("position","relative");
                    el
                        .append("<div class='resize' style='position:absolute; width:auto; height:auto; top:0; right:0; bottom:0; left:0; margin:0; padding:0; overflow:hidden; visibility:hidden; z-index:-1'><iframe style='width:100%; height:0; border:0; visibility:visible; margin:0' /><iframe style='width:0; height:100%; border:0; visibility:visible; margin:0' /></div>")
                        .data("mresize",{"w":el.width(),"h":el.height(),t:null,throttle:100})
                        .find(".resize iframe").each(function(){
                        $(this.contentWindow || this).on("resize",function(){
                            var d=el.data("mresize");
                            if(d.w!==el.width() || d.h!==el.height()){
                                if(d.t) clearTimeout(d.t);
                                d.t=setTimeout(function(){
                                    el.triggerHandler("mresize");
                                    d.w=el.width();
                                    d.h=el.height();
                                },d.throttle);
                            }
                        });
                    });
                },
                remove:function(){
                    $(this).removeData("mresize").find(".resize").remove();
                }
            };
        }(OO, OO.$, OO._));
        OO.exposeStaticApi('EVENTS', OO.EVENTS);
        OO.exposeStaticApi('CONSTANTS', OO.CONSTANTS);
        OO.publicApi.log = OO.log;
        OO.exposeStaticApi('ERROR', OO.ERROR);
        OO.exposeStaticApi('STATE', OO.STATE);
        OO.exposeStaticApi('VERSION', OO.VERSION);
        OO.exposeStaticApi('VIDEO', OO.VIDEO);
        OO.publicApi.$ = OO.$;
        OO.publicApi._ = OO._;

        OO.publicApi.__static.apiReady = true;
        OO.$(document).ready(function() {
            OO.publicApi.__static.docReady = true;
            OO.tryCallReady();
        });
    }());

} catch (err) {
    if (err && window.console && window.console.log) { window.console.log(err, err.stack); }
}

!function e(t,n,r){function i(o,l){if(!n[o]){if(!t[o]){var s="function"==typeof require&&require;if(!l&&s)return s(o,!0);if(a)return a(o,!0);var c=new Error("Cannot find module '"+o+"'");throw c.code="MODULE_NOT_FOUND",c}var u=n[o]={exports:{}};t[o][0].call(u.exports,function(e){var n=t[o][1][e];return i(n?n:e)},u,u.exports,e,t,n,r)}return n[o].exports}for(var a="function"==typeof require&&require,o=0;o<r.length;o++)i(r[o]);return i}({1:[function(e,t,n){OO||(OO={})},{}],2:[function(e,t,n){e("./InitOOUnderscore.js");var r={};window&&!window.debugHazmat&&(r={warn:function(){}}),OO.HM||"undefined"!=typeof window&&"undefined"!=typeof window._?window.Hazmat||e("hazmat"):OO.HM=e("hazmat").create(r),OO.HM||(OO.HM=window.Hazmat.noConflict().create(r))},{"./InitOOUnderscore.js":3,hazmat:7}],3:[function(e,t,n){e("./InitOO.js"),window._||(window._=e("underscore")),OO._||(OO._=window._.noConflict())},{"./InitOO.js":1,underscore:8}],4:[function(e,t,n){!function(e,t){e.STATE={LOADING:"loading",READY:"ready",PLAYING:"playing",PAUSED:"paused",BUFFERING:"buffering",ERROR:"error",DESTROYED:"destroyed",__end_marker:!0},e.EVENTS={PLAYER_CREATED:"playerCreated",PLAYER_EMBEDDED:"playerEmbedded",SET_EMBED_CODE:"setEmbedCode",SET_EMBED_CODE_AFTER_OOYALA_AD:"setEmbedCodeAfterOoyalaAd",EMBED_CODE_CHANGED:"embedCodeChanged",SET_ASSET:"setAsset",ASSET_CHANGED:"assetChanged",UPDATE_ASSET:"updateAsset",ASSET_UPDATED:"assetUpdated",AUTH_TOKEN_CHANGED:"authTokenChanged",GUID_SET:"guidSet",WILL_FETCH_PLAYER_XML:"willFetchPlayerXml",PLAYER_XML_FETCHED:"playerXmlFetched",WILL_FETCH_CONTENT_TREE:"willFetchContentTree",SAVE_PLAYER_SETTINGS:"savePlayerSettings",CONTENT_TREE_FETCHED:"contentTreeFetched",WILL_FETCH_METADATA:"willFetchMetadata",METADATA_FETCHED:"metadataFetched",SKIN_METADATA_FETCHED:"skinMetadataFetched",THUMBNAILS_FETCHED:"thumbnailsFetched",WILL_FETCH_AUTHORIZATION:"willFetchAuthorization",AUTHORIZATION_FETCHED:"authorizationFetched",WILL_FETCH_AD_AUTHORIZATION:"willFetchAdAuthorization",AD_AUTHORIZATION_FETCHED:"adAuthorizationFetched",CAN_SEEK:"canSeek",WILL_RESUME_MAIN_VIDEO:"willResumeMainVideo",PLAYBACK_READY:"playbackReady",INITIAL_PLAY:"initialPlay",WILL_PLAY:"willPlay",REPLAY:"replay",PLAYHEAD_TIME_CHANGED:"playheadTimeChanged",BUFFERING:"buffering",BUFFERED:"buffered",DOWNLOADING:"downloading",BITRATE_INFO_AVAILABLE:"bitrateInfoAvailable",SET_TARGET_BITRATE:"setTargetBitrate",BITRATE_CHANGED:"bitrateChanged",CLOSED_CAPTIONS_INFO_AVAILABLE:"closedCaptionsInfoAvailable",SET_CLOSED_CAPTIONS_LANGUAGE:"setClosedCaptionsLanguage",CLOSED_CAPTION_CUE_CHANGED:"closedCaptionCueChanged",ASSET_DIMENSION:"assetDimension",SCRUBBING:"scrubbing",SCRUBBED:"scrubbed",SEEK:"seek",SEEKED:"seeked",PLAY:"play",PLAYING:"playing",PLAY_FAILED:"playFailed",PAUSE:"pause",PAUSED:"paused",PLAYED:"played",DISPLAY_CUE_POINTS:"displayCuePoints",INSERT_CUE_POINT:"insertCuePoint",RESET_CUE_POINTS:"resetCuePoints",WILL_CHANGE_FULLSCREEN:"willChangeFullscreen",FULLSCREEN_CHANGED:"fullscreenChanged",SIZE_CHANGED:"sizeChanged",CHANGE_VOLUME:"changeVolume",VOLUME_CHANGED:"volumeChanged",CONTROLS_SHOWN:"controlsShown",CONTROLS_HIDDEN:"controlsHidden",END_SCREEN_SHOWN:"endScreenShown",ERROR:"error",DESTROY:"destroy",WILL_PLAY_FROM_BEGINNING:"willPlayFromBeginning",DISABLE_PLAYBACK_CONTROLS:"disablePlaybackControls",ENABLE_PLAYBACK_CONTROLS:"enablePlaybackControls",VC_READY:"videoControllerReady",VC_CREATE_VIDEO_ELEMENT:"videoControllerCreateVideoElement",VC_UPDATE_ELEMENT_STREAM:"videoControllerUpdateElementStream",VC_VIDEO_ELEMENT_CREATED:"videoControllerVideoElementCreated",VC_FOCUS_VIDEO_ELEMENT:"videoControllerFocusVideoElement",VC_VIDEO_ELEMENT_IN_FOCUS:"videoControllerVideoElementInFocus",VC_VIDEO_ELEMENT_LOST_FOCUS:"videoControllerVideoElementLostFocus",VC_DISPOSE_VIDEO_ELEMENT:"videoControllerDisposeVideoElement",VC_VIDEO_ELEMENT_DISPOSED:"videoControllerVideoElementDisposed",VC_SET_VIDEO_STREAMS:"videoControllerSetVideoStreams",VC_ERROR:"videoControllerError",VC_SET_INITIAL_TIME:"videoSetInitialTime",VC_PLAY:"videoPlay",VC_WILL_PLAY:"videoWillPlay",VC_PLAYING:"videoPlaying",VC_PLAYED:"videoPlayed",VC_PLAY_FAILED:"videoPlayFailed",VC_PAUSE:"videoPause",VC_PAUSED:"videoPaused",VC_SEEK:"videoSeek",VC_SEEKING:"videoSeeking",VC_SEEKED:"videoSeeked",VC_PRELOAD:"videoPreload",VC_RELOAD:"videoReload",VC_PRIME_VIDEOS:"videoPrimeVideos",VC_TAG_FOUND:"videoTagFound",WILL_FETCH_ADS:"willFetchAds",DISABLE_SEEKING:"disableSeeking",ENABLE_SEEKING:"enableSeeking",WILL_PLAY_ADS:"willPlayAds",WILL_PLAY_SINGLE_AD:"willPlaySingleAd",WILL_PAUSE_ADS:"willPauseAds",WILL_RESUME_ADS:"willResumeAds",WILL_PLAY_NONLINEAR_AD:"willPlayNonlinearAd",PLAY_NONLINEAR_AD:"playNonlinearAd",NONLINEAR_AD_DISPLAYED:"nonlinearAdDisplayed",ADS_PLAYED:"adsPlayed",SINGLE_AD_PLAYED:"singleAdPlayed",ADS_ERROR:"adsError",ADS_CLICKED:"adsClicked",FIRST_AD_FETCHED:"firstAdFetched",AD_CONFIG_READY:"adConfigReady",WILL_SHOW_COMPANION_ADS:"willShowCompanionAds",AD_FETCH_FAILED:"adFetchFailed",MIDROLL_PLAY_FAILED:"midrollPlayFailed",SKIP_AD:"skipAd",UPDATE_AD_COUNTDOWN:"updateAdCountdown",REPORT_EXPERIMENT_VARIATIONS:"reportExperimentVariations",FETCH_STYLE:"fetchStyle",STYLE_FETCHED:"styleFetched",SET_STYLE:"setStyle",USE_SERVER_SIDE_HLS_ADS:"useServerSideHlsAds",LOAD_ALL_VAST_ADS:"loadAllVastAds",ADS_FILTERED:"adsFiltered",ADS_MANAGER_HANDLING_ADS:"adsManagerHandlingAds",ADS_MANAGER_FINISHED_ADS:"adsManagerFinishedAds",OVERLAY_RENDERING:"overlayRendering",SHOW_AD_CONTROLS:"showAdControls",SHOW_AD_MARQUEE:"showAdMarquee",PAGE_UNLOAD_REQUESTED:"pageUnloadRequested",PAGE_PROBABLY_UNLOADING:"pageProbablyUnloading",REPORT_DISCOVERY_IMPRESSION:"reportDiscoveryImpression",REPORT_DISCOVERY_CLICK:"reportDiscoveryClick",PLAYLISTS_READY:"playlistReady",UI_READY:"uiReady",__end_marker:!0},e.ERROR={API:{NETWORK:"network",SAS:{GENERIC:"sas",GEO:"geo",DOMAIN:"domain",FUTURE:"future",PAST:"past",DEVICE:"device",PROXY:"proxy",CONCURRENT_STREAMS:"concurrent_streams",INVALID_HEARTBEAT:"invalid_heartbeat",ERROR_DEVICE_INVALID_AUTH_TOKEN:"device_invalid_auth_token",ERROR_DEVICE_LIMIT_REACHED:"device_limit_reached",ERROR_DEVICE_BINDING_FAILED:"device_binding_failed",ERROR_DEVICE_ID_TOO_LONG:"device_id_too_long",ERROR_DRM_RIGHTS_SERVER_ERROR:"drm_server_error",ERROR_DRM_GENERAL_FAILURE:"drm_general_failure",ERROR_INVALID_ENTITLEMENTS:"invalid_entitlements"},CONTENT_TREE:"content_tree",METADATA:"metadata"},PLAYBACK:{GENERIC:"playback",STREAM:"stream",LIVESTREAM:"livestream",NETWORK:"network_error"},CHROMECAST:{MANIFEST:"chromecast_manifest",MEDIAKEYS:"chromecast_mediakeys",NETWORK:"chromecast_network",PLAYBACK:"chromecast_playback"},UNPLAYABLE_CONTENT:"unplayable_content",INVALID_EXTERNAL_ID:"invalid_external_id",EMPTY_CHANNEL:"empty_channel",EMPTY_CHANNEL_SET:"empty_channel_set",CHANNEL_CONTENT:"channel_content",VC:{UNSUPPORTED_ENCODING:"unsupported_encoding",UNABLE_TO_CREATE_VIDEO_ELEMENT:"unable_to_create_video_element"}},e.URLS={VAST_PROXY:t.template("http://player.ooyala.com/nuplayer/mobile_vast_ads_proxy?callback=<%=cb%>&embed_code=<%=embedCode%>&expires=<%=expires%>&tag_url=<%=tagUrl%>"),EXTERNAL_ID:t.template("<%=server%>/player_api/v1/content_tree/external_id/<%=pcode%>/<%=externalId%>"),CONTENT_TREE:t.template("<%=server%>/player_api/v1/content_tree/embed_code/<%=pcode%>/<%=embedCode%>"),METADATA:t.template("<%=server%>/player_api/v1/metadata/embed_code/<%=playerBrandingId%>/<%=embedCode%>?videoPcode=<%=pcode%>"),SAS:t.template("<%=server%>/player_api/v1/authorization/embed_code/<%=pcode%>/<%=embedCode%>"),ANALYTICS:t.template("<%=server%>/reporter.js"),THUMBNAILS:t.template("<%=server%>/api/v1/thumbnail_images/<%=embedCode%>"),__end_marker:!0},e.VIDEO={MAIN:"main",ADS:"ads",ENCODING:{DRM:{HLS:"hls_drm",DASH:"dash_drm"},AUDIO:"audio",DASH:"dash",HDS:"hds",HLS:"hls",IMA:"ima",PULSE:"pulse",MP4:"mp4",YOUTUBE:"youtube",RTMP:"rtmp",SMOOTH:"smooth",WEBM:"webm",AKAMAI_HD_VOD:"akamai_hd_vod",AKAMAI_HD2_VOD_HLS:"akamai_hd2_vod_hls",AKAMAI_HD2_VOD_HDS:"akamai_hd2_vod_hds",AKAMAI_HD2_HDS:"akamai_hd2_hds",AKAMAI_HD2_HLS:"akamai_hd2_hls",FAXS_HLS:"faxs_hls",WIDEVINE_HLS:"wv_hls",WIDEVINE_MP4:"wv_mp4",WIDEVINE_WVM:"wv_wvm",UNKNOWN:"unknown"},FEATURE:{CLOSED_CAPTIONS:"closedCaptions",VIDEO_OBJECT_SHARING_GIVE:"videoObjectSharingGive",VIDEO_OBJECT_SHARING_TAKE:"videoObjectSharingTake",BITRATE_CONTROL:"bitrateControl"},TECHNOLOGY:{FLASH:"flash",HTML5:"html5",MIXED:"mixed",OTHER:"other"}},e.CSS={VISIBLE_POSITION:"0px",INVISIBLE_POSITION:"-100000px",VISIBLE_DISPLAY:"block",INVISIBLE_DISPLAY:"none",VIDEO_Z_INDEX:1e4,SUPER_Z_INDEX:2e4,ALICE_SKIN_Z_INDEX:11e3,OVERLAY_Z_INDEX:10500,TRANSPARENT_COLOR:"rgba(255, 255, 255, 0)",__end_marker:!0},e.TEMPLATES={RANDOM_PLACE_HOLDER:["[place_random_number_here]","<now>","[timestamp]","<rand-num>","[cache_buster]","[random]"],REFERAK_PLACE_HOLDER:["[referrer_url]","[LR_URL]"],EMBED_CODE_PLACE_HOLDER:["[oo_embedcode]"],MESSAGE:'                  <table width="100%" height="100%" bgcolor="black" style="padding-left:55px; padding-right:55px;                   background-color:black; color: white;">                  <tbody>                  <tr valign="middle">                  <td align="right"><span style="font-family:Arial; font-size:20px">                  <%= message %>                  </span></td></tr></tbody></table>                  ',__end_marker:!0},e.CONSTANTS={AD_PLAY_COUNT_KEY:"oo_ad_play_count",AD_ID_TO_PLAY_COUNT_DIVIDER:":",AD_PLAY_COUNT_DIVIDER:"|",MAX_AD_PLAY_COUNT_HISTORY_LENGTH:20,CONTROLS_BOTTOM_PADDING:10,SEEK_TO_END_LIMIT:4,CLOSED_CAPTIONS:{SHOWING:"showing",HIDDEN:"hidden",DISABLED:"disabled"},OOYALA_PLAYER_SETTINGS_KEY:"ooyala_player_settings",__end_marker:!0}}(OO,OO._)},{}],5:[function(e,t,n){!function(e,t,n){e.playerParams=n.safeObject("environment.playerParams",e.playerParams,{}),e.configurePublisher=function(t){e.playerParams.pcode=t.pcode||e.playerParams.pcode||"",e.playerParams.playerBrandingId=t.playerBrandingId||e.playerParams.playerBrandingId||"",e.playerParams.debug=t.debug||e.playerParams.debug||""},e.isPublisherConfigured=function(){return!(!e.playerParams.pcode||!e.playerParams.playerBrandingId)},e.setServerHost=function(t){e.playerParams.api_ssl_server=t.api_ssl_server||e.playerParams.api_ssl_server||null,e.playerParams.api_server=t.api_server||e.playerParams.api_server||null,e.playerParams.auth_ssl_server=t.auth_ssl_server||e.playerParams.auth_ssl_server||null,e.playerParams.auth_server=t.auth_server||e.playerParams.auth_server||null,e.playerParams.analytics_ssl_server=t.analytics_ssl_server||e.playerParams.analytics_ssl_server||null,e.playerParams.analytics_server=t.analytics_server||e.playerParams.analytics_server||null,r()};var r=function(){e.SERVER={API:e.isSSL?e.playerParams.api_ssl_server||"https://player.ooyala.com":e.playerParams.api_server||"http://player.ooyala.com",AUTH:e.isSSL?e.playerParams.auth_ssl_server||"https://player.ooyala.com/sas":e.playerParams.auth_server||"http://player.ooyala.com/sas",ANALYTICS:e.isSSL?e.playerParams.analytics_ssl_server||"https://player.ooyala.com":e.playerParams.analytics_server||"http://player.ooyala.com"}};e.playerParams.tweaks=e.playerParams.tweaks||"",e.playerParams.tweaks=n.safeString("environment.playerParams.tweaks",e.playerParams.tweaks,""),e.playerParams.tweaks=e.playerParams.tweaks.split(","),e.tweaks={},e.tweaks["android-enable-hls"]=t.contains(e.playerParams.tweaks,"android-enable-hls"),e.tweaks["html5-force-mp4"]=t.contains(e.playerParams.tweaks,"html5-force-mp4"),e.playerParams.maxAdsTimeout=e.playerParams.maxAdsTimeout||5,e.playerParams.maxVastWrapperDepth=e.playerParams.maxVastWrapperDepth||3,e.playerParams.minLiveSeekWindow=e.playerParams.minLiveSeekWindow||10,e.guid="xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(e){var t=16*Math.random()|0,n="x"==e?t:3&t|8;return n.toString(16)}),e.playerCount=0,e.isProd=!(!e.playerParams.environment||!e.playerParams.environment.match(/^prod/i)),e.platform=window.navigator.platform,e.os=window.navigator.appVersion,e.supportsVideo=!!document.createElement("video").canPlayType,e.browserSupportsCors=function(){try{return t.has(new XMLHttpRequest,"withCredentials")||t.has(XMLHttpRequest.prototype,"withCredentials")}catch(e){return!1}}(),e.isWindows=function(){return!!e.platform.match(/Win/)}(),e.isIos=function(){return!!e.platform.match(/iPhone|iPad|iPod/)}(),e.isIphone=function(){return!!e.platform.match(/iPhone|iPod/)}(),e.isIpad=function(){return!!e.platform.match(/iPad/)}(),e.iosMajorVersion=function(){try{return e.isIos?parseInt(window.navigator.userAgent.match(/OS (\d+)/)[1],10):null}catch(t){return null}}(),e.isAndroid=function(){return!(!e.os.match(/Android/)||e.os.match(/Windows Phone/))}(),e.isAndroid4Plus=function(){var t=e.os.match(/Android [\d\.]*;/);return t&&t.length>0&&(t=parseInt(t[0].substring(t[0].indexOf(" ")+1,t[0].search("[.;]")))),e.isAndroid&&t>=4}(),e.isRimDevice=function(){return!(!e.os.match(/BlackBerry/)&&!e.os.match(/PlayBook/))}(),e.isFirefox=function(){return!!window.navigator.userAgent.match(/Firefox/)}(),e.isChrome=function(){return!!window.navigator.userAgent.match(/Chrome/)&&!window.navigator.userAgent.match(/Edge/)}(),e.isSafari=function(){return!!window.navigator.userAgent.match(/AppleWebKit/)&&!window.navigator.userAgent.match(/Chrome/)&&!window.navigator.userAgent.match(/like iPhone/)}(),e.chromeMajorVersion=function(){try{return parseInt(window.navigator.userAgent.match(/Chrome.([0-9]*)/)[1],10)}catch(e){return null}}(),e.isIE=function(){return!!window.navigator.userAgent.match(/MSIE/)||!!window.navigator.userAgent.match(/Trident/)}(),e.isEdge=function(){return!!window.navigator.userAgent.match(/Edge/)}(),e.isIE11Plus=function(){if(!window.navigator.userAgent.match(/Trident/))return!1;var e=window.navigator.userAgent.match(/rv:(\d*)/),t=e&&e[1];return t>=11}(),e.isWinPhone=function(){return!!e.os.match(/Windows Phone/)||!!e.os.match(/ZuneWP/)||!!e.os.match(/XBLWP/)}(),e.isSmartTV=function(){return!!window.navigator.userAgent.match(/SmartTV/)||!!window.navigator.userAgent.match(/NetCast/)}(),e.isMacOs=function(){return!e.isIos&&!!e.os.match(/Mac/)&&!window.navigator.userAgent.match(/like iPhone/)}(),e.isMacOsLionOrLater=function(){var t=e.os.match(/Mac OS X ([0-9]+)_([0-9]+)/);return null==t||t.length<3?!1:parseInt(t[1],10)>=10&&parseInt(t[2],10)>=7}(),e.macOsSafariVersion=function(){try{return e.isMacOs&&e.isSafari?parseInt(window.navigator.userAgent.match(/Version\/(\d+)/)[1],10):null}catch(t){return null}}(),e.isKindleHD=function(){return!!e.os.match(/Silk\/2/)}(),e.supportMSE=function(){return"MediaSource"in window||"WebKitMediaSource"in window||"mozMediaSource"in window||"msMediaSource"in window}(),e.supportAds=function(){return!e.isWinPhone&&!e.os.match(/Android [23]/)}(),e.allowGesture=function(){return e.isIos}(),e.allowAutoPlay=function(){return!e.isIos&&!e.isAndroid}(),e.supportTouch=function(){return!(!document.documentElement.hasOwnProperty||!document.documentElement.hasOwnProperty("ontouchstart"))}(),e.docDomain=function(){var t=null;try{t=document.domain}catch(n){}return e._.isEmpty(t)?e.isSmartTV?"SmartTV":"unknown":t}(),e.uiParadigm=function(){var t="tablet";return e.isAndroid4Plus&&e.tweaks["android-enable-hls"]?t="tablet":e.isIphone?t="mobile-native":e.os.match(/BlackBerry/)?t="mobile-native":e.os.match(/iPad/)?t="tablet":e.isKindleHD?t="mobile-native":e.os.match(/Silk/)?t="mobile":e.os.match(/Android 2/)?window.orientation%180==0&&window.outerWidth/window.devicePixelRatio<=480?t="mobile":window.outerWidth/window.devicePixelRatio<=560&&(t="mobile"):e.os.match(/Android/)?t="tablet":e.isWinPhone?t="mobile":(e.platform.match(/Mac/)||e.platform.match(/Win/)||e.platform.match(/Linux/))&&(t="desktop"),t}(),e.requiresSingleVideoElement=function(){return e.isIos||e.isAndroid}(),e.supportedVideoProfiles=function(){return e.isIos||e.isAndroid?"baseline":null}(),e.device=function(){var t="html5";return e.isIphone?t="iphone-html5":e.isIpad?t="ipad-html5":e.isAndroid?t="android-html5":e.isRimDevice?t="rim-html5":e.isWinPhone?t="winphone-html5":e.isSmartTV&&(t="smarttv-html5"),t}(),e.environmentRequiredFeatures=function(){var n=[];return e.os.match(/Android 2/)?n.push("html5-playback"):(n.push("html5-playback"),e.supportAds&&n.push("ads")),t.reduce(n,function(e,t){return e+t+" "},"")}(),e.supportMidRollAds=function(){return"desktop"===e.uiParadigm&&!e.isIos&&!e.isRimDevice}(),e.supportCookies=function(){document.cookie="ooyala_cookie_test=true";var e=document.cookie.indexOf("ooyala_cookie_test=true")>=0;return document.cookie="ooyala_cookie_test=; expires=Thu, 01 Jan 1970 00:00:00 GMT",e}(),e.isSSL="https:"==document.location.protocol,r(),e.requiredInEnvironment=e.featureEnabled=function(t){return!!e.environmentRequiredFeatures.match(new RegExp(t))},e.chromeExtensionEnabled=!!document.getElementById("ooyala-extension-installed"),e.locale="",e.setLocale=function(t){e.locale=t.toUpperCase()},e.getLocale=function(){return(e.locale||document.documentElement.lang||navigator.language||navigator.userLanguage||"en").substr(0,2).toUpperCase()}}(OO,OO._,OO.HM)},{}],6:[function(e,t,n){!function(e,t,n){e.getRandomString=function(){return Math.random().toString(36).substring(7)},e.safeClone=function(r){if(t.isNumber(r)||t.isString(r)||t.isBoolean(r)||t.isFunction(r)||t.isNull(r)||t.isUndefined(r))return r;var i=r instanceof Array?[]:{};try{n.extend(!0,i,r)}catch(a){e.log("deep clone error",a)}return i},e.d=function(){e.isDebug&&e.log.apply(e,arguments),e.$("#OOYALA_DEBUG_CONSOLE").append(JSON.stringify(e.safeClone(arguments))+"<br>")},e.inherit=function(t,n){if("function"!=typeof t)return e.log("invalid inherit, ParentClass need to be a class",t),null;var r=function(){t.apply(this,arguments),"function"==typeof n&&n.apply(this,arguments)},i=new t;return e._.extend(r.prototype,i),r.prototype.parentClass=i,r};var r={};e.attachStyle=function(e,t){var i=n('<style type="text/css">'+e+"</style>").appendTo("head");r[t]=r[t]||[],r[t].push(i)},e.removeStyles=function(t){e._.each(r[t],function(e){e.remove()})},e.getInnerProperty=function(e,n){for(var r=e,i=n;i.length>0;){var a=i.shift();if(t.isNull(r)||!t.isObject(r)||t.isFunction(r)||t.isArray(r))return null;r=r[a]}return r},e.formatSeconds=function(e){var t=parseInt(e,10)%60,n=parseInt(e/3600,10),r=parseInt((e-3600*n)/60,10);return 10>n&&(n="0"+n),10>r&&(r="0"+r),10>t&&(t="0"+t),parseInt(n,10)>0?n+":"+r+":"+t:r+":"+t},e.timeStringToSeconds=function(e){var n=(e||"").split(":");return t.reduce(n,function(e,t){return 60*e+parseInt(t,10)},0)},e.leftPadding=function(e,t){for(var n="0",r=e?e.toString():"";r.length<t;)r=n+r;return r},e.getColorString=function(t){return"#"+e.leftPadding(t.toString(16),6).toUpperCase()},e.hexToRgb=function(e){var t=(16711680&e)>>16,n=(65280&e)>>8,r=255&e;return[t,n,r]},e.changeColor=function(t,n,r){var i=r?Math.max:Math.min,a=r?0:255,o=Math.round(255*n)*(r?-1:1),l=e.hexToRgb(t);return[e.leftPadding(i(l[0]+o,a).toString(16),2),e.leftPadding(i(l[1]+o,a).toString(16),2),e.leftPadding(i(l[2]+o,a).toString(16),2)].join("")},e.decode64=function(e){e=e.replace(/\n/g,"");var t,n="",r=0,i=[],a="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";if(window.atob)return atob(e);do{for(t=0;4>t;t++)i[t]=a.indexOf(e.charAt(r++));n+=String.fromCharCode(i[0]<<2|i[1]>>4,64==i[2]?0:(15&i[1])<<4|i[2]>>2,64==i[3]?0:(3&i[2])<<6|i[3])}while(r<e.length);return n.replace(/\0/g,"")},e.pixelPing=function(t){var n=new Image;n.onerror=n.onabort=function(){e.d("onerror:",t)},n.src=e.getNormalizedTagUrl(t)},e.pixelPings=function(n){t.isEmpty(n)||t.each(n,function(t){e.pixelPing(t)},this)},e.stringToBoolean=function(e){return"string"==typeof e?e.toLowerCase().indexOf("true")>-1||e.toLowerCase().indexOf("yes")>-1:!!e},e.regexEscape=function(e){var t=/[<>()\[\]{}]/g;return e.replace(t,"\\$&")},e.getNormalizedTagUrl=function(n,r){var i=(new Date).getTime(),a=escape(document.URL),o=function(r,i){t.each(r,function(t){var r=new RegExp("("+e.regexEscape(t)+")","gi");n=n.replace(r,i)},this)};return o(e.TEMPLATES.RANDOM_PLACE_HOLDER,i),o(e.TEMPLATES.REFERAK_PLACE_HOLDER,a),r&&o(e.TEMPLATES.EMBED_CODE_PLACE_HOLDER,r),n},e.safeSeekRange=function(e){return{start:e.length>0?e.start(0):0,end:e.length>0?e.end(0):0}},e.loadedJS=e.loadedJS||{},e.jsOnSuccessList=e.jsOnSuccessList||{},e.safeFuncCall=function(t){if("function"==typeof t)try{t.apply()}catch(n){e.log("Can not invoke function!",n)}},e.loadScriptOnce=function(t,r,i,a){return e.jsOnSuccessList[t]=e.jsOnSuccessList[t]||[],e.loadedJS[t]?("loaded"===e.loadedJS[t]?e.safeFuncCall(r):"loading"===e.loadedJS[t]&&e.jsOnSuccessList[t].unshift(r),!1):(e.loadedJS[t]="loading",n.ajax({url:t,type:"GET",cache:!0,dataType:"script",timeout:a||15e3,success:function(){e.loadedJS[t]="loaded",e.jsOnSuccessList[t].unshift(r),e._.each(e.jsOnSuccessList[t],function(t){e.safeFuncCall(t)},this),e.jsOnSuccessList[t]=[]},error:function(){e.safeFuncCall(i)}}),!0)};try{e.localStorage=window.localStorage}catch(i){e.log(i)}e.localStorage||(e.localStorage={getItem:function(e){return e&&this.hasOwnProperty(e)?unescape(document.cookie.replace(new RegExp("(?:^|.*;\\s*)"+escape(e).replace(/[\-\.\+\*]/g,"\\$&")+"\\s*\\=\\s*((?:[^;](?!;))*[^;]?).*"),"$1")):null},key:function(e){return unescape(document.cookie.replace(/\s*\=(?:.(?!;))*$/,"").split(/\s*\=(?:[^;](?!;))*[^;]?;\s*/)[e])},setItem:function(e,t){e&&(document.cookie=escape(e)+"="+escape(t)+"; expires=Tue, 19 Jan 2038 03:14:07 GMT; path=/",this.length=document.cookie.match(/\=/g).length)},length:0,removeItem:function(e){e&&this.hasOwnProperty(e)&&(document.cookie=escape(e)+"=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/",this.length--)},hasOwnProperty:function(e){return new RegExp("(?:^|;\\s*)"+escape(e).replace(/[\-\.\+\*]/g,"\\$&")+"\\s*\\=").test(document.cookie)}},e.localStorage.length=(document.cookie.match(/\=/g)||e.localStorage).length),e.setItem=function(t,n){try{e.localStorage.setItem(t,n)}catch(r){e.log(r)}},e.JSON=window.JSON}(OO,OO._,OO.$)},{}],7:[function(e,t,n){var r=function(e,t){var n=function(t){if(this.config=t||{},!e.isObject(this.config))throw new Error("Hazmat is not initialized properly");this.fail=e.isFunction(this.config.fail)?this.config.fail:n.fail,this.warn=e.isFunction(this.config.warn)?this.config.warn:n.warn,this.log=e.isFunction(this.config.log)?this.config.log:n.log};return e.extend(n,{ID_REGEX:/^[\_A-Za-z0-9]+$/,create:function(e){return new n(e)},noConflict:function(){return t.Hazmat=n.original,n},log:function(){console&&e.isFunction(console.log)&&console.log.apply(console,arguments)},fail:function(e,t){var r=e||"",i=t||{};throw n.log("Hazmat Failure::",r,i),new Error("Hazmat Failure "+r.toString())},warn:function(e,t){var r=e||"",i=t||{};n.log("Hazmat Warning::",r,i)},fixDomId:function(t){return e.isString(t)&&t.length>0?t.replace(/[^A-Za-z0-9\_]/g,""):null},isDomId:function(t){return e.isString(t)&&t.match(n.ID_REGEX)},__placeholder:!0}),e.extend(n.prototype,{_safeValue:function(t,n,r,i){var a=r;return e.isFunction(r)&&(r=e.once(function(){try{return a.apply(this,arguments)}catch(e){}})),i.checker(n)?n:i.evalFallback&&e.isFunction(r)&&i.checker(r(n))?(this.warn("Expected valid "+i.name+" for "+t+" but was able to sanitize it:",[n,r(n)]),r(n)):i.checker(a)?(this.warn("Expected valid "+i.name+" for "+t+" but was able to fallback to default value:",[n,a]),a):void this.fail("Expected valid "+i.name+" for "+t+" but received:",n)},safeString:function(t,n,r){return this._safeValue(t,n,r,{name:"String",checker:e.isString,evalFallback:!0})},safeStringOrNull:function(t,n,r){return null==n?n:this._safeValue(t,n,r,{name:"String",checker:e.isString,evalFallback:!0})},safeDomId:function(e,t,r){return this._safeValue(e,t,r,{name:"DOM ID",checker:n.isDomId,evalFallback:!0})},safeFunction:function(t,n,r){return this._safeValue(t,n,r,{name:"Function",checker:e.isFunction,evalFallback:!1})},safeFunctionOrNull:function(t,n,r){return null==n?n:this._safeValue(t,n,r,{name:"Function",checker:e.isFunction,evalFallback:!1})},safeObject:function(t,n,r){return this._safeValue(t,n,r,{name:"Object",checker:e.isObject,evalFallback:!1})},safeObjectOrNull:function(t,n,r){return null==n?n:this._safeValue(t,n,r,{name:"Object",checker:e.isObject,evalFallback:!1})},safeArray:function(t,n,r){return this._safeValue(t,n,r,{name:"Array",checker:e.isArray,evalFallback:!1})},safeArrayOfElements:function(t,n,r,i){var a=this._safeValue(t,n,i,{name:"Array",checker:e.isArray,evalFallback:!1});return e.map(a,r)},__placeholder:!0}),n};if("undefined"!=typeof window&&"undefined"!=typeof window._){var i=r(window._,window);i.original=window.Hazmat,window.Hazmat=i}else{var a=e("underscore"),i=r(a);a.extend(n,i)}},{underscore:8}],8:[function(e,t,n){(function(){function e(t,n,r){if(t===n)return 0!==t||1/t==1/n;if(null==t||null==n)return t===n;if(t._chain&&(t=t._wrapped),n._chain&&(n=n._wrapped),t.isEqual&&y.isFunction(t.isEqual))return t.isEqual(n);if(n.isEqual&&y.isFunction(n.isEqual))return n.isEqual(t);var i=d.call(t);if(i!=d.call(n))return!1;switch(i){case"[object String]":return t==String(n);case"[object Number]":return t!=+t?n!=+n:0==t?1/t==1/n:t==+n;case"[object Date]":case"[object Boolean]":return+t==+n;case"[object RegExp]":return t.source==n.source&&t.global==n.global&&t.multiline==n.multiline&&t.ignoreCase==n.ignoreCase}if("object"!=typeof t||"object"!=typeof n)return!1;for(var a=r.length;a--;)if(r[a]==t)return!0;r.push(t);var o=0,l=!0;if("[object Array]"==i){if(o=t.length,l=o==n.length)for(;o--&&(l=o in t==o in n&&e(t[o],n[o],r)););}else{if("constructor"in t!="constructor"in n||t.constructor!=n.constructor)return!1;for(var s in t)if(y.has(t,s)&&(o++,!(l=y.has(n,s)&&e(t[s],n[s],r))))break;if(l){for(s in n)if(y.has(n,s)&&!o--)break;l=!o}}return r.pop(),l}var r=this,i=r._,a={},o=Array.prototype,l=Object.prototype,s=Function.prototype,c=o.slice,u=o.unshift,d=l.toString,f=l.hasOwnProperty,h=o.forEach,E=o.map,_=o.reduce,p=o.reduceRight,m=o.filter,O=o.every,A=o.some,g=o.indexOf,S=o.lastIndexOf,v=Array.isArray,T=Object.keys,I=s.bind,y=function(e){return new V(e)};"undefined"!=typeof n?("undefined"!=typeof t&&t.exports&&(n=t.exports=y),n._=y):r._=y,y.VERSION="1.3.3";var D=y.each=y.forEach=function(e,t,n){if(null!=e)if(h&&e.forEach===h)e.forEach(t,n);else if(e.length===+e.length){for(var r=0,i=e.length;i>r;r++)if(r in e&&t.call(n,e[r],r,e)===a)return}else for(var o in e)if(y.has(e,o)&&t.call(n,e[o],o,e)===a)return};y.map=y.collect=function(e,t,n){var r=[];return null==e?r:E&&e.map===E?e.map(t,n):(D(e,function(e,i,a){r[r.length]=t.call(n,e,i,a)}),e.length===+e.length&&(r.length=e.length),r)},y.reduce=y.foldl=y.inject=function(e,t,n,r){var i=arguments.length>2;if(null==e&&(e=[]),_&&e.reduce===_)return r&&(t=y.bind(t,r)),i?e.reduce(t,n):e.reduce(t);if(D(e,function(e,a,o){i?n=t.call(r,n,e,a,o):(n=e,i=!0)}),!i)throw new TypeError("Reduce of empty array with no initial value");return n},y.reduceRight=y.foldr=function(e,t,n,r){var i=arguments.length>2;if(null==e&&(e=[]),p&&e.reduceRight===p)return r&&(t=y.bind(t,r)),i?e.reduceRight(t,n):e.reduceRight(t);var a=y.toArray(e).reverse();return r&&!i&&(t=y.bind(t,r)),i?y.reduce(a,t,n,r):y.reduce(a,t)},y.find=y.detect=function(e,t,n){var r;return N(e,function(e,i,a){return t.call(n,e,i,a)?(r=e,!0):void 0}),r},y.filter=y.select=function(e,t,n){var r=[];return null==e?r:m&&e.filter===m?e.filter(t,n):(D(e,function(e,i,a){t.call(n,e,i,a)&&(r[r.length]=e)}),r)},y.reject=function(e,t,n){var r=[];return null==e?r:(D(e,function(e,i,a){t.call(n,e,i,a)||(r[r.length]=e)}),r)},y.every=y.all=function(e,t,n){var r=!0;return null==e?r:O&&e.every===O?e.every(t,n):(D(e,function(e,i,o){return(r=r&&t.call(n,e,i,o))?void 0:a}),!!r)};var N=y.some=y.any=function(e,t,n){t||(t=y.identity);var r=!1;return null==e?r:A&&e.some===A?e.some(t,n):(D(e,function(e,i,o){return r||(r=t.call(n,e,i,o))?a:void 0}),!!r)};y.include=y.contains=function(e,t){var n=!1;return null==e?n:g&&e.indexOf===g?-1!=e.indexOf(t):n=N(e,function(e){return e===t})},y.invoke=function(e,t){var n=c.call(arguments,2);return y.map(e,function(e){return(y.isFunction(t)?t||e:e[t]).apply(e,n)})},y.pluck=function(e,t){return y.map(e,function(e){return e[t]})},y.max=function(e,t,n){if(!t&&y.isArray(e)&&e[0]===+e[0])return Math.max.apply(Math,e);if(!t&&y.isEmpty(e))return-(1/0);var r={computed:-(1/0)};return D(e,function(e,i,a){var o=t?t.call(n,e,i,a):e;o>=r.computed&&(r={value:e,computed:o})}),r.value},y.min=function(e,t,n){if(!t&&y.isArray(e)&&e[0]===+e[0])return Math.min.apply(Math,e);if(!t&&y.isEmpty(e))return 1/0;var r={computed:1/0};return D(e,function(e,i,a){var o=t?t.call(n,e,i,a):e;o<r.computed&&(r={value:e,computed:o})}),r.value},y.shuffle=function(e){var t,n=[];return D(e,function(e,r,i){t=Math.floor(Math.random()*(r+1)),n[r]=n[t],n[t]=e}),n},y.sortBy=function(e,t,n){var r=y.isFunction(t)?t:function(e){return e[t]};return y.pluck(y.map(e,function(e,t,i){return{value:e,criteria:r.call(n,e,t,i)}}).sort(function(e,t){var n=e.criteria,r=t.criteria;return void 0===n?1:void 0===r?-1:r>n?-1:n>r?1:0}),"value")},y.groupBy=function(e,t){var n={},r=y.isFunction(t)?t:function(e){return e[t]};return D(e,function(e,t){var i=r(e,t);(n[i]||(n[i]=[])).push(e)}),n},y.sortedIndex=function(e,t,n){n||(n=y.identity);for(var r=0,i=e.length;i>r;){var a=r+i>>1;n(e[a])<n(t)?r=a+1:i=a}return r},y.toArray=function(e){return e?y.isArray(e)?c.call(e):y.isArguments(e)?c.call(e):e.toArray&&y.isFunction(e.toArray)?e.toArray():y.values(e):[]},y.size=function(e){return y.isArray(e)?e.length:y.keys(e).length},y.first=y.head=y.take=function(e,t,n){return null==t||n?e[0]:c.call(e,0,t)},y.initial=function(e,t,n){return c.call(e,0,e.length-(null==t||n?1:t))},y.last=function(e,t,n){return null==t||n?e[e.length-1]:c.call(e,Math.max(e.length-t,0))},y.rest=y.tail=function(e,t,n){return c.call(e,null==t||n?1:t)},y.compact=function(e){return y.filter(e,function(e){return!!e})},y.flatten=function(e,t){return y.reduce(e,function(e,n){return y.isArray(n)?e.concat(t?n:y.flatten(n)):(e[e.length]=n,e)},[])},y.without=function(e){return y.difference(e,c.call(arguments,1))},y.uniq=y.unique=function(e,t,n){var r=n?y.map(e,n):e,i=[];return e.length<3&&(t=!0),y.reduce(r,function(n,r,a){return(t?y.last(n)===r&&n.length:y.include(n,r))||(n.push(r),i.push(e[a])),n},[]),i},y.union=function(){return y.uniq(y.flatten(arguments,!0))},y.intersection=y.intersect=function(e){var t=c.call(arguments,1);return y.filter(y.uniq(e),function(e){return y.every(t,function(t){return y.indexOf(t,e)>=0})})},y.difference=function(e){var t=y.flatten(c.call(arguments,1),!0);return y.filter(e,function(e){return!y.include(t,e)})},y.zip=function(){for(var e=c.call(arguments),t=y.max(y.pluck(e,"length")),n=new Array(t),r=0;t>r;r++)n[r]=y.pluck(e,""+r);return n},y.indexOf=function(e,t,n){if(null==e)return-1;var r,i;if(n)return r=y.sortedIndex(e,t),e[r]===t?r:-1;if(g&&e.indexOf===g)return e.indexOf(t);for(r=0,i=e.length;i>r;r++)if(r in e&&e[r]===t)return r;return-1},y.lastIndexOf=function(e,t){if(null==e)return-1;if(S&&e.lastIndexOf===S)return e.lastIndexOf(t);for(var n=e.length;n--;)if(n in e&&e[n]===t)return n;return-1},y.range=function(e,t,n){arguments.length<=1&&(t=e||0,e=0),n=arguments[2]||1;for(var r=Math.max(Math.ceil((t-e)/n),0),i=0,a=new Array(r);r>i;)a[i++]=e,e+=n;return a};var C=function(){};y.bind=function(e,t){var n,r;if(e.bind===I&&I)return I.apply(e,c.call(arguments,1));if(!y.isFunction(e))throw new TypeError;return r=c.call(arguments,2),n=function(){if(!(this instanceof n))return e.apply(t,r.concat(c.call(arguments)));C.prototype=e.prototype;var i=new C,a=e.apply(i,r.concat(c.call(arguments)));return Object(a)===a?a:i}},y.bindAll=function(e){var t=c.call(arguments,1);return 0==t.length&&(t=y.functions(e)),D(t,function(t){e[t]=y.bind(e[t],e)}),e},y.memoize=function(e,t){var n={};return t||(t=y.identity),function(){var r=t.apply(this,arguments);return y.has(n,r)?n[r]:n[r]=e.apply(this,arguments)}},y.delay=function(e,t){var n=c.call(arguments,2);return setTimeout(function(){return e.apply(null,n);
},t)},y.defer=function(e){return y.delay.apply(y,[e,1].concat(c.call(arguments,1)))},y.throttle=function(e,t){var n,r,i,a,o,l,s=y.debounce(function(){o=a=!1},t);return function(){n=this,r=arguments;var c=function(){i=null,o&&e.apply(n,r),s()};return i||(i=setTimeout(c,t)),a?o=!0:l=e.apply(n,r),s(),a=!0,l}},y.debounce=function(e,t,n){var r;return function(){var i=this,a=arguments,o=function(){r=null,n||e.apply(i,a)};n&&!r&&e.apply(i,a),clearTimeout(r),r=setTimeout(o,t)}},y.once=function(e){var t,n=!1;return function(){return n?t:(n=!0,t=e.apply(this,arguments))}},y.wrap=function(e,t){return function(){var n=[e].concat(c.call(arguments,0));return t.apply(this,n)}},y.compose=function(){var e=arguments;return function(){for(var t=arguments,n=e.length-1;n>=0;n--)t=[e[n].apply(this,t)];return t[0]}},y.after=function(e,t){return 0>=e?t():function(){return--e<1?t.apply(this,arguments):void 0}},y.keys=T||function(e){if(e!==Object(e))throw new TypeError("Invalid object");var t=[];for(var n in e)y.has(e,n)&&(t[t.length]=n);return t},y.values=function(e){return y.map(e,y.identity)},y.functions=y.methods=function(e){var t=[];for(var n in e)y.isFunction(e[n])&&t.push(n);return t.sort()},y.extend=function(e){return D(c.call(arguments,1),function(t){for(var n in t)e[n]=t[n]}),e},y.pick=function(e){var t={};return D(y.flatten(c.call(arguments,1)),function(n){n in e&&(t[n]=e[n])}),t},y.defaults=function(e){return D(c.call(arguments,1),function(t){for(var n in t)null==e[n]&&(e[n]=t[n])}),e},y.clone=function(e){return y.isObject(e)?y.isArray(e)?e.slice():y.extend({},e):e},y.tap=function(e,t){return t(e),e},y.isEqual=function(t,n){return e(t,n,[])},y.isEmpty=function(e){if(null==e)return!0;if(y.isArray(e)||y.isString(e))return 0===e.length;for(var t in e)if(y.has(e,t))return!1;return!0},y.isElement=function(e){return!(!e||1!=e.nodeType)},y.isArray=v||function(e){return"[object Array]"==d.call(e)},y.isObject=function(e){return e===Object(e)},y.isArguments=function(e){return"[object Arguments]"==d.call(e)},y.isArguments(arguments)||(y.isArguments=function(e){return!(!e||!y.has(e,"callee"))}),y.isFunction=function(e){return"[object Function]"==d.call(e)},y.isString=function(e){return"[object String]"==d.call(e)},y.isNumber=function(e){return"[object Number]"==d.call(e)},y.isFinite=function(e){return y.isNumber(e)&&isFinite(e)},y.isNaN=function(e){return e!==e},y.isBoolean=function(e){return e===!0||e===!1||"[object Boolean]"==d.call(e)},y.isDate=function(e){return"[object Date]"==d.call(e)},y.isRegExp=function(e){return"[object RegExp]"==d.call(e)},y.isNull=function(e){return null===e},y.isUndefined=function(e){return void 0===e},y.has=function(e,t){return f.call(e,t)},y.noConflict=function(){return r._=i,this},y.identity=function(e){return e},y.times=function(e,t,n){for(var r=0;e>r;r++)t.call(n,r)},y.escape=function(e){return(""+e).replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#x27;").replace(/\//g,"&#x2F;")},y.result=function(e,t){if(null==e)return null;var n=e[t];return y.isFunction(n)?n.call(e):n},y.mixin=function(e){D(y.functions(e),function(t){F(t,y[t]=e[t])})};var L=0;y.uniqueId=function(e){var t=L++;return e?e+t:t},y.templateSettings={evaluate:/<%([\s\S]+?)%>/g,interpolate:/<%=([\s\S]+?)%>/g,escape:/<%-([\s\S]+?)%>/g};var b=/.^/,P={"\\":"\\","'":"'",r:"\r",n:"\n",t:"	",u2028:"\u2028",u2029:"\u2029"};for(var R in P)P[P[R]]=R;var w=/\\|'|\r|\n|\t|\u2028|\u2029/g,k=/\\(\\|'|r|n|t|u2028|u2029)/g,x=function(e){return e.replace(k,function(e,t){return P[t]})};y.template=function(e,t,n){n=y.defaults(n||{},y.templateSettings);var r="__p+='"+e.replace(w,function(e){return"\\"+P[e]}).replace(n.escape||b,function(e,t){return"'+\n_.escape("+x(t)+")+\n'"}).replace(n.interpolate||b,function(e,t){return"'+\n("+x(t)+")+\n'"}).replace(n.evaluate||b,function(e,t){return"';\n"+x(t)+"\n;__p+='"})+"';\n";n.variable||(r="with(obj||{}){\n"+r+"}\n"),r="var __p='';var print=function(){__p+=Array.prototype.join.call(arguments, '')};\n"+r+"return __p;\n";var i=new Function(n.variable||"obj","_",r);if(t)return i(t,y);var a=function(e){return i.call(this,e,y)};return a.source="function("+(n.variable||"obj")+"){\n"+r+"}",a},y.chain=function(e){return y(e).chain()};var V=function(e){this._wrapped=e};y.prototype=V.prototype;var M=function(e,t){return t?y(e).chain():e},F=function(e,t){V.prototype[e]=function(){var e=c.call(arguments);return u.call(e,this._wrapped),M(t.apply(y,e),this._chain)}};y.mixin(y),D(["pop","push","reverse","shift","sort","splice","unshift"],function(e){var t=o[e];V.prototype[e]=function(){var n=this._wrapped;t.apply(n,arguments);var r=n.length;return"shift"!=e&&"splice"!=e||0!==r||delete n[0],M(n,this._chain)}}),D(["concat","join","slice"],function(e){var t=o[e];V.prototype[e]=function(){return M(t.apply(this._wrapped,arguments),this._chain)}}),V.prototype.chain=function(){return this._chain=!0,this},V.prototype.value=function(){return this._wrapped}}).call(this)},{}],9:[function(e,t,n){e("../../../html5-common/js/utils/InitModules/InitOO.js"),e("../../../html5-common/js/utils/InitModules/InitOOUnderscore.js"),e("../../../html5-common/js/utils/InitModules/InitOOHazmat.js"),e("../../../html5-common/js/utils/constants.js"),e("../../../html5-common/js/utils/utils.js"),e("../../../html5-common/js/utils/environment.js"),function(e,t){var n="ooyalaHtml5VideoTech",r={},i=function(){this.name=n,this.features=[OO.VIDEO.FEATURE.CLOSED_CAPTIONS,OO.VIDEO.FEATURE.VIDEO_OBJECT_SHARING_GIVE],this.technology=OO.VIDEO.TECHNOLOGY.HTML5;var e=function(){var e=[],t=document.createElement("video");return"function"==typeof t.canPlayType&&(t.canPlayType("video/mp4")&&e.push(OO.VIDEO.ENCODING.MP4),t.canPlayType("video/webm")&&e.push(OO.VIDEO.ENCODING.WEBM),!t.canPlayType("application/vnd.apple.mpegurl")&&!t.canPlayType("application/x-mpegURL")||OO.isSmartTV||OO.isRimDevice||OO.isMacOs&&!OO.isMacOsLionOrLater||(e.push(OO.VIDEO.ENCODING.HLS),e.push(OO.VIDEO.ENCODING.AKAMAI_HD2_VOD_HLS),e.push(OO.VIDEO.ENCODING.AKAMAI_HD2_HLS)),window.navigator.userAgent.match(/SonyCEBrowser/)&&(e.push(OO.VIDEO.ENCODING.HLS),e.push(OO.VIDEO.ENCODING.AKAMAI_HD2_VOD_HLS),e.push(OO.VIDEO.ENCODING.AKAMAI_HD2_HLS))),e};this.encodings=e(),this.create=function(e,n,i,l,s){if(!(this.maxSupportedElements>0&&s&&r[s]>=this.maxSupportedElements)){var c=t("<video>");c.attr("class","video"),c.attr("id",n),OO.isSafari&&!OO.isIos?c.attr("preload","metadata"):c.attr("preload","none"),c.css(l),OO.isIos&&c.attr("x-webkit-airplay","allow");var u={width:e.width(),height:e.height()};s||(s=o());var d=new a(n,c[0],u,s);return r[s]&&r[s]>=0?r[s]++:r[s]=1,d.controller=i,i.notify(i.EVENTS.CAN_PLAY),d.subscribeAllEvents(),e.append(c),d}},this.destroy=function(){this.encodings=[],this.create=function(){}},this.maxSupportedElements=function(){var e=OO.isIos,t=OO.isAndroid&&(!OO.isAndroid4Plus||OO.chromeMajorVersion<40);return e||t?1:-1}()},a=function(n,i,a,l){this.controller={},this.disableNativeSeek=!1;var s=i,c=l,u="",d=!1,f={},h=!1,E=!1,_=!1,p=null,m=!1,O=!1,A=0,g=!1,S="track_cc",v=!0,T=a,I={height:0,width:0},y={value:0,reached:!0},D=!0,N=!1,C=!1,L=null,b={},P={},R=null,w=!1,k=-1,x={width:"",height:"",left:"50%",top:"50%","-webkit-transform":"translate(-50%,-50%)",visibility:"visible"};if(OO.isAndroid&&OO.isChrome){var V=e.bind(function(e){document.hidden&&(D=!1)},this);document.addEventListener("visibilitychange",V)}this.sharedElementGive=function(){M(),u=""},this.sharedElementTake=function(){this.subscribeAllEvents()},this.subscribeAllEvents=function(){f={loadstart:H,loadedmetadata:U,progress:q,error:X,stalled:J,canplay:Z,canplaythrough:$,playing:Q,waiting:ee,seeking:te,seeked:ne,ended:re,durationchange:ie,timeupdate:ae,play:oe,pause:le,ratechange:se,volumechange:ce,volumechangeNew:ce,webkitbeginfullscreen:ue,webkitendfullscreen:de},e.each(f,function(e,n){t(s).on(n,e)},this)};var M=function(){e.each(f,function(e,n){t(s).off(n,e)},this)};this.setVideoUrl=function(e,t,n){var r=!1;return u.replace(/[\?&]_=[^&]+$/,"")!=e&&(u=e||"",u.length>0&&OO.isChrome&&(u=u+(/\?/.test(u)?"&":"?")+"_="+o()),g=t==OO.VIDEO.ENCODING.HLS||t==OO.VIDEO.ENCODING.AKAMAI_HD2_VOD_HLS||t==OO.VIDEO.ENCODING.AKAMAI_HD2_HLS,C=n,r=!0,F(),""===u?s.src=null:s.src=u),r};var F=e.bind(function(){m=!1,E=!1,_=!1,p=null,h=!1,O=!1,v=!0,A=0,d=!1,I={height:0,width:0},y={value:0,reached:!0},D=!0,N=!1,Ne(),L=null,P={},t(s).find("."+S).remove(),b={}},this);this.onAdsPlayed=function(){},this.load=function(n){if(!h||n){if(n)if(OO.isEdge)A=0;else try{OO.isIos&&8==OO.iosMajorVersion?t(s).on("durationchange",e.bind(function(){s.currentTime=0,A=0},this)):(s.currentTime=0,A=0),s.pause()}catch(r){OO.log("VTC_OO: Failed to rewind video, probably ok; continuing")}E=!1,s.load(),h=!0}},this.setInitialTime=function(e){var t=(!_||d)&&0!==e,n=OO.isSafari&&d&&0===e;(t||n)&&(y.value=e,y.reached=!1,OO.isAndroid||n&&!OO.isIos?Ae(y.value):this.seek(y.value))},this.play=function(){s.seeking?m=!0:Ee(!1)},this.pause=function(){m=!1,s.pause()},this.seek=function(e){if(C)return!1;var t=Oe(s,e);return null!==t?(s.currentTime=t,O=!0,!0):(Ae(e),!1)},this.setVolume=function(e){var t=e;0>t?t=0:t>1&&(t=1),s.volume=t,""!==s.currentSrc&&null!==s.currentSrc||ce({target:{volume:t}})},this.getCurrentTime=function(){return s.currentTime},this.primeVideoElement=function(){Ee(!0),s.pause()},this.applyCss=function(e){t(s).css(e),fe()},this.destroy=function(){s.pause(),Ne(),OO.isIE||OO.isEdge||(s.src=""),M(),t(s).remove(),c&&r[c]&&r[c]>0&&r[c]--,V&&document.removeEventListener("visibilitychange",V)},this.setClosedCaptions=e.bind(function(n,r,i){var a=OO.iosMajorVersion,o=OO.macOsSafariVersion,l=a&&10>a||o&&10>o;if(l){if(t(s).find("."+S).remove(),P={},null==n)return}else{if(null==n)return t(s).find("."+S).remove(),void(P={});r&&t(s).children("."+S).each(function(){t(this).label==r.locale[n]&&t(this).srclang==n&&"subtitles"==t(this).kind||t(this).remove()})}var c="closed_captions_vtt";r&&r[c]&&e.each(r[c],function(e,t){var n={label:e.name,src:e.url,language:t,inStream:!1};W(n)});var u=OO.getRandomString(),d=i&&i.mode||OO.CONSTANTS.CLOSED_CAPTIONS.SHOWING;if(b[n]){var f=b[n];if(1==f.inStream&&s.textTracks)for(var h=0;h<s.textTracks.length;h++)(OO.isSafari||OO.isEdge)&&C||"captions"===s.textTracks[h].kind?(s.textTracks[h].mode=d,s.textTracks[h].oncuechange=j):s.textTracks[h].mode=OO.CONSTANTS.CLOSED_CAPTIONS.DISABLED,u=s.textTracks[h].id||s.textTracks[h].trackId||OO.getRandomString(),s.textTracks[h].trackId=u,P[u]=s.textTracks[h].mode;else if(!f.inStream){if(this.setClosedCaptionsMode(OO.CONSTANTS.CLOSED_CAPTIONS.DISABLED),l)t(s).append("<track id='"+u+"' class='"+S+"' kind='subtitles' label='"+f.label+"' src='"+f.src+"' srclang='"+f.language+"' default>"),s.textTracks&&s.textTracks[0]&&(s.textTracks[0].mode=d,d==OO.CONSTANTS.CLOSED_CAPTIONS.HIDDEN&&(s.textTracks[0].oncuechange=j));else if(0==t(s).children("."+S).length&&t(s).append("<track id='"+u+"' class='"+S+"' kind='subtitles' label='"+f.label+"' src='"+f.src+"' srclang='"+f.language+"' default>"),s.textTracks&&s.textTracks.length>0)for(var h=0;h<s.textTracks.length;h++)s.textTracks[h].mode=d,d==OO.CONSTANTS.CLOSED_CAPTIONS.HIDDEN&&(s.textTracks[h].oncuechange=j);P[u]=d,e.delay(function(e){if(s.textTracks&&s.textTracks[0]&&(s.textTracks[0].mode=e,OO.isFirefox))for(var t=0;t<s.textTracks[0].cues.length;t++)s.textTracks[0].cues[t].line=15},100,d)}}},this),this.setClosedCaptionsMode=e.bind(function(e){if(s.textTracks)for(var t=0;t<s.textTracks.length;t++){s.textTracks[t].mode=e;var n=s.textTracks[t].id||s.textTracks[t].trackId;P[n]=e}e==OO.CONSTANTS.CLOSED_CAPTIONS.DISABLED&&z("")},this),this.setCrossorigin=function(e){e?t(s).attr("crossorigin",e):t(s).removeAttr("crossorigin")};var H=e.bind(function(){Ne(),u=s.src,v=!0,d=!1,O=!1},this),U=e.bind(function(){OO.isSafari&&s&&s.textTracks&&(s.textTracks.onchange=G),ge(),h=!0},this),G=e.bind(function(e){for(var t=0;t<s.textTracks.length;t++){var n=s.textTracks[t].id||s.textTracks[t].trackId;"undefined"!=typeof P[n]&&s.textTracks[t].mode!==P[n]&&(OO.log("main_html5: Forcing text track mode for track "+n+". Expected: '"+P[n]+"', received: '"+s.textTracks[t].mode+"'"),s.textTracks[t].mode=P[n])}},this),j=e.bind(function(e){var t="";if(e&&e.currentTarget&&e.currentTarget.activeCues)for(var n=0;n<e.currentTarget.activeCues.length;n++)e.currentTarget.activeCues[n].text&&(t+=e.currentTarget.activeCues[n].text+"\n");z(t)},this),Y=e.bind(function(){var e="";if(s.textTracks)for(var t=0;t<s.textTracks.length;t++)if(s.textTracks[t].activeCues){for(var n=0;n<s.textTracks[t].activeCues.length;n++)s.textTracks[t].activeCues[n].text&&(e+=s.textTracks[t].activeCues[n].text+"\n");break}z(e)},this),B=e.bind(function(){if(s.textTracks&&s.textTracks.length>0)for(var e=0;e<s.textTracks.length;e++)if((OO.isSafari||OO.isEdge)&&C||"captions"===s.textTracks[e].kind){var t={language:"CC",inStream:!0,label:"In-Stream"};null==b[t.language]&&W(t)}},this),W=e.bind(function(e){null==e||null==e.language||b[e.language]&&b[e.language].src==e.src||(b[e.language]=e,K())},this),K=e.bind(function(){var t={languages:[],locale:{}};e.each(b,function(e,n){t.languages.push(n),t.locale[n]=e.label}),this.controller.notify(this.controller.EVENTS.CAPTIONS_FOUND_ON_PLAYING,t)},this),z=e.bind(function(e){e=e.trim(),e!=L&&(L=e,this.controller.notify(this.controller.EVENTS.CLOSED_CAPTION_CUE_CHANGED,e))},this),q=e.bind(function(e){var t=0;e.target.buffered&&e.target.buffered.length>0&&(t=e.target.buffered.end(0)),this.controller.notify(this.controller.EVENTS.PROGRESS,{currentTime:e.target.currentTime,duration:ve(e.target.duration),buffer:t,seekRange:_e(e.target.seekable)})},this),X=e.bind(function(e){Ne();var n=e.target.error?e.target.error.code:-1;(4!==n||"null"!==t(e.target).attr("src")&&""!==t(e.target).attr("src"))&&this.controller.notify(this.controller.EVENTS.ERROR,{errorcode:n})},this),J=e.bind(function(e){OO.isIpad&&0===e.target.currentTime&&s.pause(),this.controller.notify(this.controller.EVENTS.STALLED,{url:s.currentSrc})},this),Z=e.bind(function(){(OO.isFirefox||OO.isIos)&&w&&$(),E=!0,v&&this.controller.notify(this.controller.EVENTS.ASSET_DIMENSION,{width:s.videoWidth,height:s.videoHeight})},this),$=e.bind(function(){w=!1,this.controller.notify(this.controller.EVENTS.BUFFERED,{url:s.currentSrc})},this),Q=e.bind(function(){N||(this.controller.notify(this.controller.EVENTS.PLAYING),ye(),B(),v=!1,D=!0,O=!1,fe())},this),ee=e.bind(function(){e.isEmpty(s.currentSrc)||(w=!0,this.controller.notify(this.controller.EVENTS.WAITING,{url:s.currentSrc}))},this),te=e.bind(function(){O=!0,!N&&y.reached&&this.controller.notify(this.controller.EVENTS.SEEKING)},this),ne=e.bind(function(e){if(O=!1,he(),this.disableNativeSeek){var t=Math.floor(s.currentTime),n=Math.floor(A);t!==n&&(s.currentTime=A)}y.reached?(this.controller.notify(this.controller.EVENTS.SEEKED),Se(this.controller.EVENTS.TIME_UPDATE,e)):y.reached=!0},this),re=e.bind(function(e){Ne(),!s.ended&&OO.isSafari||d||(d=!0,y.value=0,this.controller.notify(this.controller.EVENTS.ENDED))},this),ie=e.bind(function(e){Se(this.controller.EVENTS.DURATION_CHANGE,e)},this),ae=e.bind(function(e){O||(A=s.currentTime),y.value>0&&e.target.currentTime>=y.value&&(y.value=0),Se(this.controller.EVENTS.TIME_UPDATE,e),ge(),fe(),OO.isFirefox&&Y(),Ie(e)},this),oe=e.bind(function(e){N||this.controller.notify(this.controller.EVENTS.PLAY,{url:e.target.src})},this),le=e.bind(function(){N||(OO.isIpad&&0===s.currentTime||this.controller.notify(this.controller.EVENTS.PAUSED),Te())},this),se=e.bind(function(){this.controller.notify(this.controller.EVENTS.RATE_CHANGE)},this),ce=e.bind(function(e){this.controller.notify(this.controller.EVENTS.VOLUME_CHANGE,{volume:e.target.volume})},this),ue=e.bind(function(e){this.controller.notify(this.controller.EVENTS.FULLSCREEN_CHANGED,{isFullScreen:!0,paused:e.target.paused})},this),de=e.bind(function(e){this.controller.notify(this.controller.EVENTS.FULLSCREEN_CHANGED,{isFullScreen:!1,paused:e.target.paused})},this),fe=function(){if(OO.isIpad){var e=s.videoWidth,n=s.videoHeight,r=T.width,i=T.height;if(e!=I.width||n!=I.height){var a=x;n/e>i/r?(a.width="",a.height="100%"):(a.width="100%",a.height=""),t(s).css(a),I.width=e,I.height=n}}},he=e.bind(function(){m&&(m=!1,Ee(!1))},this),Ee=e.bind(function(e){N=e,h||this.load(!0),s.play(),N||(_=!0,d=!1)},this),_e=function(e){return e&&e.length&&"function"==typeof e.start&&"function"==typeof e.end?{start:e.length>0?e.start(0):0,end:e.length>0?e.end(0):0}:{start:0,end:0}},pe=function(){return OO.isSafari&&!E?null:s.seekable},me=function(e,t){t-e<OO.CONSTANTS.SEEK_TO_END_LIMIT&&(e=t);var n=e>=t?t-.01:0>e?0:e;return OO.isIpad&&.1>n&&(n=.1),n},Oe=function(e,t){if("number"!=typeof t||!D)return null;var n=_e(pe());if(0===n.start&&0===n.end)return null;var r=me(t,e.duration);return n.start<=r&&n.end>=r?r:null},Ae=function(e){p=e},ge=e.bind(function(){null!==p&&this.seek(p)&&(p=null)},this),Se=e.bind(function(e,t){if(!N&&!(O||y.value>0)){var n=0;t.target.buffered&&t.target.buffered.length>0&&(n=t.target.buffered.end(0));var r=t&&t.target?t.target.currentTime:null;r&&"number"!=typeof r&&(r=Number(r));var i=_e(pe());this.controller.notify(e,{currentTime:r,duration:ve(t.target.duration),buffer:n,seekRange:i})}},this),ve=function(e){return e===1/0||isNaN(e)?0:e},Te=e.bind(function(){OO.isSafari&&!OO.isIos&&s.ended&&(console.log("VTC_OO: Force through the end of stream for Safari",s.currentSrc,s.duration,s.currentTime),re())},this),Ie=e.bind(function(t){if(g){var n=ve(t.target.duration),r=Math.floor(n);s.currentTime==n&&n>r?(console.log("VTC_OO: manually triggering end of stream for m3u8",u,n,s.currentTime),e.defer(re)):!OO.isSafari||OO.isIos||O!==!0||s.ended||Math.round(s.currentTime)!==Math.round(s.duration)||(this.controller.notify(this.controller.EVENTS.SEEKED),d=!0,y.value=0,this.controller.notify(this.controller.EVENTS.ENDED))}},this),ye=e.bind(function(){if((OO.isChrome||OO.isIos||OO.isIE11Plus||OO.isEdge)&&!R){var e=300;R=setInterval(De,e)}},this),De=e.bind(function(){return _?s.ended?Ne():void(s.paused||s.currentTime!=k?(k=s.currentTime,w&&$()):w||ee()):void 0},this),Ne=e.bind(function(){clearInterval(R),R=null,w=!1,k=-1},this)},o=function(){return Math.random().toString(36).substring(7)};OO.Video.plugin(new i)}(OO._,OO.$)},{"../../../html5-common/js/utils/InitModules/InitOO.js":1,"../../../html5-common/js/utils/InitModules/InitOOHazmat.js":2,"../../../html5-common/js/utils/InitModules/InitOOUnderscore.js":3,"../../../html5-common/js/utils/constants.js":4,"../../../html5-common/js/utils/environment.js":5,"../../../html5-common/js/utils/utils.js":6}]},{},[9]);

!function e(t,n,o){function i(a,s){if(!n[a]){if(!t[a]){var l="function"==typeof require&&require;if(!s&&l)return l(a,!0);if(r)return r(a,!0);var c=new Error("Cannot find module '"+a+"'");throw c.code="MODULE_NOT_FOUND",c}var u=n[a]={exports:{}};t[a][0].call(u.exports,function(e){var n=t[a][1][e];return i(n?n:e)},u,u.exports,e,t,n,o)}return n[a].exports}for(var r="function"==typeof require&&require,a=0;a<o.length;a++)i(o[a]);return i}({1:[function(e,t){t.exports={"Learn More":"Learn More","CLOSED CAPTION PREVIEW":"CLOSED CAPTION PREVIEW","Sample Text":"Sample Text",Ad:"Ad","Skip Ad":"Skip Ad",LIVE:"LIVE","GO LIVE":"GO LIVE","CC Options":"Caption options",On:"On",Off:"Off",Discovery:"Discovery","Facebook Unavailable":"Facebook Unavailable","Facebook Success":"Check out this video on Facebook","Twitter Unavailable":"Twitter Unavailable","Twitter Success":"Check out this video on Twitter","Post Title":"Post Successfully","Account Configure":"Please set up your account on device",Discover:"Discover","Up next":"Up next","Video Quality":"Video Quality","Invest In Social Change":"Invest In Social Change",Share:"Share","Start at":"Start at",Embed:"Embed",Email:"Email","Check out this video":"I found a video you might be interested in! Check it out: ",To:"To",Subject:"Subject",Message:"Message","name@email.com":"name@email.com","Optional Message":"Optional Message",Send:"Send","RELOAD YOUR SCREEN OR TRY SELECTING A DIFFERENT VIDEO":"RELOAD YOUR SCREEN OR TRY SELECTING A DIFFERENT VIDEO","THIS IS NOT WORKING! :(":"THIS IS NOT WORKING! :(","NETWORK ERROR":"NETWORK ERROR","Cannot Contact Server":"Cannot Contact Server","SAS ERROR":"SAS ERROR","Invalid Authorization Response":"Invalid Authorization Response","SAS GEO ERROR":"SAS GEO ERROR","This video is not authorized in your location":"This video is not authorized in your location","SAS DOMAIN ERROR":"SAS DOMAIN ERROR","This video is not authorized for your domain":"This video is not authorized for your domain","VIDEO NOT AVAILABLE YET":"VIDEO NOT AVAILABLE YET","This video will be available soon":"This video will be available soon","VIDEO NO LONGER AVAILABLE":"VIDEO NO LONGER AVAILABLE","This video is no longer available":"This video is no longer available","SAS DEVICE ERROR":"SAS DEVICE ERROR","This video is not authorized for playback on this device":"This video is not authorized for playback on this device","SAS PROXY ERROR":"SAS PROXY ERROR","An anonymous proxy was detected. Please disable the proxy and retry.":"An anonymous proxy was detected. Please disable the proxy and retry.","CONCURRENT STREAMS NUMBER EXCEEDED":"CONCURRENT STREAMS NUMBER EXCEEDED","You have exceeded the maximum number of concurrent streams":"You have exceeded the maximum number of concurrent streams","DEVICE BINDING ERROR":"DEVICE BINDING ERROR","Device binding failed":"Device binding failed","DEVICE ID TOO LONG":"DEVICE ID TOO LONG","Device ID is too long":"Device ID is too long","INVALID PLAYER TOKEN":"INVALID PLAYER TOKEN","Invalid Ooyala Player token":"Invalid Ooyala Player token","DEVICE LIMIT REACHED":"DEVICE LIMIT REACHED","Device limit has been reached":"Device limit has been reached","LICENSE ERROR":"LICENSE ERROR","General error acquiring license":"General error acquiring license","DRM SERVER ERROR":"DRM SERVER ERROR","DRM server error":"DRM server error","INVALID ENTITLEMENTS ERROR":"INVALID ENTITLEMENTS ERROR","User Entitlement Terminated - Stream No Longer Active for the User":"User Entitlement Terminated - Stream No Longer Active for the User","INVALID HEARTBEAT":"INVALID HEARTBEAT","Invalid heartbeat response":"Invalid heartbeat response","INVALID CONTENT":"INVALID CONTENT","INVALID METADATA":"INVALID METADATA","Invalid Metadata":"Invalid Metadata","PLAYBACK ERROR":"PLAYBACK ERROR","Could not play the content":"Could not play the content","PLAYBACK STREAM ERROR":"PLAYBACK STREAM ERROR","This video isn't encoded for your device":"This video isn't encoded for your device","PLAYBACK LIVESTREAM ERROR":"PLAYBACK LIVESTREAM ERROR","Live stream is off air":"Live stream is off air","PLAYBACK NETWORK ERROR":"PLAYBACK NETWORK ERROR","Network connection temporarily lost":"Network connection temporarily lost","UNPLAYABLE CONTENT ERROR":"UNPLAYABLE CONTENT ERROR","This video is not playable on this player":"This video is not playable on this player","INVALID EXTERNAL ID":"INVALID EXTERNAL ID","Invalid External ID":"Invalid External ID","EMPTY CHANNEL ERROR":"EMPTY CHANNEL ERROR","This channel is empty":"This channel is empty","EMPTY CHANNEL SET ERROR":"EMPTY CHANNEL SET ERROR","This channel set is empty":"This channel set is empty","CHANNEL CONTENT ERROR":"CHANNEL CONTENT ERROR","This channel is not playable at this time":"This channel is not playable at this time","SOMETHING NOT RIGHT! THERE SHOULD BE VIDEOS HERE.":"SOMETHING NOT RIGHT! THERE SHOULD BE VIDEOS HERE.","(Try Clicking The Discover Button Again On Reload Your Page)":"(Try Clicking The Discover Button Again On Reload Your Page)","Something happened while we were trying to play your video! Click replay or simply reload your page.":"Something happened while we were trying to play your video! Click replay or simply reload your page.",Language:"Language","Color Selection":"Color Selection","Caption Opacity":"Caption Opacity","Font Type":"Font Type","Font Size":"Font Size","Text Enhancements":"Text Enhancements","Text color":"Text color","Background color":"Background color","Window color":"Window color",Transparent:"Transparent",White:"White",Blue:"Blue",Magenta:"Magenta",Green:"Green",Yellow:"Yellow",Red:"Red",Cyan:"Cyan",Black:"Black","Text opacity":"Text opacity","Background opacity":"Background opacity","Window opacity":"Window opacity","Font size":"Font size",Small:"Small",Medium:"Medium",Large:"Large","Extra Large":"Extra Large","Text enhancement":"Text enhancement",Uniform:"Uniform",Depressed:"Depressed",Raised:"Raised",Shadow:"Shadow"}},{}],2:[function(e,t){t.exports={"Learn More":"MÃ¡s informaciÃ³n","CLOSED CAPTION PREVIEW":"VISTA PRELIMINAR DE SUBTÃTULOS","Sample Text":"Texto de muestra",Ad:"Anuncio","Skip Ad":"Omitir anuncio",LIVE:"EN VIVO","GO LIVE":"TRANSMITIR EN VIVO","CC Options":"Opciones de subtitulado",On:"SÃ­",Off:"No",Discover:"Descubrir","Up next":"Siguiente","Video Quality":"Calidad de video","Invest In Social Change":"Invertir en el cambio social",Share:"Compartir","Start at":"Comenzar en",Embed:"Insertar",Email:"Correo electrÃ³nico","Check out this video":"Â¡EncontrÃ© un vÃ­deo que te puede interesar! Ã‰chale un vistazo: ",To:"Para",Subject:"Asunto",Message:"Mensaje","name@email.com":"nombre@correoelectrÃ³nico.com","Optional Message":"Mensaje opcional",Send:"Enviar","RELOAD YOUR SCREEN OR TRY SELECTING A DIFFERENT VIDEO":"ACTUALICE LA PANTALLA O SELECCIONE UN VIDEO DIFERENTE","THIS IS NOT WORKING! :(":"ESTO NO FUNCIONA :(","NETWORK ERROR":"SE PRODUJO UN ERROR EN LA RED","Cannot Contact Server":"No se puede contactar al servidor","SAS ERROR":"SE PRODUJO UN ERROR EN SAS","Invalid Authorization Response":"La respuesta de autorizaciÃ³n no es vÃ¡lida","SAS GEO ERROR":"SE PRODUJO UN ERROR EN LA UBICACIÃ“N DE SAS","This video is not authorized in your location":"Este video no estÃ¡ autorizado en su ubicaciÃ³n","SAS DOMAIN ERROR":"SE PRODUJO UN ERROR EN EL DOMINIO DE SAS","This video is not authorized for your domain":"Este video no estÃ¡ autorizado en su dominio","VIDEO NOT AVAILABLE YET":"EL VIDEO TODAVÃA NO ESTÃ DISPONIBLE","This video will be available soon":"El video estarÃ¡ disponible prÃ³ximamente","VIDEO NO LONGER AVAILABLE":"EL VIDEO YA NO ESTÃ DISPONIBLE","This video is no longer available":"El video ya no estÃ¡ disponible","SAS DEVICE ERROR":"SE PRODUJO UN ERROR EN EL DISPOSITIVO DE SAS","This video is not authorized for playback on this device":"La reproducciÃ³n de este video no estÃ¡ autorizada en este dispositivo","SAS PROXY ERROR":"SE PRODUJO UN ERROR EN EL PROXY DE SAS","An anonymous proxy was detected. Please disable the proxy and retry.":"Se detectÃ³ un proxy anÃ³nimo. Deshabilite el proxy e intÃ©ntelo nuevamente.","CONCURRENT STREAMS NUMBER EXCEEDED":"SE SUPERÃ“ LA CANTIDAD DE EMISIONES SIMULTÃNEAS","You have exceeded the maximum number of concurrent streams":"SuperÃ³ la cantidad mÃ¡xima de emisiones simultÃ¡neas","DEVICE BINDING ERROR":"SE PRODUJO UN ERROR EN EL ENLACE DE LOS DISPOSITIVOS","Device binding failed":"Se produjo un error en el enlace de dispositivos","DEVICE ID TOO LONG":"LA ID DEL DISPOSITIVO ES DEMASIADO LARGA","Device ID is too long":"La ID del dispositivo es demasiado larga","INVALID PLAYER TOKEN":"EL TOKEN DEL REPRODUCTOR NO ES VÃLIDO","Invalid Ooyala Player token":"El token del reproductor de Ooyala no es vÃ¡lido","DEVICE LIMIT REACHED":"SE ALCANZÃ“ EL LÃMITE DEL DISPOSITIVO","Device limit has been reached":"Se alcanzÃ³ el lÃ­mite del dispositivo","LICENSE ERROR":"SE PRODUJO UN ERROR EN LA LICENCIA","General error acquiring license":"Se produjo un error general al adquirir la licencia","DRM SERVER ERROR":"SE PRODUJO UN ERROR EN EL SERVIDOR DE DRM","DRM server error":"Se produjo un error en el servidor de DRM","INVALID ENTITLEMENTS ERROR":"SE PRODUJO UN ERROR CON ASIGNACIONES NO VÃLIDAS","User Entitlement Terminated - Stream No Longer Active for the User":"FinalizÃ³ la asignaciÃ³n del usuario. La emisiÃ³n ya no estarÃ¡ activa para el usuario","INVALID HEARTBEAT":"LA PULSACIÃ“N NO ES VÃLIDA","Invalid heartbeat response":"La respuesta de pulsaciÃ³n no es vÃ¡lida","INVALID CONTENT":"EL CONTENIDO NO ES VÃLIDO","INVALID METADATA":"LOS METADATOS NO SON VÃLIDOS","Invalid Metadata":"Los metadatos no son vÃ¡lidos","PLAYBACK ERROR":"SE PRODUJO UN ERROR EN LA REPRODUCCIÃ“N","Could not play the content":"No se pudo reproducir el contenido","PLAYBACK STREAM ERROR":"SE PRODUJO UN ERROR EN LA EMISIÃ“N DE LA REPRODUCCIÃ“N","This video isn't encoded for your device":"Este video no estÃ¡ codificado para su dispositivo","PLAYBACK LIVESTREAM ERROR":"SE PRODUJO UN ERROR EN LA EMISIÃ“N EN VIVO DE LA REPRODUCCIÃ“N","Live stream is off air":"La emisiÃ³n en vivo estÃ¡ desconectada","PLAYBACK NETWORK ERROR":"SE PRODUJO UN ERROR EN LA RED DE LA REPRODUCCIÃ“N","Network connection temporarily lost":"Se perdiÃ³ temporalmente la conexiÃ³n con la red","UNPLAYABLE CONTENT ERROR":"SE PRODUJO UN ERROR CON EL CONTENIDO, NO SE PUEDE REPRODUCIR","This video is not playable on this player":"Este video no se puede reproducir en este dispositivo","INVALID EXTERNAL ID":"LA ID EXTERNA NO ES VÃLIDA","Invalid External ID":"La id externa no es vÃ¡lida","EMPTY CHANNEL ERROR":"SE PRODUJO UN ERROR, EL CANAL ESTÃ VACÃO","This channel is empty":"Este canal estÃ¡ vacÃ­o","EMPTY CHANNEL SET ERROR":"SE PRODUJO UN ERROR, EL CONJUNTO DE CANALES ESTÃ VACÃO","This channel set is empty":"Este conjunto de canales estÃ¡ vacÃ­o","CHANNEL CONTENT ERROR":"SE PRODUJO UN ERROR CON EL CONTENIDO DEL CANAL","This channel is not playable at this time":"Este canal no se puede reproducir en este momento","Something happened while we were trying to play your video! Click replay or simply reload your page.":"Se produjo un error cuando intentamos reproducir tu video. Selecciona la opciÃ³n para repetir el video o vuelve a cargar la pÃ¡gina.",Language:"Idioma","Color Selection":"SelecciÃ³n de color","Caption Opacity":"Opacidad de los subtÃ­tulos","Font Type":"Tipo de fuente","Font Size":"TamaÃ±o de fuente","Text Enhancements":"Mejoras en el texto","Text color":"Color de texto","Background color":"Color de fondo","Window color":"Color de la ventana",Transparent:"Transparente",White:"Blanco",Blue:"Azul",Magenta:"Magenta",Green:"Verde",Yellow:"Amarillo",Red:"Rojo",Cyan:"Cian",Black:"Negro","Text opacity":"Opacidad del texto","Background opacity":"Opacidad del fondo","Window opacity":"Opacidad ventana","Font size":"TamaÃ±o de fuente",Small:"PequeÃ±a",Medium:"Medio",Large:"Grande","Extra Large":"Muy grande","Text enhancement":"Mejora de texto",Uniform:"Uniforme",Depressed:"En relieve",Raised:"Elevado",Shadow:"Sombra"}},{}],3:[function(e,t){t.exports={"Learn More":"ã‚ˆã‚Šè©³ã—ã","CLOSED CAPTION PREVIEW":"CLOSED CAPTION PREVIEW","Sample Text":"ã‚µãƒ³ãƒ—ãƒ«",Ad:"åºƒå‘Š","Skip Ad":"ã‚¹ã‚­ãƒƒãƒ—",LIVE:"LIVE","GO LIVE":"GO LIVE","CC Options":"å­—å¹•è¨­å®š",On:"ã‚ªãƒ³",Off:"ã‚ªãƒ•",Discovery:"Discovery","Facebook Unavailable":"Facebookãƒ­ã‚°ã‚¤ãƒ³å¤±æ•—","Facebook Success":"Facebookã§å‹•ç”»ã‚’è¦‹ã‚‹","Twitter Unavailable":"Twitterãƒ­ã‚°ã‚¤ãƒ³å¤±æ•—","Twitter Success":"Twitterã§å‹•ç”»ã‚’è¦‹ã‚‹","Post Title":"æŠ•ç¨¿å®Œäº†","Account Configure":"ã‚¢ã‚«ã‚¦ãƒ³ãƒˆã‚’è¨­å®šã—ã¦ãã ã•ã„ã€‚",Discover:"Discover","Up next":"æ¬¡ã®å‹•ç”»","Video Quality":"å‹•ç”»ã®å“è³ª","Invest In Social Change":"å‹•ç”»ã‚’ã‚·ã‚§ã‚¢ã™ã‚‹",Share:"ã‚·ã‚§ã‚¢","Start at":"é–‹å§‹æ™‚é–“",Embed:"ã‚³ãƒ¼ãƒ‰ã®åŸ‹ã‚è¾¼ã¿",Email:"ãƒ¡ãƒ¼ãƒ«","Check out this video":"ãŠã™ã™ã‚ã®å‹•ç”»ï¼š",To:"å®›å…ˆ",Subject:"ã‚¿ã‚¤ãƒˆãƒ«",Message:"æœ¬æ–‡","name@email.com":"name@email.com","Optional Message":"ãƒ¡ãƒƒã‚»ãƒ¼ã‚¸ï¼ˆçœç•¥å¯ï¼‰",Send:"é€ä¿¡","RELOAD YOUR SCREEN OR TRY SELECTING A DIFFERENT VIDEO":"RELOAD YOUR SCREEN OR TRY SELECTING A DIFFERENT VIDEO","THIS IS NOT WORKING! :(":"THIS IS NOT WORKING! :(","NETWORK ERROR":"NETWORK ERROR","Cannot Contact Server":"å¾Œã§ã”ç¢ºèªãã ã•ã„ã€‚","SAS ERROR":"SAS ERROR","Invalid Authorization Response":"ãƒ“ãƒ‡ã‚ªã‚’èªè¨¼ã§ãã¾ã›ã‚“ã€‚","SAS GEO ERROR":"SAS GEO ERROR","This video is not authorized in your location":"ã“ã®åœ°åŸŸã§ã¯ã“ã®ãƒ“ãƒ‡ã‚ªã¯è¨±å¯ã•ã‚Œã¦ã„ã¾ã›ã‚“ã€‚","SAS DOMAIN ERROR":"SAS DOMAIN ERROR","This video is not authorized for your domain":"ãŠä½¿ã„ã®ãƒ‰ãƒ¡ã‚¤ãƒ³ã§ã¯ã“ã®ãƒ“ãƒ‡ã‚ªã¯è¨±å¯ã•ã‚Œã¦ã„ã¾ã›ã‚“ã€‚","VIDEO NOT AVAILABLE YET":"VIDEO NOT AVAILABLE YET","This video will be available soon":"ã“ã®ãƒ“ãƒ‡ã‚ªã¯ã—ã°ã‚‰ãã™ã‚‹ã¨å†ç”Ÿå¯èƒ½ã«ãªã‚Šã¾ã™ã€‚","VIDEO NO LONGER AVAILABLE":"VIDEO NO LONGER AVAILABLE","This video is no longer available":"ã“ã®ãƒ“ãƒ‡ã‚ªã¯ã€æ—¢ã«å¾¡åˆ©ç”¨ã„ãŸã ã‘ã¾ã›ã‚“ã€‚","SAS DEVICE ERROR":"SAS DEVICE ERROR","This video is not authorized for playback on this device":"ã“ã®ãƒ“ãƒ‡ã‚ªã¯ã€ã“ã®ãƒ‡ãƒã‚¤ã‚¹ã§ã®å†ç”Ÿã¯è¨±å¯ã•ã‚Œã¦ã„ã¾ã›ã‚“ã€‚","SAS PROXY ERROR":"SAS PROXY ERROR","An anonymous proxy was detected. Please disable the proxy and retry.":"åŒ¿åãƒ—ãƒ­ã‚­ã‚·ã‚µãƒ¼ãƒãŒæ¤œå‡ºã•ã‚Œã¾ã—ãŸã€‚ãƒ—ãƒ­ã‚­ã‚·ã‚’çµŒç”±ã›ãšã«æŽ¥ç¶šã—ã¦ãã ã•ã„ã€‚","CONCURRENT STREAMS NUMBER EXCEEDED":"CONCURRENT STREAMS NUMBER EXCEEDED","You have exceeded the maximum number of concurrent streams":"æœ€å¤§åŒæ™‚æŽ¥ç¶šæ•°ã‚’è¶…ãˆã¦ã„ã¾ã™ã€‚","DEVICE BINDING ERROR":"DEVICE BINDING ERROR","Device binding failed":"ãƒ‡ãƒã‚¤ã‚¹ã®é–¢é€£ä»˜ã‘ã«å¤±æ•—ã—ã¾ã—ãŸã€‚","DEVICE ID TOO LONG":"DEVICE ID TOO LONG","Device ID is too long":"Device IDã®æ–‡å­—åˆ—ãŒé•·ã™ãŽã¾ã™ã€‚","INVALID PLAYER TOKEN":"INVALID PLAYER TOKEN","Invalid Ooyala Player token":"ä¸æ­£ãªãƒ—ãƒ¬ã‚¤ãƒ¤ãƒ¼ãƒˆãƒ¼ã‚¯ãƒ³ã§ã™ã€‚","DEVICE LIMIT REACHED":"DEVICE LIMIT REACHED","Device limit has been reached":"ç™»éŒ²ãƒ‡ãƒã‚¤ã‚¹æ•°ãŒåˆ¶é™ã«é”ã—ã¾ã—ãŸã€‚","LICENSE ERROR":"LICENSE ERROR","General error acquiring license":"ãƒ©ã‚¤ã‚»ãƒ³ã‚¹ã®å–å¾—ã«å¤±æ•—ã—ã¾ã—ãŸã€‚","DRM SERVER ERROR":"DRM SERVER ERROR","DRM server error":"DRMã‚µãƒ¼ãƒã‚¨ãƒ©ãƒ¼","INVALID ENTITLEMENTS ERROR":"INVALID ENTITLEMENTS ERROR","User Entitlement Terminated - Stream No Longer Active for the User":"æœŸé™ãŒéŽãŽã¦ã„ã‚‹ãŸã‚ã“ã®ã‚¹ãƒˆãƒªãƒ¼ãƒ ã¯è¦–è´ã§ãã¾ã›ã‚“ã€‚","INVALID HEARTBEAT":"INVALID HEARTBEAT","Invalid heartbeat response":"åŒæ™‚å†ç”Ÿã‚¹ãƒˆãƒªãƒ¼ãƒ ã®æœ€å¤§æ•°ã«é”ã—ã¾ã—ãŸã€‚","INVALID CONTENT":"INVALID CONTENT","INVALID METADATA":"INVALID METADATA","Invalid Metadata":"ä¸æ­£ãªãƒ¡ã‚¿ãƒ‡ãƒ¼ã‚¿ã§ã™ã€‚","PLAYBACK ERROR":"PLAYBACK ERROR","Could not play the content":"ã“ã®ã‚³ãƒ³ãƒ†ãƒ³ãƒ„ã‚’å†ç”Ÿã§ãã¾ã›ã‚“ã§ã—ãŸã€‚","PLAYBACK STREAM ERROR":"PLAYBACK STREAM ERROR","This video isn't encoded for your device":"ã“ã®ãƒ“ãƒ‡ã‚ªã¯ã€ãŠä½¿ã„ã®ãƒ‡ãƒã‚¤ã‚¹å‘ã‘ã«ã‚¨ãƒ³ã‚³ãƒ¼ãƒ‰ã•ã‚Œã¦ã„ã¾ã›ã‚“ã€‚","PLAYBACK LIVESTREAM ERROR":"PLAYBACK LIVESTREAM ERROR","Live stream is off air":"ãƒ©ã‚¤ãƒ–é…ä¿¡ã¯ã•ã‚Œã¦ãŠã‚Šã¾ã›ã‚“ã€‚","PLAYBACK NETWORK ERROR":"PLAYBACK NETWORK ERROR","Network connection temporarily lost":"ãƒãƒƒãƒˆãƒ¯ãƒ¼ã‚¯ã«ä¸€æ™‚çš„ã«æŽ¥ç¶šã§ãã¾ã›ã‚“ã€‚","UNPLAYABLE CONTENT ERROR":"UNPLAYABLE CONTENT ERROR","This video is not playable on this player":"ã“ã®ãƒ“ãƒ‡ã‚ªã¯ã€ã“ã®ãƒ—ãƒ¬ãƒ¼ãƒ¤ãƒ¼ã§ã¯å†ç”Ÿã§ãã¾ã›ã‚“ã€‚","INVALID EXTERNAL ID":"INVALID EXTERNAL ID","Invalid External ID":"External IDãŒä¸æ­£ã§ã™ã€‚","EMPTY CHANNEL ERROR":"EMPTY CHANNEL ERROR","This channel is empty":"ã“ã®ãƒãƒ£ãƒ³ãƒãƒ«ã¯ç©ºã§ã™ã€‚","EMPTY CHANNEL SET ERROR":"EMPTY CHANNEL SET ERROR","This channel set is empty":"ã“ã®ãƒãƒ£ãƒ³ãƒãƒ«ã‚»ãƒƒãƒˆã¯ç©ºã§ã™ã€‚","CHANNEL CONTENT ERROR":"CHANNEL CONTENT ERROR","This channel is not playable at this time":"ã“ã®ãƒãƒ£ãƒ³ãƒãƒ«ã¯ã€ç¾åœ¨å†ç”Ÿã§ãã¾ã›ã‚“ã€‚","SOMETHING NOT RIGHT! THERE SHOULD BE VIDEOS HERE.":"SOMETHING NOT RIGHT! THERE SHOULD BE VIDEOS HERE.","(Try Clicking The Discover Button Again On Reload Your Page)":"(Try Clicking The Discover Button Again On Reload Your Page)","Something happened while we were trying to play your video! Click replay or simply reload your page.":"åŽŸå› ä¸æ˜Žã®ã‚¨ãƒ©ãƒ¼ãŒç™ºç”Ÿã—ã¾ã—ãŸã€‚ãƒšãƒ¼ã‚¸ã‚’ãƒªãƒ­ãƒ¼ãƒ‰ã—ã¦ã¿ã¦ãã ã•ã„ã€‚",Language:"è¨€èªž","Color Selection":"è‰²","Caption Opacity":"é€éŽ","Font Type":"ãƒ•ã‚©ãƒ³ãƒˆ","Font Size":"æ–‡å­—ã‚µã‚¤ã‚º","Text Enhancements":"æ–‡å­—è£…é£¾","Text color":"æ–‡å­—è‰²","Background color":"èƒŒæ™¯è‰²","Window color":"ã‚¦ã‚£ãƒ³ãƒ‰ã‚¦è‰²",Transparent:"é€éŽ",White:"ç™½",Blue:"é’",Magenta:"ãƒžã‚¼ãƒ³ã‚¿",Green:"ç·‘",Yellow:"é»„",Red:"èµ¤",Cyan:"ã‚·ã‚¢ãƒ³",Black:"é»’","Text opacity":"æ–‡å­—ã®é€éŽåº¦","Background opacity":"èƒŒæ™¯ã®é€éŽåº¦","Window opacity":"ã‚¦ã‚£ãƒ³ãƒ‰ã‚¦ã®é€éŽåº¦","Font size":"æ–‡å­—ã‚µã‚¤ã‚º",Small:"å°",Medium:"ä¸­",Large:"å¤§","Extra Large":"ç‰¹å¤§","Text enhancement":"æ–‡å­—è£…é£¾",Uniform:"ãªã—",Depressed:"å‡¹",Raised:"å‡¸",Shadow:"å½±"}},{}],4:[function(e,t){t.exports={"Learn More":"äº†è§£æ›´å¤š","CLOSED CAPTION PREVIEW":"é—­åˆå­—å¹•é¢„è§ˆ","Sample Text":"ç¤ºä¾‹æ–‡æœ¬",Ad:"å¹¿å‘Š","Skip Ad":"è·³è¿‡å¹¿å‘Š",LIVE:"ç›´æ’­","GO LIVE":"è¿›å…¥ç›´æ’­","CC Options":"æŠ„é€é€‰é¡¹",On:"åœ¨",Off:"å…³é—­",Discover:"å‘çŽ°","Up next":"ä¸‹ä¸€ä¸ª","Video Quality":"è§†é¢‘è´¨é‡","Invest In Social Change":"æŠ•èµ„äºŽç¤¾ä¼šå˜è¿",Share:"è‚¡ç¥¨","Start at":"å¼€å§‹äºŽ",Embed:"åµŒ",Email:"ç”µå­é‚®ä»¶","Check out this video":"æˆ‘å‘çŽ°ä¸€ä¸ªä½ å¯èƒ½ä¼šæ„Ÿå…´è¶£çš„è§†é¢‘ï¼ æ¥çœ‹çœ‹å§ï¼š",To:"è‡³",Subject:"å­¦ç§‘",Message:"ä¿¡æ¯","name@email.com":"åå­—@ç”µå­é‚®ä»¶.com","Optional Message":"å¯é€‰çš„æ¶ˆæ¯",Send:"æ´¾","RELOAD YOUR SCREEN OR TRY SELECTING A DIFFERENT VIDEO":"é‡æ–°åŠ è½½ç”»é¢æˆ–è€…å°è¯•é€‰æ‹©å…¶ä»–è§†é¢‘","THIS IS NOT WORKING! :(":"è¯¥è§†é¢‘æ— æ³•æ’­æ”¾ï¼:(","NETWORK ERROR":"ç½‘ç»œé”™è¯¯","Cannot Contact Server":"æ— æ³•è¿žæŽ¥åˆ°æœåŠ¡å™¨","SAS ERROR":"SAS é”™è¯¯","Invalid Authorization Response":"æ— æ•ˆçš„æŽˆæƒå“åº”","SAS GEO ERROR":"SAS åœ°ç†ä½ç½®é”™è¯¯","This video is not authorized in your location":"æ­¤è§†é¢‘åœ¨æ‚¨çš„åŒºåŸŸæ²¡æœ‰æŽˆæƒã€‚","SAS DOMAIN ERROR":"SAS åŸŸé”™è¯¯","This video is not authorized for your domain":"æ­¤è§†é¢‘æ²¡æœ‰æŽˆæƒç»™æ‚¨çš„åŸŸã€‚","VIDEO NOT AVAILABLE YET":"è§†é¢‘å°šæ— æ³•èŽ·å–","This video will be available soon":"æ­¤è§†é¢‘å°†å°½å¿«ä¸Šçº¿","VIDEO NO LONGER AVAILABLE":"è§†é¢‘å·²ä¸å­˜åœ¨","This video is no longer available":"æ­¤è§†é¢‘å·²ä¸å­˜åœ¨","SAS DEVICE ERROR":"SAS è®¾å¤‡é”™è¯¯","This video is not authorized for playback on this device":"æ­¤è§†é¢‘æ²¡æœ‰æŽˆæƒç»™æ­¤è®¾å¤‡çš„å›žæ”¾ã€‚","SAS PROXY ERROR":"SAS ä»£ç†é”™è¯¯","An anonymous proxy was detected. Please disable the proxy and retry.":"æ£€æµ‹åˆ°åŒ¿åä»£ç†ã€‚è¯·ç¦ç”¨ä»£ç†å¹¶é‡è¯•ã€‚","CONCURRENT STREAMS NUMBER EXCEEDED":"å¹¶å‘æµæ•°é‡è¶…æ ‡","You have exceeded the maximum number of concurrent streams":"å·²è¶…å‡ºå¹¶å‘æµæ•°é‡çš„æœ€å¤§å€¼","DEVICE BINDING ERROR":"è®¾å¤‡ç»‘å®šé”™è¯¯","Device binding failed":"è®¾å¤‡ç»‘å®šå¤±è´¥","DEVICE ID TOO LONG":"è®¾å¤‡ ID è¿‡é•¿","Device ID is too long":"è®¾å¤‡ ID è¿‡é•¿","INVALID PLAYER TOKEN":"æ— æ•ˆçš„æ’­æ”¾å™¨æ ‡è®°","Invalid Ooyala Player token":"æ— æ•ˆçš„ Ooyala æ’­æ”¾å™¨æ ‡è®°","DEVICE LIMIT REACHED":"è®¾å¤‡è¾¾åˆ°æžé™","Device limit has been reached":"è®¾å¤‡å·²è¾¾åˆ°é™åˆ¶","LICENSE ERROR":"è®¸å¯è¯é”™è¯¯","General error acquiring license":"èŽ·å–è®¸å¯è¯æ—¶å‡ºçŽ°ä¸€èˆ¬é”™è¯¯","DRM SERVER ERROR":"DRM æœåŠ¡å™¨é”™è¯¯","DRM server error":"DRM æœåŠ¡å™¨é”™è¯¯","INVALID ENTITLEMENTS ERROR":"æ— æ•ˆçš„æƒé™é”™è¯¯","User Entitlement Terminated - Stream No Longer Active for the User":"ç”¨æˆ·çš„æƒé™å·²ç»ˆæ­¢ - æ­¤ç”¨æˆ·çš„æ•°æ®æµä¸å†æ´»è·ƒ","INVALID HEARTBEAT":"æ— æ•ˆçš„å¿ƒè·³å“åº”","Invalid heartbeat response":"æ— æ•ˆçš„å¿ƒè·³å“åº”","INVALID CONTENT":"æ— æ•ˆçš„å†…å®¹","INVALID METADATA":"æ— æ•ˆçš„æ•°æ®å…ƒ","Invalid Metadata":"æ— æ•ˆçš„æ•°æ®å…ƒ","PLAYBACK ERROR":"å›žæ”¾é”™è¯¯","Could not play the content":"æ— æ³•æ’­æ”¾æ­¤å†…å®¹","PLAYBACK STREAM ERROR":"å›žæ”¾æµé”™è¯¯","This video isn't encoded for your device":"æ­¤è§†é¢‘æ²¡æœ‰ä¸ºæ‚¨çš„è®¾å¤‡ç¼–ç ","PLAYBACK LIVESTREAM ERROR":"å›žæ”¾ç›´æ’­æµé”™è¯¯","Live stream is off air":"ç›´æ’­æµå·²åœæ’­","PLAYBACK NETWORK ERROR":"å›žæ”¾ç½‘ç»œé”™è¯¯","Network connection temporarily lost":"ç½‘ç»œè¿žæŽ¥æš‚æ—¶ä¸­æ–­","UNPLAYABLE CONTENT ERROR":"æ— æ³•æ’­æ”¾çš„å†…å®¹é”™è¯¯","This video is not playable on this player":"æ­¤è§†é¢‘åœ¨è¯¥æ’­æ”¾å™¨ä¸Šæ— æ³•æ’­æ”¾ã€‚","INVALID EXTERNAL ID":"æ— æ•ˆçš„å¤–éƒ¨ ID","Invalid External ID":"æ— æ•ˆçš„å¤–éƒ¨ ID","EMPTY CHANNEL ERROR":"ç©ºé¢‘é“é”™è¯¯","This channel is empty":"æ­¤é¢‘é“ä¸ºç©º","EMPTY CHANNEL SET ERROR":"ç©ºé¢‘é“è®¾ç½®é”™è¯¯","This channel set is empty":"æ­¤é¢‘é“è®¾ç½®ä¸ºç©º","CHANNEL CONTENT ERROR":"é¢‘é“å†…å®¹é”™è¯¯","This channel is not playable at this time":"æ­¤é¢‘é“çŽ°åœ¨æ— æ³•æ’­æ”¾","Something happened while we were trying to play your video! Click replay or simply reload your page.":"å½“æˆ‘ä»¬å°è¯•æ’­æ”¾æ‚¨çš„è§†é¢‘æ—¶å‡ºçŽ°é”™è¯¯ï¼å•å‡»â€œé‡æ–°æ’­æ”¾â€æˆ–é‡æ–°è½½å…¥é¡µé¢ã€‚",Language:"è¯­è¨€","Color Selection":"é¢œè‰²é€‰æ‹©","Caption Opacity":"å­—å¹•ä¸é€æ˜Žåº¦","Font Type":"å­—ä½“ç±»åž‹","Font Size":"å­—ä½“å¤§å°","Text Enhancements":"æ–‡æœ¬å¢žå¼º","Text color":"æ–‡å­—é¢œè‰²","Background color":"èƒŒæ™¯é¢œè‰²","Window color":"çª—å£é¢œè‰²",Transparent:"é€æ˜Ž",White:"ç™½è‰²",Blue:"è“è‰²",Magenta:"å“çº¢",Green:"ç»¿è‰²",Yellow:"é»„è‰²",Red:"çº¢",Cyan:"é’è‰²",Black:"é»‘è‰²","Text opacity":"æ–‡æœ¬ä¸é€æ˜Žåº¦","Background opacity":"èƒŒæ™¯ä¸é€æ˜Žåº¦","Window opacity":"çª—å£é€æ˜Žåº¦","Font size":"å­—ä½“å¤§å°",Small:"å°",Medium:"ä¸­",Large:"å¤§","Extra Large":"å¾ˆå¤§","Text enhancement":"æ–‡æœ¬å¢žå¼º",Uniform:"åˆ¶æœ",Depressed:"åŽ‹èŠ±",Raised:"ä¸Šè°ƒ",Shadow:"é˜´å½±"}},{}],5:[function(e,t){t.exports={general:{watermark:{imageResource:{url:"",androidResource:"logo",iosResource:"logo"},position:"bottomRight",clickUrl:"",target:"_blank",transparency:1,scalingOption:"default",scalingPercentage:20},loadingImage:{imageResource:{url:"//player.ooyala.com/static/v4/stable/4.14.8/skin-plugin/assets/images/loader_svg.svg"}},accentColor:"#448aff"},localization:{defaultLanguage:"en",availableLanguageFile:[{language:"en",languageFile:"",androidResource:"skin-config/languageFiles/en.json",iosResource:"en"},{language:"es",languageFile:"",androidResource:"skin-config/languageFiles/es.json",iosResource:"es"},{language:"zh",languageFile:"",androidResource:"skin-config/languageFiles/zh.json",iosResource:"zh"},{language:"ja",languageFile:"",androidResource:"skin-config/languageFiles/ja.json",iosResource:"ja"}]},responsive:{breakpoints:{xs:{id:"xs",name:"oo-xsmall",maxWidth:559,multiplier:.7},sm:{id:"sm",name:"oo-small",minWidth:560,maxWidth:839,multiplier:1},md:{id:"md",name:"oo-medium",minWidth:840,maxWidth:1279,multiplier:1},lg:{id:"lg",name:"oo-large",minWidth:1280,multiplier:1.2}},aspectRatio:"auto"},startScreen:{promoImageSize:"default",showPlayButton:!0,playButtonPosition:"center",playIconStyle:{color:"white",opacity:1},showTitle:!0,showDescription:!0,titleFont:{color:"white"},descriptionFont:{color:"white"},infoPanelPosition:"topLeft",showPromo:!0},pauseScreen:{showPauseIcon:!0,pauseIconPosition:"center",PauseIconStyle:{color:"white",opacity:1},showTitle:!0,showDescription:!0,infoPanelPosition:"topLeft",screenToShowOnPause:"default"},endScreen:{screenToShowOnEnd:"discovery",showReplayButton:!0,replayIconStyle:{color:"white",opacity:1},showTitle:!1,showDescription:!1,infoPanelPosition:"topLeft"},adScreen:{showAdMarquee:!0,showAdCountDown:!0,showControlBar:!1},discoveryScreen:{panelTitle:{titleFont:{fontFamily:"Roboto Condensed",color:"white"}},contentTitle:{show:!0,font:{fontFamily:"Roboto Condensed",color:"white"}},showCountDownTimerOnEndScreen:!0,countDownTime:10},shareScreen:{shareContent:["social","embed"],socialContent:["twitter","facebook","google+","email"],embed:{source:"<iframe width='640' height='480' frameborder='0' allowfullscreen src='//player.ooyala.com/static/v4/stable/4.14.8/skin-plugin/iframe.html?ec=<ASSET_ID>&pbid=<PLAYER_ID>&pcode=<PUBLISHER_ID>'></iframe>"}},moreOptionsScreen:{brightOpacity:1,darkOpacity:.4,iconSize:30,color:"white",iconStyle:{active:{color:"#FFFFFF",opacity:1},inactive:{color:"#FFFFFF",opacity:.95}}},closedCaptionOptions:{enabled:!0,language:"en",textColor:"White",windowColor:"Transparent",backgroundColor:"Black",textOpacity:1,backgroundOpacity:.6,windowOpacity:0,fontType:"Proportional Sans-Serif",fontSize:"Medium",textEnhancement:"Uniform"},upNext:{showUpNext:!0,timeToShow:10},controlBar:{volumeControl:{color:""},iconStyle:{active:{color:"#FFFFFF",opacity:1},inactive:{color:"#FFFFFF",opacity:.95}},autoHide:!0,height:90,logo:{imageResource:{url:"",androidResource:"logo",iosResource:"logo"},clickUrl:"http://www.ooyala.com",target:"_blank",width:96,height:24},adScrubberBar:{backgroundColor:"rgba(175,175,175,1)",bufferedColor:"rgba(127,127,127,1)",playedColor:"rgba(255,63,128,1)",scrubberHandleColor:"rgba(67,137,255,1)",scrubberHandleBorderColor:"rgba(255,255,255,1)"},scrubberBar:{backgroundColor:"rgba(175,175,175,0.5)",bufferedColor:"rgba(175,175,175,0.7)",playedColor:"",scrubberHandleColor:"rgba(67,137,255,1)",scrubberHandleBorderColor:"rgba(255,255,255,1)",thumbnailPreview:!0}},live:{forceDvrDisabled:!1},buttons:{desktopContent:[{name:"playPause",location:"controlBar",whenDoesNotFit:"keep",minWidth:45},{name:"volume",location:"controlBar",whenDoesNotFit:"keep",minWidth:240},{name:"live",location:"controlBar",whenDoesNotFit:"keep",minWidth:45},{name:"timeDuration",location:"controlBar",whenDoesNotFit:"drop",minWidth:145},{name:"flexibleSpace",location:"controlBar",whenDoesNotFit:"keep",minWidth:1},{name:"share",location:"controlBar",whenDoesNotFit:"moveToMoreOptions",minWidth:45},{name:"discovery",location:"controlBar",whenDoesNotFit:"moveToMoreOptions",minWidth:45},{name:"closedCaption",location:"controlBar",whenDoesNotFit:"moveToMoreOptions",minWidth:45},{name:"quality",location:"controlBar",whenDoesNotFit:"moveToMoreOptions",minWidth:45},{name:"logo",location:"controlBar",whenDoesNotFit:"keep",minWidth:125},{name:"fullscreen",location:"controlBar",whenDoesNotFit:"keep",minWidth:45},{name:"moreOptions",location:"controlBar",whenDoesNotFit:"keep",minWidth:45}],desktopAd:[{name:"playPause",location:"controlBar",whenDoesNotFit:"keep",minWidth:45},{name:"volume",location:"controlBar",whenDoesNotFit:"keep",minWidth:240},{name:"flexibleSpace",location:"controlBar",whenDoesNotFit:"keep",minWidth:1},{name:"logo",location:"controlBar",whenDoesNotFit:"keep",minWidth:125},{name:"fullscreen",location:"controlBar",whenDoesNotFit:"keep",minWidth:45},{name:"moreOptions",location:"controlBar",whenDoesNotFit:"keep",minWidth:45}],mobileContent:[{name:"volume",location:"controlBar",whenDoesNotFit:"keep",minWidth:50},{name:"live",location:"controlBar",whenDoesNotFit:"keep",minWidth:45},{name:"timeDuration",location:"controlBar",whenDoesNotFit:"drop",minWidth:100},{name:"flexibleSpace",location:"controlBar",whenDoesNotFit:"keep",minWidth:1},{name:"share",location:"moreOptions"},{name:"discovery",location:"moreOptions"},{name:"closedCaption",location:"moreOptions"},{name:"fullscreen",location:"controlBar",whenDoesNotFit:"keep",minWidth:50},{name:"moreOptions",location:"controlBar",whenDoesNotFit:"keep",minWidth:50}],mobileAd:[{name:"volume",location:"controlBar",whenDoesNotFit:"keep",minWidth:50},{name:"flexibleSpace",location:"controlBar",whenDoesNotFit:"keep",minWidth:1},{name:"fullscreen",location:"controlBar",whenDoesNotFit:"keep",minWidth:50},{name:"moreOptions",location:"controlBar",whenDoesNotFit:"keep",minWidth:50}]},icons:{play:{fontFamilyName:"ooyala-slick-type",fontString:"h",fontStyleClass:"oo-icon oo-icon-play-slick"},pause:{fontFamilyName:"ooyala-slick-type",fontString:"g",fontStyleClass:"oo-icon oo-icon-pause-slick"},volume:{fontFamilyName:"ooyala-slick-type",fontString:"b",fontStyleClass:"oo-icon oo-icon-volume-on-ooyala-default"},volumeOff:{fontFamilyName:"ooyala-slick-type",fontString:"p",fontStyleClass:"oo-icon oo-icon-volume-mute-ooyala-default"},expand:{fontFamilyName:"ooyala-slick-type",fontString:"i",fontStyleClass:"oo-icon oo-icon-system-fullscreen"},compress:{fontFamilyName:"ooyala-slick-type",fontString:"j",fontStyleClass:"oo-icon oo-icon-system-minimizescreen"},ellipsis:{fontFamilyName:"ooyala-slick-type",fontString:"f",fontStyleClass:"oo-icon oo-icon-system-menu"},replay:{fontFamilyName:"ooyala-slick-type",fontString:"c",fontStyleClass:"oo-icon oo-icon-system-replay"},share:{fontFamilyName:"ooyala-slick-type",fontString:"o",fontStyleClass:"oo-icon oo-icon-share"},cc:{fontFamilyName:"ooyala-slick-type",fontString:"k",fontStyleClass:"oo-icon oo-icon-cc"},discovery:{fontFamilyName:"ooyala-slick-type",fontString:"l",fontStyleClass:"oo-icon oo-icon-discovery-binoculars"},quality:{fontFamilyName:"ooyala-slick-type",fontString:"m",fontStyleClass:"oo-icon oo-icon-bitrate"},setting:{fontFamilyName:"ooyala-slick-type",fontString:"n",fontStyleClass:"oo-icon oo-icon-system-settings"},dismiss:{fontFamilyName:"ooyala-slick-type",fontString:"e",fontStyleClass:"oo-icon oo-icon-system-close"},toggleOn:{fontFamilyName:"fontawesome",fontString:"ïˆ…",fontStyleClass:""},toggleOff:{fontFamilyName:"fontawesome",fontString:"ïˆ„",fontStyleClass:""},left:{fontFamilyName:"ooyala-slick-type",fontString:"r",fontStyleClass:"oo-icon oo-icon-system-left-arrow"},right:{fontFamilyName:"ooyala-slick-type",fontString:"s",fontStyleClass:"oo-icon oo-icon-system-right-arrow"},learn:{fontFamilyName:"ooyala-slick-type",fontString:"t",fontStyleClass:"oo-icon oo-icon-system-more-information"},skip:{fontFamilyName:"ooyala-slick-type",fontString:"u",fontStyleClass:"oo-icon oo-icon-skip-slick"},warning:{fontFamilyName:"fontawesome",fontString:"ïª",fontStyleClass:""},auto:{fontFamilyName:"ooyala-slick-type",fontString:"d",fontStyleClass:"oo-icon oo-icon-system-auto"}}}},{}],6:[function(e,t){var n=e("./../constants/constants"),o=function(e){this.controller=e,this.state={fastForwardRate:1,lastKeyDownTime:null},this.keyEvent=this.handleKey.bind(this),document.addEventListener("keydown",this.keyEvent)};o.prototype={cleanUp:function(){document.removeEventListener("keydown",this.keyEvent)},handleKey:function(e){if(this.controller.state.accessibilityControlsEnabled){var t,o,i;if(e.keyCode===n.KEYCODES.SPACE_KEY)e.preventDefault(),this.controller.togglePlayPause();else if(e.keyCode===n.KEYCODES.DOWN_ARROW_KEY&&this.controller.state.volumeState.volume>0||e.keyCode===n.KEYCODES.UP_ARROW_KEY&&this.controller.state.volumeState.volume<1){e.preventDefault();var r=1;r=e.keyCode===n.KEYCODES.DOWN_ARROW_KEY?-1:1,i=(10*this.controller.state.volumeState.volume+1*r)/10,this.controller.setVolume(i)}else if(e.keyCode===n.KEYCODES.RIGHT_ARROW_KEY||e.keyCode===n.KEYCODES.LEFT_ARROW_KEY){e.preventDefault();var a=1,s=1,l=1.1;t=Date.now(),this.state.lastKeyDownTime&&t-this.state.lastKeyDownTime<500?this.state.fastForwardRate<300&&(this.state.fastForwardRate*=l):this.state.fastForwardRate=1,this.state.lastKeyDownTime=t,a=e.keyCode===n.KEYCODES.RIGHT_ARROW_KEY?1:-1,o=this.controller.skin.state.currentPlayhead+a*s*this.state.fastForwardRate,this.controller.seek(o)}}}},t.exports=o},{"./../constants/constants":42}],7:[function(e,t){var n=e("react"),o=e("classnames"),i=e("./closeButton"),r=e("../constants/constants"),a=n.createClass({displayName:"AdOverlay",closeOverlay:function(){this.props.controller.closeNonlinearAd(),this.props.controller.onSkipAdClicked()},handleOverlayClick:function(){this.props.controller.onAdsClicked(r.AD_CLICK_SOURCE.OVERLAY)},overlayLoaded:function(){this.props.overlay&&this.props.showOverlay&&this.props.controller.onAdOverlayLoaded()},render:function(){var e=o({"oo-ad-overlay":!0,"oo-hidden":!this.props.overlay&&this.props.showOverlay}),t=o({"oo-ad-overlay-close-button":!0,"oo-hidden":!this.props.showOverlayCloseButton});return n.createElement("div",{className:e},n.createElement("a",{onClick:this.handleOverlayClick},n.createElement("img",{src:this.props.overlay,className:"oo-ad-overlay-image",onLoad:this.overlayLoaded})),n.createElement(i,n.__spread({},this.props,{cssClass:t,closeAction:this.closeOverlay,className:"oo-ad-overlay-close-button-icon",ref:"adOverlayCloseButton"})))}});t.exports=a},{"../constants/constants":42,"./closeButton":9,classnames:58,react:255}],8:[function(e,t){var n=e("react"),o=e("../constants/constants"),i=e("./spinner"),r=e("classnames"),a=e("./utils"),s=e("../components/icon"),l=n.createClass({displayName:"AdPanelTopBarItem",render:function(){return n.createElement("a",{className:this.props.itemClassName,onClick:this.props.onButtonClicked},this.props.children)}}),c=n.createClass({displayName:"AdPanel",getInitialState:function(){return this.isMobile=this.props.controller.state.isMobile,null},handleSkipAdButtonClick:function(){this.props.controller.onSkipAdClicked()},handleLearnMoreButtonClick:function(){this.props.controller.onAdsClicked(o.AD_CLICK_SOURCE.LEARN_MORE_BUTTON)},handleAdTopBarClick:function(e){"touchend"!=e.type&&this.isMobile||(e.stopPropagation(),e.cancelBubble=!0)},isValidAdPlaybackInfo:function(e){return null!==e&&"undefined"!=typeof e&&""!==e},populateAdTopBar:function(){var e=[],t="Unknown";if(t=this.props.currentAdsInfo&&this.props.currentAdsInfo.currentAdItem&&this.props.contentTree&&this.props.currentAdsInfo.currentAdItem.ooyalaAds&&this.props.contentTree.title?this.props.contentTree.title:this.props.currentAdsInfo.currentAdItem.name,this.isValidAdPlaybackInfo(t)&&this.props.componentWidth>560){var i=n.createElement(l,{key:"adTitle",ref:"adTitle",itemClassName:"oo-ad-title"},t);e.push(i)}var c=a.getLocalizedString(this.props.language,o.SKIN_TEXT.AD,this.props.localizableStrings),u=this.props.currentAdsInfo.currentAdItem.indexInPod,p=this.props.currentAdsInfo.numberOfAds;
    this.isValidAdPlaybackInfo(u)&&this.isValidAdPlaybackInfo(p)&&(c=c+": ("+u+"/"+p+")");var d=this.props.currentAdsInfo.currentAdItem.isLive;if(this.props.skinConfig.adScreen.showAdCountDown){var h;h=parseInt(d?(this.props.adStartTime+1e3*this.props.adVideoDuration-(new Date).getTime())/1e3:this.props.adVideoDuration-this.props.currentAdPlayhead),isFinite(h)?(h=a.formatSeconds(Math.max(0,h)),c=c+" - "+h):OO.log("ad remaining time is not a finite number")}var f=n.createElement(l,{key:"adPlaybackInfo",itemClassName:"oo-ad-playback-info"},c);e.push(f);var m=n.createElement(l,{key:"flexibleSpace",itemClassName:"oo-flexible-space"});e.push(m);var v=r({"oo-learn-more":!0,"oo-hidden":!this.props.currentAdsInfo.currentAdItem.hasClickUrl});if(null!==this.props.currentAdsInfo.currentAdItem&&this.isValidAdPlaybackInfo(this.props.currentAdsInfo.currentAdItem.hasClickUrl)){var g=a.getLocalizedString(this.props.language,o.SKIN_TEXT.LEARN_MORE,this.props.localizableStrings),E=n.createElement(l,{key:"learnMoreButton",ref:"learnMoreButton",onButtonClicked:this.handleLearnMoreButtonClick,itemClassName:v},n.createElement(s,n.__spread({},this.props,{icon:"learn",className:"oo-button-icon"})),g);e.push(E)}var y=r({"oo-skip-button":!0,"oo-visible":this.props.currentAdsInfo.skipAdButtonEnabled,"oo-enabled":this.props.currentAdsInfo.skipAdButtonEnabled}),b=a.getLocalizedString(this.props.language,o.SKIN_TEXT.SKIP_AD,this.props.localizableStrings),C=n.createElement(l,{key:"skipButton",ref:"skipButton",onButtonClicked:this.handleSkipAdButtonClick,itemClassName:y},n.createElement(s,n.__spread({},this.props,{icon:"skip",className:"oo-button-icon"})),b);return e.push(C),e},render:function(){var e=null;this.props.controller.state.buffering===!0&&(e=n.createElement(i,{loadingImage:this.props.skinConfig.general.loadingImage.imageResource.url}));var t=this.populateAdTopBar();return n.createElement("div",{className:"oo-ad-screen-panel"},e,n.createElement("div",{className:"oo-ad-screen-panel-click-layer"}),n.createElement("div",{className:"oo-ad-top-bar",ref:"adTopBar",onClick:this.handleAdTopBarClick,onTouchEnd:this.handleAdTopBarClick},t))}});c.defaultProps={currentPlayhead:0,currentAdPlayhead:0,adVideoDuration:0,adStartTime:0,currentAdsInfo:{numberOfAds:0,skipAdButtonEnabled:!1,currentAdItem:{hasClickUrl:!1,name:"",indexInPod:0,isLive:!1}}},t.exports=c},{"../components/icon":27,"../constants/constants":42,"./spinner":33,"./utils":39,classnames:58,react:255}],9:[function(e,t){var n=e("react"),o=e("../components/icon"),i=n.createClass({displayName:"CloseButton",render:function(){return n.createElement("button",{className:this.props.cssClass,onClick:this.props.closeAction},n.createElement(o,n.__spread({},this.props,{icon:"dismiss",className:this.props.className})))}});i.propTypes={closeAction:n.PropTypes.func,fontStyleClass:n.PropTypes.string,cssClass:n.PropTypes.string},i.defaultProps={cssClass:"oo-close-button"},t.exports=i},{"../components/icon":27,react:255}],10:[function(e,t){var n=e("react"),o=(e("classnames"),e("../utils")),i=e("../../constants/constants"),r=e("./selectionContainer"),a=e("../slider"),s=n.createClass({displayName:"CaptionOpacityTab",changeTextOpacity:function(e){this.props.closedCaptionOptions.enabled||this.props.controller.toggleClosedCaptionEnabled();var t=e.target.value;this.props.controller.onClosedCaptionChange("textOpacity",t)},changeBackgroundOpacity:function(e){this.props.closedCaptionOptions.enabled||this.props.controller.toggleClosedCaptionEnabled();var t=e.target.value;this.props.controller.onClosedCaptionChange("backgroundOpacity",t)},changeWindowOpacity:function(e){this.props.closedCaptionOptions.enabled||this.props.controller.toggleClosedCaptionEnabled();var t=e.target.value;this.props.controller.onClosedCaptionChange("windowOpacity",t)},percentString:function(e){return(100*e).toString()+"%"},render:function(){var e=o.getLocalizedString(this.props.language,i.SKIN_TEXT.TEXT_OPACITY,this.props.localizableStrings),t=o.getLocalizedString(this.props.language,i.SKIN_TEXT.BACKGROUND_OPACITY,this.props.localizableStrings),s=o.getLocalizedString(this.props.language,i.SKIN_TEXT.WINDOW_OPACITY,this.props.localizableStrings);return n.createElement("div",{className:"oo-caption-opacity-tab"},n.createElement("div",{className:"oo-caption-opacity-inner-wrapper"},n.createElement(r,{title:e,selectionText:this.percentString(this.props.closedCaptionOptions.textOpacity)},n.createElement(a,{value:parseFloat(this.props.closedCaptionOptions.textOpacity),onChange:this.changeTextOpacity,className:"oo-slider oo-slider-caption-opacity",itemRef:"textOpacitySlider",minValue:"0",maxValue:"1",step:"0.1"})),n.createElement(r,{title:t,selectionText:this.percentString(this.props.closedCaptionOptions.backgroundOpacity)},n.createElement(a,{value:parseFloat(this.props.closedCaptionOptions.backgroundOpacity),onChange:this.changeBackgroundOpacity,className:"oo-slider oo-slider-caption-opacity",itemRef:"backgroundOpacitySlider",minValue:"0",maxValue:"1",step:"0.1"})),n.createElement(r,{title:s,selectionText:this.percentString(this.props.closedCaptionOptions.windowOpacity)},n.createElement(a,{value:parseFloat(this.props.closedCaptionOptions.windowOpacity),onChange:this.changeWindowOpacity,className:"oo-slider oo-slider-caption-opacity",itemRef:"windowOpacitySlider",minValue:"0",maxValue:"1",step:"0.1"}))))}});t.exports=s},{"../../constants/constants":42,"../slider":32,"../utils":39,"./selectionContainer":19,classnames:58,react:255}],11:[function(e,t){var n=e("react"),o=e("../utils"),i=e("../../constants/constants"),r=e("classnames"),a=e("../textTrackPanel"),s=n.createClass({displayName:"CCPreviewPanel",render:function(){var e=o.getLocalizedString(this.props.language,i.SKIN_TEXT.CLOSED_CAPTION_PREVIEW,this.props.localizableStrings),t=o.getLocalizedString(this.props.closedCaptionOptions.language,i.SKIN_TEXT.SAMPLE_TEXT,this.props.localizableStrings);t||(t=o.getLocalizedString("en",i.SKIN_TEXT.SAMPLE_TEXT,this.props.localizableStrings));{var s=r({"oo-preview-caption":!0,"oo-disabled":!this.props.closedCaptionOptions.enabled});r({"oo-preview-text":!0,"oo-disabled":!this.props.closedCaptionOptions.enabled})}return n.createElement("div",{className:"oo-preview-panel"},n.createElement("div",{className:s},e),n.createElement(a,n.__spread({},this.props,{cueText:t})))}});t.exports=s},{"../../constants/constants":42,"../textTrackPanel":35,"../utils":39,classnames:58,react:255}],12:[function(e,t){var n=e("react"),o=e("../utils"),i=e("../../constants/constants"),r=e("./languageTab"),a=e("./colorSelectionTab"),s=e("./captionOpacityTab"),l=e("./fontTypeTab"),c=e("./fontSizeTab"),u=e("./textEnhancementsTab"),p=e("./ccPreviewPanel"),d=e("../tabs"),h=d.Panel,f={en:730,es:995,zh:610},m=n.createClass({displayName:"ClosedCaptionPanel",render:function(){var e=o.getLocalizedString(this.props.language,i.SKIN_TEXT.LANGUAGE_TAB_TITLE,this.props.localizableStrings),t=o.getLocalizedString(this.props.language,i.SKIN_TEXT.COLOR_SELECTION_TAB_TITLE,this.props.localizableStrings),m=o.getLocalizedString(this.props.language,i.SKIN_TEXT.CAPTION_OPACITY_TAB_TITLE,this.props.localizableStrings),v=o.getLocalizedString(this.props.language,i.SKIN_TEXT.FONT_TYPE_TAB_TITLE,this.props.localizableStrings),g=o.getLocalizedString(this.props.language,i.SKIN_TEXT.FONT_SIZE_TAB_TITLE,this.props.localizableStrings),E=o.getLocalizedString(this.props.language,i.SKIN_TEXT.TEXT_ENHANCEMENTS_TAB_TITLE,this.props.localizableStrings);return n.createElement("div",{className:"oo-content-panel oo-closed-captions-panel"},n.createElement(d,n.__spread({className:"captions-navbar",showScrollButtons:this.props.componentWidth<f[this.props.language]},this.props),n.createElement(h,{title:e},n.createElement(r,n.__spread({},this.props))),n.createElement(h,{title:t},n.createElement(a,n.__spread({},this.props))),n.createElement(h,{title:m},n.createElement(s,n.__spread({},this.props))),n.createElement(h,{title:v},n.createElement(l,n.__spread({},this.props))),n.createElement(h,{title:g},n.createElement(c,n.__spread({},this.props))),n.createElement(h,{title:E},n.createElement(u,n.__spread({},this.props)))),n.createElement(p,n.__spread({},this.props)))}});t.exports=m},{"../../constants/constants":42,"../tabs":34,"../utils":39,"./captionOpacityTab":10,"./ccPreviewPanel":11,"./colorSelectionTab":14,"./fontSizeTab":15,"./fontTypeTab":16,"./languageTab":17,"./textEnhancementsTab":20,react:255}],13:[function(e,t){var n=e("react"),o=e("../../constants/constants"),i=e("../utils"),r=e("./onOffSwitch"),a=e("../closeButton"),s=n.createClass({displayName:"ClosedCaptionPopover",handleMoreCaptions:function(){this.props.controller.toggleScreen(o.SCREEN.CLOSEDCAPTION_SCREEN),this.handleClose()},handleClose:function(){this.props.togglePopoverAction()},render:function(){var e=i.getLocalizedString(this.props.language,o.SKIN_TEXT.CC_OPTIONS,this.props.localizableStrings);return n.createElement("ul",{className:"oo-popover-horizontal"},n.createElement("li",null,n.createElement(r,n.__spread({},this.props))),n.createElement("li",null,n.createElement("a",{className:"oo-more-captions",onClick:this.handleMoreCaptions},e)),n.createElement("li",null,n.createElement(a,n.__spread({},this.props,{closeAction:this.handleClose}))))}});t.exports=s},{"../../constants/constants":42,"../closeButton":9,"../utils":39,"./onOffSwitch":18,react:255}],14:[function(e,t){var n=e("react"),o=e("../utils"),i=e("../../constants/constants"),r=e("./selectionContainer"),a=e("../colorSelector"),s=n.createClass({displayName:"ColorSelectionTab",getInitialState:function(){return{selectedTextColor:this.props.closedCaptionOptions.textColor,selectedWindowColor:this.props.closedCaptionOptions.windowColor,selectedBackgroundColor:this.props.closedCaptionOptions.backgroundColor,textColors:["White","Blue","Magenta","Green","Yellow","Red","Cyan","Black"],windowColors:["Transparent","White","Blue","Magenta","Green","Yellow","Red","Cyan","Black"],backgroundColors:["Transparent","White","Blue","Magenta","Green","Yellow","Red","Cyan","Black"]}},changeTextColor:function(e){this.props.closedCaptionOptions.enabled||this.props.controller.toggleClosedCaptionEnabled(),this.props.controller.onClosedCaptionChange("textColor",e),this.setState({selectedTextColor:e})},changeWindowColor:function(e){this.props.closedCaptionOptions.enabled||this.props.controller.toggleClosedCaptionEnabled(),this.props.controller.onClosedCaptionChange("windowColor",e),this.setState({selectedWindowColor:e})},changeBackgroundColor:function(e){this.props.closedCaptionOptions.enabled||this.props.controller.toggleClosedCaptionEnabled(),this.props.controller.onClosedCaptionChange("backgroundColor",e),this.setState({selectedBackgroundColor:e})},render:function(){var e=o.getLocalizedString(this.props.language,i.SKIN_TEXT.TEXT_COLOR,this.props.localizableStrings),t=o.getLocalizedString(this.props.language,i.SKIN_TEXT[this.props.closedCaptionOptions.textColor.toUpperCase()],this.props.localizableStrings),s=o.getLocalizedString(this.props.language,i.SKIN_TEXT.BACKGROUND_COLOR,this.props.localizableStrings),l=o.getLocalizedString(this.props.language,i.SKIN_TEXT[this.props.closedCaptionOptions.backgroundColor.toUpperCase()],this.props.localizableStrings),c=o.getLocalizedString(this.props.language,i.SKIN_TEXT.WINDOW_COLOR,this.props.localizableStrings),u=o.getLocalizedString(this.props.language,i.SKIN_TEXT[this.props.closedCaptionOptions.windowColor.toUpperCase()],this.props.localizableStrings);return n.createElement("div",{className:"oo-color-selection-tab"},n.createElement("div",{className:"oo-color-selection-inner-wrapper"},n.createElement(r,{className:"oo-text-color-selection-container",title:e,selectionText:t},n.createElement("div",{className:"oo-text-color-items-container"},n.createElement(a,n.__spread({},this.props,{colors:this.state.textColors,onColorChange:this.changeTextColor,selectedColor:this.props.closedCaptionOptions.textColor,enabled:this.props.closedCaptionOptions.enabled})))),n.createElement(r,{title:s,selectionText:l},n.createElement(a,n.__spread({},this.props,{colors:this.state.backgroundColors,onColorChange:this.changeBackgroundColor,selectedColor:this.props.closedCaptionOptions.backgroundColor,enabled:this.props.closedCaptionOptions.enabled}))),n.createElement(r,{title:c,selectionText:u},n.createElement(a,n.__spread({},this.props,{colors:this.state.windowColors,onColorChange:this.changeWindowColor,selectedColor:this.props.closedCaptionOptions.windowColor,enabled:this.props.closedCaptionOptions.enabled})))))}});t.exports=s},{"../../constants/constants":42,"../colorSelector":21,"../utils":39,"./selectionContainer":19,react:255}],15:[function(e,t){var n=e("react"),o=e("classnames"),i=e("../utils"),r=e("../../constants/constants"),a=e("./selectionContainer"),s=n.createClass({displayName:"FontSizeTab",getInitialState:function(){return{selectedFontSize:this.props.closedCaptionOptions.fontSize,fontSizes:["Small","Medium","Large","Extra Large"]}},changeFontSize:function(e){this.props.closedCaptionOptions.enabled||this.props.controller.toggleClosedCaptionEnabled(),this.props.controller.onClosedCaptionChange("fontSize",e),this.setState({selectedFontSize:e})},setClassname:function(e,t){return o({"oo-font-size-letter":"letter"==t,"oo-font-size-label":"label"==t,"oo-font-size-selected":this.props.closedCaptionOptions.fontSize==e&&this.props.closedCaptionOptions.enabled,"oo-font-size-label-selected":this.props.closedCaptionOptions.fontSize==e&&this.props.closedCaptionOptions.enabled&&"label"==t,"oo-disabled":!this.props.closedCaptionOptions.enabled})},render:function(){for(var e=i.getLocalizedString(this.props.language,r.SKIN_TEXT.FONT_SIZE,this.props.localizableStrings),t=i.getLocalizedString(this.props.language,r.SKIN_TEXT[this.props.closedCaptionOptions.fontSize.toUpperCase().replace(" ","_")],this.props.localizableStrings),o=[],s=0;s<this.state.fontSizes.length;s++){var l={};this.props.closedCaptionOptions.enabled&&this.props.skinConfig.general.accentColor&&this.props.closedCaptionOptions.fontSize==this.state.fontSizes[s]&&(l={color:this.props.skinConfig.general.accentColor}),o.push(n.createElement("a",{className:"oo-font-size-container",onClick:this.changeFontSize.bind(this,this.state.fontSizes[s]),key:s},n.createElement("div",{className:this.setClassname(this.state.fontSizes[s],"letter")+" oo-font-size-letter-"+this.state.fontSizes[s].replace(" ","-"),style:l},"A"),n.createElement("div",{className:this.setClassname(this.state.fontSizes[s],"label"),style:l},i.getLocalizedString(this.props.language,r.SKIN_TEXT[this.state.fontSizes[s].toUpperCase().replace(" ","_")],this.props.localizableStrings))))}return n.createElement("div",{className:"oo-font-size-tab"},n.createElement("div",{className:"oo-font-size-inner-wrapper"},n.createElement(a,{title:e,selectionText:t},o)))}});t.exports=s},{"../../constants/constants":42,"../utils":39,"./selectionContainer":19,classnames:58,react:255}],16:[function(e,t){var n=e("react"),o=e("../dataSelector"),i=n.createClass({displayName:"FontTypeTab",getInitialState:function(){return{selectedFontType:this.props.closedCaptionOptions.fontType,availableFontTypes:["Monospaced Serif","Proportional Serif","Monospaced Sans-Serif","Proportional Sans-Serif","Casual","Cursive","Small Capitals"]}},changeFontType:function(e){this.props.closedCaptionOptions.enabled||this.props.controller.toggleClosedCaptionEnabled(),this.props.controller.onClosedCaptionChange("fontType",e),this.setState({selectedFontType:e})},render:function(){return n.createElement("div",{className:"oo-font-type-tab"},n.createElement(o,n.__spread({},this.props,{viewSize:this.props.responsiveView,dataItemsPerPage:this.props.dataItemsPerPage,selectedData:this.state.selectedFontType,enabled:this.props.closedCaptionOptions.enabled,availableDataItems:this.state.availableFontTypes,onDataChange:this.changeFontType})))}});i.propTypes={dataItemsPerPage:n.PropTypes.objectOf(n.PropTypes.number)},i.defaultProps={dataItemsPerPage:{xs:1,sm:4,md:8,lg:8},responsiveView:"md"},t.exports=i},{"../dataSelector":24,react:255}],17:[function(e,t){var n=e("react"),o=e("../dataSelector"),i=e("lodash.values"),r=n.createClass({displayName:"LanguageTab",getInitialState:function(){return{selectedLanguage:this.props.closedCaptionOptions.availableLanguages.locale[this.props.closedCaptionOptions.language]}},changeLanguage:function(e){for(var t=this.props.closedCaptionOptions.availableLanguages,n={},o=0;o<t.languages.length;o++)n[t.locale[t.languages[o]]]=t.languages[o];this.props.closedCaptionOptions.enabled||this.props.controller.toggleClosedCaptionEnabled(),this.props.controller.onClosedCaptionChange("language",n[e]),this.setState({selectedLanguage:e})},render:function(){return n.createElement("div",{className:"oo-language-tab"},n.createElement(o,n.__spread({},this.props,{viewSize:this.props.responsiveView,dataItemsPerPage:this.props.dataItemsPerPage,selectedData:this.state.selectedLanguage,enabled:this.props.closedCaptionOptions.enabled,availableDataItems:i(this.props.closedCaptionOptions.availableLanguages.locale),onDataChange:this.changeLanguage})))}});r.propTypes={dataItemsPerPage:n.PropTypes.objectOf(n.PropTypes.number)},r.defaultProps={dataItemsPerPage:{xs:1,sm:4,md:8,lg:8},responsiveView:"md"},t.exports=r},{"../dataSelector":24,"lodash.values":61,react:255}],18:[function(e,t){var n=e("react"),o=e("./../utils"),i=e("../../constants/constants"),r=e("classnames"),a=n.createClass({displayName:"OnOffSwitch",handleOnOffSwitch:function(){this.props.controller.toggleClosedCaptionEnabled()},render:function(){var e=r({"oo-switch-thumb":!0,"oo-switch-thumb-on":this.props.closedCaptionOptions.enabled,"oo-switch-thumb-off":!this.props.closedCaptionOptions.enabled}),t=r({"oo-switch-body":!0,"oo-switch-body-off":!this.props.closedCaptionOptions.enabled}),a=r({"oo-switch-captions oo-switch-captions-on":!0,"oo-switch-captions-active":this.props.closedCaptionOptions.enabled}),s=r({"oo-switch-captions oo-switch-captions-off":!0,"oo-switch-captions-active":!this.props.closedCaptionOptions.enabled}),l={backgroundColor:this.props.closedCaptionOptions.enabled&&this.props.skinConfig.general.accentColor?this.props.skinConfig.general.accentColor:null},c=o.getLocalizedString(this.props.language,i.SKIN_TEXT.OFF,this.props.localizableStrings),u=o.getLocalizedString(this.props.language,i.SKIN_TEXT.ON,this.props.localizableStrings);return n.createElement("div",{className:"oo-switch-container"},n.createElement("span",{className:s},c),n.createElement("div",{className:"oo-switch-element"},n.createElement("span",{className:t,style:l}),n.createElement("span",{className:e})),n.createElement("span",{className:a},u),n.createElement("a",{className:"oo-switch-container-selectable",onClick:this.handleOnOffSwitch}))}});t.exports=a},{"../../constants/constants":42,"./../utils":39,classnames:58,react:255}],19:[function(e,t){var n=e("react"),o=n.createClass({displayName:"SelectionContainer",render:function(){return n.createElement("div",{className:"oo-selection-container"+(this.props.className?" "+this.props.className:"")},n.createElement("div",{className:"oo-selection-inner-wrapper"},n.createElement("div",{className:"oo-selection-container-title"},this.props.title,": ",n.createElement("span",{className:"oo-selection-container-selection-text"},this.props.selectionText)),n.createElement("div",{className:"oo-selection-items-container"},this.props.children)))}});t.exports=o},{react:255}],20:[function(e,t){var n=e("react"),o=e("classnames"),i=e("../utils"),r=e("../../constants/constants"),a=e("./selectionContainer"),s=n.createClass({displayName:"TextEnhancementsTab",getInitialState:function(){return{selectedTextEnhancement:this.props.closedCaptionOptions.textEnhancement,textEnhancements:["Uniform","Depressed","Raised","Shadow"]}},changeTextEnhancement:function(e){this.props.closedCaptionOptions.enabled||this.props.controller.toggleClosedCaptionEnabled(),this.props.controller.onClosedCaptionChange("textEnhancement",e),this.setState({selectedTextEnhancement:e})},setClassname:function(e,t){return o({"oo-text-enhancement-letter":"letter"==t,"oo-text-enhancement-label":"label"==t,"oo-text-enhancement-selected":this.props.closedCaptionOptions.textEnhancement==e&&this.props.closedCaptionOptions.enabled,"oo-text-enhancement-label-selected":this.props.closedCaptionOptions.textEnhancement==e&&this.props.closedCaptionOptions.enabled&&"label"==t,"oo-disabled":!this.props.closedCaptionOptions.enabled})},render:function(){for(var e=i.getLocalizedString(this.props.language,r.SKIN_TEXT.TEXT_ENHANCEMENT,this.props.localizableStrings),t=i.getLocalizedString(this.props.language,r.SKIN_TEXT[this.props.closedCaptionOptions.textEnhancement.toUpperCase()],this.props.localizableStrings),o=[],s=0;s<this.state.textEnhancements.length;s++){var l={};this.props.closedCaptionOptions.enabled&&this.props.skinConfig.general.accentColor&&this.props.closedCaptionOptions.textEnhancement==this.state.textEnhancements[s]&&(l={color:this.props.skinConfig.general.accentColor}),o.push(n.createElement("a",{className:"oo-text-enhancements-container",onClick:this.changeTextEnhancement.bind(this,this.state.textEnhancements[s]),key:s},n.createElement("div",{className:this.setClassname(this.state.textEnhancements[s],"letter")+" oo-text-enhancement-letter-"+this.state.textEnhancements[s],style:l},"A"),n.createElement("div",{className:this.setClassname(this.state.textEnhancements[s],"label"),style:l},i.getLocalizedString(this.props.language,r.SKIN_TEXT[this.state.textEnhancements[s].toUpperCase()],this.props.localizableStrings))))}return n.createElement("div",{className:"oo-text-enhancements-tab"},n.createElement("div",{className:"oo-text-enhancements-inner-wrapper"},n.createElement(a,{title:e,selectionText:t},o)))}});t.exports=s},{"../../constants/constants":42,"../utils":39,"./selectionContainer":19,classnames:58,react:255}],21:[function(e,t){var n=e("react"),o=e("classnames"),i=n.createClass({displayName:"ColorSelector",setClassname:function(e){return o({"oo-item":!0,"oo-item-selected":this.props.selectedColor==e&&this.props.enabled,"oo-disabled":!this.props.enabled})},handleColorSelection:function(e){this.props.onColorChange(e)},render:function(){for(var e=[],t=0;t<this.props.colors.length;t++){var o={};if(this.props.enabled&&this.props.selectedColor==this.props.colors[t]&&this.props.skinConfig.general.accentColor){var i="solid ";i+=this.props.skinConfig.general.accentColor,o={border:i}}e.push(n.createElement("div",{className:this.setClassname(this.props.colors[t]),key:t,style:o},n.createElement("a",{className:"oo-color-item oo-color-item-"+this.props.colors[t],onClick:this.handleColorSelection.bind(this,this.props.colors[t])})))}return n.createElement("div",{className:"oo-color-selector"},e)}});t.exports=i},{classnames:58,react:255}],22:[function(e,t){var n=e("react"),o=e("react-dom"),i=e("../constants/constants"),r=e("classnames"),a=e("./scrubberBar"),s=e("./slider"),l=e("./utils"),c=e("../views/popover"),u=e("./videoQualityPanel"),p=e("./closed-caption/closedCaptionPopover"),d=e("./logo"),h=e("./icon"),f=n.createClass({displayName:"ControlBar",getInitialState:function(){return this.isMobile=this.props.controller.state.isMobile,this.responsiveUIMultiple=this.getResponsiveUIMultiple(this.props.responsiveView),this.volumeSliderValue=0,this.moreOptionsItems=null,{currentVolumeHead:0}},componentDidMount:function(){window.addEventListener("orientationchange",this.closePopovers)},componentWillReceiveProps:function(e){e.responsiveView!=this.props.responsiveView&&(this.responsiveUIMultiple=this.getResponsiveUIMultiple(e.responsiveView))},componentWillUnmount:function(){this.props.controller.cancelTimer(),this.closePopovers(),l.isAndroid()&&this.props.controller.hideVolumeSliderBar(),window.removeEventListener("orientationchange",this.closePopovers)},getResponsiveUIMultiple:function(e){var t=this.props.skinConfig.responsive.breakpoints[e].multiplier;return t},handleControlBarMouseUp:function(e){"touchend"!=e.type&&this.isMobile||(e.stopPropagation(),e.cancelBubble=!0,this.props.controller.state.accessibilityControlsEnabled=!0,this.props.controller.startHideControlBarTimer())},handleFullscreenClick:function(e){e.stopPropagation(),e.cancelBubble=!0,e.preventDefault(),this.props.controller.toggleFullscreen()},handleLiveClick:function(e){e.stopPropagation(),e.cancelBubble=!0,e.preventDefault(),this.props.controller.onLiveClick(),this.props.controller.seek(this.props.duration)},handleVolumeIconClick:function(e){this.isMobile?(this.props.controller.startHideControlBarTimer(),e.stopPropagation(),e.cancelBubble=!0,this.props.controller.state.volumeState.volumeSliderVisible?this.props.controller.handleMuteClick():this.props.controller.showVolumeSliderBar()):this.props.controller.handleMuteClick()},handlePlayClick:function(){this.props.controller.togglePlayPause()},handleShareClick:function(){this.props.controller.toggleShareScreen()},handleQualityClick:function(){this.props.responsiveView==this.props.skinConfig.responsive.breakpoints.xs.id?this.props.controller.toggleScreen(i.SCREEN.VIDEO_QUALITY_SCREEN):(this.toggleQualityPopover(),this.closeCaptionPopover())},toggleQualityPopover:function(){this.props.controller.toggleVideoQualityPopOver()},closeQualityPopover:function(){1==this.props.controller.state.videoQualityOptions.showVideoQualityPopover&&this.toggleQualityPopover()},toggleCaptionPopover:function(){this.props.controller.toggleClosedCaptionPopOver()},closeCaptionPopover:function(){1==this.props.controller.state.closedCaptionOptions.showClosedCaptionPopover&&this.toggleCaptionPopover()},closePopovers:function(){this.closeCaptionPopover(),this.closeQualityPopover()},handleVolumeClick:function(e){e.preventDefault();var t=parseFloat(e.target.dataset.volume);this.props.controller.setVolume(t)},handleDiscoveryClick:function(){this.props.controller.toggleDiscoveryScreen()},handleMoreOptionsClick:function(){this.props.controller.toggleMoreOptionsScreen(this.moreOptionsItems)},handleClosedCaptionClick:function(){this.props.responsiveView==this.props.skinConfig.responsive.breakpoints.xs.id?this.props.controller.toggleScreen(i.SCREEN.CLOSEDCAPTION_SCREEN):(this.toggleCaptionPopover(),this.closeQualityPopover())},highlight:function(e){var t=this.props.skinConfig.controlBar.iconStyle.active.color?this.props.skinConfig.controlBar.iconStyle.active.color:this.props.skinConfig.general.accentColor,n=this.props.skinConfig.controlBar.iconStyle.active.opacity;l.highlight(e.target,n,t)},removeHighlight:function(e){var t=this.props.skinConfig.controlBar.iconStyle.inactive.color,n=this.props.skinConfig.controlBar.iconStyle.inactive.opacity;l.removeHighlight(e.target,n,t)},volumeHighlight:function(){this.highlight({target:o.findDOMNode(this.refs.volumeIcon)})},volumeRemoveHighlight:function(){this.removeHighlight({target:o.findDOMNode(this.refs.volumeIcon)})},changeVolumeSlider:function(e){var t=parseFloat(e.target.value);this.props.controller.setVolume(t),this.setState({volumeSliderValue:e.target.value})},populateControlBar:function(){var e=this.setupItemStyle(),t="";t=this.props.playerState==i.STATE.PLAYING?"pause":this.props.playerState==i.STATE.END?"replay":"play";var o=this.props.controller.state.volumeState.muted?"volumeOff":"volume",a="";a=this.props.controller.state.fullscreen?"compress":"expand";var f=0;f=l.formatSeconds(null==this.props.duration||"undefined"==typeof this.props.duration||""==this.props.duration?0:this.props.duration);for(var m=[],v=0;10>v;v++){var g=this.props.controller.state.volumeState.volume>=(v+1)/10,E=r({"oo-volume-bar":!0,"oo-on":g}),y={backgroundColor:this.props.skinConfig.controlBar.volumeControl.color?this.props.skinConfig.controlBar.volumeControl.color:this.props.skinConfig.general.accentColor};m.push(n.createElement("a",{"data-volume":(v+1)/10,className:E,key:v,style:y,onClick:this.handleVolumeClick}))}var b,C=n.createElement("div",{className:"oo-volume-slider"},n.createElement(s,{value:parseFloat(this.props.controller.state.volumeState.volume),onChange:this.changeVolumeSlider,className:"oo-slider oo-slider-volume",itemRef:"volumeSlider",minValue:"0",maxValue:"1",step:"0.1"}));b=this.isMobile?this.props.controller.state.volumeState.volumeSliderVisible?C:null:m;var S=isFinite(parseInt(this.props.currentPlayhead))?l.formatSeconds(parseInt(this.props.currentPlayhead)):null,R=this.props.isLiveStream,T={color:this.props.skinConfig.controlBar.iconStyle.inactive.color},N=this.props.currentPlayhead-this.props.duration,O=Math.abs(N)<1,P=O?null:this.handleLiveClick,I=R?O?null:l.formatSeconds(N):S,A=R?null:n.createElement("span",{className:"oo-total-time"},f),D=l.getLocalizedString(this.props.language,i.SKIN_TEXT.LIVE,this.props.localizableStrings),_=r({"oo-control-bar-item oo-live oo-live-indicator":!0,"oo-live-nonclickable":O}),w=this.props.controller.state.videoQualityOptions.showVideoQualityPopover?n.createElement(c,null,n.createElement(u,n.__spread({},this.props,{togglePopoverAction:this.toggleQualityPopover,popover:!0}))):null,k=this.props.controller.state.closedCaptionOptions.showClosedCaptionPopover?n.createElement(c,{popoverClassName:"oo-popover oo-popover-pull-right"},n.createElement(p,n.__spread({},this.props,{togglePopoverAction:this.toggleCaptionPopover}))):null,M=r({"oo-quality":!0,"oo-control-bar-item":!0,"oo-selected":this.props.controller.state.videoQualityOptions.showVideoQualityPopover}),x=r({"oo-closed-caption":!0,"oo-control-bar-item":!0,"oo-selected":this.props.controller.state.closedCaptionOptions.showClosedCaptionPopover}),L={};L.color=this.props.skinConfig.general.accentColor?this.props.skinConfig.general.accentColor:null;for(var V={playPause:n.createElement("a",{className:"oo-play-pause oo-control-bar-item",onClick:this.handlePlayClick,key:"playPause"},n.createElement(h,n.__spread({},this.props,{icon:t,style:e.iconCharacter,onMouseOver:this.highlight,onMouseOut:this.removeHighlight}))),live:n.createElement("a",{className:_,ref:"LiveButton",onClick:P,key:"live"},n.createElement("div",{className:"oo-live-circle"}),n.createElement("span",{className:"oo-live-text"},D)),volume:n.createElement("div",{className:"oo-volume oo-control-bar-item",key:"volume"},n.createElement(h,n.__spread({},this.props,{icon:o,ref:"volumeIcon",style:this.props.skinConfig.controlBar.iconStyle.inactive,onClick:this.handleVolumeIconClick,onMouseOver:this.volumeHighlight,onMouseOut:this.volumeRemoveHighlight})),b),timeDuration:n.createElement("a",{className:"oo-time-duration oo-control-bar-duration",style:T,key:"timeDuration"},n.createElement("span",null,I),A),flexibleSpace:n.createElement("div",{className:"oo-flexible-space oo-control-bar-flex-space",key:"flexibleSpace"}),moreOptions:n.createElement("a",{className:"oo-more-options oo-control-bar-item",onClick:this.handleMoreOptionsClick,key:"moreOptions"},n.createElement(h,n.__spread({},this.props,{icon:"ellipsis",style:e.iconCharacter,onMouseOver:this.highlight,onMouseOut:this.removeHighlight}))),quality:n.createElement("div",{className:"oo-popover-button-container",key:"quality"},w,n.createElement("a",{className:M,onClick:this.handleQualityClick,style:L},n.createElement(h,n.__spread({},this.props,{icon:"quality",style:e.iconCharacter,onMouseOver:this.highlight,onMouseOut:this.removeHighlight})))),discovery:n.createElement("a",{className:"oo-discovery oo-control-bar-item",onClick:this.handleDiscoveryClick,key:"discovery"},n.createElement(h,n.__spread({},this.props,{icon:"discovery",style:e.iconCharacter,onMouseOver:this.highlight,onMouseOut:this.removeHighlight}))),closedCaption:n.createElement("div",{className:"oo-popover-button-container",key:"closedCaption"},k,n.createElement("a",{className:x,onClick:this.handleClosedCaptionClick,style:L},n.createElement(h,n.__spread({},this.props,{icon:"cc",style:e.iconCharacter,onMouseOver:this.highlight,onMouseOut:this.removeHighlight})))),share:n.createElement("a",{className:"oo-share oo-control-bar-item",onClick:this.handleShareClick,key:"share"},n.createElement(h,n.__spread({},this.props,{icon:"share",style:e.iconCharacter,onMouseOver:this.highlight,onMouseOut:this.removeHighlight}))),fullscreen:n.createElement("a",{className:"oo-fullscreen oo-control-bar-item",onClick:this.handleFullscreenClick,key:"fullscreen"},n.createElement(h,n.__spread({},this.props,{icon:a,style:e.iconCharacter,onMouseOver:this.highlight,onMouseOut:this.removeHighlight}))),logo:n.createElement(d,{key:"logo",imageUrl:this.props.skinConfig.controlBar.logo.imageResource.url,clickUrl:this.props.skinConfig.controlBar.logo.clickUrl,target:this.props.skinConfig.controlBar.logo.target,width:this.props.responsiveView!=this.props.skinConfig.responsive.breakpoints.xs.id?this.props.skinConfig.controlBar.logo.width:null,height:this.props.skinConfig.controlBar.logo.height})},B=[],U=this.props.controller.state.isPlayingAd?this.props.skinConfig.buttons.desktopAd:this.props.skinConfig.buttons.desktopContent,j=null,F=0,W=0;W<U.length;W++)if("volume"==U[W].name){j=U[W];
    var H=j&&this.isMobile&&!this.props.controller.state.volumeState.volumeSliderVisible||j&&l.isIos()?parseInt(j.minWidth):0,Y=this.isMobile?0:parseInt(j.minWidth)/2;F=H+Y;break}for(var z=parseInt(this.props.duration/3600,10),K=z>0?0:45,G=2*i.UI.DEFAULT_SCRUBBERBAR_LEFT_RIGHT_PADDING,X=0;X<U.length;X++)if("undefined"!=typeof V[U[X].name]&&"none"!==U[X].location){if("share"===U[X].name){var q=l.getPropertyValue(this.props.skinConfig,"shareScreen.shareContent",[]),Q=l.getPropertyValue(this.props.skinConfig,"shareScreen.socialContent",[]),J=1===q.length&&"social"===q[0];if(this.props.controller.state.isOoyalaAds||!q.length||J&&!Q.length)continue}(!this.props.controller.state.isOoyalaAds&&this.props.controller.state.closedCaptionOptions.availableLanguages||"closedCaption"!==U[X].name)&&(!this.props.controller.state.isOoyalaAds&&this.props.controller.state.videoQualityOptions.availableBitrates||"quality"!==U[X].name)&&(!this.props.controller.state.isOoyalaAds&&this.props.controller.state.discoveryData||"discovery"!==U[X].name)&&(this.props.skinConfig.controlBar.logo.imageResource.url||"logo"!==U[X].name)&&(l.isIos()&&"volume"===U[X].name||("live"!==U[X].name||"undefined"!=typeof this.props.isLiveStream&&this.props.isLiveStream)&&B.push(U[X]))}var $=l.collapse(this.props.componentWidth+this.responsiveUIMultiple*(K+F-G),B,this.responsiveUIMultiple),Z=$.fit,et=$.overflow;this.moreOptionsItems=et,finalControlBarItems=[];for(var X=0;X<Z.length;X++)("moreOptions"!==Z[X].name||!this.props.controller.state.isOoyalaAds&&0!==et.length)&&finalControlBarItems.push(V[Z[X].name]);return finalControlBarItems},setupItemStyle:function(){var e={};return e.iconCharacter={color:this.props.skinConfig.controlBar.iconStyle.inactive.color,opacity:this.props.skinConfig.controlBar.iconStyle.inactive.opacity},e},render:function(){var e=r({"oo-control-bar":!0,"oo-control-bar-hidden":!this.props.controlBarVisible}),t=this.populateControlBar(),o={height:this.props.skinConfig.controlBar.height};return n.createElement("div",{className:e,style:o,onMouseUp:this.handleControlBarMouseUp,onTouchEnd:this.handleControlBarMouseUp},n.createElement(a,n.__spread({},this.props)),n.createElement("div",{className:"oo-control-bar-items-wrapper"},t))}});f.defaultProps={isLiveStream:!1,skinConfig:{responsive:{breakpoints:{xs:{id:"xs"},sm:{id:"sm"},md:{id:"md"},lg:{id:"lg"}}}},responsiveView:"md"},t.exports=f},{"../constants/constants":42,"../views/popover":55,"./closed-caption/closedCaptionPopover":13,"./icon":27,"./logo":28,"./scrubberBar":30,"./slider":32,"./utils":39,"./videoQualityPanel":40,classnames:58,react:255,"react-dom":63}],23:[function(e,t){var n=e("react"),o=e("react-dom"),i=e("classnames"),r=e("../constants/constants"),a=n.createClass({displayName:"CountDownClock",getInitialState:function(){this.canvas=null,this.context=null,this.interval=null;var e=0,t=0,n=parseInt(this.props.controller.state.upNextInfo.timeToShow);return this.props.controller.state.screenToShow===r.SCREEN.DISCOVERY_SCREEN?(e=2/this.props.timeToShow,t=this.props.timeToShow):(e=2/n,t=this.props.duration-this.props.currentPlayhead),{counterInterval:.05,fraction:e,remainSeconds:t,hideClock:!1}},handleClick:function(e){"touchend"!=e.type&&this.isMobile||this.props.controller.state.screenToShow===r.SCREEN.DISCOVERY_SCREEN&&(this.setState({hideClock:!0}),clearInterval(this.interval))},componentWillMount:function(){this.updateClockSize()},componentDidMount:function(){this.setupCountDownTimer()},componentWillUnmount:function(){clearInterval(this.interval)},setupCountDownTimer:function(){this.setupCanvas(),this.drawBackground(),this.drawTimer(),this.startTimer()},setupCanvas:function(){this.canvas=o.findDOMNode(this),this.context=this.canvas.getContext("2d"),this.context.textAlign="center",this.context.textBaseline="middle",this.context.font="regular 12px Arial"},drawBackground:function(){this.context.beginPath(),this.context.globalAlpha=1,this.context.fillStyle="gray",this.context.arc(this.state.clockContainerWidth/2,this.state.clockRadius,this.state.clockRadius,0,2*Math.PI,!1),this.context.arc(this.state.clockContainerWidth/2,this.state.clockRadius,this.state.clockRadius/1.2,2*Math.PI,0,!0),this.context.fill()},updateClockSize:function(){if(this.props.controller.state.screenToShow===r.SCREEN.DISCOVERY_SCREEN)var e=75;else var e=this.props.responsiveView==this.props.skinConfig.responsive.breakpoints.xs.id?25:36;this.setState({clockRadius:parseInt(e,10)/2,clockContainerWidth:parseInt(e,10)})},drawTimer:function(){var e,t=this.state.fraction*this.state.remainSeconds+1.5;this.context.fillStyle="white",(this.props.controller.state.screenToShow===r.SCREEN.PLAYING_SCREEN||this.props.controller.state.screenToShow===r.SCREEN.PAUSE_SCREEN)&&this.context.fillText(this.state.remainSeconds.toFixed(e),this.state.clockContainerWidth/2,this.state.clockRadius,100),this.context.beginPath(),this.context.arc(this.state.clockContainerWidth/2,this.state.clockRadius,this.state.clockRadius,1.5*Math.PI,Math.PI*t,!1),this.context.arc(this.state.clockContainerWidth/2,this.state.clockRadius,this.state.clockRadius/1.2,Math.PI*t,1.5*Math.PI,!0),this.context.fill()},startTimer:function(){this.interval=setInterval(this.tick,1e3*this.state.counterInterval)},tick:function(){this.props.controller.state.screenToShow===r.SCREEN.DISCOVERY_SCREEN?this.state.remainSeconds<1?(this.setState({remainSeconds:0}),clearInterval(this.interval),this.startDiscoveryVideo()):(this.setState({remainSeconds:this.state.remainSeconds-this.state.counterInterval}),this.updateCanvas()):(this.props.controller.state.screenToShow===r.SCREEN.PLAYING_SCREEN||this.props.controller.state.screenToShow===r.SCREEN.PAUSE_SCREEN)&&(this.state.remainSeconds<1||this.props.playerState===r.STATE.END?(this.setState({remainSeconds:0}),clearInterval(this.interval),this.startUpNextVideo()):(this.setState({remainSeconds:this.props.duration-this.props.currentPlayhead}),this.updateCanvas()))},updateCanvas:function(){this.clearCanvas(),this.drawTimer()},clearCanvas:function(){this.context=this.canvas.getContext("2d"),this.context.clearRect(0,0,this.canvas.width,this.canvas.height),this.drawBackground()},startDiscoveryVideo:function(){var e={clickedVideo:this.props.discoveryData.relatedVideos[0],custom:this.props.discoveryData.custom};this.props.controller.sendDiscoveryClickEvent(e,!1)},startUpNextVideo:function(){OO.log("startUpNext");var e={clickedVideo:this.props.upNextInfo.upNextData,custom:{source:r.SCREEN.UP_NEXT_SCREEN}};this.props.controller.sendDiscoveryClickEvent(e,!0)},render:function(){var e=i({"oo-countdown-clock":!0,"oo-up-next-count-down":this.props.controller.state.screenToShow!==r.SCREEN.DISCOVERY_SCREEN,"oo-discovery-count-down":this.props.controller.state.screenToShow===r.SCREEN.DISCOVERY_SCREEN,"oo-hidden":this.state.hideClock});return n.createElement("canvas",{className:e,width:this.state.clockContainerWidth,height:this.state.clockContainerWidth,onClick:this.handleClick,onTouchEnd:this.handleClick})}});a.propTypes={timeToShow:n.PropTypes.number,clockWidth:n.PropTypes.number,currentPlayhead:n.PropTypes.number},a.defaultProps={timeToShow:10,clockWidth:36,currentPlayhead:0,controller:{state:{screenToShow:"",upNextInfo:{timeToShow:10}}},skinConfig:{responsive:{breakpoints:{xs:{id:"xs"}}}}},t.exports=a},{"../constants/constants":42,classnames:58,react:255,"react-dom":63}],24:[function(e,t){var n=e("react"),o=e("classnames"),i=e("./icon"),r=n.createClass({displayName:"DataSelector",getInitialState:function(){return{currentPage:1}},handleDataSelection:function(e){this.props.onDataChange(e)},handleLeftChevronClick:function(e){e.preventDefault(),this.setState({currentPage:this.state.currentPage-1})},handleRightChevronClick:function(e){e.preventDefault(),this.setState({currentPage:this.state.currentPage+1})},componentWillReceiveProps:function(e){if(e.responsiveView!=this.props.viewSize){var t=this.props.viewSize,n=e.responsiveView,o=this.state.currentPage*this.props.dataItemsPerPage[t]-this.props.dataItemsPerPage[t],i=Math.floor(o/e.dataItemsPerPage[n])+1;this.setState({currentPage:i})}},setClassname:function(e){return o({"oo-item":!0,"oo-item-selected":this.props.selectedData==e&&this.props.enabled,"oo-disabled":!this.props.enabled})},render:function(){for(var e=this.props.viewSize,t=this.props.dataItemsPerPage[e],r=t*(this.state.currentPage-1),a=t*this.state.currentPage,s=this.props.availableDataItems.slice(r,a),l=[],c=0;c<s.length;c++){var u={};this.props.selectedData==s[c]&&this.props.enabled&&this.props.skinConfig.general.accentColor&&(u={backgroundColor:this.props.skinConfig.general.accentColor}),l.push(n.createElement("a",{className:this.setClassname(s[c]),style:u,onClick:this.handleDataSelection.bind(this,s[c]),key:c},n.createElement("span",{className:"oo-data"},s[c])))}var p=o({"oo-left-button":!0,"oo-hidden":!this.props.enabled||this.state.currentPage<=1}),d=o({"oo-right-button":!0,"oo-hidden":!this.props.enabled||a>=this.props.availableDataItems.length});return n.createElement("div",{className:"oo-data-selector"},n.createElement("div",{className:"oo-data-panel oo-flexcontainer"},l),n.createElement("a",{className:p,ref:"leftChevron",onClick:this.handleLeftChevronClick},n.createElement(i,n.__spread({},this.props,{icon:"left"}))),n.createElement("a",{className:d,ref:"rightChevron",onClick:this.handleRightChevronClick},n.createElement(i,n.__spread({},this.props,{icon:"right"}))))}});t.exports=r},{"./icon":27,classnames:58,react:255}],25:[function(e,t){var n=e("react"),o=e("./utils"),i=n.createClass({displayName:"DiscoverItem",getInitialState:function(){return{imgError:!1}},componentWillMount:function(){var e=new Image;e.src=this.props.src,e.onerror=function(){this.setState({imgError:!0})}.bind(this)},render:function(){if(this.state.imgError)return null;var e={backgroundImage:"url('"+this.props.src+"')"},t={color:o.getPropertyValue(this.props.skinConfig,"discoveryScreen.contentTitle.font.color"),fontFamily:o.getPropertyValue(this.props.skinConfig,"discoveryScreen.contentTitle.font.fontFamily")};return n.createElement("div",{className:"oo-discovery-image-wrapper-style"},n.createElement("div",{className:"oo-discovery-wrapper"},n.createElement("a",{onClick:this.props.onClickAction},n.createElement("div",{className:"oo-image-style",style:e})),this.props.children),n.createElement("div",{className:this.props.contentTitleClassName,style:t,dangerouslySetInnerHTML:o.createMarkup(this.props.contentTitle)}))}});i.propTypes={skinConfig:n.PropTypes.shape({discoveryScreen:n.PropTypes.shape({contentTitle:n.PropTypes.shape({font:n.PropTypes.shape({color:n.PropTypes.string,fontFamily:n.PropTypes.string})})})})},t.exports=i},{"./utils":39,react:255}],26:[function(e,t){var n=e("react"),o=e("react-dom"),i=e("classnames"),r=e("../constants/constants"),a=e("./countDownClock"),s=e("./discoverItem"),l=e("../mixins/resizeMixin"),c=e("../components/icon"),u=n.createClass({displayName:"DiscoveryPanel",mixins:[l],getInitialState:function(){return{showDiscoveryCountDown:this.props.skinConfig.discoveryScreen.showCountDownTimerOnEndScreen||this.props.forceCountDownTimer,currentPage:1,componentHeight:null}},componentDidMount:function(){this.detectHeight()},handleResize:function(e){var t=this.props.responsiveView,n=e.responsiveView,o=this.state.currentPage*this.props.videosPerPage[t]-this.props.videosPerPage[t],i=Math.floor(o/e.videosPerPage[n])+1;this.setState({currentPage:i}),this.detectHeight()},handleLeftButtonClick:function(e){e.preventDefault(),this.setState({currentPage:this.state.currentPage-1})},handleRightButtonClick:function(e){e.preventDefault(),this.setState({currentPage:this.state.currentPage+1})},handleDiscoveryContentClick:function(e){var t={clickedVideo:this.props.discoveryData.relatedVideos[e],custom:this.props.discoveryData.custom};this.props.controller.sendDiscoveryClickEvent(t,!1)},shouldShowCountdownTimer:function(){return this.state.showDiscoveryCountDown&&this.props.playerState===r.STATE.END},handleDiscoveryCountDownClick:function(e){e.preventDefault(),this.setState({showDiscoveryCountDown:!1}),this.refs.CountDownClock.handleClick(e)},detectHeight:function(){var e=o.findDOMNode(this.refs.discoveryPanel);this.setState({componentHeight:e.getBoundingClientRect().height})},render:function(){var e=this.props.discoveryData.relatedVideos;e.length<1;for(var t=this.props.responsiveView,o=this.props.videosPerPage[t],r=o*(this.state.currentPage-1),l=o*this.state.currentPage,u=e.slice(r,l),p=i({"oo-discovery-content-name":!0,"oo-hidden":!this.props.skinConfig.discoveryScreen.contentTitle.show}),d=i({"oo-discovery-count-down-wrapper-style":!0,"oo-hidden":!this.state.showDiscoveryCountDown}),h=i({"oo-discovery-toaster-container-style":!0,"oo-flexcontainer":!0,"oo-scale-size":this.props.responsiveView==this.props.skinConfig.responsive.breakpoints.xs.id&&(this.props.componentWidth<=420||this.state.componentHeight<=175)||this.props.responsiveView==this.props.skinConfig.responsive.breakpoints.sm.id&&(this.props.componentWidth<=420||this.state.componentHeight<=320)}),f=i({"oo-left-button":!0,"oo-hidden":this.state.currentPage<=1}),m=i({"oo-right-button":!0,"oo-hidden":l>=e.length}),v=this.shouldShowCountdownTimer()?n.createElement("div",{className:d},n.createElement("a",{className:"oo-discovery-count-down-icon-style",onClick:this.handleDiscoveryCountDownClick},n.createElement(a,n.__spread({},this.props,{timeToShow:this.props.skinConfig.discoveryScreen.countDownTime,ref:"CountDownClock"})),n.createElement(c,n.__spread({},this.props,{icon:"pause"})))):null,g=[],E=0;E<u.length;E++)g.push(n.createElement(s,n.__spread({},this.props,{key:E,src:u[E].preview_image_url,contentTitle:u[E].name,contentTitleClassName:p,onClickAction:this.handleDiscoveryContentClick.bind(this,o*(this.state.currentPage-1)+E)}),v&&0===E&&this.state.currentPage<=1?v:null));return n.createElement("div",{className:"oo-content-panel oo-discovery-panel",ref:"discoveryPanel"},n.createElement("div",{className:h,id:"DiscoveryToasterContainer",ref:"DiscoveryToasterContainer"},g),n.createElement("a",{className:f,ref:"ChevronLeftButton",onClick:this.handleLeftButtonClick},n.createElement(c,n.__spread({},this.props,{icon:"left"}))),n.createElement("a",{className:m,ref:"ChevronRightButton",onClick:this.handleRightButtonClick},n.createElement(c,n.__spread({},this.props,{icon:"right"}))))}});u.propTypes={responsiveView:n.PropTypes.string,videosPerPage:n.PropTypes.objectOf(n.PropTypes.number),discoveryData:n.PropTypes.shape({relatedVideos:n.PropTypes.arrayOf(n.PropTypes.shape({preview_image_url:n.PropTypes.string,name:n.PropTypes.string}))}),skinConfig:n.PropTypes.shape({discoveryScreen:n.PropTypes.shape({showCountDownTimerOnEndScreen:n.PropTypes.bool,countDownTime:n.PropTypes.number,contentTitle:n.PropTypes.shape({show:n.PropTypes.bool})}),icons:n.PropTypes.objectOf(n.PropTypes.object)}),controller:n.PropTypes.shape({sendDiscoveryClickEvent:n.PropTypes.func})},u.defaultProps={videosPerPage:{xs:2,sm:4,md:6,lg:8},skinConfig:{discoveryScreen:{showCountDownTimerOnEndScreen:!0,countDownTime:10,contentTitle:{show:!0}},icons:{pause:{fontStyleClass:"oo-icon oo-icon-pause"},discovery:{fontStyleClass:"oo-icon oo-icon-topmenu-discovery"},left:{fontStyleClass:"oo-icon oo-icon-left"},right:{fontStyleClass:"oo-icon oo-icon-right"}},responsive:{breakpoints:{xs:{id:"xs"},sm:{id:"sm"},md:{id:"md"},lg:{id:"lg"}}}},discoveryData:{relatedVideos:[]},controller:{sendDiscoveryClickEvent:function(){}},responsiveView:"md"},t.exports=u},{"../components/icon":27,"../constants/constants":42,"../mixins/resizeMixin":46,"./countDownClock":23,"./discoverItem":25,classnames:58,react:255,"react-dom":63}],27:[function(e,t){var n=e("react"),o=e("./utils"),i=n.createClass({displayName:"Icon",shouldComponentUpdate:function(e){return e.icon!=this.props.icon},render:function(){var e=o.extend({fontFamily:this.props.skinConfig.icons[this.props.icon].fontFamilyName},this.props.style);return n.createElement("span",{className:this.props.skinConfig.icons[this.props.icon].fontStyleClass+" "+this.props.className,style:e,onMouseOver:this.props.onMouseOver,onMouseOut:this.props.onMouseOut,onClick:this.props.onClick},this.props.skinConfig.icons[this.props.icon].fontString)}});i.propTypes={icon:n.PropTypes.string,skinConfig:n.PropTypes.object,className:n.PropTypes.string,style:n.PropTypes.object},i.defaultProps={icon:"",skinConfig:{},className:"",style:{}},t.exports=i},{"./utils":39,react:255}],28:[function(e,t){var n=e("react"),o=n.createClass({displayName:"Logo",render:function(){var e=this.props.clickUrl?n.createElement("a",{href:this.props.clickUrl,target:this.props.target},n.createElement("img",{width:this.props.width,height:this.props.height,src:this.props.imageUrl})):n.createElement("img",{width:this.props.width,height:this.props.height,src:this.props.imageUrl});return n.createElement("div",{className:"oo-logo oo-control-bar-item",style:this.props.style},e)}});o.propTypes={imageUrl:n.PropTypes.string.isRequired,clickUrl:n.PropTypes.string,target:n.PropTypes.string,width:n.PropTypes.oneOfType([n.PropTypes.string,n.PropTypes.number]),height:n.PropTypes.oneOfType([n.PropTypes.string,n.PropTypes.number]),style:n.PropTypes.object},o.defaultProps={imageUrl:"/assets/images/ooyala.png",clickUrl:"",target:"_blank",width:null,height:null,style:{}},t.exports=o},{react:255}],29:[function(e,t){var n=e("react"),o=e("./utils"),i=e("../constants/constants"),r=e("classnames"),a=e("../mixins/animateMixin"),s=e("../components/icon"),l=n.createClass({displayName:"MoreOptionsPanel",mixins:[a],handleShareClick:function(){this.props.controller.toggleShareScreen()},handleQualityClick:function(){this.props.controller.toggleScreen(i.SCREEN.VIDEO_QUALITY_SCREEN)},handleDiscoveryClick:function(){this.props.controller.toggleDiscoveryScreen()},handleClosedCaptionClick:function(){this.props.controller.toggleScreen(i.SCREEN.CLOSEDCAPTION_SCREEN)},highlight:function(e){var t=this.props.skinConfig.moreOptionsScreen.iconStyle.active.color,n=this.props.skinConfig.moreOptionsScreen.iconStyle.active.opacity;o.highlight(e.target,n,t)},removeHighlight:function(e){var t=this.props.skinConfig.moreOptionsScreen.iconStyle.inactive.color,n=this.props.skinConfig.moreOptionsScreen.iconStyle.inactive.opacity;o.removeHighlight(e.target,n,t)},buildMoreOptionsButtonList:function(){for(var e={fontSize:this.props.skinConfig.moreOptionsScreen.iconSize+"px",color:this.props.skinConfig.moreOptionsScreen.iconStyle.inactive.color,opacity:this.props.skinConfig.moreOptionsScreen.iconStyle.inactive.opacity},t={quality:n.createElement("a",{className:"oo-quality oo-control-bar-item",onClick:this.handleQualityClick,key:"quality"},n.createElement(s,n.__spread({},this.props,{icon:"quality",style:e,onMouseOver:this.highlight,onMouseOut:this.removeHighlight}))),discovery:n.createElement("a",{className:"oo-discovery oo-control-bar-item",onClick:this.handleDiscoveryClick,key:"discovery"},n.createElement(s,n.__spread({},this.props,{icon:"discovery",style:e,onMouseOver:this.highlight,onMouseOut:this.removeHighlight}))),closedCaption:n.createElement("a",{className:"oo-closed-caption oo-control-bar-item",onClick:this.handleClosedCaptionClick,key:"closedCaption"},n.createElement(s,n.__spread({},this.props,{icon:"cc",style:e,onMouseOver:this.highlight,onMouseOut:this.removeHighlight}))),share:n.createElement("a",{className:"oo-share oo-control-bar-item",onClick:this.handleShareClick,key:"share"},n.createElement(s,n.__spread({},this.props,{icon:"share",style:e,onMouseOver:this.highlight,onMouseOut:this.removeHighlight}))),settings:n.createElement("div",{className:"oo-settings",key:"settings"},n.createElement(s,n.__spread({},this.props,{icon:"setting",style:e,onMouseOver:this.highlight,onMouseOut:this.removeHighlight})))},o=this.props.controller.state.moreOptionsItems,i=[],r=0;r<o.length;r++)i.push(t[o[r].name]);return i},render:function(){var e=r({"oo-more-options-items":!0,"oo-animate-more-options":this.state.animate}),t=this.buildMoreOptionsButtonList();return n.createElement("div",{className:"oo-content-panel oo-more-options-panel"},n.createElement("div",{className:e},t))}});l.defaultProps={skinConfig:{moreOptionsScreen:{iconStyle:{active:{color:"#FFF",opacity:1},inactive:{color:"#FFF",opacity:.6}}}}},t.exports=l},{"../components/icon":27,"../constants/constants":42,"../mixins/animateMixin":45,"./utils":39,classnames:58,react:255}],30:[function(e,t){var n=e("react"),o=e("react-dom"),i=e("../mixins/resizeMixin"),r=e("./thumbnail"),a=e("./thumbnailCarousel"),s=e("../constants/constants"),l=n.createClass({displayName:"ScrubberBar",mixins:[i],getInitialState:function(){return this.lastScrubX=null,this.isMobile=this.props.controller.state.isMobile,this.touchInitiated=!1,{scrubberBarWidth:0,playheadWidth:0,scrubbingPlayheadX:0,hoveringX:0,currentPlayhead:0,transitionedDuringSeek:!1}},componentWillMount:function(){this.props.seeking&&this.setState({transitionedDuringSeek:!0})},componentDidMount:function(){this.handleResize()},componentWillReceiveProps:function(e){this.state.transitionedDuringSeek&&!e.seeking&&this.setState({transitionedDuringSeek:!1})},componentWillUnmount:function(){this.isMobile?(o.findDOMNode(this).parentNode.removeEventListener("touchmove",this.handlePlayheadMouseMove),document.removeEventListener("touchend",this.handlePlayheadMouseUp,!0)):(o.findDOMNode(this).parentNode.removeEventListener("mousemove",this.handlePlayheadMouseMove),document.removeEventListener("mouseup",this.handlePlayheadMouseUp,!0))},getResponsiveUIMultiple:function(e){var t=this.props.skinConfig.responsive.breakpoints[e].multiplier;return t},handleResize:function(){this.setState({scrubberBarWidth:o.findDOMNode(this.refs.scrubberBar).clientWidth,playheadWidth:o.findDOMNode(this.refs.playhead).clientWidth})},handlePlayheadMouseDown:function(e){this.props.controller.state.screenToShow!=s.SCREEN.AD_SCREEN&&(this.props.controller.startHideControlBarTimer(),e.target.className.match("playhead")&&"mousedown"!==e.type&&(this.touchInitiated=!0),(this.touchInitiated&&"mousedown"!==e.type||!this.touchInitiated&&"mousedown"===e.type)&&(e.preventDefault(),this.touchInitiated&&(e=e.touches[0]),this.props.controller.beginSeeking(),this.props.controller.renderSkin(),this.lastScrubX||(this.lastScrubX=e.clientX),this.touchInitiated?(o.findDOMNode(this).parentNode.addEventListener("touchmove",this.handlePlayheadMouseMove),document.addEventListener("touchend",this.handlePlayheadMouseUp,!0)):(o.findDOMNode(this).parentNode.addEventListener("mousemove",this.handlePlayheadMouseMove),document.addEventListener("mouseup",this.handlePlayheadMouseUp,!0))))},handlePlayheadMouseMove:function(e){if(this.props.controller.startHideControlBarTimer(),e.preventDefault(),this.props.seeking&&this.props.duration>0){this.touchInitiated&&(e=e.touches[0]);var t=e.clientX-this.lastScrubX,n=this.props.currentPlayhead*this.state.scrubberBarWidth/this.props.duration+t;this.props.controller.updateSeekingPlayhead(n/this.state.scrubberBarWidth*this.props.duration),this.setState({scrubbingPlayheadX:n}),this.lastScrubX=e.clientX}},handlePlayheadMouseUp:function(e){this.isMounted()&&(this.props.controller.startHideControlBarTimer(),e.preventDefault(),e.stopPropagation(),e.cancelBubble=!0,this.lastScrubX=null,this.touchInitiated?(o.findDOMNode(this).parentNode.removeEventListener("touchmove",this.handlePlayheadMouseMove),document.removeEventListener("touchend",this.handlePlayheadMouseUp,!0)):(o.findDOMNode(this).parentNode.removeEventListener("mousemove",this.handlePlayheadMouseMove),document.removeEventListener("mouseup",this.handlePlayheadMouseUp,!0)),this.props.controller.seek(this.props.currentPlayhead),this.isMounted()&&(this.setState({currentPlayhead:this.props.currentPlayhead,scrubbingPlayheadX:0}),this.props.controller.endSeeking()),this.touchInitiated=!1)},handleScrubberBarMouseDown:function(e){if(this.props.controller.state.screenToShow!=s.SCREEN.AD_SCREEN&&!(e.target.className.match("oo-playhead")||this.touchInitiated&&"mousedown"===e.type)){var t=0;this.touchInitiated="touchstart"===e.type,t=this.touchInitiated?e.targetTouches[0].pageX-e.target.getBoundingClientRect().left:void 0==e.nativeEvent.offsetX?e.nativeEvent.layerX:e.nativeEvent.offsetX,this.setState({scrubbingPlayheadX:t}),this.props.controller.updateSeekingPlayhead(t/this.state.scrubberBarWidth*this.props.duration),this.handlePlayheadMouseDown(e)}},handleScrubberBarMouseOver:function(e){this.props.skinConfig.controlBar.scrubberBar.thumbnailPreview&&this.props.controller.state.screenToShow!=s.SCREEN.AD_SCREEN&&(this.isMobile||e.target.className.match("oo-playhead")||this.setState({hoveringX:e.nativeEvent.offsetX}))},handleScrubberBarMouseMove:function(e){this.handleScrubberBarMouseOver(e)},handleScrubberBarMouseOut:function(){this.props.controller.state.thumbnails&&this.setState({hoveringX:0})},render:function(){var e={backgroundColor:this.props.skinConfig.controlBar.scrubberBar.backgroundColor},t={width:Math.min(parseFloat(this.props.buffered)/parseFloat(this.props.duration)*100,100)+"%",backgroundColor:this.props.skinConfig.controlBar.scrubberBar.bufferedColor},o={width:Math.min(parseFloat(this.props.currentPlayhead)/parseFloat(this.props.duration)*100,100)+"%",backgroundColor:this.props.skinConfig.controlBar.scrubberBar.playedColor?this.props.skinConfig.controlBar.scrubberBar.playedColor:this.props.skinConfig.general.accentColor},i={backgroundColor:this.props.skinConfig.controlBar.scrubberBar.playedColor?this.props.skinConfig.controlBar.scrubberBar.playedColor:this.props.skinConfig.general.accentColor},l={};this.state.transitionedDuringSeek||(l.left=this.state.scrubbingPlayheadX&&0!=this.state.scrubbingPlayheadX?this.state.scrubbingPlayheadX:parseFloat(this.props.currentPlayhead)/parseFloat(this.props.duration)*this.state.scrubberBarWidth,l.left=Math.max(Math.min(this.state.scrubberBarWidth-parseInt(this.state.playheadWidth)/2,l.left),0),isNaN(l.left)&&(l.left=0));var c=this.handlePlayheadMouseDown,u=this.handleScrubberBarMouseDown,p=this.handleScrubberBarMouseOver,d=this.handleScrubberBarMouseOut,h=this.handleScrubberBarMouseMove,f="oo-played-indicator",m="oo-playhead",v="oo-scrubber-bar";this.props.controller.state.screenToShow==s.SCREEN.AD_SCREEN&&(m+=" oo-ad-playhead",f+=" oo-played-ad-indicator",c=null,e.backgroundColor=this.props.skinConfig.controlBar.adScrubberBar.backgroundColor,t.backgroundColor=this.props.skinConfig.controlBar.adScrubberBar.bufferedColor,o.backgroundColor=this.props.skinConfig.controlBar.adScrubberBar.playedColor);var g=null,E=null,y=0,b=0,C=null;return this.props.controller.state.thumbnails&&(this.state.scrubbingPlayheadX||this.lastScrubX||this.state.hoveringX)&&(this.state.scrubbingPlayheadX?(b=this.state.scrubbingPlayheadX,y=this.state.scrubbingPlayheadX/this.state.scrubberBarWidth*this.props.duration,m+=" oo-playhead-scrubbing",E=n.createElement(a,{thumbnails:this.props.controller.state.thumbnails,duration:this.props.duration,hoverTime:y>0?y:0,scrubberBarWidth:this.state.scrubberBarWidth})):this.lastScrubX?(b=this.props.currentPlayhead*this.state.scrubberBarWidth/this.props.duration,y=this.props.currentPlayhead,m+=" oo-playhead-scrubbing"):this.state.hoveringX&&(b=this.state.hoveringX,y=this.state.hoveringX/this.state.scrubberBarWidth*this.props.duration,C={width:Math.min(parseFloat(y)/parseFloat(this.props.duration)*100,100)+"%",backgroundColor:this.props.skinConfig.controlBar.scrubberBar.playedColor?this.props.skinConfig.controlBar.scrubberBar.playedColor:this.props.skinConfig.general.accentColor},v+=" oo-scrubber-bar-hover",m+=" oo-playhead-hovering"),E||(g=n.createElement(r,{thumbnails:this.props.controller.state.thumbnails,hoverPosition:b,duration:this.props.duration,hoverTime:y>0?y:0}))),n.createElement("div",{className:"oo-scrubber-bar-container",ref:"scrubberBarContainer",onMouseOver:p,onMouseOut:d,onMouseMove:h},g,E,n.createElement("div",{className:"oo-scrubber-bar-padding",ref:"scrubberBarPadding",onMouseDown:u,onTouchStart:u},n.createElement("div",{ref:"scrubberBar",className:v,style:e},n.createElement("div",{className:"oo-buffered-indicator",style:t}),n.createElement("div",{className:"oo-hovered-indicator",style:C}),n.createElement("div",{className:f,style:o}),n.createElement("div",{className:"oo-playhead-padding",style:l,onMouseDown:c,onTouchStart:c},n.createElement("div",{ref:"playhead",className:m,style:i})))))}});l.defaultProps={skinConfig:{controlBar:{scrubberBar:{backgroundColor:"rgba(5,175,175,1)",bufferedColor:"rgba(127,5,127,1)",playedColor:"rgba(67,137,5,1)"},adScrubberBar:{backgroundColor:"rgba(175,175,5,1)",bufferedColor:"rgba(127,5,127,1)",playedColor:"rgba(5,63,128,1)"}}}},t.exports=l},{"../constants/constants":42,"../mixins/resizeMixin":46,"./thumbnail":36,"./thumbnailCarousel":37,react:255,"react-dom":63}],31:[function(e,t){var n=e("react"),o=e("classnames"),i=e("./utils"),r=e("../constants/constants"),a=n.createClass({displayName:"SharePanel",tabs:{SHARE:"social",EMBED:"embed"},getInitialState:function(){var e=i.getPropertyValue(this.props.skinConfig,"shareScreen.shareContent"),t=i.getPropertyValue(this.props.skinConfig,"shareScreen.socialContent",[]),n=e?e[0]:null;if(e&&!t.length)for(var o=0;o<e.length;o++)if("social"!==e[o]){n=e[o];break}return{activeTab:n,hasError:!1}},getActivePanel:function(){if(this.state.activeTab===this.tabs.SHARE){var e=i.getLocalizedString(this.props.language,r.SKIN_TEXT.SHARE_CALL_TO_ACTION,this.props.localizableStrings),t=_.uniq(i.getPropertyValue(this.props.skinConfig,"shareScreen.socialContent",[])),o=[];return t.forEach(function(e){switch(e){case"twitter":o.push(n.createElement("a",{className:"oo-twitter",onClick:this.handleTwitterClick}));break;case"facebook":o.push(n.createElement("a",{className:"oo-facebook",onClick:this.handleFacebookClick}));break;case"google+":o.push(n.createElement("a",{className:"oo-google-plus",onClick:this.handleGPlusClick}));break;case"email":o.push(n.createElement("a",{className:"oo-email-share",onClick:this.handleEmailClick}))}},this),n.createElement("div",{className:"oo-share-tab-panel"},n.createElement("div",{className:"oo-social-action-text oo-text-capitalize"},e),o)}if(this.state.activeTab===this.tabs.EMBED){try{var a=this.props.skinConfig.shareScreen.embed.source.replace("<ASSET_ID>",this.props.assetId).replace("<PLAYER_ID>",this.props.playerParam.playerBrandingId).replace("<PUBLISHER_ID>",this.props.playerParam.pcode)}catch(s){a=""}return n.createElement("div",{className:"oo-share-tab-panel"},n.createElement("textarea",{className:"oo-form-control oo-embed-form",rows:"3",value:a,readOnly:!0}))}},handleEmailClick:function(e){e.preventDefault();var t=i.getLocalizedString(this.props.language,r.SKIN_TEXT.EMAIL_BODY,this.props.localizableStrings),n="mailto:";n+="?subject="+encodeURIComponent(this.props.contentTree.title),n+="&body="+encodeURIComponent(t+location.href);var o=window.open(n,"email","height=315,width=780");setTimeout(function(){try{{o.location.href}o.close()}catch(e){}},2e3)},handleFacebookClick:function(){var e="http://www.facebook.com/sharer.php";e+="?u="+encodeURIComponent(location.href),window.open(e,"facebook window","height=315,width=780")},handleGPlusClick:function(){var e="https://plus.google.com/share";e+="?url="+encodeURIComponent(location.href),window.open(e,"google+ window","menubar=no,toolbar=no,resizable=yes,scrollbars=yes,height=600,width=600")},handleTwitterClick:function(){var e="https://twitter.com/intent/tweet";e+="?text="+encodeURIComponent(this.props.contentTree.title+": "),e+="&url="+encodeURIComponent(location.href),window.open(e,"twitter window","height=300,width=750")},showPanel:function(e){this.setState({activeTab:e})},render:function(){var e=i.getPropertyValue(this.props.skinConfig,"shareScreen.shareContent"),t=i.getPropertyValue(this.props.skinConfig,"shareScreen.socialContent",[]);if(!e)return null;for(var a=!1,s=!1,l=0;l<e.length;l++)e[l]==this.tabs.EMBED&&(a=!0),e[l]==this.tabs.SHARE&&t.length&&(s=!0);var c=o({"oo-share-tab":!0,"oo-active":this.state.activeTab==this.tabs.SHARE,"oo-hidden":!s}),u=o({"oo-embed-tab":!0,"oo-active":this.state.activeTab==this.tabs.EMBED,"oo-hidden":!a}),p=i.getLocalizedString(this.props.language,r.SKIN_TEXT.SHARE,this.props.localizableStrings),d=i.getLocalizedString(this.props.language,r.SKIN_TEXT.EMBED,this.props.localizableStrings);
    return n.createElement("div",{className:"oo-content-panel oo-share-panel"},n.createElement("div",{className:"oo-tab-row"},n.createElement("a",{className:c,onClick:this.showPanel.bind(this,this.tabs.SHARE)},p),n.createElement("a",{className:u,onClick:this.showPanel.bind(this,this.tabs.EMBED)},d)),this.getActivePanel())}});a.defaultProps={contentTree:{title:""}},t.exports=a},{"../constants/constants":42,"./utils":39,classnames:58,react:255}],32:[function(e,t){var n=e("react"),o=e("./utils"),i=n.createClass({displayName:"Slider",componentDidMount:function(){this.handleSliderColoring(this.props)},componentWillReceiveProps:function(e){e.value!=this.props.value&&this.handleSliderColoring(e)},handleSliderColoring:function(e){if(!o.isEdge()){var t=this.refs[this.props.itemRef],n=window.getComputedStyle(t,null),i=n.getPropertyValue("border-left-color"),r=n.getPropertyValue("border-right-color"),a=(e.value-e.minValue)/(e.maxValue-e.minValue);t.style.backgroundImage=["-webkit-gradient(","linear, ","left top, ","right top, ","color-stop("+a+", "+i+"), ","color-stop("+a+", "+r+")",")"].join("")}},changeValue:function(e){"change"!=e.type||o.isIE()?o.isIE()&&this.props.onChange(e):(this.props.onChange(e),this.handleSliderColoring(this.props))},render:function(){return n.createElement("input",{type:"range",className:this.props.className,min:this.props.minValue,max:this.props.maxValue,value:this.props.value,step:this.props.step,ref:this.props.itemRef,onChange:this.changeValue,onClick:this.changeValue,onMouseMove:this.changeValue})}});t.exports=i},{"./utils":39,react:255}],33:[function(e,t){var n=e("react"),o=n.createClass({displayName:"Spinner",render:function(){return n.createElement("div",{className:"oo-spinner-screen"},n.createElement("div",{className:"oo-spinner-wrapper"},n.createElement("img",{src:this.props.loadingImage,className:"oo-spinner"})))}});t.exports=o},{react:255}],34:[function(e,t){var n=e("react"),o=e("classnames"),i=e("./icon"),r=n.createClass({displayName:"Tabs",highlight:function(e){this.props.skinConfig.general.accentColor&&(e.target.style.color=this.props.skinConfig.general.accentColor)},removeHighlight:function(e){this.props.skinConfig.general.accentColor&&(e.target.style.color="")},getInitialState:function(){return{tabActive:this.props.tabActive}},componentDidMount:function(){var e=this.state.tabActive,t=this.refs["tab-panel"],n=this.refs["tab-menu-"+e];this.props.onMount&&this.props.onMount(e,t,n)},componentWillReceiveProps:function(e){e.tabActive&&e.tabActive!==this.props.tabActive&&this.setState({tabActive:e.tabActive})},setActive:function(e,t){t.preventDefault();var n=this.props.onAfterChange,o=this.props.onBeforeChange,i=this.refs["tab-panel"],r=this.refs["tab-menu-"+e];if(o){var a=o(e,i,r);if(a===!1)return}this.setState({tabActive:e},function(){n&&n(e,i,r)})},getMenuItems:function(){if(!this.props.children)throw new Error("Tabs must contain at least one Tabs.Panel");Array.isArray(this.props.children)||(this.props.children=[this.props.children]);var e=this.props.children.map(function(e){return"function"==typeof e?e():e}).filter(function(e){return e}).map(function(e,t){var i="tab-menu-"+(t+1),r=e.props.title,a={},s=o("tabs-menu-item",this.state.tabActive===t+1&&"is-active","tabs-menu-item-"+t);if(this.state.tabActive===t+1&&this.props.skinConfig.general.accentColor){var l="solid ";l+=this.props.skinConfig.general.accentColor,a={borderBottom:l}}return n.createElement("li",{ref:i,key:t,className:s},n.createElement("a",{onClick:this.setActive.bind(this,t+1),style:a,onMouseOver:this.highlight,onMouseOut:this.removeHighlight},r))}.bind(this));return n.createElement("nav",{className:"tabs-navigation",ref:"tabsNavigation"},n.createElement("ul",{className:"tabs-menu"},e))},getSelectedPanel:function(){var e=this.state.tabActive-1,t=this.props.children[e];return n.createElement("article",{ref:"tab-panel",className:"tab-panel"},t)},handleLeftChevronClick:function(e){e.preventDefault(),this.refs.tabsNavigation.scrollLeft-=30},handleRightChevronClick:function(e){e.preventDefault(),this.refs.tabsNavigation.scrollLeft+=30},render:function(){var e=o("tabs",this.props.className),t=o({"oo-left-tab-button":!0,"oo-left-tab-button-active":this.props.showScrollButtons}),r=o({"oo-right-tab-button":!0,"oo-right-tab-button-active":this.props.showScrollButtons});return n.createElement("div",{className:e},this.getMenuItems(),this.getSelectedPanel(),n.createElement("a",{className:t,ref:"leftChevron",onClick:this.handleLeftChevronClick},n.createElement(i,n.__spread({},this.props,{icon:"left"}))),n.createElement("a",{className:r,ref:"rightChevron",onClick:this.handleRightChevronClick},n.createElement(i,n.__spread({},this.props,{icon:"right"}))))}});r.propTypes={className:n.PropTypes.oneOfType([n.PropTypes.array,n.PropTypes.string,n.PropTypes.object]),tabActive:n.PropTypes.number,onMount:n.PropTypes.func,onBeforeChange:n.PropTypes.func,onAfterChange:n.PropTypes.func,children:n.PropTypes.oneOfType([n.PropTypes.array,n.PropTypes.element]).isRequired},r.defaultProps={tabActive:1},t.exports=r,r.Panel=n.createClass({displayName:"Panel",propTypes:{title:n.PropTypes.string.isRequired,children:n.PropTypes.oneOfType([n.PropTypes.array,n.PropTypes.element]).isRequired},render:function(){return n.createElement("span",null,this.props.children)}})},{"./icon":27,classnames:58,react:255}],35:[function(e,t){var n=e("react"),o=e("./utils"),i=1,r=n.createClass({displayName:"TextTrackPanel",colorMap:{White:"255,255,255",Blue:"0,0,255",Magenta:"255,0,255",Green:"0,255,0",Yellow:"255,255,0",Red:"255,0,0",Cyan:"0,255,255",Black:"0,0,0",Transparent:"0,0,0"},fontTypeMap:{"Monospaced Serif":'"Courier New", Courier, "Nimbus Mono L", "Cutive Mono", monospace',"Proportional Serif":'"Times New Roman", Times, Georgia, Cambria, "PT Serif Caption", serif',"Monospaced Sans-Serif":'"Deja Vu Sans Mono", "Lucida Console", Monaco, Consolas, "PT Mono", monospace',"Proportional Sans-Serif":'Roboto, "Arial Unicode Ms", Arial, Helvetica, Verdana, "PT Sans Caption", sans-serif',Casual:'"Comic Sans MS", Impact, Handlee, fantasy',Cursive:'"Monotype Corsiva", "URW Chancery L", "Apple Chancery", "Dancing Script", cursive',"Small Capitals":'"Arial Unicode Ms", Arial, Helvetica, Verdana, "Marcellus SC", sans-serif'},fontVariantMap:{"Monospaced Serif":"normal","Proportional Serif":"normal","Monospaced Sans-Serif":"normal","Proportional Sans-Serif":"normal",Casual:"normal",Cursive:"normal","Small Capitals":"small-caps"},fontSizeMap:{Small:{xs:.8*i+"em",sm:1*i+"em",md:1.2*i+"em",lg:1.4*i+"em"},Medium:{xs:1.2*i+"em",sm:1.4*i+"em",md:1.6*i+"em",lg:1.8*i+"em"},Large:{xs:1.6*i+"em",sm:1.8*i+"em",md:2*i+"em",lg:2.2*i+"em"},"Extra Large":{xs:2*i+"em",sm:2.2*i+"em",md:2.4*i+"em",lg:2.6*i+"em"}},textEnhancementMap:{Uniform:"none",Depressed:"1px 1px white",Raised:"-1px -1px white, -3px 0px 5px black",Shadow:"2px 2px 2px #1a1a1a"},setWindowBackgroundStyle:function(e,t){return"Transparent"==e&&(t=0),{backgroundColor:"rgba("+this.colorMap[e]+","+t+")"}},setTextStyle:function(e,t,n,o,i){return{color:"rgba("+this.colorMap[e]+","+t+")",fontFamily:this.fontTypeMap[n],fontVariant:this.fontVariantMap[n],fontSize:this.fontSizeMap[o][this.props.responsiveView],textShadow:this.textEnhancementMap[i]}},render:function(){return this.props.cueText?n.createElement("div",{className:"oo-text-track-container"},n.createElement("div",{className:"oo-text-track-window",style:this.setWindowBackgroundStyle(this.props.closedCaptionOptions.windowColor,this.props.closedCaptionOptions.windowOpacity)},n.createElement("div",{className:"oo-text-track-background",style:this.setWindowBackgroundStyle(this.props.closedCaptionOptions.backgroundColor,this.props.closedCaptionOptions.backgroundOpacity)},n.createElement("div",{className:"oo-text-track",style:this.setTextStyle(this.props.closedCaptionOptions.textColor,this.props.closedCaptionOptions.textOpacity,this.props.closedCaptionOptions.fontType,this.props.closedCaptionOptions.fontSize,this.props.closedCaptionOptions.textEnhancement)},n.createElement("span",{dangerouslySetInnerHTML:o.createMarkup(this.props.cueText)}))))):null}});r.propTypes={cueText:n.PropTypes.string,closedCaptionOptions:n.PropTypes.shape({textColor:n.PropTypes.string,windowColor:n.PropTypes.string,backgroundColor:n.PropTypes.string,textOpacity:n.PropTypes.oneOfType([n.PropTypes.string,n.PropTypes.number]),backgroundOpacity:n.PropTypes.oneOfType([n.PropTypes.string,n.PropTypes.number]),windowOpacity:n.PropTypes.oneOfType([n.PropTypes.string,n.PropTypes.number]),fontType:n.PropTypes.string,fontSize:n.PropTypes.string,textEnhancement:n.PropTypes.string})},r.defaultProps={cueText:null,closedCaptionOptions:{textColor:"White",windowColor:"Transparent",backgroundColor:"Black",textOpacity:1,backgroundOpacity:.6,windowOpacity:0,fontType:"Proportional Sans-Serif",fontSize:"Medium",textEnhancement:"Uniform"}},t.exports=r},{"./utils":39,react:255}],36:[function(e,t){var n=e("react"),o=e("./utils"),i=n.createClass({displayName:"Thumbnail",shouldComponentUpdate:function(e){return e.hoverPosition!=this.props.hoverPosition},render:function(){var e=o.findThumbnail(this.props.thumbnails,this.props.hoverTime,this.props.duration),t=isFinite(parseInt(this.props.hoverTime))?o.formatSeconds(parseInt(this.props.hoverTime)):null,i={};return i.left=this.props.hoverPosition,o.isValidString(e.url)&&(i.backgroundImage="url('"+e.url+"')"),n.createElement("div",{className:"oo-scrubber-thumbnail-container"},n.createElement("div",{className:"oo-thumbnail",ref:"thumbnail",style:i},n.createElement("div",{className:"oo-thumbnail-time"},t)))}});i.defaultProps={thumbnails:{},hoverPosition:0,duration:0,hoverTime:0},t.exports=i},{"./utils":39,react:255}],37:[function(e,t){var n=e("react"),o=e("react-dom"),i=e("./utils"),r=n.createClass({displayName:"ThumbnailCarousel",getInitialState:function(){return{thumbnailWidth:0,thumbnailHeight:0,centerThumbnailWidth:0,centerThumbnailHeight:0,thumbnailPadding:6}},componentDidMount:function(){var e=o.findDOMNode(this.refs.thumbnail),t=o.findDOMNode(this.refs.thumbnailCarousel),n=e?window.getComputedStyle(e,null).getPropertyValue("padding"):0;n=parseFloat(n);var i=isNaN(n)?this.state.thumbnailPadding:n;if(e&&t)if(e.clientWidth&&t.clientWidth)this.setState({thumbnailWidth:e.clientWidth,thumbnailHeight:e.clientHeight,centerThumbnailWidth:t.clientWidth,centerThumbnailHeight:t.clientHeight,thumbnailPadding:i});else{var r=e?window.getComputedStyle(e,null).getPropertyValue("width"):0;r=parseFloat(r);var a=isNaN(r)?parseInt(this.props.thumbnailWidth):r,s=e?window.getComputedStyle(e,null).getPropertyValue("height"):0;s=parseFloat(s);var l=isNaN(s)?parseInt(this.props.thumbnailHeight):s,c=t?window.getComputedStyle(t,null).getPropertyValue("width"):0;c=parseFloat(c);var u=isNaN(c)?parseInt(this.props.carouselWidth):c,p=t?window.getComputedStyle(t,null).getPropertyValue("height"):0;p=parseFloat(p);var d=isNaN(p)?parseInt(this.props.carouselHeight):p;this.setState({thumbnailWidth:a,thumbnailHeight:l,centerThumbnailWidth:u,centerThumbnailHeight:d,thumbnailPadding:i})}},findThumbnailsAfter:function(e){for(var t=(e.scrubberBarWidth+e.centerWidth)/2,o=[],r=e.pos+1,a=0;r<e.timeSlices.length;r++,a++){var s=t+e.padding+a*(e.imgWidth+e.padding);if(s+e.imgWidth<=e.scrubberBarWidth){var l={left:s,top:e.top},c=e.thumbnails.data.thumbnails[e.timeSlices[r]][e.width].url;i.isValidString(c)&&(l.backgroundImage="url('"+c+"')"),o.push(n.createElement("div",{className:"oo-thumbnail-carousel-image",key:r,ref:"thumbnail",style:l}))}}return o},findThumbnailsBefore:function(e){for(var t=(e.scrubberBarWidth-e.centerWidth)/2,o=[],r=e.pos-1,a=0;r>=0;r--,a++){var s=t-(a+1)*(e.imgWidth+e.padding);if(s>=0){var l={left:s,top:e.top},c=e.thumbnails.data.thumbnails[e.timeSlices[r]][e.width].url;i.isValidString(c)&&(l.backgroundImage="url('"+c+"')"),o.push(n.createElement("div",{className:"oo-thumbnail-carousel-image",key:r,ref:"thumbnail",style:l}))}}return o},render:function(){var e=i.findThumbnail(this.props.thumbnails,this.props.hoverTime,this.props.duration),t={thumbnails:this.props.thumbnails,timeSlices:this.props.thumbnails.data.available_time_slices,width:this.props.thumbnails.data.available_widths[0],imgWidth:this.state.thumbnailWidth,centerWidth:this.state.centerThumbnailWidth,scrubberBarWidth:this.props.scrubberBarWidth,top:this.state.centerThumbnailHeight-this.state.thumbnailHeight,pos:e.pos,padding:this.state.thumbnailPadding},o=this.findThumbnailsBefore(t),r=this.findThumbnailsAfter(t),a={left:(t.scrubberBarWidth-t.centerWidth)/2};i.isValidString(e.url)&&(a.backgroundImage="url('"+e.url+"')");var s=isFinite(parseInt(this.props.hoverTime))?i.formatSeconds(parseInt(this.props.hoverTime)):null;return n.createElement("div",{className:"oo-scrubber-carousel-container"},o,n.createElement("div",{className:"oo-thumbnail-carousel-center-image",ref:"thumbnailCarousel",style:a},n.createElement("div",{className:"oo-thumbnail-carousel-time"},s)),r)}});r.defaultProps={thumbnails:{},duration:0,hoverTime:0,scrubberBarWidth:0},t.exports=r},{"./utils":39,react:255,"react-dom":63}],38:[function(e,t){var n=e("react"),o=e("./../constants/constants"),i=e("./utils"),r=e("./closeButton"),a=e("./countDownClock"),s=e("../components/icon"),l=n.createClass({displayName:"UpNextPanel",closeUpNextPanel:function(){this.props.controller.upNextDismissButtonClicked()},handleStartUpNextClick:function(e){e.preventDefault();var t={clickedVideo:this.props.upNextInfo.upNextData,custom:{source:o.SCREEN.UP_NEXT_SCREEN,countdown:0,autoplay:!0}};this.props.controller.sendDiscoveryClickEvent(t,!1)},render:function(){var e=i.getLocalizedString(this.props.language,o.SKIN_TEXT.UP_NEXT,this.props.localizableStrings),t={};return i.isValidString(this.props.upNextInfo.upNextData.preview_image_url)&&(t.backgroundImage="url('"+this.props.upNextInfo.upNextData.preview_image_url+"')"),n.createElement("div",{className:"oo-up-next-panel"},n.createElement("a",{className:"oo-up-next-content",onClick:this.handleStartUpNextClick,style:t},n.createElement(s,n.__spread({},this.props,{icon:"play"}))),n.createElement("div",{className:"oo-content-metadata"},n.createElement("div",{className:"oo-up-next-title"},n.createElement(a,n.__spread({},this.props,{timeToShow:this.props.skinConfig.upNext.timeToShow,currentPlayhead:this.props.currentPlayhead})),n.createElement("div",{className:"oo-up-next-title-text oo-text-truncate"},e,": ",n.createElement("span",{dangerouslySetInnerHTML:i.createMarkup(this.props.upNextInfo.upNextData.name)}))),n.createElement("div",{className:"oo-content-description oo-text-truncate",dangerouslySetInnerHTML:i.createMarkup(this.props.upNextInfo.upNextData.description)})),n.createElement(r,n.__spread({},this.props,{cssClass:"oo-up-next-close-btn",closeAction:this.closeUpNextPanel})))}});l.propTypes={upNextInfo:n.PropTypes.shape({upNextData:n.PropTypes.shape({preview_image_url:n.PropTypes.string,name:n.PropTypes.string,description:n.PropTypes.string})}),skinConfig:n.PropTypes.shape({upNext:n.PropTypes.shape({timeToShow:n.PropTypes.number}),icons:n.PropTypes.objectOf(n.PropTypes.object)})},l.defaultProps={skinConfig:{upNext:{timeToShow:10},icons:{play:{fontStyleClass:"oo-icon oo-icon-play"},dismiss:{fontStyleClass:"oo-icon oo-icon-close"}}},upNextInfo:{upNextData:{}},controller:{upNextDismissButtonClicked:function(){},sendDiscoveryClickEvent:function(){}}},t.exports=l},{"../components/icon":27,"./../constants/constants":42,"./closeButton":9,"./countDownClock":23,"./utils":39,react:255}],39:[function(e,t){var n=e("deepmerge"),o={truncateTextToWidth:function(e,t){var n=document.createElement("span");n.style.visibility="hidden",n.style.position="absolute",n.style.top="0",n.style.left="0",n.style.whiteSpace="nowrap",n.innerHTML=t,e.appendChild(n);var o=e.clientWidth,i=n.scrollWidth,r="";if(i>1.8*o){var a=o/i,s=1.8*Math.floor(a*t.length)-3;r=t.slice(0,s)+"..."}else r=t;return e.removeChild(n),r},clone:function(e){var t={};for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t},extend:function(e,t){var n=o.clone(e);for(var i in t)t.hasOwnProperty(i)&&(n[i]=t[i]);return n},formatSeconds:function(e){var t=Math.abs(e),n=parseInt(t,10)%60,o=parseInt(t/3600,10),i=parseInt((t-3600*o)/60,10);10>o&&(o="0"+o),10>i&&(i="0"+i),10>n&&(n="0"+n);var r=parseInt(o,10)>0?o+":"+i+":"+n:i+":"+n;return e>=0?r:"-"+r},isSafari:function(){return!!window.navigator.userAgent.match(/AppleWebKit/)&&!window.navigator.userAgent.match(/Chrome/)},isChrome:function(){return!!window.navigator.userAgent.match(/Chrome/)&&!!window.navigator.vendor.match(/Google Inc/)},isEdge:function(){return!!window.navigator.userAgent.match(/Edge/)},isIE:function(){return!!window.navigator.userAgent.match(/MSIE/)||!!window.navigator.userAgent.match(/Trident/)},isAndroid:function(){var e=window.navigator.appVersion;return!!e.match(/Android/)},isIos:function(){var e=window.navigator.platform;return!!(e.match(/iPhone/)||e.match(/iPad/)||e.match(/iPod/))},isIPhone:function(){var e=window.navigator.platform;return!(!e.match(/iPhone/)&&!e.match(/iPod/))},isMobile:function(){return this.isAndroid()||this.isIos()},isIE10:function(){return!!window.navigator.userAgent.match(/MSIE 10/)},getLanguageToUse:function(e){var t,n,o=e.localization;if(t=o.defaultLanguage,!t){t=window.navigator.languages?window.navigator.languages[0]:window.navigator.browserLanguage||window.navigator.userLanguage||window.navigator.language;for(var i=t.substr(0,2),r=0;r<o.availableLanguageFile.length;r++)n=o.availableLanguageFile[r],i==n.language&&(t=i)}return t},getLocalizedString:function(e,t,n){try{return n[e][t]}catch(o){return""}},getPropertyValue:function(e,t,n){var o=null,i=e,r=null;try{for(var a=t.split("."),s=0;s<a.length;s++)r=a[s],i=o=i[r];return o||n}catch(l){return n}},convertStringToNumber:function(e){return e.toString().indexOf("%")>-1&&(e=parseInt(e)/100),isFinite(Number(e))?Number(e):0},highlight:function(e,t,n){e.style.opacity=t,e.style.color=n,e.style.WebkitFilter="drop-shadow(0px 0px 3px rgba(255,255,255,0.8))",e.style.filter="drop-shadow(0px 0px 3px rgba(255,255,255,0.8))",e.style.msFilter="progid:DXImageTransform.Microsoft.Dropshadow(OffX=0, OffY=0, Color='#fff')"},removeHighlight:function(e,t,n){e.style.opacity=t,e.style.color=n,e.style.WebkitFilter="",e.style.filter="",e.style.msFilter=""},collapse:function(e,t,n){if(isNaN(e)||void 0===e)return t;if(!t)return[];var o=this,i=t.filter(function(e){return o._isValid(e)}),r=this._collapse(e,i,n);return r},findThumbnail:function(e,t,n){var o=e.data.available_time_slices,i=e.data.available_widths[0],r=Math.floor(t/n*o.length);r=Math.min(r,o.length-1),r=Math.max(r,0);var a=null,s=r;if(o[r]>=t){a=o[0];for(var l=r;l>=0;l--)if(o[l]<=t){a=o[l],s=l;break}}else{a=o[o.length-1];for(var l=r;l<o.length;l++){if(o[l]==t){a=o[l],s=l;break}if(o[l]>t){a=o[l-1],s=l-1;break}}}var c=e.data.thumbnails[a][i].url;return{url:c,pos:s}},browserSupportsTouch:function(){return"ontouchstart"in window||navigator.maxTouchPoints>0||navigator.msMaxTouchPoints>0},createMarkup:function(e){return{__html:e}},arrayDeepMerge:function(e,t,o){if(t&&t.length){if(t[0][o.arrayUnionBy]&&"replace"===o.buttonArrayFusion)return t;if(!t[0][o.arrayUnionBy]&&"deepmerge"!==o.arrayFusion)return t}var i=o.arraySwap?t:e,r=o.arraySwap?e:t,a=this,s=r.slice(),l=i.slice();if(r.forEach(function(e,t){"undefined"==typeof l[t]?l[t]=a._cloneIfNecessary(e,o):a._isMergeableObject(e)?e[o.arrayUnionBy]?i.forEach(function(t,i){if(e[o.arrayUnionBy]===t[o.arrayUnionBy]){var r=o.arraySwap?e:t,a=o.arraySwap?t:e;if(l[i]=n(r,a,o),"prepend"===o.buttonArrayFusion&&s&&s.length)for(var c in s)if(s[c][o.arrayUnionBy]===e[o.arrayUnionBy]){s.splice(c,1);break}}}):l[t]=n(i[t],e,o):-1===i.indexOf(e)&&l.push(a._cloneIfNecessary(e,o))}),"prepend"===o.buttonArrayFusion&&s&&s.length){var c=null;for(var u in l)if("flexibleSpace"===l[u][o.arrayUnionBy]){c=parseInt(u);break}if(c){c+=1;for(var p in s)l.splice(c,0,s[p])}else l=l.concat(s)}return l},isValidString:function(e){return e&&("string"==typeof e||e instanceof String)},sanitizeConfigData:function(e){return e&&!Array.isArray(e)?e:(OO.log("Invalid player configuration json data: ",e),{})},_isValid:function(e){var t=e&&"moreOptions"==e.location||"controlBar"==e.location&&e.whenDoesNotFit&&void 0!==e.minWidth&&e.minWidth>=0;return t},_collapse:function(e,t,n){for(var o={fit:t.slice(),overflow:[]},i=t.reduce(function(e,t){return e+n*t.minWidth},0),r=t.length-1;r>=0;--r){var a=t[r];this._isOnlyInMoreOptions(a)&&(i=this._collapseLastItemMatching(o,a,i)),i>e&&this._isCollapsable(a)&&(i=this._collapseLastItemMatching(o,a,i))}return o},_isOnlyInMoreOptions:function(e){var t="moreOptions"==e.location;return t},_isCollapsable:function(e){var t="controlBar"==e.location&&e.whenDoesNotFit&&"keep"!=e.whenDoesNotFit;return t},_collapseLastItemMatching:function(e,t,n){var o=e.fit.lastIndexOf(t);return o>-1&&(e.fit.splice(o,1),e.overflow.unshift(t),t.minWidth&&(n-=t.minWidth)),n},_isMergeableObject:function(e){var t=e&&"object"==typeof e;return t&&"[object RegExp]"!==Object.prototype.toString.call(e)&&"[object Date]"!==Object.prototype.toString.call(e)},_emptyTarget:function(e){return Array.isArray(e)?[]:{}},_cloneIfNecessary:function(e,t){var o=t&&t.clone===!0;return o&&this._isMergeableObject(e)?n(this._emptyTarget(e),e,t):e}};t.exports=o},{deepmerge:59}],40:[function(e,t){var n=e("react"),o=e("react-scrollbar/dist/no-css"),i=e("classnames"),r=e("../components/icon"),a=n.createClass({displayName:"VideoQualityPanel",getInitialState:function(){return{selected:this.props.videoQualityOptions.selectedBitrate?this.props.videoQualityOptions.selectedBitrate.id:"auto"}},handleVideoQualityClick:function(e,t){t.preventDefault();var n={id:e};this.props.controller.sendVideoQualityChangeEvent(n),this.setState({selected:e}),this.props.togglePopoverAction()},addAutoButton:function(e){var t=i({"oo-quality-auto-btn":!0,"oo-selected":"auto"==this.state.selected}),o={color:this.props.skinConfig.general.accentColor&&"auto"==this.state.selected?this.props.skinConfig.general.accentColor:null};e.unshift(n.createElement("li",{className:"oo-auto-li",key:"auto-li"},n.createElement("a",{className:t,key:"auto",onClick:this.handleVideoQualityClick.bind(this,"auto")},n.createElement("div",{className:"oo-quality-auto-icon",style:o},n.createElement(r,n.__spread({},this.props,{icon:"auto"}))),n.createElement("div",{className:"oo-quality-auto-label",style:o},"Auto"))))},render:function(){for(var e,t=this.props.videoQualityOptions.availableBitrates,r=[],a=0;a<t.length;a++){var s=i({"oo-quality-btn":!0,"oo-selected":this.state.selected==t[a].id}),l={color:this.props.skinConfig.general.accentColor&&this.state.selected==t[a].id?this.props.skinConfig.general.accentColor:null};"auto"==t[a].id?this.addAutoButton(r):(e="number"==typeof t[a].bitrate?Math.round(t[a].bitrate/1e3)+" kbps":t[a].bitrate,r.push(n.createElement("li",{key:a},n.createElement("a",{className:s,style:l,key:a,onClick:this.handleVideoQualityClick.bind(this,t[a].id)},e))))}var c=i({"oo-content-panel":!this.props.popover,"oo-quality-panel":!this.props.popover,"oo-quality-popover":this.props.popover,"oo-mobile-fullscreen":!this.props.popover&&this.props.controller.state.isMobile&&(this.props.controller.state.fullscreen||this.props.controller.state.isFullWindow)});return n.createElement("div",{className:c},n.createElement(o,{className:"oo-quality-screen-content",speed:this.props.popover?.6:1,horizontal:!this.props.popover},n.createElement("ul",null,r)))}});a.propTypes={videoQualityOptions:n.PropTypes.shape({availableBitrates:n.PropTypes.arrayOf(n.PropTypes.shape({id:n.PropTypes.string,bitrate:n.PropTypes.oneOfType([n.PropTypes.string,n.PropTypes.number]),label:n.PropTypes.string}))}),togglePopoverAction:n.PropTypes.func,controller:n.PropTypes.shape({sendVideoQualityChangeEvent:n.PropTypes.func})},a.defaultProps={popover:!1,skinConfig:{icons:{quality:{fontStyleClass:"oo-icon oo-icon-topmenu-quality"}}},videoQualityOptions:{availableBitrates:[]},togglePopoverAction:function(){},controller:{sendVideoQualityChangeEvent:function(){}}},t.exports=a},{"../components/icon":27,classnames:58,react:255,"react-scrollbar/dist/no-css":64}],41:[function(e,t){var n=e("react"),o=e("../constants/constants"),i=e("../components/utils"),r=e("classnames"),a=n.createClass({displayName:"Watermark",handleWatermarkClick:function(){this.props.playerState==o.STATE.PLAYING&&this.props.controller.togglePlayPause()},render:function(){var e=i.getPropertyValue(this.props.skinConfig,"general.watermark.imageResource.url"),t=i.getPropertyValue(this.props.skinConfig,"general.watermark.clickUrl"),a=i.getPropertyValue(this.props.skinConfig,"general.watermark.position"),s=i.getPropertyValue(this.props.skinConfig,"general.watermark.target","_blank"),l=i.getPropertyValue(this.props.skinConfig,"general.watermark.transparency",1),c=i.getPropertyValue(this.props.skinConfig,"general.watermark.scalingOption","default"),u=i.getPropertyValue(this.props.skinConfig,"general.watermark.scalingPercentage");if(!e||!a)return null;var p={},d={};p.opacity=l,"height"==c?(p.height=u+"%",d.height="100%"):"width"==c?(p.width=u+"%",d.width="100%"):"default"==c?(p.width=o.WATERMARK.DEFAULT_SCALING_PERCENTAGE+"%",d.width="100%"):p.width="auto",a=a.toLowerCase(),("left"==a||"right"==a)&&(a="center"+a),("bottom"==a||"top"==a)&&(a+="center");var h=r({"oo-watermark-container":!0,"oo-watermark-no-clickURL":!t,"oo-watermark-top":a.indexOf("top")>-1,"oo-watermark-bottom":a.indexOf("bottom")>-1,"oo-watermark-bottom-cb":this.props.controlBarVisible&&a.indexOf("bottom")>-1,"oo-watermark-left":a.indexOf("left")>-1,"oo-watermark-right":a.indexOf("right")>-1,"oo-watermark-center-horizontal":a.indexOf("bottomcenter")>-1||a.indexOf("topcenter")>-1,"oo-watermark-center-vertical":a.indexOf("centerright")>-1||a.indexOf("centerleft")>-1}),f=r({"oo-blur":this.props.nonClickable,"oo-watermark":!0}),m=n.createElement("img",{className:f,style:d,src:e,ref:"watermarkImage"});return this.props.nonClickable||!t?n.createElement("div",{className:h,ref:"watermark",style:p},m):n.createElement("a",{className:h,ref:"watermark",style:p,href:this.props.skinConfig.general.watermark.clickUrl,target:s,onClick:this.handleWatermarkClick},m)}});a.propTypes={controlBarVisible:n.PropTypes.bool,skinConfig:n.PropTypes.shape({general:n.PropTypes.shape({watermark:n.PropTypes.shape({imageResource:n.PropTypes.shape({url:n.PropTypes.string}),clickUrl:n.PropTypes.string,position:n.PropTypes.string,target:n.PropTypes.string,transparency:n.PropTypes.number,scalingOption:n.PropTypes.string,scalingPercentage:n.PropTypes.number,nonClickable:n.PropTypes.bool})})}),controller:n.PropTypes.shape({togglePlayPause:n.PropTypes.func})},a.defaultProps={controlBarVisible:!1,skinConfig:{general:{watermark:{imageResource:{url:""},clickUrl:"",position:"bottomRight",target:"_blank",transparency:1,scalingOption:"default",scalingPercentage:10,nonClickable:!1}}},controller:{togglePlayPause:function(){}}},t.exports=a},{"../components/utils":39,"../constants/constants":42,classnames:58,react:255}],42:[function(e,t){t.exports={STATE:{START:"start",PLAYING:"playing",PAUSE:"pause",END:"end",ERROR:"error"},SCREEN:{START_SCREEN:"startScreen",PLAYING_SCREEN:"playingScreen",PAUSE_SCREEN:"pauseScreen",END_SCREEN:"endScreen",SHARE_SCREEN:"shareScreen",DISCOVERY_SCREEN:"discoveryScreen",UP_NEXT_SCREEN:"upNextScreen",AD_SCREEN:"adScreen",MORE_OPTIONS_SCREEN:"moreOptionsScreen",LOADING_SCREEN:"loadingScreen",CLOSEDCAPTION_SCREEN:"closedCaptionScreen",VIDEO_QUALITY_SCREEN:"videoQualityScreen",ERROR_SCREEN:"errorScreen"},SKIN_TEXT:{LEARN_MORE:"Learn More",CLOSED_CAPTION_PREVIEW:"CLOSED CAPTION PREVIEW",SAMPLE_TEXT:"Sample Text",AD:"Ad",SKIP_AD:"Skip Ad",LIVE:"LIVE",GO_LIVE:"GO LIVE",CC_OPTIONS:"CC Options",ON:"On",OFF:"Off",DISCOVER:"Discover",UP_NEXT:"Up next",VIDEO_QUALITY:"Video Quality",SHARE_CALL_TO_ACTION:"Invest In Social Change",SHARE:"Share",START_AT:"Start at",EMBED:"Embed",EMAIL:"Email",EMAIL_BODY:"Check out this video",TO:"To",SUBJECT:"Subject",MESSAGE:"Message",RECIPIENT:"name@email.com",OPTIONAL_MESSAGE:"Optional Message",SEND:"Send",ERROR_ACTION:"RELOAD YOUR SCREEN OR TRY SELECTING A DIFFERENT VIDEO",UNKNOWN_ERROR:"Something happened while we were trying to play your video! Click replay or simply reload your page.",LANGUAGE_TAB_TITLE:"Language",COLOR_SELECTION_TAB_TITLE:"Color Selection",CAPTION_OPACITY_TAB_TITLE:"Caption Opacity",FONT_TYPE_TAB_TITLE:"Font Type",FONT_SIZE_TAB_TITLE:"Font Size",TEXT_ENHANCEMENTS_TAB_TITLE:"Text Enhancements",TEXT_COLOR:"Text color",BACKGROUND_COLOR:"Background color",WINDOW_COLOR:"Window color",TRANSPARENT:"Transparent",WHITE:"White",BLUE:"Blue",MAGENTA:"Magenta",GREEN:"Green",YELLOW:"Yellow",RED:"Red",CYAN:"Cyan",BLACK:"Black",TEXT_OPACITY:"Text opacity",BACKGROUND_OPACITY:"Background opacity",WINDOW_OPACITY:"Window opacity",FONT_SIZE:"Font size",SMALL:"Small",MEDIUM:"Medium",LARGE:"Large",EXTRA_LARGE:"Extra Large",TEXT_ENHANCEMENT:"Text enhancement",UNIFORM:"Uniform",DEPRESSED:"Depressed",RAISED:"Raised",SHADOW:"Shadow"},KEYCODES:{SPACE_KEY:32,LEFT_ARROW_KEY:37,RIGHT_ARROW_KEY:39,UP_ARROW_KEY:38,DOWN_ARROW_KEY:40,ESCAPE_KEY:27},UI:{defaultScrubberBarHeight:4,DEFAULT_SCRUBBERBAR_LEFT_RIGHT_PADDING:15},WATERMARK:{DEFAULT_SCALING_PERCENTAGE:10},AD_CLICK_SOURCE:{VIDEO_WINDOW:"videoWindow",LEARN_MORE_BUTTON:"learnMoreButton",OVERLAY:"overlay"},PAUSE_REASON:{TRANSITION:"transition"},MEDIA_TYPE:{HTML5:"html5",FLASH:"flash",VIDEO:"video",OBJECT:"object"},ERROR_MESSAGE:{network:{name:"OO.ERROR.API.NETWORK",title:"NETWORK ERROR",description:"Cannot Contact Server"},sas:{name:"OO.ERROR.API.SAS.GENERIC",title:"SAS ERROR",description:"Invalid Authorization Response"},geo:{name:"OO.ERROR.API.SAS.GEO",title:"SAS GEO ERROR",description:"This video is not authorized in your location"},domain:{name:"OO.ERROR.API.SAS.DOMAIN",title:"SAS DOMAIN ERROR",description:"This video is not authorized for your domain"},future:{name:"OO.ERROR.API.SAS.FUTURE",title:"VIDEO NOT AVAILABLE YET",description:"This video will be available soon"},past:{name:"OO.ERROR.API.SAS.PAST",title:"VIDEO NO LONGER AVAILABLE",description:"This video is no longer available"},device:{name:"OO.ERROR.API.SAS.DEVICE",title:"SAS DEVICE ERROR",description:"This video is not authorized for playback on this device"},proxy:{name:"OO.ERROR.API.SAS.PROXY",title:"SAS PROXY ERROR",description:"An anonymous proxy was detected. Please disable the proxy and retry."},concurrent_streams:{name:"OO.ERROR.API.SAS.CONCURRENT_STREAMS",title:"CONCURRENT STREAMS NUMBER EXCEEDED",description:"You have exceeded the maximum number of concurrent streams"},device_binding_failed:{name:"OO.ERROR.API.SAS.ERROR.DEVICE_BINDING_FAILED",title:"DEVICE BINDING ERROR",description:"Device binding failed"},device_id_too_long:{name:"OO.ERROR.API.SAS.ERROR.DEVICE_ID_TOO_LONG",title:"DEVICE ID TOO LONG",description:"Device ID is too long"},device_invalid_auth_token:{name:"OO.ERROR.API.SAS.ERROR.DEVICE_INVALID_AUTH_TOKEN",title:"INVALID PLAYER TOKEN",description:"Invalid Ooyala Player token"},device_limit_reached:{name:"OO.ERROR.API.SAS.ERROR.DEVICE_LIMIT_REACHED",title:"DEVICE LIMIT REACHED",description:"Device limit has been reached"},drm_general_failure:{name:"OO.ERROR.API.SAS.ERROR_DRM_GENERAL_FAILURE",title:"LICENSE ERROR",description:"General error acquiring license"},drm_server_error:{name:"OO.ERROR.API.SAS.ERROR_DRM_RIGHTS_SERVER_ERROR",title:"DRM SERVER ERROR",description:"DRM server error"},invalid_entitlements:{name:"OO.ERROR.API.SAS.ERROR_INVALID_ENTITLEMENTS",title:"INVALID ENTITLEMENTS ERROR",description:"User Entitlement Terminated - Stream No Longer Active for the User"},invalid_heartbeat:{name:"OO.ERROR.API.SAS.INVALID_HEARTBEAT",title:"INVALID HEARTBEAT",description:"Invalid heartbeat response"},content_tree:{name:"OO.ERROR.API.CONTENT_TREE",title:"INVALID CONTENT",description:"Invalid Content"},metadata:{name:"OO.ERROR.API.METADATA",title:"INVALID METADATA",description:"Invalid Metadata"},playback:{name:"OO.ERROR.PLAYBACK.GENERIC",title:"PLAYBACK ERROR",description:"Could not play the content"},stream:{name:"OO.ERROR.PLAYBACK.STREAM",title:"PLAYBACK STREAM ERROR",description:"This video isn't encoded for your device"},livestream:{name:"OO.ERROR.PLAYBACK.LIVESTREAM",title:"PLAYBACK LIVESTREAM ERROR",description:"Live stream is off air"},network_error:{name:"OO.ERROR.PLAYBACK.NETWORK",title:"PLAYBACK NETWORK ERROR",description:"Network connection temporarily lost"},unplayable_content:{name:"OO.ERROR.UNPLAYABLE_CONTENT",title:"UNPLAYABLE CONTENT ERROR",description:"This video is not playable on this player"},invalid_external_id:{name:"OO.ERROR.INVALID.EXTERNAL_ID",title:"INVALID EXTERNAL ID",description:"Invalid External ID"},empty_channel:{name:"OO.ERROR.EMPTY_CHANNEL",title:"EMPTY CHANNEL ERROR",description:"This channel is empty"},empty_channel_set:{name:"OO.ERROR.EMPTY_CHANNEL_SET",title:"EMPTY CHANNEL SET ERROR",description:"This channel set is empty"},channel_content:{name:"OO.ERROR.CHANNEL_CONTENT",title:"CHANNEL CONTENT ERROR",description:"This channel is not playable at this time"},unsupported_encoding:{name:"OO.ERROR.VC.UNSUPPORTED_ENCODING",description:"This video isn't encoded for your device"},unable_to_create_video_element:{name:"OO.ERROR.VC.UNABLE_TO_CREATE_VIDEO_ELEMENT",description:"Something happened while we were trying to play your video! Click replay or simply reload your page."}}}
},{}],43:[function(e){var t=e("react"),n=e("react-dom"),o=e("./components/utils"),i=e("./constants/constants"),r=e("./components/accessibilityControls"),a=e("deepmerge"),s=e("screenfull"),l=e("./skin"),c=e("../config/skin"),u={languageFiles:{en:e("../config/languageFiles/en.json"),es:e("../config/languageFiles/es.json"),ja:e("../config/languageFiles/ja.json"),zh:e("../config/languageFiles/zh.json")}};OO.plugin("Html5Skin",function(e,p,d){if(!e.playerParams.core_version||e.playerParams.core_version<=3)return console.error("Html5Skin requires at least player version 4."),null;e.publicApi&&e.publicApi.VERSION&&(e.publicApi.VERSION.skin={releaseVersion:"4.14.8",rev:"b564294a3f6d27345d5ea0809a7f4e93b2d64f29"});var h=function(e,t){this.mb=e,this.id=t,this.state={playerParam:{},skinMetaData:{},attributes:{},persistentSettings:{closedCaptionOptions:{}},assetId:null,contentTree:{},thumbnails:null,isLiveStream:!1,screenToShow:null,playerState:null,discoveryData:null,forceCountDownTimerOnEndScreen:!1,isPlayingAd:!1,adOverlayUrl:null,showAdOverlay:!1,showAdOverlayCloseButton:!1,showAdControls:!0,showAdMarquee:!0,isOoyalaAds:!1,afterOoyalaAd:!1,configLoaded:!1,config:{},customSkinJSON:{},fullscreen:!1,pauseAnimationDisabled:!1,adPauseAnimationDisabled:!0,pausedCallback:null,seeking:!1,queuedPlayheadUpdate:null,accessibilityControlsEnabled:!1,duration:0,mainVideoDuration:0,adVideoDuration:0,adStartTime:0,elementId:null,mainVideoContainer:null,mainVideoInnerWrapper:null,mainVideoElement:null,mainVideoMediaType:null,mainVideoAspectRatio:0,pluginsElement:null,pluginsClickElement:null,buffering:!1,mainVideoBuffered:null,mainVideoPlayhead:0,adVideoPlayhead:0,focusedElement:null,currentAdsInfo:{currentAdItem:null,numberOfAds:0,skipAdButtonEnabled:!1},closedCaptionsInfoCache:{},closedCaptionOptions:{enabled:null,language:null,availableLanguages:null,cueText:null,showClosedCaptionPopover:!1,textColor:null,windowColor:null,backgroundColor:null,textOpacity:null,backgroundOpacity:null,windowOpacity:null,fontType:null,fontSize:null,textEnhancement:null},videoQualityOptions:{availableBitrates:null,selectedBitrate:null,showVideoQualityPopover:!1},volumeState:{volume:1,muted:!1,oldVolume:1,volumeSliderVisible:!1},upNextInfo:{upNextData:null,countDownFinished:!1,countDownCancelled:!1,timeToShow:0,showing:!1,delayedSetEmbedCodeEvent:!1,delayedContentData:null},moreOptionsItems:null,isMobile:!1,controlBarVisible:!0,forceControlBarVisible:!1,timer:null,errorCode:null,isSubscribed:!1,isPlaybackReadySubscribed:!1,isSkipAdClicked:!1,isInitialPlay:!1,isFullScreenSupported:!1,isVideoFullScreenSupported:!1,isFullWindow:!1,autoPauseDisabled:!1},this.init()};return h.prototype={init:function(){this.mb.subscribe(e.EVENTS.PLAYER_CREATED,"customerUi",p.bind(this.onPlayerCreated,this)),this.mb.subscribe(e.EVENTS.VC_VIDEO_ELEMENT_CREATED,"customerUi",p.bind(this.onVcVideoElementCreated,this)),this.mb.subscribe(e.EVENTS.DESTROY,"customerUi",p.bind(this.onPlayerDestroy,this)),this.mb.subscribe(e.EVENTS.EMBED_CODE_CHANGED,"customerUi",p.bind(this.onEmbedCodeChanged,this)),this.mb.subscribe(e.EVENTS.EMBED_CODE_CHANGED_AFTER_OOYALA_AD,"customerUi",p.bind(this.onEmbedCodeChangedAfterOoyalaAd,this)),this.mb.subscribe(e.EVENTS.CONTENT_TREE_FETCHED,"customerUi",p.bind(this.onContentTreeFetched,this)),this.mb.subscribe(e.EVENTS.THUMBNAILS_FETCHED,"customerUi",p.bind(this.onThumbnailsFetched,this)),this.mb.subscribe(e.EVENTS.AUTHORIZATION_FETCHED,"customerUi",p.bind(this.onAuthorizationFetched,this)),this.mb.subscribe(e.EVENTS.SKIN_METADATA_FETCHED,"customerUi",p.bind(this.onSkinMetaDataFetched,this)),this.mb.subscribe(e.EVENTS.ATTRIBUTES_FETCHED,"customerUi",p.bind(this.onAttributesFetched,this)),this.mb.subscribe(e.EVENTS.ASSET_CHANGED,"customerUi",p.bind(this.onAssetChanged,this)),this.mb.subscribe(e.EVENTS.ASSET_UPDATED,"customerUi",p.bind(this.onAssetUpdated,this)),this.mb.subscribe(e.EVENTS.PLAYBACK_READY,"customerUi",p.bind(this.onPlaybackReady,this)),this.mb.subscribe(e.EVENTS.ERROR,"customerUi",p.bind(this.onErrorEvent,this)),this.mb.addDependent(e.EVENTS.PLAYBACK_READY,e.EVENTS.UI_READY),this.state.isPlaybackReadySubscribed=!0},subscribeBasicPlaybackEvents:function(){this.state.isSubscribed||(this.mb.subscribe(e.EVENTS.SEND_QUALITY_CHANGE,"customerUi",p.bind(this.receiveVideoQualityChangeEvent,this)),this.mb.subscribe(e.EVENTS.INITIAL_PLAY,"customerUi",p.bind(this.onInitialPlay,this)),this.mb.subscribe(e.EVENTS.VC_PLAYED,"customerUi",p.bind(this.onVcPlayed,this)),this.mb.subscribe(e.EVENTS.VC_PLAYING,"customerUi",p.bind(this.onPlaying,this)),this.mb.subscribe(e.EVENTS.VC_PAUSED,"customerUi",p.bind(this.onPaused,this)),this.mb.subscribe(e.EVENTS.VC_PAUSE,"customerUi",p.bind(this.onPause,this)),this.mb.subscribe(e.EVENTS.PLAYED,"customerUi",p.bind(this.onPlayed,this)),this.mb.subscribe(e.EVENTS.PLAYHEAD_TIME_CHANGED,"customerUi",p.bind(this.onPlayheadTimeChanged,this)),this.mb.subscribe(e.EVENTS.SEEKED,"customerUi",p.bind(this.onSeeked,this)),this.mb.subscribe(e.EVENTS.BUFFERING,"customerUi",p.bind(this.onBuffering,this)),this.mb.subscribe(e.EVENTS.BUFFERED,"customerUi",p.bind(this.onBuffered,this)),this.mb.subscribe(e.EVENTS.CLOSED_CAPTIONS_INFO_AVAILABLE,"customerUi",p.bind(this.onClosedCaptionsInfoAvailable,this)),this.mb.subscribe(e.EVENTS.BITRATE_INFO_AVAILABLE,"customerUi",p.bind(this.onBitrateInfoAvailable,this)),this.mb.subscribe(e.EVENTS.CLOSED_CAPTION_CUE_CHANGED,"customerUi",p.bind(this.onClosedCaptionCueChanged,this)),this.mb.subscribe(e.EVENTS.CHANGE_CLOSED_CAPTION_LANGUAGE,"customerUi",p.bind(this.onChangeClosedCaptionLanguage,this)),this.mb.subscribe(e.EVENTS.VOLUME_CHANGED,"customerUi",p.bind(this.onVolumeChanged,this)),this.mb.subscribe(e.EVENTS.VC_VIDEO_ELEMENT_IN_FOCUS,"customerUi",p.bind(this.onVideoElementFocus,this)),this.mb.subscribe(e.EVENTS.REPLAY,"customerUi",p.bind(this.onReplay,this)),this.mb.subscribe(e.EVENTS.ASSET_DIMENSION,"customerUi",p.bind(this.onAssetDimensionsReceived,this)),this.state.isPlaybackReadySubscribed||this.mb.subscribe(e.EVENTS.PLAYBACK_READY,"customerUi",p.bind(this.onPlaybackReady,this)),o.isIPhone()||(this.mb.subscribe(e.EVENTS.ADS_PLAYED,"customerUi",p.bind(this.onAdsPlayed,this)),this.mb.subscribe(e.EVENTS.WILL_PLAY_ADS,"customerUi",p.bind(this.onWillPlayAds,this)),this.mb.subscribe(e.EVENTS.AD_POD_STARTED,"customerUi",p.bind(this.onAdPodStarted,this)),this.mb.subscribe(e.EVENTS.WILL_PLAY_SINGLE_AD,"customerUi",p.bind(this.onWillPlaySingleAd,this)),this.mb.subscribe(e.EVENTS.SINGLE_AD_PLAYED,"customerUi",p.bind(this.onSingleAdPlayed,this)),this.mb.subscribe(e.EVENTS.PLAY_NONLINEAR_AD,"customerUi",p.bind(this.onPlayNonlinearAd,this)),this.mb.subscribe(e.EVENTS.NONLINEAR_AD_PLAYED,"customerUi",p.bind(this.closeNonlinearAd,this)),this.mb.subscribe(e.EVENTS.HIDE_NONLINEAR_AD,"customerUi",p.bind(this.hideNonlinearAd,this)),this.mb.subscribe(e.EVENTS.SHOW_NONLINEAR_AD,"customerUi",p.bind(this.showNonlinearAd,this)),this.mb.subscribe(e.EVENTS.SHOW_NONLINEAR_AD_CLOSE_BUTTON,"customerUi",p.bind(this.showNonlinearAdCloseButton,this)),this.mb.subscribe(e.EVENTS.SHOW_AD_SKIP_BUTTON,"customerUi",p.bind(this.onShowAdSkipButton,this)),this.mb.subscribe(e.EVENTS.SHOW_AD_CONTROLS,"customerUi",p.bind(this.onShowAdControls,this)),this.mb.subscribe(e.EVENTS.SHOW_AD_MARQUEE,"customerUi",p.bind(this.onShowAdMarquee,this)))),this.state.isSubscribed=!0},externalPluginSubscription:function(){e.EVENTS.DISCOVERY_API&&this.mb.subscribe(e.EVENTS.DISCOVERY_API.RELATED_VIDEOS_FETCHED,"customerUi",p.bind(this.onRelatedVideosFetched,this))},onPlayerCreated:function(e,t,n,a){this.externalPluginSubscription(),this.state.mainVideoContainer=d("#"+t),this.state.mainVideoInnerWrapper=d("#"+t+" .innerWrapper"),this.state.playerParam=n,this.state.persistentSettings=a,this.state.elementId=t,this.state.isMobile=o.isMobile(),this.state.browserSupportsTouch=o.browserSupportsTouch(),this.state.mainVideoContainer.addClass("oo-player-container"),this.state.mainVideoInnerWrapper.addClass("oo-player"),this.state.mainVideoInnerWrapper.append("<div class='oo-player-skin'></div>"),n.skin&&n.skin.config?d.getJSON(n.skin.config,function(e){this.state.customSkinJSON=e,this.loadConfigData(this.state.playerParam,this.state.persistentSettings,e,this.state.skinMetaData)}.bind(this)):this.loadConfigData(this.state.playerParam,this.state.persistentSettings,this.state.customSkinJSON,this.state.skinMetaData),this.accessibilityControls=new r(this),this.state.screenToShow=i.SCREEN.LOADING_SCREEN},onVcVideoElementCreated:function(t,n){var i=n.videoElement;i=this.findMainVideoElement(i),i&&i.addEventListener("loadedmetadata",this.metaDataLoaded.bind(this)),o.isIE10()&&i.attr("controls","controls"),n.videoId===e.VIDEO.MAIN&&(this.state.mainVideoElement=i,this.enableFullScreen(),this.updateAspectRatio())},metaDataLoaded:function(){this.enableIosFullScreen()},onPlayerDestroy:function(){var e=this.state.elementId,t=document.querySelector("#"+e+" .oo-player-skin");t&&n.unmountComponentAtNode(t),this.cleanUpEventListeners(),this.mb=null},cleanUpEventListeners:function(){this.accessibilityControls.cleanUp()},onEmbedCodeChangedAfterOoyalaAd:function(e,t,n){n&&(this.state.playerParam=a(this.state.playerParam,n)),this.state.isOoyalaAds=!1,this.state.afterOoyalaAd=!0},onEmbedCodeChanged:function(e,t,n){this.state.videoQualityOptions.availableBitrates=null,this.state.videoQualityOptions.selectedBitrate=null,this.state.closedCaptionOptions.availableLanguages=null,this.state.closedCaptionOptions.cueText=null,this.state.closedCaptionsInfoCache={},this.state.discoveryData=null,this.state.thumbnails=null,this.state.afterOoyalaAd=!1,this.resetUpNextInfo(!0),this.state.isOoyalaAds=n&&n.ooyalaAds===!0?!0:!1,this.state.assetId=t,n&&(this.state.playerParam=a(this.state.playerParam,n)),this.subscribeBasicPlaybackEvents()},onAuthorizationFetched:function(e,t){this.state.isLiveStream=t.streams[0].is_live_stream},onContentTreeFetched:function(e,t){this.state.contentTree=t,this.state.playerState=i.STATE.START,this.renderSkin({contentTree:t})},onSkinMetaDataFetched:function(e,t){this.state.skinMetaData=t,this.loadConfigData(this.state.playerParam,this.state.persistentSettings,this.state.customSkinJSON,this.state.skinMetaData)},onAttributesFetched:function(e,t){this.state.attributes=t,this.trySetAnamorphicFixState(!0)},onThumbnailsFetched:function(e,t){this.state.thumbnails=t},onAssetChanged:function(e,t){this.state.videoQualityOptions.availableBitrates=null,this.state.closedCaptionOptions.availableLanguages=null,this.state.closedCaptionsInfoCache={},this.state.discoveryData=null,this.subscribeBasicPlaybackEvents(),this.resetUpNextInfo(!0),this.state.isOoyalaAds=!1,this.state.isLiveStream=t.content.streams[0].is_live_stream;var n={};n.title=t.content.title,n.description=t.content.description,n.duration=t.content.duration,n.promo_image=t.content.posterImages[0].url,this.state.contentTree=n,this.state.playerState=i.STATE.START,this.renderSkin({contentTree:n})},onAssetUpdated:function(e,t){this.resetUpNextInfo(!0),this.state.isLiveStream=t.content.streams[0].is_live_stream,this.state.contentTree.title=t.content.title,this.state.contentTree.description=t.content.description,this.state.contentTree.duration=t.content.duration,this.state.contentTree.promo_image=t.content.posterImages[0].url,this.renderSkin({contentTree:this.state.contentTree})},onVolumeChanged:function(e,t){0>=t?(this.state.volumeState.muted=!0,this.state.volumeState.volume=0):(this.state.volumeState.muted=!1,this.state.volumeState.volume=t),this.renderSkin()},resetUpNextInfo:function(e){e&&(this.state.upNextInfo.upNextData=null),this.state.upNextInfo.countDownFinished=!1,this.state.upNextInfo.countDownCancelled=!1},onPlayheadTimeChanged:function(t,n,r,a,s,l){if(l==e.VIDEO.MAIN?(this.state.mainVideoPlayhead=n,this.state.mainVideoDuration=r,this.state.mainVideoBuffered=a):l==e.VIDEO.ADS&&(this.state.adVideoDuration=r,this.state.adVideoPlayhead=n),this.state.duration=r,!this.state.autoPauseDisabled&&o.isChrome()&&this.state.mainVideoMediaType==i.MEDIA_TYPE.FLASH){var c=d("#"+this.state.elementId+" .oo-player-skin");0==n&&this.state.playerState==i.STATE.PLAYING?c.addClass("oo-z-index-auto"):(c.removeClass("oo-z-index-auto"),this.state.autoPauseDisabled=!0)}this.state.screenToShow!==i.SCREEN.AD_SCREEN&&(this.skin.props.skinConfig.upNext.showUpNext?o.isIPhone()||o.isIos()&&this.state.fullscreen||this.showUpNextScreenWhenReady(n,r):this.state.playerState===i.STATE.PLAYING?this.state.screenToShow=i.SCREEN.PLAYING_SCREEN:this.state.playerState===i.STATE.PAUSE&&(this.state.screenToShow=i.SCREEN.PAUSE_SCREEN)),this.state.seeking?this.state.queuedPlayheadUpdate=[n,r,a]:this.skin.updatePlayhead(n,r,a,this.state.adVideoPlayhead)},showUpNextScreenWhenReady:function(e,t){var n=this.skin.props.skinConfig.upNext.timeToShow;if(1>n&&(n=(1-n)*t),this.state.upNextInfo.timeToShow=n,0!=this.state.mainVideoPlayhead&&0!=e&&0!==t&&n>=t-e&&!this.state.upNextInfo.countDownCancelled&&this.state.isPlayingAd!==!0&&null!==this.state.upNextInfo.upNextData&&(this.state.playerState===i.STATE.PLAYING||this.state.playerState===i.STATE.PAUSE)){if(!this.state.upNextInfo.showing){var r=o.getPropertyValue(this.state.upNextInfo,"upNextData.embed_code");this.sendDiscoveryDisplayEvent("endScreen",r)}this.state.upNextInfo.showing=!0}else this.state.upNextInfo.showing=!1},onInitialPlay:function(){this.state.isInitialPlay=!0,this.startHideControlBarTimer()},onPlaying:function(t,n){n==e.VIDEO.MAIN&&(this.state.mainVideoMediaType||(this.state.mainVideoElement=this.findMainVideoElement(this.state.mainVideoElement)),this.state.pauseAnimationDisabled=!1,this.state.screenToShow=i.SCREEN.PLAYING_SCREEN,this.state.playerState=i.STATE.PLAYING,this.setClosedCaptionsLanguage(),this.state.mainVideoElement.classList.remove("oo-blur"),this.state.isInitialPlay=!1,this.renderSkin()),n==e.VIDEO.ADS&&(this.state.buffering=!1,this.state.adPauseAnimationDisabled=!0,this.state.pluginsElement.addClass("oo-showing"),this.state.pluginsClickElement.removeClass("oo-showing"),null!==this.state.currentAdsInfo.currentAdItem&&(this.state.playerState=i.STATE.PLAYING,this.state.screenToShow=i.SCREEN.AD_SCREEN,this.renderSkin()))},onPause:function(t,n,o){o===i.PAUSE_REASON.TRANSITION&&(this.state.pauseAnimationDisabled=!0,this.endSeeking()),n==e.VIDEO.ADS&&this.state.pluginsElement.children().length>0&&this.state.pluginsClickElement.addClass("oo-showing")},onPaused:function(t,n){n==this.focusedElement&&this.state.screenToShow!=i.SCREEN.END_SCREEN&&(n==e.VIDEO.MAIN&&this.state.screenToShow!=i.SCREEN.AD_SCREEN&&this.state.screenToShow!=i.SCREEN.LOADING_SCREEN?(this.state.duration-this.state.mainVideoPlayhead<.01&&(this.state.pauseAnimationDisabled=!0),0==this.state.pauseAnimationDisabled&&this.state.discoveryData&&"discovery"===this.skin.props.skinConfig.pauseScreen.screenToShowOnPause&&!(o.isIPhone()||o.isIos()&&this.state.fullscreen)?(e.log("Should display DISCOVERY_SCREEN on pause"),this.sendDiscoveryDisplayEvent("pauseScreen"),this.state.screenToShow=i.SCREEN.DISCOVERY_SCREEN):"social"===this.skin.props.skinConfig.pauseScreen.screenToShowOnPause||(this.state.screenToShow=i.SCREEN.PAUSE_SCREEN),o.isIPhone()&&(this.state.screenToShow=i.SCREEN.PAUSE_SCREEN),this.state.playerState=i.STATE.PAUSE,this.state.mainVideoElement.classList.add("oo-blur"),this.renderSkin()):n==e.VIDEO.ADS&&(this.state.adPauseAnimationDisabled=!1,this.state.playerState=i.STATE.PAUSE,this.renderSkin()),this.pausedCallback&&(this.pausedCallback(),this.pausedCallback=null))},onPlayed:function(){var t=this.state.mainVideoDuration;if(this.state.duration=t,this.skin.updatePlayhead(t,t,t),this.state.upNextInfo.delayedSetEmbedCodeEvent){var n=this.state.upNextInfo.delayedContentData;this.state.screenToShow=i.SCREEN.LOADING_SCREEN,n.clickedVideo.embed_code?this.mb.publish(e.EVENTS.SET_EMBED_CODE,n.clickedVideo.embed_code,this.state.playerParam):n.clickedVideo.asset&&this.mb.publish(e.EVENTS.SET_ASSET,n.clickedVideo.asset,this.state.playerParam),this.mb.publish(e.EVENTS.DISCOVERY_API.SEND_CLICK_EVENT,n),this.state.upNextInfo.showing=!1,this.state.upNextInfo.delayedSetEmbedCodeEvent=!1,this.state.upNextInfo.delayedContentData=null}else this.state.discoveryData&&"discovery"===this.skin.props.skinConfig.endScreen.screenToShowOnEnd&&!(o.isIPhone()||o.isIos()&&this.state.fullscreen)?(e.log("Should display DISCOVERY_SCREEN on end"),this.sendDiscoveryDisplayEvent("endScreen"),this.state.screenToShow=i.SCREEN.DISCOVERY_SCREEN):"share"===this.skin.props.skinConfig.endScreen.screenToShowOnEnd?this.state.screenToShow=i.SCREEN.SHARE_SCREEN:(this.state.screenToShow=i.SCREEN.END_SCREEN,this.mb.publish(e.EVENTS.END_SCREEN_SHOWN));o.isIPhone()&&(this.state.screenToShow=i.SCREEN.START_SCREEN),this.skin.updatePlayhead(this.state.duration,this.state.duration,this.state.duration),this.state.playerState=i.STATE.END,this.renderSkin()},onVcPlayed:function(t,n){if(this.onBuffered(),n==e.VIDEO.MAIN){var o="",i="disabled";this.mb.publish(e.EVENTS.SET_CLOSED_CAPTIONS_LANGUAGE,o,{mode:i}),this.state.mainVideoDuration=this.state.duration}},onSeeked:function(){this.state.seeking=!1,this.state.queuedPlayheadUpdate&&(e.log("popping queued update"),this.skin.updatePlayhead.apply(this.skin,this.state.queuedPlayheadUpdate),this.state.queuedPlayheadUpdate=null,this.renderSkin()),o.isIos()&&this.state.screenToShow==i.SCREEN.END_SCREEN&&this.state.fullscreen&&(this.state.pauseAnimationDisabled=!0,this.state.screenToShow=i.SCREEN.PAUSE_SCREEN,this.state.playerState=i.STATE.PAUSE)},onPlaybackReady:function(){this.state.screenToShow=this.state.afterOoyalaAd?i.SCREEN.LOADING_SCREEN:i.SCREEN.START_SCREEN,this.renderSkin({contentTree:this.state.contentTree})},onBuffering:function(){this.state.buffering=0==this.state.isInitialPlay&&this.state.screenToShow==i.SCREEN.START_SCREEN?!1:!0,this.renderSkin()},onBuffered:function(){this.state.buffering===!0&&(this.state.buffering=!1,this.renderSkin())},onReplay:function(){this.resetUpNextInfo(!1)},onAssetDimensionsReceived:function(t,n){n.videoId!=e.VIDEO.MAIN||"auto"!=this.skin.props.skinConfig.responsive.aspectRatio&&this.skin.props.skinConfig.responsive.aspectRatio||(this.state.mainVideoAspectRatio=this.calculateAspectRatio(n.width,n.height),this.setAspectRatio())},onAdsPlayed:function(t){e.log("onAdsPlayed is called from event = "+t),this.state.screenToShow=i.SCREEN.PLAYING_SCREEN,this.skin.updatePlayhead(this.state.mainVideoPlayhead,this.state.mainVideoDuration,this.state.mainVideoBuffered),this.state.duration=this.state.contentTree.duration/1e3,this.state.isPlayingAd=!1,this.state.pluginsElement.removeClass("oo-showing"),this.state.pluginsClickElement.removeClass("oo-showing"),this.trySetAnamorphicFixState(!0),this.renderSkin()},onWillPlayAds:function(t){e.log("onWillPlayAds is called from event = "+t),this.state.isPlayingAd=!0,this.trySetAnamorphicFixState(!1),this.state.pluginsElement.addClass("oo-showing"),this.state.pluginsElement.css({height:"",width:""}),this.state.forceControlBarVisible=this.state.pluginsElement.children().length>0},onAdPodStarted:function(t,n){e.log("onAdPodStarted is called from event = "+t+" with "+n+" ads"),this.state.currentAdsInfo.numberOfAds=n,this.renderSkin()},onWillPlaySingleAd:function(t,n){e.log("onWillPlaySingleAd is called with adItem = "+n),null!==n&&(this.state.adVideoDuration=n.duration,this.state.screenToShow=i.SCREEN.AD_SCREEN,this.state.isPlayingAd=!0,this.state.currentAdsInfo.currentAdItem=n,this.state.playerState=i.STATE.PLAYING,this.state.adStartTime=n.isLive?(new Date).getTime():0,this.skin.state.currentPlayhead=0,this.state.mainVideoElement.classList.remove("oo-blur"),this.renderSkin())},onSingleAdPlayed:function(){e.log("onSingleAdPlayed is called"),this.state.isPlayingAd=!1,this.state.adVideoDuration=0,this.state.currentAdsInfo.skipAdButtonEnabled=!1},onShowAdSkipButton:function(){this.state.currentAdsInfo.skipAdButtonEnabled=!0,this.renderSkin()},onShowAdControls:function(e,t){this.state.showAdControls=t,t&&this.state.config.adScreen.showControlBar?(this.state.pluginsElement.removeClass("oo-full"),this.state.pluginsClickElement.removeClass("oo-full")):(this.state.pluginsElement.addClass("oo-full"),this.state.pluginsClickElement.addClass("oo-full")),this.renderSkin()},onShowAdMarquee:function(e,t){this.state.showAdMarquee=t,this.renderSkin()},onSkipAdClicked:function(){this.state.isSkipAdClicked=!0,e.log("onSkipAdClicked is called"),this.skin.updatePlayhead(this.state.mainVideoPlayhead,this.state.mainVideoDuration,this.state.mainVideoBuffered),this.state.currentAdsInfo.skipAdButtonEnabled=!1,this.mb.publish(e.EVENTS.SKIP_AD),this.renderSkin()},onAdsClicked:function(t){e.log("on ads clicked is called",t),this.mb.publish(e.EVENTS.ADS_CLICKED,{source:t})},publishOverlayRenderingEvent:function(t){this.mb.publish(e.EVENTS.OVERLAY_RENDERING,{marginHeight:t})},onPlayNonlinearAd:function(e,t){t.url&&(this.state.adOverlayUrl=t.url,this.state.showAdOverlay=!0),this.state.pluginsElement.addClass("oo-overlay-showing");var n=d("#"+this.state.elementId+" .oo-player-skin"),o=(n.width(),n.height(),{});if(t.ad.height&&-1!==t.ad.height){var i=t.ad.paddingHeight?t.ad.paddingHeight:0;o.height=t.ad.height+i+"px",o.top="auto"}else o.top=0,o.bottom=0;if(t.ad.width&&-1!==t.ad.width){var i=t.ad.paddingWidth?t.ad.paddingWidth:0;o.width=t.ad.width+i+"px",o.left="50%",o.transform="translateX(-50%)"}this.state.pluginsElement.css(o),this.renderSkin()},onAdOverlayLoaded:function(){this.mb.publish(e.EVENTS.NONLINEAR_AD_DISPLAYED)},onVideoElementFocus:function(t,n){this.focusedElement=n,this.setClosedCaptionsInfo(n),n==e.VIDEO.MAIN&&(this.state.pluginsElement.removeClass("oo-showing"),this.state.pluginsClickElement.removeClass("oo-showing"))},closeNonlinearAd:function(){this.state.adOverlayUrl=null,this.state.showAdOverlay=!1,this.state.showAdOverlayCloseButton=!1,this.state.pluginsElement.removeClass("oo-overlay-showing"),this.state.pluginsElement.css({top:"",left:"",right:"",bottom:"",height:"0",width:"0",transform:""}),this.renderSkin()},hideNonlinearAd:function(){this.state.showAdOverlay=!1,this.state.pluginsElement.removeClass("oo-overlay-showing"),this.renderSkin()},showNonlinearAd:function(){this.state.showAdOverlay=!0,this.state.pluginsElement.addClass("oo-overlay-showing"),this.renderSkin()},showNonlinearAdCloseButton:function(){this.state.showAdOverlayCloseButton=!0,this.renderSkin()},loadConfigData:function(e,i,r,s){var p=o.sanitizeConfigData(i),h=o.sanitizeConfigData(o.getPropertyValue(e,"skin.inline")),f=o.sanitizeConfigData(r),m=o.sanitizeConfigData(s),v=e.buttonMerge?e.buttonMerge:"replace",g=a(c,m,{arrayMerge:o.arrayDeepMerge.bind(o),arrayUnionBy:"name"});this.state.config=a.all([g,f,h,p],{arrayMerge:o.arrayDeepMerge.bind(o),arrayUnionBy:"name",buttonArrayFusion:v}),this.state.closedCaptionOptions=this.state.config.closedCaptionOptions;var E=o.getPropertyValue(this.state.config,"shareScreen.shareContent");if(E){for(var y=0;y<E.length;y++)"url"==E[y]&&E.splice(y,1);this.state.config.shareScreen.shareContent=E}this.state.config.localization.availableLanguageFile&&this.state.config.localization.availableLanguageFile.forEach(function(e){e.languageFile&&d.getJSON(e.languageFile,function(t){u.languageFiles[e.language]=t})}),this.state.config.upNext.timeToShow=o.convertStringToNumber(this.state.config.upNext.timeToShow),this.state.config.discoveryScreen.countDownTime=o.convertStringToNumber(this.state.config.discoveryScreen.countDownTime),this.skin=n.render(t.createElement(l,{skinConfig:this.state.config,localizableStrings:u.languageFiles,language:o.getLanguageToUse(this.state.config),controller:this,closedCaptionOptions:this.state.closedCaptionOptions,pauseAnimationDisabled:this.state.pauseAnimationDisabled}),document.querySelector("#"+this.state.elementId+" .oo-player-skin")),this.state.configLoaded=!0,this.renderSkin(),this.createPluginElements()},createPluginElements:function(){var t=this.state.config.adScreen.showControlBar?"":" oo-full";d("#"+this.state.elementId+" .oo-player-skin").append("<div class='oo-player-skin-plugins"+t+"'></div><div class='oo-player-skin-plugins-click-layer"+t+"'></div>"),this.state.pluginsElement=d("#"+this.state.elementId+" .oo-player-skin-plugins"),this.state.pluginsClickElement=d("#"+this.state.elementId+" .oo-player-skin-plugins-click-layer"),this.state.pluginsElement.mouseover(function(){this.showControlBar(),this.renderSkin(),this.startHideControlBarTimer()}.bind(this)),this.state.pluginsElement.mouseout(function(){this.hideControlBar()}.bind(this)),this.state.pluginsClickElement.click(function(){this.state.pluginsClickElement.removeClass("oo-showing"),this.mb.publish(e.EVENTS.PLAY)}.bind(this)),this.state.pluginsClickElement.mouseover(function(){this.showControlBar(),this.renderSkin(),this.startHideControlBarTimer()}.bind(this)),this.state.pluginsClickElement.mouseout(function(){this.hideControlBar()}.bind(this)),this.mb.publish(e.EVENTS.UI_READY,{videoWrapperClass:"innerWrapper",pluginsClass:"oo-player-skin-plugins"})},onBitrateInfoAvailable:function(e,t){t&&t.bitrates&&(this.state.videoQualityOptions.availableBitrates=t.bitrates,this.renderSkin({videoQualityOptions:{availableBitrates:t.bitrates,selectedBitrate:this.state.videoQualityOptions.selectedBitrate}}))},onClosedCaptionsInfoAvailable:function(e,t){t&&t.videoId&&t.languages&&(this.state.closedCaptionsInfoCache[t.videoId]=t,this.setClosedCaptionsInfo(t.videoId))},onClosedCaptionCueChanged:function(e,t){this.state.closedCaptionOptions.cueText=t&&t.length>0?t:null,this.renderSkin()},onRelatedVideosFetched:function(t,n){e.log("onRelatedVideosFetched is called"),n.videos&&(this.state.discoveryData={relatedVideos:n.videos},this.state.upNextInfo.upNextData=n.videos[0],this.renderSkin())},enableFullScreen:function(){s.enabled&&(this.state.isFullScreenSupported=!0,document.addEventListener(s.raw.fullscreenchange,this.onFullscreenChanged.bind(this)))},enableIosFullScreen:function(){this.state.isFullScreenSupported||this.state.mainVideoElement.webkitSupportsFullscreen&&(this.state.isVideoFullScreenSupported=!0,this.state.mainVideoElement.addEventListener("webkitbeginfullscreen",this.webkitBeginFullscreen.bind(this)),this.state.mainVideoElement.addEventListener("webkitendfullscreen",this.webkitEndFullscreen.bind(this)))},onFullscreenChanged:function(){this.state.isFullScreenSupported?this.state.fullscreen=s.isFullscreen:this.toggleFullscreen(),this.renderSkin()},toggleFullscreen:function(){this.state.isFullScreenSupported?s.toggle(this.state.mainVideoInnerWrapper.get(0)):this.state.isVideoFullScreenSupported?this.state.fullscreen?this.state.mainVideoElement.webkitExitFullscreen():this.state.mainVideoElement.webkitEnterFullscreen():this.state.isFullWindow?this.exitFullWindow():this.enterFullWindow(),this.state.fullscreen=!this.state.fullscreen,this.renderSkin()},enterFullWindow:function(){this.state.isFullWindow=this.state.fullscreen=!0,document.addEventListener("keydown",this.exitFullWindowOnEscKey.bind(this)),document.documentElement.style.overflow="hidden",this.state.mainVideoInnerWrapper.addClass("oo-fullscreen")},exitFullWindow:function(){this.state.isFullWindow=this.state.fullscreen=!1,document.removeEventListener("keydown",this.exitFullWindowOnEscKey),document.documentElement.style.overflow="visible",this.state.mainVideoInnerWrapper.removeClass("oo-fullscreen")},webkitBeginFullscreen:function(){this.state.fullscreen=!0},webkitEndFullscreen:function(){this.state.fullscreen=!1;var e=this.skin.props.skinConfig.upNext.showUpNext||this.skin.props.skinConfig.discoveryScreen.showCountDownTimerOnEndScreen;e&&this.state.playerState===i.STATE.END&&(this.state.forceCountDownTimerOnEndScreen=!0,this.sendDiscoveryDisplayEvent("endScreen"),this.state.pluginsElement.addClass("oo-overlay-blur"),this.state.screenToShow=i.SCREEN.DISCOVERY_SCREEN,this.renderSkin(),this.state.forceCountDownTimerOnEndScreen=!1)},exitFullWindowOnEscKey:function(e){e.keyCode===i.KEYCODES.ESCAPE_KEY&&(e.preventDefault(),this.exitFullWindow())},onErrorEvent:function(e,t){this.unsubscribeBasicPlaybackEvents(),this.state.screenToShow=i.SCREEN.ERROR_SCREEN,this.state.playerState=i.STATE.ERROR,this.state.errorCode=t,this.renderSkin()},unsubscribeFromMessageBus:function(){this.unsubscribeBasicPlaybackEvents(),this.mb.unsubscribe(e.EVENTS.PLAYER_CREATED,"customerUi"),this.mb.unsubscribe(e.EVENTS.CONTENT_TREE_FETCHED,"customerUi"),this.mb.unsubscribe(e.EVENTS.SKIN_METADATA_FETCHED,"customerUi"),this.mb.unsubscribe(e.EVENTS.ATTRIBUTES_FETCHED,"customerUi"),this.mb.unsubscribe(e.EVENTS.AUTHORIZATION_FETCHED,"customerUi"),this.mb.unsubscribe(e.EVENTS.ASSET_CHANGED,"customerUi"),this.mb.unsubscribe(e.EVENTS.ASSET_UPDATED,"customerUi"),this.mb.unsubscribe(e.EVENTS.PLAYBACK_READY,"customerUi"),this.mb.unsubscribe(e.EVENTS.ERROR,"customerUi"),this.mb.unsubscribe(e.EVENTS.SET_EMBED_CODE_AFTER_OOYALA_AD,"customerUi")},unsubscribeBasicPlaybackEvents:function(){this.mb.unsubscribe(e.EVENTS.INITIAL_PLAY,"customerUi"),this.mb.unsubscribe(e.EVENTS.VC_PLAYED,"customerUi"),this.mb.unsubscribe(e.EVENTS.VC_PLAYING,"customerUi"),this.mb.unsubscribe(e.EVENTS.VC_PAUSE,"customerUi"),this.mb.unsubscribe(e.EVENTS.VC_PAUSED,"customerUi"),this.mb.unsubscribe(e.EVENTS.PLAYED,"customerUi"),this.mb.unsubscribe(e.EVENTS.PLAYHEAD_TIME_CHANGED,"customerUi"),this.mb.unsubscribe(e.EVENTS.SEEKED,"customerUi"),this.mb.unsubscribe(e.EVENTS.BUFFERING,"customerUi"),this.mb.unsubscribe(e.EVENTS.BUFFERED,"customerUi"),this.mb.unsubscribe(e.EVENTS.CLOSED_CAPTIONS_INFO_AVAILABLE,"customerUi"),this.mb.unsubscribe(e.EVENTS.BITRATE_INFO_AVAILABLE,"customerUi"),this.mb.unsubscribe(e.EVENTS.CLOSED_CAPTION_CUE_CHANGED,"customerUi"),this.mb.unsubscribe(e.EVENTS.CHANGE_CLOSED_CAPTION_LANGUAGE,"customerUi"),this.mb.unsubscribe(e.EVENTS.VOLUME_CHANGED,"customerUi"),this.mb.unsubscribe(e.EVENTS.PLAYBACK_READY,"customerUi"),this.state.isPlaybackReadySubscribed=!1,o.isIPhone()||(this.mb.unsubscribe(e.EVENTS.ADS_PLAYED,"customerUi"),this.mb.unsubscribe(e.EVENTS.WILL_PLAY_ADS,"customerUi"),this.mb.unsubscribe(e.EVENTS.AD_POD_STARTED,"customerUi"),this.mb.unsubscribe(e.EVENTS.WILL_PLAY_SINGLE_AD,"customerUi"),this.mb.unsubscribe(e.EVENTS.SINGLE_AD_PLAYED,"customerUi"),this.mb.unsubscribe(e.EVENTS.PLAY_NONLINEAR_AD,"customerUi"),this.mb.unsubscribe(e.EVENTS.NONLINEAR_AD_PLAYED,"customerUi"),this.mb.unsubscribe(e.EVENTS.HIDE_NONLINEAR_AD,"customerUi"),this.mb.unsubscribe(e.EVENTS.SHOW_NONLINEAR_AD,"customerUi"),this.mb.unsubscribe(e.EVENTS.SHOW_AD_SKIP_BUTTON,"customerUi"),this.mb.unsubscribe(e.EVENTS.SHOW_AD_CONTROLS,"customerUi"),this.mb.unsubscribe(e.EVENTS.SHOW_AD_MARQUEE,"customerUi"),e.EVENTS.DISCOVERY_API&&this.mb.unsubscribe(e.EVENTS.DISCOVERY_API.RELATED_VIDEOS_FETCHED,"customerUi")),this.state.isSubscribed=!1},renderSkin:function(e){this.state.configLoaded&&(e&&(this.state=a(this.state,e)),this.skin.switchComponent(this.state))},toggleDiscoveryScreen:function(){switch(this.state.playerState){case i.STATE.PLAYING:this.pausedCallback=function(){this.state.screenToShow=i.SCREEN.DISCOVERY_SCREEN,this.state.playerState=i.STATE.PAUSE,this.state.pluginsElement.addClass("oo-overlay-blur"),this.renderSkin(),e.log("finished toggleDiscoveryScreen")}.bind(this),this.togglePlayPause(),this.sendDiscoveryDisplayEvent("pauseScreen");break;case i.STATE.PAUSE:this.state.screenToShow===i.SCREEN.DISCOVERY_SCREEN?(this.state.pauseAnimationDisabled=!0,this.state.pluginsElement.removeClass("oo-overlay-blur"),this.state.screenToShow=i.SCREEN.PAUSE_SCREEN):(this.sendDiscoveryDisplayEvent("pauseScreen"),this.state.pluginsElement.addClass("oo-overlay-blur"),this.state.screenToShow=i.SCREEN.DISCOVERY_SCREEN);break;case i.STATE.END:this.state.screenToShow===i.SCREEN.DISCOVERY_SCREEN?(this.state.pluginsElement.removeClass("oo-overlay-blur"),this.state.screenToShow=i.SCREEN.END_SCREEN):(this.sendDiscoveryDisplayEvent("endScreen"),this.state.pluginsElement.addClass("oo-overlay-blur"),this.state.screenToShow=i.SCREEN.DISCOVERY_SCREEN,this.skin.props.skinConfig.discoveryScreen.showCountDownTimerOnEndScreen=!1)
}this.renderSkin()},toggleMute:function(t){this.mb.publish(e.EVENTS.CHANGE_VOLUME,t?0:1)},togglePlayPause:function(){switch(this.state.playerState){case i.STATE.START:this.mb.publish(e.EVENTS.INITIAL_PLAY,Date.now());break;case i.STATE.END:(o.isAndroid()||o.isIos())&&this.state.isSkipAdClicked?this.state.isSkipAdClicked=!1:this.mb.publish(e.EVENTS.REPLAY);break;case i.STATE.PAUSE:this.mb.publish(e.EVENTS.PLAY);break;case i.STATE.PLAYING:this.mb.publish(e.EVENTS.PAUSE)}},seek:function(t){this.state.playerState==i.STATE.END?(this.endSeeking(),this.mb.publish(e.EVENTS.REPLAY,t)):this.mb.publish(e.EVENTS.SEEK,t)},onLiveClick:function(){this.mb.publish(e.EVENTS.LIVE_BUTTON_CLICKED)},setVolume:function(t){this.mb.publish(e.EVENTS.CHANGE_VOLUME,t)},handleMuteClick:function(){var e={};this.state.volumeState.muted?(e={oldVolume:0,muted:!this.state.volumeState.muted},this.setVolume(this.state.volumeState.oldVolume)):(e={oldVolume:this.state.volumeState.volume,muted:!this.state.volumeState.muted},this.setVolume(0)),this.state.volumeState.oldVolume=e.oldVolume,this.state.volumeState.muted=e.muted},toggleShareScreen:function(){this.state.screenToShow==i.SCREEN.SHARE_SCREEN?this.closeScreen():this.state.playerState==i.STATE.PLAYING||this.state.playerState==i.STATE.START?(this.pausedCallback=function(){this.state.pluginsElement.addClass("oo-overlay-blur"),this.state.screenToShow=i.SCREEN.SHARE_SCREEN,this.renderSkin()}.bind(this),this.mb.publish(e.EVENTS.PAUSE)):(this.state.screenToShow=i.SCREEN.SHARE_SCREEN,this.state.pluginsElement.addClass("oo-overlay-blur"),this.renderSkin())},toggleScreen:function(t){this.state.screenToShow==t?this.closeScreen():this.state.playerState==i.STATE.PLAYING?(this.pausedCallback=function(){this.state.pluginsElement.addClass("oo-overlay-blur"),this.state.screenToShow=t,this.renderSkin()}.bind(this),this.mb.publish(e.EVENTS.PAUSE)):(this.state.screenToShow=t,this.state.pluginsElement.addClass("oo-overlay-blur"),this.renderSkin())},sendDiscoveryClickEvent:function(t,n){this.state.pluginsElement.removeClass("oo-overlay-blur"),n?(this.state.upNextInfo.delayedContentData=t,this.state.upNextInfo.delayedSetEmbedCodeEvent=!0):(this.state.upNextInfo.showing=!1,this.state.screenToShow=i.SCREEN.LOADING_SCREEN,this.renderSkin(),this.mb.publish(e.EVENTS.PAUSE),t.clickedVideo.embed_code?this.mb.publish(e.EVENTS.SET_EMBED_CODE,t.clickedVideo.embed_code,this.state.playerParam):t.clickedVideo.asset&&this.mb.publish(e.EVENTS.SET_ASSET,t.clickedVideo.asset),this.mb.publish(e.EVENTS.DISCOVERY_API.SEND_CLICK_EVENT,t))},sendDiscoveryDisplayEvent:function(t,n){var i=o.getPropertyValue(this.state.discoveryData,"relatedVideos",[]),r=i;if(n){var a=p.find(i,function(e){return e.embed_code===n});r=a?[a]:[]}var s={relatedVideos:r,custom:{source:t}};this.mb.publish(e.EVENTS.DISCOVERY_API.SEND_DISPLAY_EVENT,s)},toggleVideoQualityPopOver:function(){this.state.videoQualityOptions.showVideoQualityPopover=!this.state.videoQualityOptions.showVideoQualityPopover,this.renderSkin()},toggleClosedCaptionPopOver:function(){this.state.closedCaptionOptions.showClosedCaptionPopover=!this.state.closedCaptionOptions.showClosedCaptionPopover,this.renderSkin()},closePopovers:function(){this.state.closedCaptionOptions.showClosedCaptionPopover=!1,this.state.videoQualityOptions.showVideoQualityPopover=!1,this.renderSkin()},receiveVideoQualityChangeEvent:function(e,t){this.state.videoQualityOptions.selectedBitrate={id:t},this.renderSkin({videoQualityOptions:{availableBitrates:this.state.videoQualityOptions.availableBitrates,selectedBitrate:this.state.videoQualityOptions.selectedBitrate,showVideoQualityPopover:this.state.videoQualityOptions.showVideoQualityPopover}}),1==this.state.videoQualityOptions.showVideoQualityPopover&&this.toggleVideoQualityPopOver()},sendVideoQualityChangeEvent:function(t){this.state.videoQualityOptions.selectedBitrate={id:t.id},this.mb.publish(e.EVENTS.SET_TARGET_BITRATE,t.id)},setClosedCaptionsInfo:function(e){var t=this.state.closedCaptionsInfoCache[e];t&&(this.state.closedCaptionOptions.availableLanguages=t,this.state.closedCaptionOptions.enabled&&this.setClosedCaptionsLanguage())},setClosedCaptionsLanguage:function(){var t=this.state.closedCaptionOptions.availableLanguages;!t||null!=this.state.closedCaptionOptions.language&&p.contains(t.languages,this.state.closedCaptionOptions.language)||(this.state.closedCaptionOptions.language=t.languages[0]);var n=this.state.closedCaptionOptions.enabled?this.state.closedCaptionOptions.language:"",o=this.state.closedCaptionOptions.enabled?e.CONSTANTS.CLOSED_CAPTIONS.HIDDEN:e.CONSTANTS.CLOSED_CAPTIONS.DISABLED;this.mb.publish(e.EVENTS.SET_CLOSED_CAPTIONS_LANGUAGE,n,{mode:o})},closeScreen:function(){this.state.pluginsElement.removeClass("oo-overlay-blur"),this.state.pauseAnimationDisabled=!0,this.state.playerState==i.STATE.PAUSE?this.state.screenToShow=i.SCREEN.PAUSE_SCREEN:this.state.playerState==i.STATE.END&&(this.state.screenToShow=i.SCREEN.END_SCREEN),this.renderSkin()},onChangeClosedCaptionLanguage:function(t,n){var o=this.state.closedCaptionOptions.availableLanguages;if(n&&o&&p.contains(o.languages,n)){this.state.closedCaptionOptions.language=this.state.persistentSettings.closedCaptionOptions.language=n;var i=this.state.closedCaptionOptions.enabled?n:"",r=this.state.closedCaptionOptions.enabled?e.CONSTANTS.CLOSED_CAPTIONS.HIDDEN:e.CONSTANTS.CLOSED_CAPTIONS.DISABLED;this.mb.publish(e.EVENTS.SET_CLOSED_CAPTIONS_LANGUAGE,i,{mode:r}),this.renderSkin(),this.mb.publish(e.EVENTS.SAVE_PLAYER_SETTINGS,this.state.persistentSettings)}else e.log("Invalid closed caption language.")},onClosedCaptionChange:function(t,n){this.state.closedCaptionOptions[t]=this.state.persistentSettings.closedCaptionOptions[t]=n,"language"===t&&this.setClosedCaptionsLanguage(),this.renderSkin(),this.mb.publish(e.EVENTS.SAVE_PLAYER_SETTINGS,this.state.persistentSettings)},trySetAnamorphicFixState:function(t){if(this.state&&this.state.mainVideoInnerWrapper)if(t){var n=o.getPropertyValue(this.state.attributes,"provider.ots_stretch_to_output");(n===!0||"true"===n)&&(this.state.mainVideoInnerWrapper.addClass("oo-anamorphic"),e.log("Anamorphic video fix: ON"))}else this.state.mainVideoInnerWrapper.removeClass("oo-anamorphic"),e.log("Anamorphic video fix: OFF")},toggleClosedCaptionEnabled:function(){this.state.closedCaptionOptions.enabled=!this.state.closedCaptionOptions.enabled,this.state.persistentSettings.closedCaptionOptions.enabled=!!this.state.closedCaptionOptions.enabled,this.setClosedCaptionsLanguage(),this.renderSkin(),this.mb.publish(e.EVENTS.SAVE_PLAYER_SETTINGS,this.state.persistentSettings)},upNextDismissButtonClicked:function(){this.state.upNextInfo.countDownCancelled=!0,this.state.upNextInfo.showing=!1,this.renderSkin()},toggleMoreOptionsScreen:function(e){this.state.screenToShow==i.SCREEN.MORE_OPTIONS_SCREEN?this.closeMoreOptionsScreen():this.displayMoreOptionsScreen(e)},closeMoreOptionsScreen:function(){this.state.pauseAnimationDisabled=!0,this.state.screenToShow=i.SCREEN.PAUSE_SCREEN,this.state.playerState=i.STATE.PAUSE,this.state.moreOptionsItems=null,this.state.pluginsElement.removeClass("oo-overlay-blur"),this.renderSkin()},displayMoreOptionsScreen:function(t){this.state.playerState==i.STATE.PLAYING?(this.pausedCallback=function(){this.state.screenToShow=i.SCREEN.MORE_OPTIONS_SCREEN,this.state.pluginsElement.addClass("oo-overlay-blur"),this.renderSkin()}.bind(this),this.mb.publish(e.EVENTS.PAUSE)):(this.state.screenToShow=i.SCREEN.MORE_OPTIONS_SCREEN,this.state.pluginsElement.addClass("oo-overlay-blur"),this.renderSkin()),this.state.moreOptionsItems=t},enablePauseAnimation:function(){this.state.pauseAnimationDisabled=!1},beginSeeking:function(){this.state.seeking=!0},endSeeking:function(){this.state.seeking=!1},updateSeekingPlayhead:function(e){e=Math.min(Math.max(0,e),this.skin.state.duration),this.skin.updatePlayhead(e,this.skin.state.duration,this.skin.state.buffered)},hideVolumeSliderBar:function(){this.state.volumeState.volumeSliderVisible=!1,this.renderSkin()},showVolumeSliderBar:function(){this.state.volumeState.volumeSliderVisible=!0,o.isAndroid()&&this.startHideVolumeSliderTimer(),this.renderSkin()},startHideVolumeSliderTimer:function(){this.cancelTimer();var e=setTimeout(function(){this.state.volumeState.volumeSliderVisible===!0&&this.hideVolumeSliderBar()}.bind(this),3e3);this.state.timer=e},startHideControlBarTimer:function(){if(1==this.skin.props.skinConfig.controlBar.autoHide){this.cancelTimer();var e=setTimeout(function(){this.state.controlBarVisible===!0&&this.hideControlBar()}.bind(this),3e3);this.state.timer=e}},showControlBar:function(){this.state.controlBarVisible=!0},hideControlBar:function(){this.state.controlBarVisible=!1,o.isAndroid()&&this.hideVolumeSliderBar()},cancelTimer:function(){null!==this.state.timer&&(clearTimeout(this.state.timer),this.state.timer=null)},updateAspectRatio:function(){this.skin&&this.skin.props.skinConfig.responsive.aspectRatio&&"auto"!=this.skin.props.skinConfig.responsive.aspectRatio&&(this.state.mainVideoAspectRatio=this.skin.props.skinConfig.responsive.aspectRatio,this.setAspectRatio())},calculateAspectRatio:function(e,t){var n=(t/e*100).toFixed(2);return n},setAspectRatio:function(){this.state.mainVideoAspectRatio>0&&this.state.mainVideoInnerWrapper.css("padding-top",this.state.mainVideoAspectRatio+"%")},findMainVideoElement:function(e){var t=[];return e[0]&&(e=e[0]),e.tagName&&-1!=e.tagName.toLowerCase().indexOf(i.MEDIA_TYPE.VIDEO)?this.state.mainVideoMediaType=i.MEDIA_TYPE.HTML5:e.getElementsByTagName(i.MEDIA_TYPE.VIDEO).length?(t=e.getElementsByTagName(i.MEDIA_TYPE.VIDEO),t.length&&(e=t[0],this.state.mainVideoMediaType=i.MEDIA_TYPE.HTML5)):e.tagName&&-1!=e.tagName.toLowerCase().indexOf(i.MEDIA_TYPE.OBJECT)?this.state.mainVideoMediaType=i.MEDIA_TYPE.FLASH:e.getElementsByTagName(i.MEDIA_TYPE.OBJECT).length&&(t=e.getElementsByTagName(i.MEDIA_TYPE.OBJECT),t.length&&(e=t[0],this.state.mainVideoMediaType=i.MEDIA_TYPE.FLASH)),e}},exposeStaticApi=h,h})},{"../config/languageFiles/en.json":1,"../config/languageFiles/es.json":2,"../config/languageFiles/ja.json":3,"../config/languageFiles/zh.json":4,"../config/skin":5,"./components/accessibilityControls":6,"./components/utils":39,"./constants/constants":42,"./skin":48,deepmerge:59,react:255,"react-dom":63,screenfull:256}],44:[function(e,t){var n={componentDidMount:function(){this.props.controller.state.accessibilityControlsEnabled=!1},componentWillUnmount:function(){this.props.controller.state.accessibilityControlsEnabled=!0}};t.exports=n},{}],45:[function(e,t){var n={getInitialState:function(){return{animate:!1}},componentDidMount:function(){animateTimer=setTimeout(this.startAnimation,1)},componentWillUnmount:function(){clearTimeout(animateTimer)},startAnimation:function(){this.setState({animate:!0})}};t.exports=n},{}],46:[function(e,t){var n={componentWillReceiveProps:function(e){e.componentWidth!=this.props.componentWidth&&this.handleResize(e)}};t.exports=n},{}],47:[function(e,t){var n=e("react-dom"),o=e("classnames"),i=e("lodash.debounce"),r={getInitialState:function(){return{componentWidth:null,responsiveClass:null,responsiveId:null}},componentDidMount:function(){window.addEventListener("resize",i(this.onResize,150)),window.addEventListener("webkitfullscreenchange",i(this.onResize,150)),this.generateResponsiveData()},componentWillUnmount:function(){window.removeEventListener("resize",this.onResize),window.removeEventListener("webkitfullscreenchange",this.onResize)},onResize:function(){this.generateResponsiveData()},generateResponsiveData:function(){var e=n.findDOMNode(this).getBoundingClientRect().width,t=this.props.skinConfig.responsive.breakpoints,i={classes:{},ids:{}};for(var r in t)t.hasOwnProperty(r)&&(t[r].minWidth&&!t[r].maxWidth?i.classes[t[r].name]=i.ids[t[r].id]=e>=t[r].minWidth:t[r].minWidth&&t[r].maxWidth?i.classes[t[r].name]=i.ids[t[r].id]=e>=t[r].minWidth&&e<=t[r].maxWidth:t[r].maxWidth&&!t[r].minWidth&&(i.classes[t[r].name]=i.ids[t[r].id]=e<=t[r].maxWidth));this.setState({componentWidth:e,responsiveClass:o(i.classes),responsiveId:o(i.ids)})}};t.exports=r},{classnames:58,"lodash.debounce":60,"react-dom":63}],48:[function(e,t){var n=e("react"),o=e("./components/utils"),i=e("./constants/constants"),r=e("./components/spinner"),a=e("./components/closed-caption/onOffSwitch"),s=e("./components/closed-caption/closedCaptionPanel"),l=e("./components/discoveryPanel"),c=e("./components/videoQualityPanel"),u=e("./components/sharePanel"),p=e("./components/moreOptionsPanel"),d=e("./views/adScreen"),h=e("./views/endScreen"),f=e("./views/startScreen"),m=e("./views/pauseScreen"),v=e("./views/playingScreen"),g=e("./views/errorScreen"),E=e("./views/contentScreen"),y=e("./mixins/responsiveManagerMixin"),b=n.createClass({displayName:"Skin",mixins:[y],getInitialState:function(){return this.overlayRenderingEventSent=!1,{screenToShow:null,currentPlayhead:0,discoveryData:null}},componentDidUpdate:function(){if(null!==this.state.screenToShow&&!this.overlayRenderingEventSent){var e=this.props.skinConfig.responsive.breakpoints[this.state.responsiveId].multiplier,t=e*this.props.skinConfig.controlBar.height;this.props.controller.publishOverlayRenderingEvent(t),this.overlayRenderingEventSent=!0}},componentDidMount:function(){window.addEventListener("mouseup",this.handleClickOutsidePlayer)},componentWillUnmount:function(){window.removeEventListener("mouseup",this.handleClickOutsidePlayer)},handleClickOutsidePlayer:function(){this.props.controller.state.accessibilityControlsEnabled=!1},switchComponent:function(e){var t=e||{};this.setState(t)},updatePlayhead:function(e,t,n,o){this.setState({currentPlayhead:e,duration:t,buffered:n,currentAdPlayhead:o})},render:function(){var e;if(o.isIE10())e=this.state.screenToShow==i.SCREEN.START_SCREEN?n.createElement(f,n.__spread({},this.props,{componentWidth:this.state.componentWidth,contentTree:this.state.contentTree})):n.createElement("div",null);else switch(this.state.screenToShow){case i.SCREEN.LOADING_SCREEN:e=n.createElement(r,{loadingImage:this.props.skinConfig.general.loadingImage.imageResource.url});break;case i.SCREEN.START_SCREEN:e=n.createElement(f,n.__spread({},this.props,{componentWidth:this.state.componentWidth,contentTree:this.state.contentTree}));break;case i.SCREEN.PLAYING_SCREEN:e=n.createElement(v,n.__spread({},this.props,{contentTree:this.state.contentTree,currentPlayhead:this.state.currentPlayhead,duration:this.state.duration,buffered:this.state.buffered,fullscreen:this.state.fullscreen,playerState:this.state.playerState,seeking:this.state.seeking,upNextInfo:this.state.upNextInfo,isLiveStream:this.state.isLiveStream,controlBarAutoHide:this.props.skinConfig.controlBar.autoHide,responsiveView:this.state.responsiveId,componentWidth:this.state.componentWidth,videoQualityOptions:this.state.videoQualityOptions,closedCaptionOptions:this.props.closedCaptionOptions,ref:"playScreen"}));break;case i.SCREEN.SHARE_SCREEN:e=n.createElement(E,n.__spread({},this.props,{screen:i.SCREEN.SHARE_SCREEN,icon:"share"}),n.createElement(u,n.__spread({},this.props,{assetId:this.state.assetId,playerParam:this.state.playerParam,contentTree:this.state.contentTree})));break;case i.SCREEN.PAUSE_SCREEN:e=n.createElement(m,n.__spread({},this.props,{contentTree:this.state.contentTree,currentPlayhead:this.state.currentPlayhead,playerState:this.state.playerState,duration:this.state.duration,buffered:this.state.buffered,pauseAnimationDisabled:this.state.pauseAnimationDisabled,fullscreen:this.state.fullscreen,seeking:this.state.seeking,upNextInfo:this.state.upNextInfo,isLiveStream:this.state.isLiveStream,responsiveView:this.state.responsiveId,componentWidth:this.state.componentWidth,videoQualityOptions:this.state.videoQualityOptions,ref:"pauseScreen"}));break;case i.SCREEN.END_SCREEN:e=n.createElement(h,n.__spread({},this.props,{contentTree:this.state.contentTree,discoveryData:this.state.discoveryData,currentPlayhead:this.state.currentPlayhead,duration:this.state.duration,buffered:this.state.buffered,fullscreen:this.state.fullscreen,playerState:this.state.playerState,seeking:this.state.seeking,isLiveStream:this.state.isLiveStream,responsiveView:this.state.responsiveId,videoQualityOptions:this.state.videoQualityOptions,componentWidth:this.state.componentWidth,ref:"endScreen"}));break;case i.SCREEN.AD_SCREEN:e=n.createElement(d,n.__spread({},this.props,{contentTree:this.state.contentTree,currentAdsInfo:this.state.currentAdsInfo,currentPlayhead:this.state.currentPlayhead,currentAdPlayhead:this.state.currentAdPlayhead,fullscreen:this.state.fullscreen,playerState:this.state.playerState,duration:this.state.duration,adVideoDuration:this.props.controller.state.adVideoDuration,buffered:this.state.buffered,seeking:this.state.seeking,controlBarAutoHide:this.props.skinConfig.controlBar.autoHide,responsiveView:this.state.responsiveId,componentWidth:this.state.componentWidth,videoQualityOptions:this.state.videoQualityOptions,adStartTime:this.state.adStartTime,ref:"adScreen"}));break;case i.SCREEN.DISCOVERY_SCREEN:e=n.createElement(E,n.__spread({},this.props,{screen:i.SCREEN.DISCOVERY_SCREEN,titleText:i.SKIN_TEXT.DISCOVER,icon:"discovery"}),n.createElement(l,n.__spread({},this.props,{videosPerPage:{xs:2,sm:4,md:6,lg:8},forceCountDownTimer:this.state.forceCountDownTimerOnEndScreen,discoveryData:this.state.discoveryData,playerState:this.state.playerState,responsiveView:this.state.responsiveId,componentWidth:this.state.componentWidth})));break;case i.SCREEN.MORE_OPTIONS_SCREEN:e=n.createElement(E,n.__spread({},this.props,{screen:i.SCREEN.MORE_OPTIONS_SCREEN}),n.createElement(p,n.__spread({},this.props,{fullscreen:this.state.fullscreen})));break;case i.SCREEN.CLOSEDCAPTION_SCREEN:e=n.createElement(E,n.__spread({},this.props,{screen:i.SCREEN.CLOSEDCAPTION_SCREEN,screenClassName:"oo-content-screen oo-content-screen-closed-captions",titleText:i.SKIN_TEXT.CC_OPTIONS,closedCaptionOptions:this.props.closedCaptionOptions,element:n.createElement(a,n.__spread({},this.props)),icon:"cc"}),n.createElement(s,n.__spread({},this.props,{closedCaptionOptions:this.props.closedCaptionOptions,dataItemsPerPage:{xs:1,sm:4,md:8,lg:8},responsiveView:this.state.responsiveId,componentWidth:this.state.componentWidth})));break;case i.SCREEN.VIDEO_QUALITY_SCREEN:e=n.createElement(E,n.__spread({},this.props,{screen:i.SCREEN.VIDEO_QUALITY_SCREEN,titleText:i.SKIN_TEXT.VIDEO_QUALITY,icon:"quality"}),n.createElement(c,n.__spread({},this.props,{fullscreen:this.state.fullscreen,videoQualityOptions:this.state.videoQualityOptions,responsiveView:this.state.responsiveId})));break;case i.SCREEN.ERROR_SCREEN:e=n.createElement(g,n.__spread({},this.props,{errorCode:this.props.controller.state.errorCode}));break;default:e=n.createElement("div",null)}return n.createElement("div",{id:"oo-responsive",className:this.state.responsiveClass},e)}});b.defaultProps={skinConfig:{general:{loadingImage:{imageResource:{url:null}}},responsive:{breakpoints:{md:{multiplier:1}}},controlBar:{height:90}},controller:{state:{adVideoDuration:0,errorCode:404},publishOverlayRenderingEvent:function(){}}},t.exports=b},{"./components/closed-caption/closedCaptionPanel":12,"./components/closed-caption/onOffSwitch":18,"./components/discoveryPanel":26,"./components/moreOptionsPanel":29,"./components/sharePanel":31,"./components/spinner":33,"./components/utils":39,"./components/videoQualityPanel":40,"./constants/constants":42,"./mixins/responsiveManagerMixin":47,"./views/adScreen":49,"./views/contentScreen":50,"./views/endScreen":51,"./views/errorScreen":52,"./views/pauseScreen":53,"./views/playingScreen":54,"./views/startScreen":56,react:255}],49:[function(e,t){var n=e("react"),o=e("../constants/constants"),i=e("../components/adPanel"),r=e("../components/controlBar"),a=e("classnames"),s=e("../components/utils"),l=e("../mixins/resizeMixin"),c=e("../components/icon"),u=n.createClass({displayName:"AdScreen",mixins:[l],getInitialState:function(){return this.isMobile=this.props.controller.state.isMobile,{controlBarVisible:!0,timer:null}},componentDidMount:function(){(this.isMobile||this.props.fullscreen)&&this.props.controller.startHideControlBarTimer()},componentWillUpdate:function(e){e&&(0==e.controller.state.controlBarVisible&&1==this.state.controlBarVisible&&this.hideControlBar(),1==e.controller.state.controlBarVisible&&0==this.state.controlBarVisible&&this.showControlBar(),!this.props.fullscreen&&e.fullscreen&&this.state.playerState!=o.STATE.PAUSE&&this.props.controller.startHideControlBarTimer(),this.props.fullscreen&&!e.fullscreen&&this.isMobile&&(this.showControlBar(),this.props.controller.startHideControlBarTimer()))},componentWillUnmount:function(){this.props.controller.cancelTimer()},handleResize:function(){this.isMounted()&&this.props.controller.startHideControlBarTimer()},handleClick:function(e){e.stopPropagation(),e.cancelBubble=!0,this.props.controller.state.accessibilityControlsEnabled=!0,"click"!=e.type&&this.isMobile||this.props.skinConfig.adScreen.showAdMarquee||this.props.controller.onAdsClicked(o.AD_CLICK_SOURCE.VIDEO_WINDOW)},handlePlayerClicked:function(e){"touchend"!=e.type&&this.isMobile||(s.isIPhone()&&this.state.playerState==o.STATE.PAUSE?this.props.controller.togglePlayPause():(e.stopPropagation(),e.cancelBubble=!0,this.props.controller.onAdsClicked(o.AD_CLICK_SOURCE.VIDEO_WINDOW)))},showControlBar:function(){this.setState({controlBarVisible:!0}),this.props.controller.showControlBar()},hideControlBar:function(e){1!=this.props.controlBarAutoHide||this.isMobile&&e||(this.setState({controlBarVisible:!1}),this.props.controller.hideControlBar())},handleTouchEnd:function(e){!this.state.controlBarVisible&&this.props.skinConfig.adScreen.showControlBar&&(this.showControlBar(),this.props.playerState==o.STATE.PAUSE&&this.props.controller.startHideControlBarTimer()),this.handlePlayerClicked(e)},handlePlayerMouseMove:function(){this.props.playerState!==o.STATE.PAUSE&&!this.isMobile&&this.props.fullscreen&&(this.showControlBar(),this.props.controller.startHideControlBarTimer())},getPlaybackControlItems:function(){if(!this.props.controller.state.showAdControls)return null;var e=this.props.playerState==o.STATE.PAUSE||this.props.controller.state.forceControlBarVisible||this.state.controlBarVisible,t={controlBar:n.createElement(r,n.__spread({},this.props,{controlBarVisible:e,playerState:this.props.playerState,key:"controlBar"}))},i=[];for(var a in t)t.hasOwnProperty(a)&&i.push(t[a]);return i},render:function(){var e={color:this.props.skinConfig.pauseScreen.PauseIconStyle.color,opacity:this.props.skinConfig.pauseScreen.PauseIconStyle.opacity},t=a({"oo-action-icon-pause":!this.props.controller.state.adPauseAnimationDisabled,"oo-action-icon":this.props.controller.state.adPauseAnimationDisabled,"oo-animate-pause":!this.props.controller.state.adPauseAnimationDisabled,"oo-action-icon-top":this.props.skinConfig.pauseScreen.pauseIconPosition.toLowerCase().indexOf("top")>-1,"oo-action-icon-bottom":this.props.skinConfig.pauseScreen.pauseIconPosition.toLowerCase().indexOf("bottom")>-1,"oo-action-icon-left":this.props.skinConfig.pauseScreen.pauseIconPosition.toLowerCase().indexOf("left")>-1,"oo-action-icon-right":this.props.skinConfig.pauseScreen.pauseIconPosition.toLowerCase().indexOf("right")>-1,"oo-hidden":!this.props.skinConfig.pauseScreen.showPauseIcon,"oo-icon-hidden":this.props.playerState!=o.STATE.PAUSE}),r=null;this.props.skinConfig.adScreen.showAdMarquee&&this.props.controller.state.showAdMarquee&&(r=n.createElement(i,n.__spread({},this.props)));var s=null;return this.props.skinConfig.adScreen.showControlBar&&(s=this.getPlaybackControlItems()),n.createElement("div",{className:"oo-state-screen oo-ad-screen",ref:"adScreen",onMouseOver:this.showControlBar,onMouseOut:this.hideControlBar,onMouseMove:this.handlePlayerMouseMove,onMouseUp:this.handleClick},n.createElement("a",{className:t},n.createElement(c,n.__spread({},this.props,{icon:"pause",style:e}))),n.createElement("div",{className:"oo-ad-panel",ref:"adPanel",onClick:this.handlePlayerClicked,onTouchEnd:this.handleTouchEnd},r),n.createElement("div",{className:"oo-interactive-container"},s))}});t.exports=u},{"../components/adPanel":8,"../components/controlBar":22,"../components/icon":27,"../components/utils":39,"../constants/constants":42,"../mixins/resizeMixin":46,classnames:58,react:255}],50:[function(e,t){var n=e("react"),o=e("../components/closeButton"),i=e("../components/utils"),r=e("../constants/constants"),a=e("../components/icon"),s=e("../components/watermark"),l=e("../mixins/accessibilityMixin"),c=n.createClass({displayName:"ContentScreen",mixins:[l],handleClose:function(){switch(this.props.screen){case r.SCREEN.DISCOVERY_SCREEN:this.props.controller.toggleDiscoveryScreen();break;default:this.props.controller.toggleScreen(this.props.screen)}},render:function(){var e=this.props.screen==r.SCREEN.CLOSEDCAPTION_SCREEN?n.createElement("div",{className:"oo-closed-caption-overlay"}):null,t={};switch(this.props.screen){case r.SCREEN.DISCOVERY_SCREEN:t.fontFamily=i.getPropertyValue(this.props.skinConfig,"discoveryScreen.panelTitle.titleFont.fontFamily"),t.color=i.getPropertyValue(this.props.skinConfig,"discoveryScreen.panelTitle.titleFont.color")}var l=this.props.titleText?n.createElement("div",{className:"oo-content-screen-title",style:t},i.getLocalizedString(this.props.language,this.props.titleText,this.props.localizableStrings),n.createElement(a,n.__spread({},this.props,{icon:this.props.icon})),this.props.element):null;return n.createElement("div",null,n.createElement(s,n.__spread({},this.props,{controlBarVisible:!1,nonClickable:!0})),n.createElement("div",{className:this.props.screenClassName},e,n.createElement("div",{className:this.props.titleBarClassName},l,n.createElement(o,n.__spread({},this.props,{closeAction:this.handleClose}))),this.props.children))}});c.propTypes={element:n.PropTypes.element,skinConfig:n.PropTypes.shape({discoveryScreen:n.PropTypes.shape({panelTitle:n.PropTypes.shape({titleFont:n.PropTypes.shape({color:n.PropTypes.string,fontFamily:n.PropTypes.string})})})})},c.defaultProps={screen:r.SCREEN.SHARE_SCREEN,screenClassName:"oo-content-screen",titleBarClassName:"oo-content-screen-title-bar",titleText:"",element:null,icon:"share",controller:{toggleScreen:function(){},state:{accessibilityControlsEnabled:!0}}},t.exports=c},{"../components/closeButton":9,"../components/icon":27,"../components/utils":39,"../components/watermark":41,"../constants/constants":42,"../mixins/accessibilityMixin":44,react:255}],51:[function(e,t){var n=e("react"),o=e("react-dom"),i=e("classnames"),r=e("../components/controlBar"),a=e("../components/watermark"),s=e("../components/icon"),l=e("../mixins/resizeMixin"),c=e("../components/utils"),u=n.createClass({displayName:"EndScreen",mixins:[l],getInitialState:function(){return{controlBarVisible:!0,descriptionText:this.props.contentTree.description}},componentDidMount:function(){this.handleResize()},handleResize:function(){o.findDOMNode(this.refs.description)&&this.setState({descriptionText:c.truncateTextToWidth(o.findDOMNode(this.refs.description),this.props.contentTree.description)})},handleClick:function(e){e.preventDefault(),this.props.controller.state.accessibilityControlsEnabled=!0,this.props.controller.togglePlayPause()},render:function(){var e={color:this.props.skinConfig.endScreen.replayIconStyle.color,opacity:this.props.skinConfig.endScreen.replayIconStyle.opacity},t={color:this.props.skinConfig.startScreen.titleFont.color},o={color:this.props.skinConfig.startScreen.descriptionFont.color},l=i({"oo-action-icon":!0,"oo-hidden":!this.props.skinConfig.endScreen.showReplayButton}),u=c.getPropertyValue(this.props.skinConfig,"endScreen.infoPanelPosition");if(u)var p=i({"oo-state-screen-info":!0,"oo-info-panel-top":u.toLowerCase().indexOf("top")>-1,"oo-info-panel-bottom":u.toLowerCase().indexOf("bottom")>-1,"oo-info-panel-left":u.toLowerCase().indexOf("left")>-1,"oo-info-panel-right":u.toLowerCase().indexOf("right")>-1}),d=i({"oo-state-screen-title":!0,"oo-text-truncate":!0,"oo-pull-right":u.toLowerCase().indexOf("right")>-1,"oo-hidden":!c.getPropertyValue(this.props.skinConfig,"endScreen.showTitle")}),h=i({"oo-state-screen-description":!0,"oo-pull-right":u.toLowerCase().indexOf("right")>-1,"oo-hidden":!c.getPropertyValue(this.props.skinConfig,"endScreen.showDescription")});var f=n.createElement("div",{className:d,style:t},this.props.contentTree.title),m=n.createElement("div",{className:h,ref:"description",style:o},this.state.descriptionText);return n.createElement("div",{className:"oo-state-screen oo-end-screen"},n.createElement("div",{className:"oo-underlay-gradient"}),n.createElement("a",{className:"oo-state-screen-selectable",onClick:this.handleClick}),n.createElement(a,n.__spread({},this.props,{controlBarVisible:this.state.controlBarVisible})),n.createElement("div",{className:p},f,m),n.createElement("a",{className:l,onClick:this.handleClick},n.createElement(s,n.__spread({},this.props,{icon:"replay",style:e}))),n.createElement("div",{className:"oo-interactive-container"},n.createElement(r,n.__spread({},this.props,{controlBarVisible:this.state.controlBarVisible,playerState:this.props.playerState,isLiveStream:this.props.isLiveStream}))))}});t.exports=u},{"../components/controlBar":22,"../components/icon":27,"../components/utils":39,"../components/watermark":41,"../mixins/resizeMixin":46,classnames:58,react:255,"react-dom":63}],52:[function(e,t){var n=e("react"),o=e("classnames"),i=e("../constants/constants"),r=e("../components/utils"),a=e("../mixins/accessibilityMixin"),s=n.createClass({displayName:"ErrorScreen",mixins:[a],render:function(){var e,t,a;i.ERROR_MESSAGE.hasOwnProperty(this.props.errorCode.code)?(e=r.getLocalizedString(this.props.language,i.ERROR_MESSAGE[this.props.errorCode.code].title,this.props.localizableStrings),t=r.getLocalizedString(this.props.language,i.ERROR_MESSAGE[this.props.errorCode.code].description,this.props.localizableStrings),a=r.getLocalizedString(this.props.language,i.SKIN_TEXT.ERROR_ACTION,this.props.localizableStrings)):(t=r.getLocalizedString(this.props.language,i.SKIN_TEXT.UNKNOWN_ERROR,this.props.localizableStrings),e=null,a=null);var s=o({"oo-error-content":!0,"oo-center-block":!0});return n.createElement("div",{className:"oo-state-screen oo-error-screen"},n.createElement("div",{className:s},n.createElement("div",{className:"oo-error-title oo-text-uppercase"},e),n.createElement("div",{className:"oo-error-description"},t),n.createElement("div",{className:"oo-error-action oo-text-uppercase"},a)))}});s.defaultProps={controller:{state:{accessibilityControlsEnabled:!0}}},t.exports=s},{"../components/utils":39,"../constants/constants":42,"../mixins/accessibilityMixin":44,classnames:58,react:255}],53:[function(e,t){var n=e("react"),o=e("react-dom"),i=e("classnames"),r=e("../components/controlBar"),a=e("../components/adOverlay"),s=e("../components/upNextPanel"),l=e("../components/textTrackPanel"),c=e("../components/watermark"),u=e("../mixins/resizeMixin"),p=e("../components/icon"),d=e("../components/utils"),h=e("../mixins/animateMixin"),f=n.createClass({displayName:"PauseScreen",mixins:[u,h],getInitialState:function(){return{descriptionText:this.props.contentTree.description,controlBarVisible:!0}},componentDidMount:function(){this.handleResize()},componentWillUnmount:function(){this.props.controller.enablePauseAnimation()},handleResize:function(){o.findDOMNode(this.refs.description)&&this.setState({descriptionText:d.truncateTextToWidth(o.findDOMNode(this.refs.description),this.props.contentTree.description)})},handleClick:function(e){e.preventDefault(),this.props.controller.togglePlayPause(),this.props.controller.state.accessibilityControlsEnabled=!0},render:function(){var e={color:this.props.skinConfig.startScreen.titleFont.color},t={color:this.props.skinConfig.startScreen.descriptionFont.color},o={color:this.props.skinConfig.pauseScreen.PauseIconStyle.color,opacity:this.props.skinConfig.pauseScreen.PauseIconStyle.opacity},u=i({"oo-fading-underlay":!this.props.pauseAnimationDisabled,"oo-fading-underlay-active":this.props.pauseAnimationDisabled,"oo-animate-fade":this.state.animate&&!this.props.pauseAnimationDisabled}),d=i({"oo-state-screen-info":!0,"oo-info-panel-top":this.props.skinConfig.pauseScreen.infoPanelPosition.toLowerCase().indexOf("top")>-1,"oo-info-panel-bottom":this.props.skinConfig.pauseScreen.infoPanelPosition.toLowerCase().indexOf("bottom")>-1,"oo-info-panel-left":this.props.skinConfig.pauseScreen.infoPanelPosition.toLowerCase().indexOf("left")>-1,"oo-info-panel-right":this.props.skinConfig.pauseScreen.infoPanelPosition.toLowerCase().indexOf("right")>-1}),h=i({"oo-state-screen-title":!0,"oo-text-truncate":!0,"oo-pull-right":this.props.skinConfig.pauseScreen.infoPanelPosition.toLowerCase().indexOf("right")>-1}),f=i({"oo-state-screen-description":!0,"oo-pull-right":this.props.skinConfig.pauseScreen.infoPanelPosition.toLowerCase().indexOf("right")>-1}),m=i({"oo-action-icon-pause":!this.props.pauseAnimationDisabled,"oo-action-icon":this.props.pauseAnimationDisabled,"oo-animate-pause":this.state.animate&&!this.props.pauseAnimationDisabled,"oo-action-icon-top":this.props.skinConfig.pauseScreen.pauseIconPosition.toLowerCase().indexOf("top")>-1,"oo-action-icon-bottom":this.props.skinConfig.pauseScreen.pauseIconPosition.toLowerCase().indexOf("bottom")>-1,"oo-action-icon-left":this.props.skinConfig.pauseScreen.pauseIconPosition.toLowerCase().indexOf("left")>-1,"oo-action-icon-right":this.props.skinConfig.pauseScreen.pauseIconPosition.toLowerCase().indexOf("right")>-1,"oo-hidden":!this.props.skinConfig.pauseScreen.showPauseIcon||this.props.pauseAnimationDisabled}),v=n.createElement("div",{className:h,style:e},this.props.contentTree.title),g=n.createElement("div",{className:f,ref:"description",style:t},this.state.descriptionText),E=this.props.controller.state.adOverlayUrl&&this.props.controller.state.showAdOverlay?n.createElement(a,n.__spread({},this.props,{overlay:this.props.controller.state.adOverlayUrl,showOverlay:this.props.controller.state.showAdOverlay,showOverlayCloseButton:this.props.controller.state.showAdOverlayCloseButton})):null,y=this.props.controller.state.upNextInfo.showing&&this.props.controller.state.upNextInfo.upNextData?n.createElement(s,n.__spread({},this.props,{controlBarVisible:this.state.controlBarVisible,currentPlayhead:this.props.currentPlayhead})):null;
    return n.createElement("div",{className:"oo-state-screen oo-pause-screen"},n.createElement("div",{className:u}),n.createElement("a",{className:"oo-state-screen-selectable",onClick:this.handleClick}),n.createElement(c,n.__spread({},this.props,{controlBarVisible:this.state.controlBarVisible})),n.createElement("div",{className:d},this.props.skinConfig.pauseScreen.showTitle?v:null,this.props.skinConfig.pauseScreen.showDescription?g:null),n.createElement("a",{className:m,onClick:this.handleClick},n.createElement(p,n.__spread({},this.props,{icon:"pause",style:o}))),n.createElement("div",{className:"oo-interactive-container"},this.props.closedCaptionOptions.enabled?n.createElement(l,{closedCaptionOptions:this.props.closedCaptionOptions,cueText:this.props.closedCaptionOptions.cueText,responsiveView:this.props.responsiveView}):null,E,y,n.createElement(r,n.__spread({},this.props,{controlBarVisible:this.state.controlBarVisible,playerState:this.state.playerState,isLiveStream:this.props.isLiveStream}))))}});t.exports=f},{"../components/adOverlay":7,"../components/controlBar":22,"../components/icon":27,"../components/textTrackPanel":35,"../components/upNextPanel":38,"../components/utils":39,"../components/watermark":41,"../mixins/animateMixin":45,"../mixins/resizeMixin":46,classnames:58,react:255,"react-dom":63}],54:[function(e,t){var n=e("react"),o=e("react-dom"),i=e("../components/controlBar"),r=e("../components/adOverlay"),a=(e("classnames"),e("../components/upNextPanel")),s=e("../components/spinner"),l=e("../components/textTrackPanel"),c=e("../components/watermark"),u=e("../mixins/resizeMixin"),p=n.createClass({displayName:"PlayingScreen",mixins:[u],getInitialState:function(){return this.isMobile=this.props.controller.state.isMobile,this.browserSupportsTouch=this.props.controller.state.browserSupportsTouch,{controlBarVisible:!0,timer:null}},componentDidMount:function(){(this.isMobile||this.props.fullscreen||this.browserSupportsTouch)&&this.props.controller.startHideControlBarTimer()},componentWillUpdate:function(e){e&&(0==e.controller.state.controlBarVisible&&1==this.state.controlBarVisible&&this.hideControlBar(),!this.props.fullscreen&&e.fullscreen&&this.props.controller.startHideControlBarTimer(),this.props.fullscreen&&!e.fullscreen&&this.isMobile&&(this.setState({controlBarVisible:!0}),this.props.controller.showControlBar(),this.props.controller.startHideControlBarTimer()))},componentWillUnmount:function(){this.props.controller.cancelTimer()},handleResize:function(){this.isMounted()&&this.props.controller.startHideControlBarTimer()},handlePlayerMouseUp:function(e){this.isMobile||(e.stopPropagation(),e.cancelBubble=!0,this.props.controller.togglePlayPause(),this.props.controller.state.accessibilityControlsEnabled=!0)},handleTouchEnd:function(e){e.preventDefault(),this.state.controlBarVisible?this.props.controller.togglePlayPause():(this.showControlBar(e),this.props.controller.startHideControlBarTimer())},handlePlayerMouseMove:function(){!this.isMobile&&this.props.fullscreen&&(this.showControlBar(),this.props.controller.startHideControlBarTimer())},showControlBar:function(e){this.isMobile&&"touchend"!=e.type||(this.setState({controlBarVisible:!0}),this.props.controller.showControlBar(),o.findDOMNode(this.refs.PlayingScreen).style.cursor="auto")},hideControlBar:function(e){1!=this.props.controlBarAutoHide||this.isMobile&&e||(this.setState({controlBarVisible:!1}),this.props.controller.hideControlBar(),o.findDOMNode(this.refs.PlayingScreen).style.cursor="none")},render:function(){var e=this.props.controller.state.adOverlayUrl&&this.props.controller.state.showAdOverlay?n.createElement(r,n.__spread({},this.props,{overlay:this.props.controller.state.adOverlayUrl,showOverlay:this.props.controller.state.showAdOverlay,showOverlayCloseButton:this.props.controller.state.showAdOverlayCloseButton})):null,t=this.props.controller.state.upNextInfo.showing&&this.props.controller.state.upNextInfo.upNextData?n.createElement(a,n.__spread({},this.props,{controlBarVisible:this.state.controlBarVisible,currentPlayhead:this.props.currentPlayhead})):null;return n.createElement("div",{className:"oo-state-screen oo-playing-screen",ref:"PlayingScreen",onMouseOver:this.showControlBar,onMouseOut:this.hideControlBar,onMouseMove:this.handlePlayerMouseMove},n.createElement("div",{className:"oo-state-screen-selectable",onMouseUp:this.handlePlayerMouseUp,onTouchEnd:this.handleTouchEnd}),n.createElement(c,n.__spread({},this.props,{controlBarVisible:this.state.controlBarVisible})),this.props.controller.state.buffering?n.createElement(s,{loadingImage:this.props.skinConfig.general.loadingImage.imageResource.url}):null,n.createElement("div",{className:"oo-interactive-container"},this.props.closedCaptionOptions.enabled?n.createElement(l,{closedCaptionOptions:this.props.closedCaptionOptions,cueText:this.props.closedCaptionOptions.cueText,responsiveView:this.props.responsiveView}):null,e,t,n.createElement(i,n.__spread({},this.props,{controlBarVisible:this.state.controlBarVisible,playerState:this.props.playerState,isLiveStream:this.props.isLiveStream}))))}});t.exports=p},{"../components/adOverlay":7,"../components/controlBar":22,"../components/spinner":33,"../components/textTrackPanel":35,"../components/upNextPanel":38,"../components/watermark":41,"../mixins/resizeMixin":46,classnames:58,react:255,"react-dom":63}],55:[function(e,t){var n=e("react"),o=n.createClass({displayName:"Popover",render:function(){return n.createElement("div",{className:this.props.popoverClassName},this.props.children)}});o.defaultProps={popoverClassName:"oo-popover"},t.exports=o},{react:255}],56:[function(e,t){var n=e("react"),o=e("react-dom"),i=e("classnames"),r=e("../constants/constants"),a=e("../components/spinner"),s=e("../components/icon"),l=e("../components/watermark"),c=e("../mixins/resizeMixin"),u=e("../components/utils"),p=n.createClass({displayName:"StartScreen",mixins:[c],getInitialState:function(){return{playButtonClicked:!1,descriptionText:this.props.contentTree.description}},componentDidMount:function(){this.handleResize()},componentWillReceiveProps:function(e){e.contentTree.description!=this.props.contentTree.description&&this.handleResize(e)},handleResize:function(e){var t=e?e.contentTree.description:this.props.contentTree.description;o.findDOMNode(this.refs.description)&&this.setState({descriptionText:u.truncateTextToWidth(o.findDOMNode(this.refs.description),t)})},handleClick:function(e){e.preventDefault(),this.props.controller.togglePlayPause(),this.props.controller.state.accessibilityControlsEnabled=!0,this.setState({playButtonClicked:!0})},render:function(){var e={color:this.props.skinConfig.startScreen.titleFont.color},t={color:this.props.skinConfig.startScreen.descriptionFont.color},o={color:this.props.skinConfig.startScreen.playIconStyle.color,opacity:this.props.skinConfig.startScreen.playIconStyle.opacity},c=this.props.skinConfig.startScreen.showPromo?this.props.contentTree.promo_image:"",p={};u.isValidString(c)&&(p.backgroundImage="url('"+c+"')");var d=i({"oo-state-screen-poster":"small"!=this.props.skinConfig.startScreen.promoImageSize,"oo-state-screen-poster-small":"small"==this.props.skinConfig.startScreen.promoImageSize}),h=i({"oo-state-screen-info":!0,"oo-info-panel-top":this.props.skinConfig.startScreen.infoPanelPosition.toLowerCase().indexOf("top")>-1,"oo-info-panel-bottom":this.props.skinConfig.startScreen.infoPanelPosition.toLowerCase().indexOf("bottom")>-1,"oo-info-panel-left":this.props.skinConfig.startScreen.infoPanelPosition.toLowerCase().indexOf("left")>-1,"oo-info-panel-right":this.props.skinConfig.startScreen.infoPanelPosition.toLowerCase().indexOf("right")>-1}),f=i({"oo-state-screen-title":!0,"oo-text-truncate":!0,"oo-pull-right":this.props.skinConfig.startScreen.infoPanelPosition.toLowerCase().indexOf("right")>-1}),m=i({"oo-state-screen-description":!0,"oo-pull-right":this.props.skinConfig.startScreen.infoPanelPosition.toLowerCase().indexOf("right")>-1}),v=i({"oo-action-icon":!0,"oo-action-icon-top":this.props.skinConfig.startScreen.playButtonPosition.toLowerCase().indexOf("top")>-1,"oo-action-icon-bottom":this.props.skinConfig.startScreen.playButtonPosition.toLowerCase().indexOf("bottom")>-1,"oo-action-icon-left":this.props.skinConfig.startScreen.playButtonPosition.toLowerCase().indexOf("left")>-1,"oo-action-icon-right":this.props.skinConfig.startScreen.playButtonPosition.toLowerCase().indexOf("right")>-1,"oo-hidden":!this.props.skinConfig.startScreen.showPlayButton}),g=n.createElement("div",{className:f,style:e},this.props.contentTree.title),E=this.props.controller.state.playerState==r.STATE.END?"replay":"play",y=n.createElement("div",{className:m,ref:"description",style:t},this.state.descriptionText),b=n.createElement("a",{className:v,onClick:this.handleClick},n.createElement(s,n.__spread({},this.props,{icon:E,style:o})));return n.createElement("div",{className:"oo-state-screen oo-start-screen"},n.createElement("div",{className:d,style:p},n.createElement("div",{className:"oo-start-screen-linear-gradient"}),n.createElement("a",{className:"oo-state-screen-selectable",onClick:this.handleClick})),n.createElement(l,n.__spread({},this.props,{controlBarVisible:!1})),n.createElement("div",{className:h},this.props.skinConfig.startScreen.showTitle?g:null,this.props.skinConfig.startScreen.showDescription?y:null),this.state.playButtonClicked&&this.props.controller.state.playerState==r.STATE.START||this.props.controller.state.buffering?n.createElement(a,{loadingImage:this.props.skinConfig.general.loadingImage.imageResource.url}):b)}});p.propTypes={skinConfig:n.PropTypes.shape({startScreen:n.PropTypes.shape({playIconStyle:n.PropTypes.shape({color:n.PropTypes.string})}),icons:n.PropTypes.objectOf(n.PropTypes.object)})},p.defaultProps={skinConfig:{general:{loadingImage:{imageResource:{url:null}}},startScreen:{titleFont:{},descriptionFont:{},playIconStyle:{color:"white"},infoPanelPosition:"topLeft",playButtonPosition:"center",showPlayButton:!0,showPromo:!0,showTitle:!0,showDescription:!0,promoImageSize:"default"},icons:{play:{fontStyleClass:"oo-icon oo-icon-play"},replay:{fontStyleClass:"oo-icon oo-icon-upnext-replay"}}},controller:{togglePlayPause:function(){},state:{playerState:"start",buffering:!1}},contentTree:{promo_image:"",description:"",title:""}},t.exports=p},{"../components/icon":27,"../components/spinner":33,"../components/utils":39,"../components/watermark":41,"../constants/constants":42,"../mixins/resizeMixin":46,classnames:58,react:255,"react-dom":63}],57:[function(e,t){function n(e){if(l===setTimeout)return setTimeout(e,0);try{return l(e,0)}catch(t){try{return l.call(null,e,0)}catch(t){return l.call(this,e,0)}}}function o(e){if(c===clearTimeout)return clearTimeout(e);try{return c(e)}catch(t){try{return c.call(null,e)}catch(t){return c.call(this,e)}}}function i(){h&&p&&(h=!1,p.length?d=p.concat(d):f=-1,d.length&&r())}function r(){if(!h){var e=n(i);h=!0;for(var t=d.length;t;){for(p=d,d=[];++f<t;)p&&p[f].run();f=-1,t=d.length}p=null,h=!1,o(e)}}function a(e,t){this.fun=e,this.array=t}function s(){}var l,c,u=t.exports={};!function(){try{l=setTimeout}catch(e){l=function(){throw new Error("setTimeout is not defined")}}try{c=clearTimeout}catch(e){c=function(){throw new Error("clearTimeout is not defined")}}}();var p,d=[],h=!1,f=-1;u.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var o=1;o<arguments.length;o++)t[o-1]=arguments[o];d.push(new a(e,t)),1!==d.length||h||n(r)},a.prototype.run=function(){this.fun.apply(null,this.array)},u.title="browser",u.browser=!0,u.env={},u.argv=[],u.version="",u.versions={},u.on=s,u.addListener=s,u.once=s,u.off=s,u.removeListener=s,u.removeAllListeners=s,u.emit=s,u.binding=function(){throw new Error("process.binding is not supported")},u.cwd=function(){return"/"},u.chdir=function(){throw new Error("process.chdir is not supported")},u.umask=function(){return 0}},{}],58:[function(e,t){!function(){"use strict";function e(){for(var t=[],o=0;o<arguments.length;o++){var i=arguments[o];if(i){var r=typeof i;if("string"===r||"number"===r)t.push(i);else if(Array.isArray(i))t.push(e.apply(null,i));else if("object"===r)for(var a in i)n.call(i,a)&&i[a]&&t.push(a)}}return t.join(" ")}var n={}.hasOwnProperty;"undefined"!=typeof t&&t.exports?t.exports=e:"function"==typeof define&&"object"==typeof define.amd&&define.amd?define("classnames",[],function(){return e}):window.classNames=e}()},{}],59:[function(e,t,n){!function(e,o){"function"==typeof define&&define.amd?define(o):"object"==typeof n?t.exports=o():e.deepmerge=o()}(this,function(){function e(e){var t=e&&"object"==typeof e;return t&&"[object RegExp]"!==Object.prototype.toString.call(e)&&"[object Date]"!==Object.prototype.toString.call(e)}function t(e){return Array.isArray(e)?[]:{}}function n(n,o){var i=o&&o.clone===!0;return i&&e(n)?r(t(n),n,o):n}function o(t,o,i){var a=t.slice();return o.forEach(function(o,s){"undefined"==typeof a[s]?a[s]=n(o,i):e(o)?a[s]=r(t[s],o,i):-1===t.indexOf(o)&&a.push(n(o,i))}),a}function i(t,o,i){var a={};return e(t)&&Object.keys(t).forEach(function(e){a[e]=n(t[e],i)}),Object.keys(o).forEach(function(s){a[s]=e(o[s])&&t[s]?r(t[s],o[s],i):n(o[s],i)}),a}function r(e,t,r){var a=Array.isArray(t),s=r||{arrayMerge:o},l=s.arrayMerge||o;return a?Array.isArray(e)?l(e,t,r):n(t,r):i(e,t,r)}return r.all=function(e,t){if(!Array.isArray(e)||e.length<2)throw new Error("first argument should be an array with at least two elements");return e.reduce(function(e,n){return r(e,n,t)})},r})},{}],60:[function(e,t){function n(e,t,n){function o(){y&&clearTimeout(y),h&&clearTimeout(h),C=0,d=h=v=y=b=void 0}function s(t,n){n&&clearTimeout(n),h=y=b=void 0,t&&(C=E(),f=e.apply(v,d),y||h||(d=v=void 0))}function l(){var e=t-(E()-m);0>=e||e>t?s(b,h):y=setTimeout(l,e)}function c(){return(y&&b||h&&T)&&(f=e.apply(v,d)),o(),f}function u(){s(T,y)}function p(){if(d=arguments,m=E(),v=this,b=T&&(y||!S),R===!1)var n=S&&!y;else{C||h||S||(C=m);var o=R-(m-C),i=(0>=o||o>R)&&(S||h);i?(h&&(h=clearTimeout(h)),C=m,f=e.apply(v,d)):h||(h=setTimeout(u,o))}return i&&y?y=clearTimeout(y):y||t===R||(y=setTimeout(l,t)),n&&(i=!0,f=e.apply(v,d)),!i||y||h||(d=v=void 0),f}var d,h,f,m,v,y,b,C=0,S=!1,R=!1,T=!0;if("function"!=typeof e)throw new TypeError(a);return t=r(t)||0,i(n)&&(S=!!n.leading,R="maxWait"in n&&g(r(n.maxWait)||0,t),T="trailing"in n?!!n.trailing:T),p.cancel=o,p.flush=c,p}function o(e){var t=i(e)?v.call(e):"";return t==l||t==c}function i(e){var t=typeof e;return!!e&&("object"==t||"function"==t)}function r(e){if(i(e)){var t=o(e.valueOf)?e.valueOf():e;e=i(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=e.replace(u,"");var n=d.test(e);return n||h.test(e)?f(e.slice(2),n?2:8):p.test(e)?s:+e}var a="Expected a function",s=0/0,l="[object Function]",c="[object GeneratorFunction]",u=/^\s+|\s+$/g,p=/^[-+]0x[0-9a-f]+$/i,d=/^0b[01]+$/i,h=/^0o[0-7]+$/i,f=parseInt,m=Object.prototype,v=m.toString,g=Math.max,E=Date.now;t.exports=n},{}],61:[function(e,t){function n(e,t){for(var n=-1,o=e.length,i=Array(o);++n<o;)i[n]=t(e[n],n,e);return i}function o(e,t){return n(t,function(t){return e[t]})}function i(e){return e?o(e,r(e)):[]}var r=e("lodash.keys");t.exports=i},{"lodash.keys":62}],62:[function(e,t){function n(e,t){for(var n=-1,o=Array(e);++n<e;)o[n]=t(n);return o}function o(e,t){return function(n){return e(t(n))}}function i(e,t){var o=O(e)||l(e)?n(e.length,String):[],i=o.length,r=!!i;for(var s in e)!t&&!S.call(e,s)||r&&("length"==s||a(s,i))||o.push(s);return o}function r(e){if(!s(e))return N(e);var t=[];for(var n in Object(e))S.call(e,n)&&"constructor"!=n&&t.push(n);return t}function a(e,t){return t=null==t?v:t,!!t&&("number"==typeof e||b.test(e))&&e>-1&&e%1==0&&t>e}function s(e){var t=e&&e.constructor,n="function"==typeof t&&t.prototype||C;return e===n}function l(e){return u(e)&&S.call(e,"callee")&&(!T.call(e,"callee")||R.call(e)==g)}function c(e){return null!=e&&d(e.length)&&!p(e)}function u(e){return f(e)&&c(e)}function p(e){var t=h(e)?R.call(e):"";return t==E||t==y}function d(e){return"number"==typeof e&&e>-1&&e%1==0&&v>=e}function h(e){var t=typeof e;return!!e&&("object"==t||"function"==t)}function f(e){return!!e&&"object"==typeof e}function m(e){return c(e)?i(e):r(e)}var v=9007199254740991,g="[object Arguments]",E="[object Function]",y="[object GeneratorFunction]",b=/^(?:0|[1-9]\d*)$/,C=Object.prototype,S=C.hasOwnProperty,R=C.toString,T=C.propertyIsEnumerable,N=o(Object.keys,Object),O=Array.isArray;t.exports=m},{}],63:[function(e,t){"use strict";t.exports=e("react/lib/ReactDOM")},{"react/lib/ReactDOM":134}],64:[function(e,t,n){!function(o,i){"object"==typeof n&&"object"==typeof t?t.exports=i(e("react")):"function"==typeof define&&define.amd?define(["react"],i):"object"==typeof n?n.ScrollArea=i(e("react")):o.ScrollArea=i(o.React)}(this,function(e){return function(e){function t(o){if(n[o])return n[o].exports;var i=n[o]={exports:{},id:o,loaded:!1};return e[o].call(i.exports,i,i.exports,t),i.loaded=!0,i.exports}var n={};return t.m=e,t.c=n,t.p="",t(0)}([function(e,t,n){"use strict";var o=n(2)["default"];Object.defineProperty(t,"__esModule",{value:!0});var i=n(20),r=o(i);t["default"]=r["default"],e.exports=t["default"]},function(e){var t=Object;e.exports={create:t.create,getProto:t.getPrototypeOf,isEnum:{}.propertyIsEnumerable,getDesc:t.getOwnPropertyDescriptor,setDesc:t.defineProperty,setDescs:t.defineProperties,getKeys:t.keys,getNames:t.getOwnPropertyNames,getSymbols:t.getOwnPropertySymbols,each:[].forEach}},function(e,t){"use strict";t["default"]=function(e){return e&&e.__esModule?e:{"default":e}},t.__esModule=!0},function(e){var t=e.exports={version:"1.2.1"};"number"==typeof __e&&(__e=t)},function(t){t.exports=e},function(e,t,n){var o=n(38),i=n(3),r="prototype",a=function(e,t){return function(){return e.apply(t,arguments)}},s=function(e,t,n){var l,c,u,p,d=e&s.G,h=e&s.P,f=d?o:e&s.S?o[t]:(o[t]||{})[r],m=d?i:i[t]||(i[t]={});d&&(n=t);for(l in n)c=!(e&s.F)&&f&&l in f,c&&l in m||(u=c?f[l]:n[l],d&&"function"!=typeof f[l]?p=n[l]:e&s.B&&c?p=a(u,o):e&s.W&&f[l]==u?!function(e){p=function(t){return this instanceof e?new e(t):e(t)},p[r]=e[r]}(u):p=h&&"function"==typeof u?a(Function.call,u):u,m[l]=p,h&&((m[r]||(m[r]={}))[l]=u))};s.F=1,s.G=2,s.S=4,s.P=8,s.B=16,s.W=32,e.exports=s},function(e,t,n){"use strict";function o(e){return d?p["default"].findDOMNode(e):e}function i(){h||d||(h=!0,console.error("With React 0.14 and later versions, you no longer need to wrap <ScrollArea> child into a function."))}function r(){!h&&d&&(h=!0,console.error("With React 0.13, you need to wrap <ScrollArea> child into a function."))}function a(e){return 0>e?0:e}function s(e){var t=arguments.length<=1||void 0===arguments[1]?function(e){return e}:arguments[1],n={};for(var o in e)e.hasOwnProperty(o)&&(n[o]=t(e[o]));return n}function l(e){var t=e.version;if("string"!=typeof t)return!0;var n=t.split("."),o=parseInt(n[0],10),i=parseInt(n[1],10);return 0===o&&13===i}var c=n(2)["default"];Object.defineProperty(t,"__esModule",{value:!0}),t.findDOMNode=o,t.warnAboutFunctionChild=i,t.warnAboutElementChild=r,t.positiveOrZero=a,t.modifyObjValues=s,t.isReact13=l;var u=n(4),p=c(u),d=l(p["default"]),h=!1},function(e,t){"use strict";t["default"]=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},t.__esModule=!0},function(e,t,n){"use strict";var o=n(24)["default"];t["default"]=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o(e,i.key,i)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),t.__esModule=!0},function(e,t,n){"use strict";var o=n(22)["default"];t["default"]=o||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},t.__esModule=!0},function(e,t,n){"use strict";var o=n(25)["default"];t["default"]=function(e,t,n){for(var i=!0;i;){var r=e,a=t,s=n;l=u=c=void 0,i=!1,null===r&&(r=Function.prototype);var l=o(r,a);if(void 0!==l){if("value"in l)return l.value;var c=l.get;return void 0===c?void 0:c.call(s)}var u=Object.getPrototypeOf(r);if(null===u)return void 0;e=u,t=a,n=s,i=!0}},t.__esModule=!0},function(e,t,n){"use strict";var o=n(23)["default"],i=n(26)["default"];t["default"]=function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=o(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(i?i(e,t):e.__proto__=t)},t.__esModule=!0},function(e){e.exports=function(e){if(void 0==e)throw TypeError("Can't call method on  "+e);return e}},function(e){e.exports=function(e){try{return!!e()}catch(t){return!0}}},function(e,t,n){var o=n(35);e.exports=0 in Object("z")?Object:function(e){return"String"==o(e)?e.split(""):Object(e)}},function(e){e.exports=function(e){return"object"==typeof e?null!==e:"function"==typeof e}},function(e,t){"use strict";t.__esModule=!0,t["default"]={noWobble:[170,26],gentle:[120,14],wobbly:[180,12],stiff:[210,20]},e.exports=t["default"]},function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}t.__esModule=!0;var i=n(4),r=o(i),a=n(50),s=o(a),l=n(55),c=o(l),u=s["default"](r["default"]),p=u.Spring,d=u.TransitionSpring,h=u.Motion,f=u.StaggeredMotion,m=u.TransitionMotion;t.Spring=p,t.TransitionSpring=d,t.Motion=h,t.StaggeredMotion=f,t.TransitionMotion=m;var v=n(18),g=o(v);t.spring=g["default"];var E=n(16),y=o(E);t.presets=y["default"];var b={reorderKeys:c["default"]};t.utils=b},function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}function i(e){var t=arguments.length<=1||void 0===arguments[1]?a["default"].noWobble:arguments[1];return{val:e,config:t}}t.__esModule=!0,t["default"]=i;var r=n(16),a=o(r);e.exports=t["default"]},function(e,t,n){(function(t){(function(){var n,o,i;"undefined"!=typeof performance&&null!==performance&&performance.now?e.exports=function(){return performance.now()}:"undefined"!=typeof t&&null!==t&&t.hrtime?(e.exports=function(){return(n()-i)/1e6},o=t.hrtime,n=function(){var e;return e=o(),1e9*e[0]+e[1]},i=n()):Date.now?(e.exports=function(){return Date.now()-i},i=Date.now()):(e.exports=function(){return(new Date).getTime()-i},i=(new Date).getTime())}).call(this)}).call(t,n(61))},function(e,t,n){"use strict";var o=n(10)["default"],i=n(11)["default"],r=n(8)["default"],a=n(7)["default"],s=n(9)["default"],l=n(2)["default"];Object.defineProperty(t,"__esModule",{value:!0});var c=n(4),u=l(c),p=n(21),d=l(p),h=n(6),f=n(47),m=l(f),v=n(17),g={wheel:"wheel",api:"api",touch:"touch",touchEnd:"touchEnd",mousemove:"mousemove"},E=function(e){function t(e){var n=this;a(this,t),o(Object.getPrototypeOf(t.prototype),"constructor",this).call(this,e),this.state={topPosition:0,leftPosition:0,realHeight:0,containerHeight:0,realWidth:0,containerWidth:0},this.scrollArea={refresh:function(){n.setSizesToState()},scrollTop:function(){n.scrollTop()},scrollBottom:function(){n.scrollBottom()},scrollYTo:function(e){n.scrollYTo(e)},scrollLeft:function(){n.scrollLeft()},scrollRight:function(){n.scrollRight()},scrollXTo:function(e){n.scrollXTo(e)}},this.evntsPreviousValues={clientX:0,clientY:0,deltaX:0,deltaY:0},this.bindedHandleWindowResize=this.handleWindowResize.bind(this)}return i(t,e),r(t,[{key:"getChildContext",value:function(){return{scrollArea:this.scrollArea}}},{key:"componentDidMount",value:function(){this.props.contentWindow&&this.props.contentWindow.addEventListener("resize",this.bindedHandleWindowResize),this.lineHeightPx=m["default"](h.findDOMNode(this.content)),this.setSizesToState()}},{key:"componentWillUnmount",value:function(){this.props.contentWindow&&this.props.contentWindow.removeEventListener("resize",this.bindedHandleWindowResize)}},{key:"componentDidUpdate",value:function(){this.setSizesToState()}},{key:"render",value:function(){var e=this,t=this.props,n=t.children,o=t.className,i=t.contentClassName,r=t.ownerDocument,a=this.props.smoothScrolling&&(this.state.eventType===g.wheel||this.state.eventType===g.api||this.state.eventType===g.touchEnd),l=this.canScrollY()?u["default"].createElement(d["default"],{ownerDocument:r,realSize:this.state.realHeight,containerSize:this.state.containerHeight,position:this.state.topPosition,onMove:this.handleScrollbarMove.bind(this),onPositionChange:this.handleScrollbarYPositionChange.bind(this),containerStyle:this.props.verticalContainerStyle,scrollbarStyle:this.props.verticalScrollbarStyle,smoothScrolling:a,minScrollSize:this.props.minScrollSize,type:"vertical"}):null,c=this.canScrollX()?u["default"].createElement(d["default"],{ownerDocument:r,realSize:this.state.realWidth,containerSize:this.state.containerWidth,position:this.state.leftPosition,onMove:this.handleScrollbarMove.bind(this),onPositionChange:this.handleScrollbarXPositionChange.bind(this),containerStyle:this.props.horizontalContainerStyle,scrollbarStyle:this.props.horizontalScrollbarStyle,smoothScrolling:a,minScrollSize:this.props.minScrollSize,type:"horizontal"}):null;"function"==typeof n?(h.warnAboutFunctionChild(),n=n()):h.warnAboutElementChild();var p="scrollarea "+(o||""),f="scrollarea-content "+(i||""),m={marginTop:-this.state.topPosition,marginLeft:-this.state.leftPosition},E=a?h.modifyObjValues(m,function(e){return v.spring(e)}):m;return u["default"].createElement(v.Motion,{style:s({},this.props.contentStyle,E)},function(t){return u["default"].createElement("div",{ref:function(t){return e.wrapper=t},style:e.props.style,className:p,onWheel:e.handleWheel.bind(e)},u["default"].createElement("div",{ref:function(t){return e.content=t},style:t,className:f,onTouchStart:e.handleTouchStart.bind(e),onTouchMove:e.handleTouchMove.bind(e),onTouchEnd:e.handleTouchEnd.bind(e)},n),l,c)})}},{key:"setStateFromEvent",value:function(e,t){this.props.onScroll&&this.props.onScroll(e),this.setState(s({},e,{eventType:t}))}},{key:"handleTouchStart",value:function(e){var t=e.touches;if(1===t.length){var n=t[0],o=n.clientX,i=n.clientY;this.eventPreviousValues=s({},this.eventPreviousValues,{clientY:i,clientX:o,timestamp:Date.now()})}}},{key:"handleTouchMove",value:function(e){e.preventDefault();var t=e.touches;if(1===t.length){var n=t[0],o=n.clientX,i=n.clientY,r=this.eventPreviousValues.clientY-i,a=this.eventPreviousValues.clientX-o;this.eventPreviousValues=s({},this.eventPreviousValues,{deltaY:r,deltaX:a,clientY:i,clientX:o,timestamp:Date.now()}),this.setStateFromEvent(this.composeNewState(-a,-r))}}},{key:"handleTouchEnd",value:function(){var e=this.eventPreviousValues,t=e.deltaX,n=e.deltaY,o=e.timestamp;Date.now()-o<200&&this.setStateFromEvent(this.composeNewState(10*-t,10*-n),g.touchEnd),this.eventPreviousValues=s({},this.eventPreviousValues,{deltaY:0,deltaX:0})}},{key:"handleScrollbarMove",value:function(e,t){this.setStateFromEvent(this.composeNewState(t,e))}},{key:"handleScrollbarXPositionChange",value:function(e){this.scrollXTo(e)}},{key:"handleScrollbarYPositionChange",value:function(e){this.scrollYTo(e)}},{key:"handleWheel",value:function(e){var t=e.deltaY,n=e.deltaX;if(this.props.swapWheelAxes){var o=[n,t];t=o[0],n=o[1]}1===e.deltaMode&&(t*=this.lineHeightPx,n*=this.lineHeightPx),t*=this.props.speed,n*=this.props.speed;var i=this.composeNewState(-n,-t);(this.state.topPosition!==i.topPosition||this.state.leftPosition!==i.leftPosition)&&e.preventDefault(),this.setStateFromEvent(i,g.wheel)}},{key:"handleWindowResize",value:function(){var e=this.computeSizes();e=this.getModifiedPositionsIfNeeded(e),this.setStateFromEvent(e)}},{key:"composeNewState",value:function(e,t){var n=this.computeSizes();return this.canScrollY(n)&&(n.topPosition=this.computeTopPosition(t,n)),this.canScrollX(n)&&(n.leftPosition=this.computeLeftPosition(e,n)),n}},{key:"computeTopPosition",value:function(e,t){var n=this.state.topPosition-e;return this.normalizeTopPosition(n,t)}},{key:"computeLeftPosition",value:function(e,t){var n=this.state.leftPosition-e;return this.normalizeLeftPosition(n,t)}},{key:"normalizeTopPosition",value:function(e,t){return e>t.realHeight-t.containerHeight&&(e=t.realHeight-t.containerHeight),0>e&&(e=0),e}},{key:"normalizeLeftPosition",value:function(e,t){return e>t.realWidth-t.containerWidth?e=t.realWidth-t.containerWidth:0>e&&(e=0),e}},{key:"computeSizes",value:function(){var e=this.content.offsetHeight,t=this.wrapper.offsetHeight,n=this.content.offsetWidth,o=this.wrapper.offsetWidth;return{realHeight:e,containerHeight:t,realWidth:n,containerWidth:o}}},{key:"setSizesToState",value:function(){var e=this.computeSizes();(e.realHeight!==this.state.realHeight||e.realWidth!==this.state.realWidth)&&this.setStateFromEvent(this.getModifiedPositionsIfNeeded(e))}},{key:"scrollTop",value:function(){this.scrollYTo(0)}},{key:"scrollBottom",value:function(){this.scrollYTo(this.state.realHeight-this.state.containerHeight)}},{key:"scrollLeft",value:function(){this.scrollXTo(0)}},{key:"scrollRight",value:function(){this.scrollXTo(this.state.realWidth-this.state.containerWidth)}},{key:"scrollYTo",value:function(e){if(this.canScrollY()){var t=this.normalizeTopPosition(e,this.computeSizes());this.setStateFromEvent({topPosition:t},g.api)}}},{key:"scrollXTo",value:function(e){if(this.canScrollX()){var t=this.normalizeLeftPosition(e,this.computeSizes());this.setStateFromEvent({leftPosition:t},g.api)}}},{key:"canScrollY",value:function(){var e=arguments.length<=0||void 0===arguments[0]?this.state:arguments[0],t=e.realHeight>e.containerHeight;return t&&this.props.vertical}},{key:"canScrollX",value:function(){var e=arguments.length<=0||void 0===arguments[0]?this.state:arguments[0],t=e.realWidth>e.containerWidth;return t&&this.props.horizontal}},{key:"getModifiedPositionsIfNeeded",value:function(e){var t=e.realHeight-e.containerHeight;this.state.topPosition>=t&&(e.topPosition=this.canScrollY(e)?h.positiveOrZero(t):0);var n=e.realWidth-e.containerWidth;return this.state.leftPosition>=n&&(e.leftPosition=this.canScrollX(e)?h.positiveOrZero(n):0),e}}]),t}(u["default"].Component);t["default"]=E,E.childContextTypes={scrollArea:u["default"].PropTypes.object},E.propTypes={className:u["default"].PropTypes.string,style:u["default"].PropTypes.object,speed:u["default"].PropTypes.number,contentClassName:u["default"].PropTypes.string,contentStyle:u["default"].PropTypes.object,vertical:u["default"].PropTypes.bool,verticalContainerStyle:u["default"].PropTypes.object,verticalScrollbarStyle:u["default"].PropTypes.object,horizontal:u["default"].PropTypes.bool,horizontalContainerStyle:u["default"].PropTypes.object,horizontalScrollbarStyle:u["default"].PropTypes.object,onScroll:u["default"].PropTypes.func,contentWindow:u["default"].PropTypes.any,ownerDocument:u["default"].PropTypes.any,smoothScrolling:u["default"].PropTypes.bool,minScrollSize:u["default"].PropTypes.number,swapWheelAxes:u["default"].PropTypes.bool},E.defaultProps={speed:1,vertical:!0,horizontal:!0,smoothScrolling:!1,swapWheelAxes:!1,contentWindow:"object"==typeof window?window:void 0,ownerDocument:"object"==typeof document?document:void 0},e.exports=t["default"]},function(e,t,n){"use strict";var o=n(10)["default"],i=n(11)["default"],r=n(8)["default"],a=n(7)["default"],s=n(9)["default"],l=n(2)["default"];Object.defineProperty(t,"__esModule",{value:!0});var c=n(4),u=l(c),p=n(17),d=n(6),h=function(e){function t(e){a(this,t),o(Object.getPrototypeOf(t.prototype),"constructor",this).call(this,e);var n=this.calculateState(e);this.state={position:n.position,scrollSize:n.scrollSize,isDragging:!1,lastClientPosition:0},this.bindedHandleMouseMove="vertical"===e.type?this.handleMouseMoveForVertical.bind(this):this.handleMouseMoveForHorizontal.bind(this),this.bindedHandleMouseUp=this.handleMouseUp.bind(this)}return i(t,e),r(t,[{key:"componentDidMount",value:function(){this.props.ownerDocument&&(this.props.ownerDocument.addEventListener("mousemove",this.bindedHandleMouseMove),this.props.ownerDocument.addEventListener("mouseup",this.bindedHandleMouseUp))}},{key:"componentWillReceiveProps",value:function(e){this.setState(this.calculateState(e))
}},{key:"componentWillUnmount",value:function(){this.props.ownerDocument&&(this.props.ownerDocument.removeEventListener("mousemove",this.bindedHandleMouseMove),this.props.ownerDocument.removeEventListener("mouseup",this.bindedHandleMouseUp))}},{key:"calculateFractionalPosition",value:function(e,t,n){var o=e-t;return 1-(o-n)/o}},{key:"calculateState",value:function(e){var t=this.calculateFractionalPosition(e.realSize,e.containerSize,e.position),n=e.containerSize*e.containerSize/e.realSize,o=n<e.minScrollSize?e.minScrollSize:n,i=(e.containerSize-o)*t;return{scrollSize:o,position:Math.round(i)}}},{key:"render",value:function(){var e=this,t=this.props,n=t.smoothScrolling,o=t.isDragging,i=t.type,r=t.scrollbarStyle,a=t.containerStyle,l="horizontal"===i,c="vertical"===i,h=this.createScrollStyles(),f=n?d.modifyObjValues(h,function(e){return p.spring(e)}):h,m="scrollbar-container "+(o?"active":"")+" "+(l?"horizontal":"")+" "+(c?"vertical":"");return u["default"].createElement(p.Motion,{style:s({},r,f)},function(t){return u["default"].createElement("div",{className:m,style:a,onMouseDown:e.handleScrollBarContainerClick.bind(e),ref:function(t){e.scrollbarContainer=t}},u["default"].createElement("div",{className:"scrollbar",style:t,onMouseDown:e.handleMouseDown.bind(e)}))})}},{key:"handleScrollBarContainerClick",value:function(e){e.preventDefault();var t=this.computeMultiplier(),n=this.isVertical()?e.clientY:e.clientX,o=this.scrollbarContainer.getBoundingClientRect(),i=o.top,r=o.left,a=this.isVertical()?i:r,s=n-a,l=this.props.containerSize*this.props.containerSize/this.props.realSize;this.setState({isDragging:!0,lastClientPosition:n}),this.props.onPositionChange((s-l/2)/t)}},{key:"handleMouseMoveForHorizontal",value:function(e){var t=this.computeMultiplier();if(this.state.isDragging){e.preventDefault();var n=this.state.lastClientPosition-e.clientX;this.setState({lastClientPosition:e.clientX}),this.props.onMove(0,n/t)}}},{key:"handleMouseMoveForVertical",value:function(e){var t=this.computeMultiplier();if(this.state.isDragging){e.preventDefault();var n=this.state.lastClientPosition-e.clientY;this.setState({lastClientPosition:e.clientY}),this.props.onMove(n/t,0)}}},{key:"handleMouseDown",value:function(e){e.preventDefault(),e.stopPropagation();var t=this.isVertical()?e.clientY:e.clientX;this.setState({isDragging:!0,lastClientPosition:t})}},{key:"handleMouseUp",value:function(e){e.preventDefault(),this.setState({isDragging:!1})}},{key:"createScrollStyles",value:function(){return"vertical"===this.props.type?{height:this.state.scrollSize,marginTop:this.state.position}:{width:this.state.scrollSize,marginLeft:this.state.position}}},{key:"computeMultiplier",value:function(){return this.props.containerSize/this.props.realSize}},{key:"isVertical",value:function(){return"vertical"===this.props.type}}]),t}(u["default"].Component);h.propTypes={onMove:u["default"].PropTypes.func,onPositionChange:u["default"].PropTypes.func,realSize:u["default"].PropTypes.number,containerSize:u["default"].PropTypes.number,position:u["default"].PropTypes.number,containerStyle:u["default"].PropTypes.object,scrollbarStyle:u["default"].PropTypes.object,type:u["default"].PropTypes.oneOf(["vertical","horizontal"]),ownerDocument:u["default"].PropTypes.any,smoothScrolling:u["default"].PropTypes.bool,minScrollSize:u["default"].PropTypes.number},h.defaultProps={type:"vertical",smoothScrolling:!1},t["default"]=h,e.exports=t["default"]},function(e,t,n){e.exports={"default":n(27),__esModule:!0}},function(e,t,n){e.exports={"default":n(28),__esModule:!0}},function(e,t,n){e.exports={"default":n(29),__esModule:!0}},function(e,t,n){e.exports={"default":n(30),__esModule:!0}},function(e,t,n){e.exports={"default":n(31),__esModule:!0}},function(e,t,n){n(44),e.exports=n(3).Object.assign},function(e,t,n){var o=n(1);e.exports=function(e,t){return o.create(e,t)}},function(e,t,n){var o=n(1);e.exports=function(e,t,n){return o.setDesc(e,t,n)}},function(e,t,n){var o=n(1);n(45),e.exports=function(e,t){return o.getDesc(e,t)}},function(e,t,n){n(46),e.exports=n(3).Object.setPrototypeOf},function(e){e.exports=function(e){if("function"!=typeof e)throw TypeError(e+" is not a function!");return e}},function(e,t,n){var o=n(15);e.exports=function(e){if(!o(e))throw TypeError(e+" is not an object!");return e}},function(e,t,n){var o=n(43),i=n(14),r=n(37),a=n(39);e.exports=n(13)(function(){var e=Object.assign,t={},n={},o=Symbol(),i="abcdefghijklmnopqrst";return t[o]=7,i.split("").forEach(function(e){n[e]=e}),7!=e({},t)[o]||Object.keys(e({},n)).join("")!=i})?function(e){for(var t=o(e),n=arguments.length,s=1;n>s;)for(var l,c=i(arguments[s++]),u=r(c),p=u.length,d=0;p>d;)a(c,l=u[d++])&&(t[l]=c[l]);return t}:Object.assign},function(e){var t={}.toString;e.exports=function(e){return t.call(e).slice(8,-1)}},function(e,t,n){var o=n(32);e.exports=function(e,t,n){if(o(e),void 0===t)return e;switch(n){case 1:return function(n){return e.call(t,n)};case 2:return function(n,o){return e.call(t,n,o)};case 3:return function(n,o,i){return e.call(t,n,o,i)}}return function(){return e.apply(t,arguments)}}},function(e,t,n){var o=n(1);e.exports=function(e){var t=o.getKeys(e),n=o.getSymbols;if(n)for(var i,r=n(e),a=o.isEnum,s=0;r.length>s;)a.call(e,i=r[s++])&&t.push(i);return t}},function(e){var t="undefined",n=e.exports=typeof window!=t&&window.Math==Math?window:typeof self!=t&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=n)},function(e){var t={}.hasOwnProperty;e.exports=function(e,n){return t.call(e,n)}},function(e,t,n){e.exports=function(e,t){var o=n(5),i=(n(3).Object||{})[e]||Object[e],r={};r[e]=t(i),o(o.S+o.F*n(13)(function(){i(1)}),"Object",r)}},function(e,t,n){var o=n(1).getDesc,i=n(15),r=n(33),a=function(e,t){if(r(e),!i(t)&&null!==t)throw TypeError(t+": can't set as prototype!")};e.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(e,t,i){try{i=n(36)(Function.call,o(Object.prototype,"__proto__").set,2),i(e,[]),t=!(e instanceof Array)}catch(r){t=!0}return function(e,n){return a(e,n),t?e.__proto__=n:i(e,n),e}}({},!1):void 0),check:a}},function(e,t,n){var o=n(14),i=n(12);e.exports=function(e){return o(i(e))}},function(e,t,n){var o=n(12);e.exports=function(e){return Object(o(e))}},function(e,t,n){var o=n(5);o(o.S+o.F,"Object",{assign:n(34)})},function(e,t,n){var o=n(42);n(40)("getOwnPropertyDescriptor",function(e){return function(t,n){return e(o(t),n)}})},function(e,t,n){var o=n(5);o(o.S,"Object",{setPrototypeOf:n(41).set})},function(e,t,n){function o(e){var t=i(e,"line-height"),n=parseFloat(t,10);if(t===n+""){var o=e.style.lineHeight;e.style.lineHeight=t+"em",t=i(e,"line-height"),n=parseFloat(t,10),o?e.style.lineHeight=o:delete e.style.lineHeight}if(-1!==t.indexOf("pt")?(n*=4,n/=3):-1!==t.indexOf("mm")?(n*=96,n/=25.4):-1!==t.indexOf("cm")?(n*=96,n/=2.54):-1!==t.indexOf("in")?n*=96:-1!==t.indexOf("pc")&&(n*=16),n=Math.round(n),"normal"===t){var r=e.nodeName,a=document.createElement(r);a.innerHTML="&nbsp;";var s=i(e,"font-size");a.style.fontSize=s;var l=document.body;l.appendChild(a);var c=a.offsetHeight;n=c,l.removeChild(a)}return n}var i=n(48);e.exports=o},function(e){var t=function(e,t,n){return n=window.getComputedStyle,(n?n(e):e.currentStyle)[t.replace(/-(\w)/gi,function(e,t){return t.toUpperCase()})]};e.exports=t},function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}function i(){function e(){var t=f(),n=t-g;g=t,E+=n*s,E>i*u&&(E=0);for(var o=Math.ceil(E/i),r=0;r<m.length;r++){var a=m[r],l=a.active,c=a.animationStep,p=a.prevState,h=m[r].nextState;if(l)if(0>=E)m[r].nextState=c(i/1e3,p);else for(var y=0;o>y;y++){m[r].nextState=c(i/1e3,h);var b=[h,m[r].nextState];m[r].prevState=b[0],h=b[1]}}E-=o*i;for(var C=1+E/i,r=0;r<m.length;r++){var S=m[r],R=S.animationRender,T=S.nextState,N=S.prevState;R(C,T,N)}m=m.filter(function(e){var t=e.active;return t}),0===m.length?v=!1:d(e)}function t(){v||(v=!0,g=f(),E=0,d(e))}var n=arguments.length<=0||void 0===arguments[0]?{}:arguments[0],o=n.timeStep,i=void 0===o?1/60*1e3:o,r=n.timeScale,s=void 0===r?1:r,c=n.maxSteps,u=void 0===c?10:c,p=n.raf,d=void 0===p?l["default"]:p,h=n.now,f=void 0===h?a["default"]:h,m=[],v=!1,g=0,E=0;return function(e,n,o){for(var i=0;i<m.length;i++){var r=m[i];if(r.animationStep===n)return r.active=!0,r.prevState=e,t(),r.stop}var a={animationStep:n,animationRender:o,prevState:e,nextState:e,active:!0};return a.stop=function(){return a.active=!1},m.push(a),t(),a.stop}}t.__esModule=!0,t["default"]=i;var r=n(19),a=o(r),s=n(60),l=o(s);e.exports=t["default"]},function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}function i(e,t){var n={};for(var o in t)t.hasOwnProperty(o)&&(n[o]=e(t[o],o));return n}function r(e,t){for(var n in t)if(t.hasOwnProperty(n)&&!e(t[n],n))return!1;return!0}function a(e){var t=e.PropTypes,n=e.createClass({displayName:"Motion",propTypes:{defaultValue:function(e,t){return e[t]?new Error("Spring's `defaultValue` has been changed to `defaultStyle`. Its format received a few (easy to update!) changes as well."):void 0},endValue:function(e,t){return e[t]?new Error("Spring's `endValue` has been changed to `style`. Its format received a few (easy to update!) changes as well."):void 0},defaultStyle:t.object,style:t.object.isRequired,children:t.func.isRequired},getInitialState:function(){var e=this.props,t=e.defaultStyle,n=e.style,o=t||n;return{currentStyle:o,currentVelocity:i(g["default"],o)}},componentDidMount:function(){this.startAnimating()},componentWillReceiveProps:function(){this.startAnimating()},animationStep:function(e,t){var n=t.currentStyle,o=t.currentVelocity,i=this.props.style,r=E.updateCurrentStyle(e,n,o,i),a=E.updateCurrentVelocity(e,n,o,i);return c["default"](o,r)&&c["default"](a,r)&&this.stopAnimation(),{currentStyle:r,currentVelocity:a}},stopAnimation:null,hasUnmounted:!1,componentWillUnmount:function(){this.stopAnimation(),this.hasUnmounted=!0},startAnimating:function(){this.stopAnimation=R(this.state,this.animationStep,this.animationRender)},animationRender:function(e,t,n){this.hasUnmounted||this.setState({currentStyle:E.interpolateValue(e,t.currentStyle,n.currentStyle),currentVelocity:t.currentVelocity})},render:function(){var t=S["default"](this.state.currentStyle),n=this.props.children(t);return n&&e.Children.only(n)}}),o=e.createClass({displayName:"StaggeredMotion",propTypes:{defaultStyle:function(e,t){return e[t]?new Error('You forgot the "s" for `StaggeredMotion`\'s `defaultStyles`.'):void 0},style:function(e,t){return e[t]?new Error('You forgot the "s" for `StaggeredMotion`\'s `styles`.'):void 0},defaultStyles:t.arrayOf(t.object),styles:t.func.isRequired,children:t.func.isRequired},getInitialState:function(){var e=this.props,t=e.styles,n=e.defaultStyles,o=n?n:t();return{currentStyles:o,currentVelocities:o.map(function(e){return i(g["default"],e)})}},componentDidMount:function(){this.startAnimating()},componentWillReceiveProps:function(){this.startAnimating()},animationStep:function(e,t){var n=t.currentStyles,o=t.currentVelocities,i=this.props.styles(n.map(S["default"])),r=n.map(function(t,n){return E.updateCurrentStyle(e,t,o[n],i[n])}),a=n.map(function(t,n){return E.updateCurrentVelocity(e,t,o[n],i[n])});return o.every(function(e,t){return c["default"](e,n[t])})&&a.every(function(e,t){return c["default"](e,r[t])})&&this.stopAnimation(),{currentStyles:r,currentVelocities:a}},stopAnimation:null,hasUnmounted:!1,componentWillUnmount:function(){this.stopAnimation(),this.hasUnmounted=!0},startAnimating:function(){this.stopAnimation=R(this.state,this.animationStep,this.animationRender)},animationRender:function(e,t,n){if(!this.hasUnmounted){var o=t.currentStyles.map(function(t,o){return E.interpolateValue(e,t,n.currentStyles[o])});this.setState({currentStyles:o,currentVelocities:t.currentVelocities})}},render:function(){var t=this.state.currentStyles.map(S["default"]),n=this.props.children(t);return n&&e.Children.only(n)}}),a=e.createClass({displayName:"TransitionMotion",propTypes:{defaultValue:function(e,t){return e[t]?new Error("TransitionSpring's `defaultValue` has been changed to `defaultStyles`. Its format received a few (easy to update!) changes as well."):void 0},endValue:function(e,t){return e[t]?new Error("TransitionSpring's `endValue` has been changed to `styles`. Its format received a few (easy to update!) changes as well."):void 0},defaultStyle:function(e,t){return e[t]?new Error('You forgot the "s" for `TransitionMotion`\'s `defaultStyles`.'):void 0},style:function(e,t){return e[t]?new Error('You forgot the "s" for `TransitionMotion`\'s `styles`.'):void 0},defaultStyles:t.objectOf(t.any),styles:t.oneOfType([t.func,t.objectOf(t.any.isRequired)]).isRequired,willLeave:t.oneOfType([t.func]),willEnter:t.oneOfType([t.func]),children:t.func.isRequired},getDefaultProps:function(){return{willEnter:function(e,t){return t},willLeave:function(){return null}}},getInitialState:function(){var e=this.props,t=e.styles,n=e.defaultStyles,o=void 0;return o=null==n?"function"==typeof t?t():t:n,{currentStyles:o,currentVelocities:i(function(e){return i(g["default"],e)},o)}},componentDidMount:function(){this.startAnimating()},componentWillReceiveProps:function(){this.startAnimating()},animationStep:function(e,t){var n=t.currentStyles,o=t.currentVelocities,a=this.props,l=a.styles,u=a.willEnter,d=a.willLeave;"function"==typeof l&&(l=l(n));var f=l,m=!1;f=h["default"](n,l,function(e){var t=d(e,n[e],l,n,o);return null==t?null:c["default"](o[e],n[e])&&p["default"](n[e],t)?null:t}),Object.keys(f).filter(function(e){return!n.hasOwnProperty(e)}).forEach(function(e){var t,r;m=!0;var a=u(e,f[e],l,n,o);f[e]=a,n=s({},n,(t={},t[e]=a,t)),o=s({},o,(r={},r[e]=i(g["default"],a),r))});var v=i(function(t,i){return E.updateCurrentStyle(e,n[i],o[i],t)},f),y=i(function(t,i){return E.updateCurrentVelocity(e,n[i],o[i],t)},f);return!m&&r(function(e,t){return c["default"](e,n[t])},o)&&r(function(e,t){return c["default"](e,v[t])},y)&&this.stopAnimation(),{currentStyles:v,currentVelocities:y}},stopAnimation:null,hasUnmounted:!1,componentWillUnmount:function(){this.stopAnimation(),this.hasUnmounted=!0},startAnimating:function(){this.stopAnimation=R(this.state,this.animationStep,this.animationRender)},animationRender:function(e,t,n){if(!this.hasUnmounted){var o=i(function(t,o){return E.interpolateValue(e,t,n.currentStyles[o])},t.currentStyles);this.setState({currentStyles:o,currentVelocities:t.currentVelocities})}},render:function(){var t=i(S["default"],this.state.currentStyles),n=this.props.children(t);return n&&e.Children.only(n)}}),l=b["default"](e),u=l.Spring,d=l.TransitionSpring;return{Spring:u,TransitionSpring:d,Motion:n,StaggeredMotion:o,TransitionMotion:a}}t.__esModule=!0;var s=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e};t["default"]=a;var l=n(54),c=o(l),u=n(52),p=o(u),d=n(53),h=o(d),f=n(49),m=o(f),v=n(59),g=o(v),E=n(58),y=n(51),b=o(y),C=n(57),S=o(C),R=m["default"]();e.exports=t["default"]},function(e,t){"use strict";function n(e){var t=e.createClass({displayName:"Spring",componentWillMount:function(){},render:function(){return null}}),n=e.createClass({displayName:"TransitionSpring",componentWillMount:function(){},render:function(){return null}});return{Spring:t,TransitionSpring:n}}t.__esModule=!0,t["default"]=n,e.exports=t["default"]},function(e,t){"use strict";function n(e,t){for(var n in t)if(t.hasOwnProperty(n)){var o=e[n],i=t[n];if(null!=i&&i.config){if(o.config&&o.val!==i.val)return!1;if(!o.config&&o!==i.val)return!1}}return!0}t.__esModule=!0,t["default"]=n,e.exports=t["default"]},function(e,t){"use strict";function n(e,t,n,o,i,r,a){for(var s=!0;s;){var l=e,c=t,u=n,p=o,d=i,h=r,f=a;m=v=g=E=y=y=void 0,s=!1;var m=p===l.length,v=d===c.length,g=l[p],E=c[d];if(m&&v)return null;if(m)f[E]=u[E],e=l,t=c,n=u,o=p,i=d+1,r=h,a=f,s=!0;else if(v){var y=h(g);null!=y&&(f[g]=y),e=l,t=c,n=u,o=p+1,i=d,r=h,a=f,s=!0}else if(g!==E)if(u.hasOwnProperty(g))e=l,t=c,n=u,o=p+1,i=d,r=h,a=f,s=!0;else{var y=h(g);null!=y&&(f[g]=y),e=l,t=c,n=u,o=p+1,i=d,r=h,a=f,s=!0}else f[g]=u[g],e=l,t=c,n=u,o=p+1,i=d+1,r=h,a=f,s=!0}}function o(e,t,o){var i={};return n(Object.keys(e),Object.keys(t),t,0,0,o,i),i}t.__esModule=!0,t["default"]=o,e.exports=t["default"]},function(e,t){"use strict";function n(e,t){for(var n in e)if(e.hasOwnProperty(n)&&null!=t[n]&&t[n].config&&0!==e[n])return!1;return!0}t.__esModule=!0,t["default"]=n,e.exports=t["default"]},function(e,t){"use strict";function n(e,t){for(var n=t(Object.keys(e)),o={},i=0;i<n.length;i++){var r=n[i];o[r]=e[r]}return o}t.__esModule=!0,t["default"]=n,e.exports=t["default"]},function(e,t){"use strict";function n(e,t,n,i,r,a){var s=-r*(t-i),l=-a*n,c=s+l,u=n+c*e,p=t+u*e;return Math.abs(u-n)<o&&Math.abs(p-t)<o?[i,0]:[p,u]}t.__esModule=!0,t["default"]=n;var o=1e-4;e.exports=t["default"]},function(e,t){"use strict";function n(e){var t={};for(var n in e)e.hasOwnProperty(n)&&(t[n]=null==e[n]||null==e[n].val?e[n]:e[n].val);return t}t.__esModule=!0,t["default"]=n,e.exports=t["default"]},function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}function i(e,t,n){if(!n)return t;var o={};for(var i in t)if(t.hasOwnProperty(i))if(null!=t[i]&&t[i].config){var r=n[i].config?n[i].val:n[i];o[i]=u["default"](t[i].val*e+r*(1-e),t[i].config)}else o[i]=t[i];return o}function r(e,t,n,o){var i={};for(var r in o)if(o.hasOwnProperty(r))if(null!=o[r]&&o[r].config){var a=o[r].config,s=a[0],c=a[1],p=l["default"](e,null==t[r].val?t[r]:t[r].val,n[r],o[r].val,s,c)[0];i[r]=u["default"](p,o[r].config)}else i[r]=o[r];return i}function a(e,t,n,o){var i={};for(var r in o)if(o.hasOwnProperty(r))if(null!=o[r]&&o[r].config){var a=o[r].config,s=a[0],c=a[1],u=l["default"](e,null==t[r].val?t[r]:t[r].val,n[r],o[r].val,s,c)[1];i[r]=u}else i[r]=0;return i}t.__esModule=!0,t.interpolateValue=i,t.updateCurrentStyle=r,t.updateCurrentVelocity=a;var s=n(56),l=o(s),c=n(18),u=o(c)},function(e,t){"use strict";function n(){return 0}t.__esModule=!0,t["default"]=n,e.exports=t["default"]},function(e,t,n){for(var o=n(19),i="undefined"==typeof window?{}:window,r=["moz","webkit"],a="AnimationFrame",s=i["request"+a],l=i["cancel"+a]||i["cancelRequest"+a],c=0;c<r.length&&!s;c++)s=i[r[c]+"Request"+a],l=i[r[c]+"Cancel"+a]||i[r[c]+"CancelRequest"+a];if(!s||!l){var u=0,p=0,d=[],h=1e3/60;s=function(e){if(0===d.length){var t=o(),n=Math.max(0,h-(t-u));u=n+t,setTimeout(function(){var e=d.slice(0);d.length=0;for(var t=0;t<e.length;t++)if(!e[t].cancelled)try{e[t].callback(u)}catch(n){setTimeout(function(){throw n},0)}},Math.round(n))}return d.push({handle:++p,callback:e,cancelled:!1}),p},l=function(e){for(var t=0;t<d.length;t++)d[t].handle===e&&(d[t].cancelled=!0)}}e.exports=function(e){return s.call(i,e)},e.exports.cancel=function(){l.apply(i,arguments)}},function(e){function t(){l=!1,r.length?s=r.concat(s):c=-1,s.length&&n()}function n(){if(!l){var e=setTimeout(t);l=!0;for(var n=s.length;n;){for(r=s,s=[];++c<n;)r&&r[c].run();c=-1,n=s.length}r=null,l=!1,clearTimeout(e)}}function o(e,t){this.fun=e,this.array=t}function i(){}var r,a=e.exports={},s=[],l=!1,c=-1;a.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var i=1;i<arguments.length;i++)t[i-1]=arguments[i];s.push(new o(e,t)),1!==s.length||l||setTimeout(n,0)},o.prototype.run=function(){this.fun.apply(null,this.array)},a.title="browser",a.browser=!0,a.env={},a.argv=[],a.version="",a.versions={},a.on=i,a.addListener=i,a.once=i,a.off=i,a.removeListener=i,a.removeAllListeners=i,a.emit=i,a.binding=function(){throw new Error("process.binding is not supported")},a.cwd=function(){return"/"},a.chdir=function(){throw new Error("process.chdir is not supported")},a.umask=function(){return 0}}])})},{react:99}],65:[function(e,t){"use strict";function n(e){var t=/[=:]/g,n={"=":"=0",":":"=2"},o=(""+e).replace(t,function(e){return n[e]});return"$"+o}function o(e){var t=/(=0|=2)/g,n={"=0":"=","=2":":"},o=e.substring("."===e[0]&&"$"===e[1]?2:1);return(""+o).replace(t,function(e){return n[e]})}var i={escape:n,unescape:o};t.exports=i},{}],66:[function(e,t){"use strict";var n=e("./reactProdInvariant"),o=(e("fbjs/lib/invariant"),function(e){var t=this;if(t.instancePool.length){var n=t.instancePool.pop();return t.call(n,e),n}return new t(e)}),i=function(e,t){var n=this;if(n.instancePool.length){var o=n.instancePool.pop();return n.call(o,e,t),o}return new n(e,t)},r=function(e,t,n){var o=this;if(o.instancePool.length){var i=o.instancePool.pop();return o.call(i,e,t,n),i}return new o(e,t,n)},a=function(e,t,n,o){var i=this;if(i.instancePool.length){var r=i.instancePool.pop();return i.call(r,e,t,n,o),r}return new i(e,t,n,o)},s=function(e){var t=this;e instanceof t?void 0:n("25"),e.destructor(),t.instancePool.length<t.poolSize&&t.instancePool.push(e)},l=10,c=o,u=function(e,t){var n=e;return n.instancePool=[],n.getPooled=t||c,n.poolSize||(n.poolSize=l),n.release=s,n},p={addPoolingTo:u,oneArgumentPooler:o,twoArgumentPooler:i,threeArgumentPooler:r,fourArgumentPooler:a};t.exports=p},{"./reactProdInvariant":87,"fbjs/lib/invariant":92}],67:[function(e,t){"use strict";var n=e("object-assign"),o=e("./ReactBaseClasses"),i=e("./ReactChildren"),r=e("./ReactDOMFactories"),a=e("./ReactElement"),s=e("./ReactPropTypes"),l=e("./ReactVersion"),c=e("./createClass"),u=e("./onlyChild"),p=a.createElement,d=a.createFactory,h=a.cloneElement,f=n,m=function(e){return e},v={Children:{map:i.map,forEach:i.forEach,count:i.count,toArray:i.toArray,only:u},Component:o.Component,PureComponent:o.PureComponent,createElement:p,cloneElement:h,isValidElement:a.isValidElement,PropTypes:s,createClass:c,createFactory:d,createMixin:m,DOM:r,version:l,__spread:f};t.exports=v},{"./ReactBaseClasses":68,"./ReactChildren":69,"./ReactDOMFactories":72,"./ReactElement":73,"./ReactElementValidator":75,"./ReactPropTypes":78,"./ReactVersion":80,"./canDefineProperty":81,"./createClass":83,"./lowPriorityWarning":85,"./onlyChild":86,"object-assign":94}],68:[function(e,t){"use strict";function n(e,t,n){this.props=e,this.context=t,this.refs=l,this.updater=n||s}function o(e,t,n){this.props=e,this.context=t,this.refs=l,this.updater=n||s}function i(){}{var r=e("./reactProdInvariant"),a=e("object-assign"),s=e("./ReactNoopUpdateQueue"),l=(e("./canDefineProperty"),e("fbjs/lib/emptyObject"));e("fbjs/lib/invariant"),e("./lowPriorityWarning")}n.prototype.isReactComponent={},n.prototype.setState=function(e,t){"object"!=typeof e&&"function"!=typeof e&&null!=e?r("85"):void 0,this.updater.enqueueSetState(this,e),t&&this.updater.enqueueCallback(this,t,"setState")},n.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this),e&&this.updater.enqueueCallback(this,e,"forceUpdate")};i.prototype=n.prototype,o.prototype=new i,o.prototype.constructor=o,a(o.prototype,n.prototype),o.prototype.isPureReactComponent=!0,t.exports={Component:n,PureComponent:o}},{"./ReactNoopUpdateQueue":76,"./canDefineProperty":81,"./lowPriorityWarning":85,"./reactProdInvariant":87,"fbjs/lib/emptyObject":91,"fbjs/lib/invariant":92,"object-assign":94}],69:[function(e,t){"use strict";function n(e){return(""+e).replace(y,"$&/")}function o(e,t){this.func=e,this.context=t,this.count=0}function i(e,t){var n=e.func,o=e.context;n.call(o,t,e.count++)}function r(e,t,n){if(null==e)return e;var r=o.getPooled(t,n);v(e,i,r),o.release(r)}function a(e,t,n,o){this.result=e,this.keyPrefix=t,this.func=n,this.context=o,this.count=0}function s(e,t,o){var i=e.result,r=e.keyPrefix,a=e.func,s=e.context,c=a.call(s,t,e.count++);Array.isArray(c)?l(c,i,o,m.thatReturnsArgument):null!=c&&(f.isValidElement(c)&&(c=f.cloneAndReplaceKey(c,r+(!c.key||t&&t.key===c.key?"":n(c.key)+"/")+o)),i.push(c))}function l(e,t,o,i,r){var l="";null!=o&&(l=n(o)+"/");var c=a.getPooled(t,l,i,r);v(e,s,c),a.release(c)}function c(e,t,n){if(null==e)return e;var o=[];return l(e,o,null,t,n),o}function u(){return null}function p(e){return v(e,u,null)}function d(e){var t=[];return l(e,t,null,m.thatReturnsArgument),t}var h=e("./PooledClass"),f=e("./ReactElement"),m=e("fbjs/lib/emptyFunction"),v=e("./traverseAllChildren"),g=h.twoArgumentPooler,E=h.fourArgumentPooler,y=/\/+/g;o.prototype.destructor=function(){this.func=null,this.context=null,this.count=0},h.addPoolingTo(o,g),a.prototype.destructor=function(){this.result=null,this.keyPrefix=null,this.func=null,this.context=null,this.count=0},h.addPoolingTo(a,E);var b={forEach:r,map:c,mapIntoWithKeyPrefixInternal:l,count:p,toArray:d};t.exports=b},{"./PooledClass":66,"./ReactElement":73,"./traverseAllChildren":88,"fbjs/lib/emptyFunction":90}],70:[function(e,t){"use strict";function n(e){var t=Function.prototype.toString,n=Object.prototype.hasOwnProperty,o=RegExp("^"+t.call(n).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");try{var i=t.call(e);return o.test(i)}catch(r){return!1}}function o(e){var t=l(e);if(t){var n=t.childIDs;c(e),n.forEach(o)}}function i(e,t,n){return"\n    in "+(e||"Unknown")+(t?" (at "+t.fileName.replace(/^.*[\\\/]/,"")+":"+t.lineNumber+")":n?" (created by "+n+")":"")}function r(e){return null==e?"#empty":"string"==typeof e||"number"==typeof e?"#text":"string"==typeof e.type?e.type:e.type.displayName||e.type.name||"Unknown"}function a(e){var t,n=T.getDisplayName(e),o=T.getElement(e),r=T.getOwnerID(e);return r&&(t=T.getDisplayName(r)),i(n,o&&o._source,t)}var s,l,c,u,p,d,h,f=e("./reactProdInvariant"),m=e("./ReactCurrentOwner"),v=(e("fbjs/lib/invariant"),e("fbjs/lib/warning"),"function"==typeof Array.from&&"function"==typeof Map&&n(Map)&&null!=Map.prototype&&"function"==typeof Map.prototype.keys&&n(Map.prototype.keys)&&"function"==typeof Set&&n(Set)&&null!=Set.prototype&&"function"==typeof Set.prototype.keys&&n(Set.prototype.keys));if(v){var g=new Map,E=new Set;s=function(e,t){g.set(e,t)},l=function(e){return g.get(e)},c=function(e){g["delete"](e)},u=function(){return Array.from(g.keys())},p=function(e){E.add(e)},d=function(e){E["delete"](e)},h=function(){return Array.from(E.keys())}}else{var y={},b={},C=function(e){return"."+e},S=function(e){return parseInt(e.substr(1),10)};s=function(e,t){var n=C(e);y[n]=t},l=function(e){var t=C(e);return y[t]},c=function(e){var t=C(e);delete y[t]},u=function(){return Object.keys(y).map(S)},p=function(e){var t=C(e);b[t]=!0},d=function(e){var t=C(e);delete b[t]},h=function(){return Object.keys(b).map(S)}}var R=[],T={onSetChildren:function(e,t){var n=l(e);n?void 0:f("144"),n.childIDs=t;for(var o=0;o<t.length;o++){var i=t[o],r=l(i);r?void 0:f("140"),null==r.childIDs&&"object"==typeof r.element&&null!=r.element?f("141"):void 0,r.isMounted?void 0:f("71"),null==r.parentID&&(r.parentID=e),r.parentID!==e?f("142",i,r.parentID,e):void 0}},onBeforeMountComponent:function(e,t,n){var o={element:t,parentID:n,text:null,childIDs:[],isMounted:!1,updateCount:0};s(e,o)},onBeforeUpdateComponent:function(e,t){var n=l(e);n&&n.isMounted&&(n.element=t)},onMountComponent:function(e){var t=l(e);t?void 0:f("144"),t.isMounted=!0;var n=0===t.parentID;n&&p(e)},onUpdateComponent:function(e){var t=l(e);t&&t.isMounted&&t.updateCount++},onUnmountComponent:function(e){var t=l(e);if(t){t.isMounted=!1;var n=0===t.parentID;n&&d(e)}R.push(e)},purgeUnmountedComponents:function(){if(!T._preventPurging){for(var e=0;e<R.length;e++){var t=R[e];o(t)}R.length=0}},isMounted:function(e){var t=l(e);return t?t.isMounted:!1},getCurrentStackAddendum:function(e){var t="";if(e){var n=r(e),o=e._owner;t+=i(n,e._source,o&&o.getName())}var a=m.current,s=a&&a._debugID;return t+=T.getStackAddendumByID(s)},getStackAddendumByID:function(e){for(var t="";e;)t+=a(e),e=T.getParentID(e);return t},getChildIDs:function(e){var t=l(e);return t?t.childIDs:[]},getDisplayName:function(e){var t=T.getElement(e);return t?r(t):null},getElement:function(e){var t=l(e);return t?t.element:null},getOwnerID:function(e){var t=T.getElement(e);return t&&t._owner?t._owner._debugID:null},getParentID:function(e){var t=l(e);return t?t.parentID:null},getSource:function(e){var t=l(e),n=t?t.element:null,o=null!=n?n._source:null;return o},getText:function(e){var t=T.getElement(e);return"string"==typeof t?t:"number"==typeof t?""+t:null},getUpdateCount:function(e){var t=l(e);return t?t.updateCount:0},getRootIDs:h,getRegisteredIDs:u,pushNonStandardWarningStack:function(e,t){if("function"==typeof console.reactStack){var n=[],o=m.current,i=o&&o._debugID;try{for(e&&n.push({name:i?T.getDisplayName(i):null,fileName:t?t.fileName:null,lineNumber:t?t.lineNumber:null});i;){var r=T.getElement(i),a=T.getParentID(i),s=T.getOwnerID(i),l=s?T.getDisplayName(s):null,c=r&&r._source;n.push({name:l,fileName:c?c.fileName:null,lineNumber:c?c.lineNumber:null}),i=a}}catch(u){}console.reactStack(n)}},popNonStandardWarningStack:function(){"function"==typeof console.reactStackEnd&&console.reactStackEnd()}};t.exports=T},{"./ReactCurrentOwner":71,"./reactProdInvariant":87,"fbjs/lib/invariant":92,"fbjs/lib/warning":93}],71:[function(e,t){"use strict";var n={current:null};t.exports=n},{}],72:[function(e,t){"use strict";var n=e("./ReactElement"),o=n.createFactory,i={a:o("a"),abbr:o("abbr"),address:o("address"),area:o("area"),article:o("article"),aside:o("aside"),audio:o("audio"),b:o("b"),base:o("base"),bdi:o("bdi"),bdo:o("bdo"),big:o("big"),blockquote:o("blockquote"),body:o("body"),br:o("br"),button:o("button"),canvas:o("canvas"),caption:o("caption"),cite:o("cite"),code:o("code"),col:o("col"),colgroup:o("colgroup"),data:o("data"),datalist:o("datalist"),dd:o("dd"),del:o("del"),details:o("details"),dfn:o("dfn"),dialog:o("dialog"),div:o("div"),dl:o("dl"),dt:o("dt"),em:o("em"),embed:o("embed"),fieldset:o("fieldset"),figcaption:o("figcaption"),figure:o("figure"),footer:o("footer"),form:o("form"),h1:o("h1"),h2:o("h2"),h3:o("h3"),h4:o("h4"),h5:o("h5"),h6:o("h6"),head:o("head"),header:o("header"),hgroup:o("hgroup"),hr:o("hr"),html:o("html"),i:o("i"),iframe:o("iframe"),img:o("img"),input:o("input"),ins:o("ins"),kbd:o("kbd"),keygen:o("keygen"),label:o("label"),legend:o("legend"),li:o("li"),link:o("link"),main:o("main"),map:o("map"),mark:o("mark"),menu:o("menu"),menuitem:o("menuitem"),meta:o("meta"),meter:o("meter"),nav:o("nav"),noscript:o("noscript"),object:o("object"),ol:o("ol"),optgroup:o("optgroup"),option:o("option"),output:o("output"),p:o("p"),param:o("param"),picture:o("picture"),pre:o("pre"),progress:o("progress"),q:o("q"),rp:o("rp"),rt:o("rt"),ruby:o("ruby"),s:o("s"),samp:o("samp"),script:o("script"),section:o("section"),select:o("select"),small:o("small"),source:o("source"),span:o("span"),strong:o("strong"),style:o("style"),sub:o("sub"),summary:o("summary"),sup:o("sup"),table:o("table"),tbody:o("tbody"),td:o("td"),textarea:o("textarea"),tfoot:o("tfoot"),th:o("th"),thead:o("thead"),time:o("time"),title:o("title"),tr:o("tr"),track:o("track"),u:o("u"),ul:o("ul"),"var":o("var"),video:o("video"),wbr:o("wbr"),circle:o("circle"),clipPath:o("clipPath"),defs:o("defs"),ellipse:o("ellipse"),g:o("g"),image:o("image"),line:o("line"),linearGradient:o("linearGradient"),mask:o("mask"),path:o("path"),pattern:o("pattern"),polygon:o("polygon"),polyline:o("polyline"),radialGradient:o("radialGradient"),rect:o("rect"),stop:o("stop"),svg:o("svg"),text:o("text"),tspan:o("tspan")};t.exports=i},{"./ReactElement":73,"./ReactElementValidator":75}],73:[function(e,t){"use strict";function n(e){return void 0!==e.ref}function o(e){return void 0!==e.key}var i=e("object-assign"),r=e("./ReactCurrentOwner"),a=(e("fbjs/lib/warning"),e("./canDefineProperty"),Object.prototype.hasOwnProperty),s=e("./ReactElementSymbol"),l={key:!0,ref:!0,__self:!0,__source:!0},c=function(e,t,n,o,i,r,a){var l={$$typeof:s,type:e,key:t,ref:n,props:a,_owner:r};return l};c.createElement=function(e,t,i){var s,u={},p=null,d=null,h=null,f=null;if(null!=t){n(t)&&(d=t.ref),o(t)&&(p=""+t.key),h=void 0===t.__self?null:t.__self,f=void 0===t.__source?null:t.__source;for(s in t)a.call(t,s)&&!l.hasOwnProperty(s)&&(u[s]=t[s])}var m=arguments.length-2;if(1===m)u.children=i;else if(m>1){for(var v=Array(m),g=0;m>g;g++)v[g]=arguments[g+2];
    u.children=v}if(e&&e.defaultProps){var E=e.defaultProps;for(s in E)void 0===u[s]&&(u[s]=E[s])}return c(e,p,d,h,f,r.current,u)},c.createFactory=function(e){var t=c.createElement.bind(null,e);return t.type=e,t},c.cloneAndReplaceKey=function(e,t){var n=c(e.type,t,e.ref,e._self,e._source,e._owner,e.props);return n},c.cloneElement=function(e,t,s){var u,p=i({},e.props),d=e.key,h=e.ref,f=e._self,m=e._source,v=e._owner;if(null!=t){n(t)&&(h=t.ref,v=r.current),o(t)&&(d=""+t.key);var g;e.type&&e.type.defaultProps&&(g=e.type.defaultProps);for(u in t)a.call(t,u)&&!l.hasOwnProperty(u)&&(p[u]=void 0===t[u]&&void 0!==g?g[u]:t[u])}var E=arguments.length-2;if(1===E)p.children=s;else if(E>1){for(var y=Array(E),b=0;E>b;b++)y[b]=arguments[b+2];p.children=y}return c(e.type,d,h,f,m,v,p)},c.isValidElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===s},t.exports=c},{"./ReactCurrentOwner":71,"./ReactElementSymbol":74,"./canDefineProperty":81,"fbjs/lib/warning":93,"object-assign":94}],74:[function(e,t){"use strict";var n="function"==typeof Symbol&&Symbol["for"]&&Symbol["for"]("react.element")||60103;t.exports=n},{}],75:[function(e,t){"use strict";function n(){if(l.current){var e=l.current.getName();if(e)return" Check the render method of `"+e+"`."}return""}function o(e){if(null!==e&&void 0!==e&&void 0!==e.__source){var t=e.__source,n=t.fileName.replace(/^.*[\\\/]/,""),o=t.lineNumber;return" Check your code at "+n+":"+o+"."}return""}function i(e){var t=n();if(!t){var o="string"==typeof e?e:e.displayName||e.name;o&&(t=" Check the top-level render call using <"+o+">.")}return t}function r(e,t){if(e._store&&!e._store.validated&&null==e.key){e._store.validated=!0;var n=h.uniqueKey||(h.uniqueKey={}),o=i(t);if(!n[o]){n[o]=!0;var r="";e&&e._owner&&e._owner!==l.current&&(r=" It was passed a child from "+e._owner.getName()+".")}}}function a(e,t){if("object"==typeof e)if(Array.isArray(e))for(var n=0;n<e.length;n++){var o=e[n];u.isValidElement(o)&&r(o,t)}else if(u.isValidElement(e))e._store&&(e._store.validated=!0);else if(e){var i=d(e);if(i&&i!==e.entries)for(var a,s=i.call(e);!(a=s.next()).done;)u.isValidElement(a.value)&&r(a.value,t)}}function s(e){var t=e.type;if("function"==typeof t){var n=t.displayName||t.name;t.propTypes&&p(t.propTypes,e.props,"prop",n,e,null),"function"==typeof t.getDefaultProps}}var l=e("./ReactCurrentOwner"),c=e("./ReactComponentTreeHook"),u=e("./ReactElement"),p=e("./checkReactTypeSpec"),d=(e("./canDefineProperty"),e("./getIteratorFn")),h=(e("fbjs/lib/warning"),e("./lowPriorityWarning"),{}),f={createElement:function(e,t){var i="string"==typeof e||"function"==typeof e;if(!i&&"function"!=typeof e&&"string"!=typeof e){var r="";(void 0===e||"object"==typeof e&&null!==e&&0===Object.keys(e).length)&&(r+=" You likely forgot to export your component from the file it's defined in.");var l=o(t);r+=l?l:n(),r+=c.getCurrentStackAddendum();var p=null!==t&&void 0!==t&&void 0!==t.__source?t.__source:null;c.pushNonStandardWarningStack(!0,p),c.popNonStandardWarningStack()}var d=u.createElement.apply(this,arguments);if(null==d)return d;if(i)for(var h=2;h<arguments.length;h++)a(arguments[h],e);return s(d),d},createFactory:function(e){var t=f.createElement.bind(null,e);return t.type=e,t},cloneElement:function(){for(var e=u.cloneElement.apply(this,arguments),t=2;t<arguments.length;t++)a(arguments[t],e.type);return s(e),e}};t.exports=f},{"./ReactComponentTreeHook":70,"./ReactCurrentOwner":71,"./ReactElement":73,"./canDefineProperty":81,"./checkReactTypeSpec":82,"./getIteratorFn":84,"./lowPriorityWarning":85,"fbjs/lib/warning":93}],76:[function(e,t){"use strict";function n(e,t){}var o=(e("fbjs/lib/warning"),{isMounted:function(){return!1},enqueueCallback:function(){},enqueueForceUpdate:function(e){n(e,"forceUpdate")},enqueueReplaceState:function(e){n(e,"replaceState")},enqueueSetState:function(e){n(e,"setState")}});t.exports=o},{"fbjs/lib/warning":93}],77:[function(e,t){"use strict";var n={};t.exports=n},{}],78:[function(e,t){"use strict";var n=e("./ReactElement"),o=n.isValidElement,i=e("prop-types/factory");t.exports=i(o)},{"./ReactElement":73,"prop-types/factory":96}],79:[function(e,t){"use strict";var n="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";t.exports=n},{}],80:[function(e,t){"use strict";t.exports="15.6.0"},{}],81:[function(e,t){"use strict";var n=!1;t.exports=n},{}],82:[function(e,t){(function(n){"use strict";function o(e,t,n,o,l,c){for(var u in e)if(e.hasOwnProperty(u)){var p;try{"function"!=typeof e[u]?i("84",o||"React class",r[n],u):void 0,p=e[u](t,u,o,n,null,a)}catch(d){p=d}if(p instanceof Error&&!(p.message in s)){s[p.message]=!0}}}var i=e("./reactProdInvariant"),r=e("./ReactPropTypeLocationNames"),a=e("./ReactPropTypesSecret"),s=(e("fbjs/lib/invariant"),e("fbjs/lib/warning"),{});t.exports=o}).call(this,e("_process"))},{"./ReactComponentTreeHook":70,"./ReactPropTypeLocationNames":77,"./ReactPropTypesSecret":79,"./reactProdInvariant":87,_process:57,"fbjs/lib/invariant":92,"fbjs/lib/warning":93}],83:[function(e,t){"use strict";var n=e("./ReactBaseClasses"),o=n.Component,i=e("./ReactElement"),r=i.isValidElement,a=e("./ReactNoopUpdateQueue"),s=e("create-react-class/factory");t.exports=s(o,r,a)},{"./ReactBaseClasses":68,"./ReactElement":73,"./ReactNoopUpdateQueue":76,"create-react-class/factory":89}],84:[function(e,t){"use strict";function n(e){var t=e&&(o&&e[o]||e[i]);return"function"==typeof t?t:void 0}var o="function"==typeof Symbol&&Symbol.iterator,i="@@iterator";t.exports=n},{}],85:[function(e,t){"use strict";var n=function(){};t.exports=n},{}],86:[function(e,t){"use strict";function n(e){return i.isValidElement(e)?void 0:o("143"),e}{var o=e("./reactProdInvariant"),i=e("./ReactElement");e("fbjs/lib/invariant")}t.exports=n},{"./ReactElement":73,"./reactProdInvariant":87,"fbjs/lib/invariant":92}],87:[function(e,t){"use strict";function n(e){for(var t=arguments.length-1,n="Minified React error #"+e+"; visit http://facebook.github.io/react/docs/error-decoder.html?invariant="+e,o=0;t>o;o++)n+="&args[]="+encodeURIComponent(arguments[o+1]);n+=" for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";var i=new Error(n);throw i.name="Invariant Violation",i.framesToPop=1,i}t.exports=n},{}],88:[function(e,t){"use strict";function n(e,t){return e&&"object"==typeof e&&null!=e.key?l.escape(e.key):t.toString(36)}function o(e,t,i,p){var d=typeof e;if(("undefined"===d||"boolean"===d)&&(e=null),null===e||"string"===d||"number"===d||"object"===d&&e.$$typeof===a)return i(p,e,""===t?c+n(e,0):t),1;var h,f,m=0,v=""===t?c:t+u;if(Array.isArray(e))for(var g=0;g<e.length;g++)h=e[g],f=v+n(h,g),m+=o(h,f,i,p);else{var E=s(e);if(E){var y,b=E.call(e);if(E!==e.entries)for(var C=0;!(y=b.next()).done;)h=y.value,f=v+n(h,C++),m+=o(h,f,i,p);else for(;!(y=b.next()).done;){var S=y.value;S&&(h=S[1],f=v+l.escape(S[0])+u+n(h,0),m+=o(h,f,i,p))}}else if("object"===d){var R="",T=String(e);r("31","[object Object]"===T?"object with keys {"+Object.keys(e).join(", ")+"}":T,R)}}return m}function i(e,t,n){return null==e?0:o(e,"",t,n)}var r=e("./reactProdInvariant"),a=(e("./ReactCurrentOwner"),e("./ReactElementSymbol")),s=e("./getIteratorFn"),l=(e("fbjs/lib/invariant"),e("./KeyEscapeUtils")),c=(e("fbjs/lib/warning"),"."),u=":";t.exports=i},{"./KeyEscapeUtils":65,"./ReactCurrentOwner":71,"./ReactElementSymbol":74,"./getIteratorFn":84,"./reactProdInvariant":87,"fbjs/lib/invariant":92,"fbjs/lib/warning":93}],89:[function(e,t){"use strict";function n(e){return e}function o(e,t,o){function i(e,t){var n=E.hasOwnProperty(t)?E[t]:null;S.hasOwnProperty(t)&&s("OVERRIDE_BASE"===n,"ReactClassInterface: You are attempting to override `%s` from your class specification. Ensure that your method names do not overlap with React methods.",t),e&&s("DEFINE_MANY"===n||"DEFINE_MANY_MERGED"===n,"ReactClassInterface: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.",t)}function c(e,n){if(n){s("function"!=typeof n,"ReactClass: You're attempting to use a component class or function as a mixin. Instead, just use a regular object."),s(!t(n),"ReactClass: You're attempting to use a component as a mixin. Instead, just use a regular object.");var o=e.prototype,r=o.__reactAutoBindPairs;n.hasOwnProperty(l)&&y.mixins(e,n.mixins);for(var a in n)if(n.hasOwnProperty(a)&&a!==l){var c=n[a],u=o.hasOwnProperty(a);if(i(u,a),y.hasOwnProperty(a))y[a](e,c);else{var p=E.hasOwnProperty(a),f="function"==typeof c,m=f&&!p&&!u&&n.autobind!==!1;if(m)r.push(a,c),o[a]=c;else if(u){var v=E[a];s(p&&("DEFINE_MANY_MERGED"===v||"DEFINE_MANY"===v),"ReactClass: Unexpected spec policy %s for key %s when mixing in component specs.",v,a),"DEFINE_MANY_MERGED"===v?o[a]=d(o[a],c):"DEFINE_MANY"===v&&(o[a]=h(o[a],c))}else o[a]=c}}}else;}function u(e,t){if(t)for(var n in t){var o=t[n];if(t.hasOwnProperty(n)){var i=n in y;s(!i,'ReactClass: You are attempting to define a reserved property, `%s`, that shouldn\'t be on the "statics" key. Define it as an instance property instead; it will still be accessible on the constructor.',n);var r=n in e;s(!r,"ReactClass: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.",n),e[n]=o}}}function p(e,t){s(e&&t&&"object"==typeof e&&"object"==typeof t,"mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.");for(var n in t)t.hasOwnProperty(n)&&(s(void 0===e[n],"mergeIntoWithNoDuplicateKeys(): Tried to merge two objects with the same key: `%s`. This conflict may be due to a mixin; in particular, this may be caused by two getInitialState() or getDefaultProps() methods returning objects with clashing keys.",n),e[n]=t[n]);return e}function d(e,t){return function(){var n=e.apply(this,arguments),o=t.apply(this,arguments);if(null==n)return o;if(null==o)return n;var i={};return p(i,n),p(i,o),i}}function h(e,t){return function(){e.apply(this,arguments),t.apply(this,arguments)}}function f(e,t){var n=t.bind(e);return n}function m(e){for(var t=e.__reactAutoBindPairs,n=0;n<t.length;n+=2){var o=t[n],i=t[n+1];e[o]=f(e,i)}}function v(e){var t=n(function(e,n,i){this.__reactAutoBindPairs.length&&m(this),this.props=e,this.context=n,this.refs=a,this.updater=i||o,this.state=null;var r=this.getInitialState?this.getInitialState():null;s("object"==typeof r&&!Array.isArray(r),"%s.getInitialState(): must return an object or null",t.displayName||"ReactCompositeComponent"),this.state=r});t.prototype=new R,t.prototype.constructor=t,t.prototype.__reactAutoBindPairs=[],g.forEach(c.bind(null,t)),c(t,b),c(t,e),c(t,C),t.getDefaultProps&&(t.defaultProps=t.getDefaultProps()),s(t.prototype.render,"createClass(...): Class specification must implement a `render` method.");for(var i in E)t.prototype[i]||(t.prototype[i]=null);return t}var g=[],E={mixins:"DEFINE_MANY",statics:"DEFINE_MANY",propTypes:"DEFINE_MANY",contextTypes:"DEFINE_MANY",childContextTypes:"DEFINE_MANY",getDefaultProps:"DEFINE_MANY_MERGED",getInitialState:"DEFINE_MANY_MERGED",getChildContext:"DEFINE_MANY_MERGED",render:"DEFINE_ONCE",componentWillMount:"DEFINE_MANY",componentDidMount:"DEFINE_MANY",componentWillReceiveProps:"DEFINE_MANY",shouldComponentUpdate:"DEFINE_ONCE",componentWillUpdate:"DEFINE_MANY",componentDidUpdate:"DEFINE_MANY",componentWillUnmount:"DEFINE_MANY",updateComponent:"OVERRIDE_BASE"},y={displayName:function(e,t){e.displayName=t},mixins:function(e,t){if(t)for(var n=0;n<t.length;n++)c(e,t[n])},childContextTypes:function(e,t){e.childContextTypes=r({},e.childContextTypes,t)},contextTypes:function(e,t){e.contextTypes=r({},e.contextTypes,t)},getDefaultProps:function(e,t){e.getDefaultProps=e.getDefaultProps?d(e.getDefaultProps,t):t},propTypes:function(e,t){e.propTypes=r({},e.propTypes,t)},statics:function(e,t){u(e,t)},autobind:function(){}},b={componentDidMount:function(){this.__isMounted=!0}},C={componentWillUnmount:function(){this.__isMounted=!1}},S={replaceState:function(e,t){this.updater.enqueueReplaceState(this,e,t)},isMounted:function(){return!!this.__isMounted}},R=function(){};return r(R.prototype,e.prototype,S),v}var i,r=e("object-assign"),a=e("fbjs/lib/emptyObject"),s=e("fbjs/lib/invariant"),l="mixins";i={},t.exports=o},{"fbjs/lib/emptyObject":91,"fbjs/lib/invariant":92,"fbjs/lib/warning":93,"object-assign":94}],90:[function(e,t){"use strict";function n(e){return function(){return e}}var o=function(){};o.thatReturns=n,o.thatReturnsFalse=n(!1),o.thatReturnsTrue=n(!0),o.thatReturnsNull=n(null),o.thatReturnsThis=function(){return this},o.thatReturnsArgument=function(e){return e},t.exports=o},{}],91:[function(e,t){"use strict";var n={};t.exports=n},{}],92:[function(e,t){"use strict";function n(e,t,n,i,r,a,s,l){if(o(t),!e){var c;if(void 0===t)c=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var u=[n,i,r,a,s,l],p=0;c=new Error(t.replace(/%s/g,function(){return u[p++]})),c.name="Invariant Violation"}throw c.framesToPop=1,c}}var o=function(){};t.exports=n},{}],93:[function(e,t){"use strict";var n=e("./emptyFunction"),o=n;t.exports=o},{"./emptyFunction":90}],94:[function(e,t){"use strict";function n(e){if(null===e||void 0===e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}function o(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;10>n;n++)t["_"+String.fromCharCode(n)]=n;var o=Object.getOwnPropertyNames(t).map(function(e){return t[e]});if("0123456789"!==o.join(""))return!1;var i={};return"abcdefghijklmnopqrst".split("").forEach(function(e){i[e]=e}),"abcdefghijklmnopqrst"!==Object.keys(Object.assign({},i)).join("")?!1:!0}catch(r){return!1}}var i=Object.getOwnPropertySymbols,r=Object.prototype.hasOwnProperty,a=Object.prototype.propertyIsEnumerable;t.exports=o()?Object.assign:function(e){for(var t,o,s=n(e),l=1;l<arguments.length;l++){t=Object(arguments[l]);for(var c in t)r.call(t,c)&&(s[c]=t[c]);if(i){o=i(t);for(var u=0;u<o.length;u++)a.call(t,o[u])&&(s[o[u]]=t[o[u]])}}return s}},{}],95:[function(e,t){"use strict";function n(e,t,n,o,i){}t.exports=n},{"./lib/ReactPropTypesSecret":98,"fbjs/lib/invariant":92,"fbjs/lib/warning":93}],96:[function(e,t){"use strict";var n=e("./factoryWithTypeCheckers");t.exports=function(e){var t=!1;return n(e,t)}},{"./factoryWithTypeCheckers":97}],97:[function(e,t){"use strict";var n=e("fbjs/lib/emptyFunction"),o=e("fbjs/lib/invariant"),i=e("fbjs/lib/warning"),r=e("./lib/ReactPropTypesSecret"),a=e("./checkPropTypes");t.exports=function(e,t){function s(e){var t=e&&(P&&e[P]||e[I]);return"function"==typeof t?t:void 0}function l(e,t){return e===t?0!==e||1/e===1/t:e!==e&&t!==t}function c(e){this.message=e,this.stack=""}function u(e){function n(n,i,a,s,l,u,p){if(s=s||A,u=u||a,p!==r)if(t)o(!1,"Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types");else;return null==i[a]?n?new c(null===i[a]?"The "+l+" `"+u+"` is marked as required "+("in `"+s+"`, but its value is `null`."):"The "+l+" `"+u+"` is marked as required in "+("`"+s+"`, but its value is `undefined`.")):null:e(i,a,s,l,u)}var i=n.bind(null,!1);return i.isRequired=n.bind(null,!0),i}function p(e){function t(t,n,o,i,r){var a=t[n],s=R(a);if(s!==e){var l=T(a);return new c("Invalid "+i+" `"+r+"` of type "+("`"+l+"` supplied to `"+o+"`, expected ")+("`"+e+"`."))}return null}return u(t)}function d(){return u(n.thatReturnsNull)}function h(e){function t(t,n,o,i,a){if("function"!=typeof e)return new c("Property `"+a+"` of component `"+o+"` has invalid PropType notation inside arrayOf.");var s=t[n];if(!Array.isArray(s)){var l=R(s);return new c("Invalid "+i+" `"+a+"` of type "+("`"+l+"` supplied to `"+o+"`, expected an array."))}for(var u=0;u<s.length;u++){var p=e(s,u,o,i,a+"["+u+"]",r);if(p instanceof Error)return p}return null}return u(t)}function f(){function t(t,n,o,i,r){var a=t[n];if(!e(a)){var s=R(a);return new c("Invalid "+i+" `"+r+"` of type "+("`"+s+"` supplied to `"+o+"`, expected a single ReactElement."))}return null}return u(t)}function m(e){function t(t,n,o,i,r){if(!(t[n]instanceof e)){var a=e.name||A,s=O(t[n]);return new c("Invalid "+i+" `"+r+"` of type "+("`"+s+"` supplied to `"+o+"`, expected ")+("instance of `"+a+"`."))}return null}return u(t)}function v(e){function t(t,n,o,i,r){for(var a=t[n],s=0;s<e.length;s++)if(l(a,e[s]))return null;var u=JSON.stringify(e);return new c("Invalid "+i+" `"+r+"` of value `"+a+"` "+("supplied to `"+o+"`, expected one of "+u+"."))}return Array.isArray(e)?u(t):n.thatReturnsNull}function g(e){function t(t,n,o,i,a){if("function"!=typeof e)return new c("Property `"+a+"` of component `"+o+"` has invalid PropType notation inside objectOf.");var s=t[n],l=R(s);if("object"!==l)return new c("Invalid "+i+" `"+a+"` of type "+("`"+l+"` supplied to `"+o+"`, expected an object."));for(var u in s)if(s.hasOwnProperty(u)){var p=e(s,u,o,i,a+"."+u,r);if(p instanceof Error)return p}return null}return u(t)}function E(e){function t(t,n,o,i,a){for(var s=0;s<e.length;s++){var l=e[s];if(null==l(t,n,o,i,a,r))return null}return new c("Invalid "+i+" `"+a+"` supplied to "+("`"+o+"`."))}if(!Array.isArray(e))return n.thatReturnsNull;for(var o=0;o<e.length;o++){var a=e[o];if("function"!=typeof a)return i(!1,"Invalid argument supplid to oneOfType. Expected an array of check functions, but received %s at index %s.",N(a),o),n.thatReturnsNull}return u(t)}function y(){function e(e,t,n,o,i){return C(e[t])?null:new c("Invalid "+o+" `"+i+"` supplied to "+("`"+n+"`, expected a ReactNode."))}return u(e)}function b(e){function t(t,n,o,i,a){var s=t[n],l=R(s);if("object"!==l)return new c("Invalid "+i+" `"+a+"` of type `"+l+"` "+("supplied to `"+o+"`, expected `object`."));for(var u in e){var p=e[u];if(p){var d=p(s,u,o,i,a+"."+u,r);if(d)return d}}return null}return u(t)}function C(t){switch(typeof t){case"number":case"string":case"undefined":return!0;case"boolean":return!t;case"object":if(Array.isArray(t))return t.every(C);if(null===t||e(t))return!0;var n=s(t);if(!n)return!1;var o,i=n.call(t);if(n!==t.entries){for(;!(o=i.next()).done;)if(!C(o.value))return!1}else for(;!(o=i.next()).done;){var r=o.value;if(r&&!C(r[1]))return!1}return!0;default:return!1}}function S(e,t){return"symbol"===e?!0:"Symbol"===t["@@toStringTag"]?!0:"function"==typeof Symbol&&t instanceof Symbol?!0:!1}function R(e){var t=typeof e;return Array.isArray(e)?"array":e instanceof RegExp?"object":S(t,e)?"symbol":t}function T(e){if("undefined"==typeof e||null===e)return""+e;var t=R(e);if("object"===t){if(e instanceof Date)return"date";if(e instanceof RegExp)return"regexp"}return t}function N(e){var t=T(e);switch(t){case"array":case"object":return"an "+t;case"boolean":case"date":case"regexp":return"a "+t;default:return t}}function O(e){return e.constructor&&e.constructor.name?e.constructor.name:A}var P="function"==typeof Symbol&&Symbol.iterator,I="@@iterator",A="<<anonymous>>",D={array:p("array"),bool:p("boolean"),func:p("function"),number:p("number"),object:p("object"),string:p("string"),symbol:p("symbol"),any:d(),arrayOf:h,element:f(),instanceOf:m,node:y(),objectOf:g,oneOf:v,oneOfType:E,shape:b};return c.prototype=Error.prototype,D.checkPropTypes=a,D.PropTypes=D,D}},{"./checkPropTypes":95,"./lib/ReactPropTypesSecret":98,"fbjs/lib/emptyFunction":90,"fbjs/lib/invariant":92,"fbjs/lib/warning":93}],98:[function(e,t){"use strict";var n="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";t.exports=n},{}],99:[function(e,t){"use strict";t.exports=e("./lib/React")},{"./lib/React":67}],100:[function(e,t){"use strict";var n=e("./ReactMount"),o=e("./findDOMNode"),i=e("fbjs/lib/focusNode"),r={componentDidMount:function(){this.props.autoFocus&&i(o(this))}},a={Mixin:r,focusDOMComponent:function(){i(n.getNode(this._rootNodeID))}};t.exports=a},{"./ReactMount":164,"./findDOMNode":207,"fbjs/lib/focusNode":237}],101:[function(e,t){"use strict";function n(){var e=window.opera;return"object"==typeof e&&"function"==typeof e.version&&parseInt(e.version(),10)<=12}function o(e){return(e.ctrlKey||e.altKey||e.metaKey)&&!(e.ctrlKey&&e.altKey)}function i(e){switch(e){case P.topCompositionStart:return I.compositionStart;case P.topCompositionEnd:return I.compositionEnd;case P.topCompositionUpdate:return I.compositionUpdate}}function r(e,t){return e===P.topKeyDown&&t.keyCode===b}function a(e,t){switch(e){case P.topKeyUp:return-1!==y.indexOf(t.keyCode);case P.topKeyDown:return t.keyCode!==b;case P.topKeyPress:case P.topMouseDown:case P.topBlur:return!0;default:return!1}}function s(e){var t=e.detail;return"object"==typeof t&&"data"in t?t.data:null}function l(e,t,n,o,l){var c,u;if(C?c=i(e):D?a(e,o)&&(c=I.compositionEnd):r(e,o)&&(c=I.compositionStart),!c)return null;T&&(D||c!==I.compositionStart?c===I.compositionEnd&&D&&(u=D.getData()):D=m.getPooled(t));var p=v.getPooled(c,n,o,l);if(u)p.data=u;else{var d=s(o);null!==d&&(p.data=d)}return h.accumulateTwoPhaseDispatches(p),p}function c(e,t){switch(e){case P.topCompositionEnd:return s(t);case P.topKeyPress:var n=t.which;return n!==N?null:(A=!0,O);case P.topTextInput:var o=t.data;return o===O&&A?null:o;default:return null}}function u(e,t){if(D){if(e===P.topCompositionEnd||a(e,t)){var n=D.getData();return m.release(D),D=null,n}return null}switch(e){case P.topPaste:return null;case P.topKeyPress:return t.which&&!o(t)?String.fromCharCode(t.which):null;case P.topCompositionEnd:return T?null:t.data;default:return null}}function p(e,t,n,o,i){var r;if(r=R?c(e,o):u(e,o),!r)return null;var a=g.getPooled(I.beforeInput,n,o,i);return a.data=r,h.accumulateTwoPhaseDispatches(a),a}var d=e("./EventConstants"),h=e("./EventPropagators"),f=e("fbjs/lib/ExecutionEnvironment"),m=e("./FallbackCompositionState"),v=e("./SyntheticCompositionEvent"),g=e("./SyntheticInputEvent"),E=e("fbjs/lib/keyOf"),y=[9,13,27,32],b=229,C=f.canUseDOM&&"CompositionEvent"in window,S=null;f.canUseDOM&&"documentMode"in document&&(S=document.documentMode);var R=f.canUseDOM&&"TextEvent"in window&&!S&&!n(),T=f.canUseDOM&&(!C||S&&S>8&&11>=S),N=32,O=String.fromCharCode(N),P=d.topLevelTypes,I={beforeInput:{phasedRegistrationNames:{bubbled:E({onBeforeInput:null}),captured:E({onBeforeInputCapture:null})},dependencies:[P.topCompositionEnd,P.topKeyPress,P.topTextInput,P.topPaste]},compositionEnd:{phasedRegistrationNames:{bubbled:E({onCompositionEnd:null}),captured:E({onCompositionEndCapture:null})},dependencies:[P.topBlur,P.topCompositionEnd,P.topKeyDown,P.topKeyPress,P.topKeyUp,P.topMouseDown]},compositionStart:{phasedRegistrationNames:{bubbled:E({onCompositionStart:null}),captured:E({onCompositionStartCapture:null})},dependencies:[P.topBlur,P.topCompositionStart,P.topKeyDown,P.topKeyPress,P.topKeyUp,P.topMouseDown]},compositionUpdate:{phasedRegistrationNames:{bubbled:E({onCompositionUpdate:null}),captured:E({onCompositionUpdateCapture:null})},dependencies:[P.topBlur,P.topCompositionUpdate,P.topKeyDown,P.topKeyPress,P.topKeyUp,P.topMouseDown]}},A=!1,D=null,_={eventTypes:I,extractEvents:function(e,t,n,o,i){return[l(e,t,n,o,i),p(e,t,n,o,i)]}};t.exports=_},{"./EventConstants":113,"./EventPropagators":117,"./FallbackCompositionState":118,"./SyntheticCompositionEvent":189,"./SyntheticInputEvent":193,"fbjs/lib/ExecutionEnvironment":229,"fbjs/lib/keyOf":247}],102:[function(e,t){"use strict";function n(e,t){return e+t.charAt(0).toUpperCase()+t.substring(1)}var o={animationIterationCount:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,stopOpacity:!0,strokeDashoffset:!0,strokeOpacity:!0,strokeWidth:!0},i=["Webkit","ms","Moz","O"];Object.keys(o).forEach(function(e){i.forEach(function(t){o[n(t,e)]=o[e]})});var r={background:{backgroundAttachment:!0,backgroundColor:!0,backgroundImage:!0,backgroundPositionX:!0,backgroundPositionY:!0,backgroundRepeat:!0},backgroundPosition:{backgroundPositionX:!0,backgroundPositionY:!0},border:{borderWidth:!0,borderStyle:!0,borderColor:!0},borderBottom:{borderBottomWidth:!0,borderBottomStyle:!0,borderBottomColor:!0},borderLeft:{borderLeftWidth:!0,borderLeftStyle:!0,borderLeftColor:!0},borderRight:{borderRightWidth:!0,borderRightStyle:!0,borderRightColor:!0},borderTop:{borderTopWidth:!0,borderTopStyle:!0,borderTopColor:!0},font:{fontStyle:!0,fontVariant:!0,fontWeight:!0,fontSize:!0,lineHeight:!0,fontFamily:!0},outline:{outlineWidth:!0,outlineStyle:!0,outlineColor:!0}},a={isUnitlessNumber:o,shorthandPropertyExpansions:r};t.exports=a},{}],103:[function(e,t){"use strict";var n=e("./CSSProperty"),o=e("fbjs/lib/ExecutionEnvironment"),i=e("./ReactPerf"),r=(e("fbjs/lib/camelizeStyleName"),e("./dangerousStyleValue")),a=e("fbjs/lib/hyphenateStyleName"),s=e("fbjs/lib/memoizeStringOnly"),l=(e("fbjs/lib/warning"),s(function(e){return a(e)})),c=!1,u="cssFloat";if(o.canUseDOM){var p=document.createElement("div").style;try{p.font=""}catch(d){c=!0}void 0===document.documentElement.style.cssFloat&&(u="styleFloat")}var h={createMarkupForStyles:function(e){var t="";for(var n in e)if(e.hasOwnProperty(n)){var o=e[n];null!=o&&(t+=l(n)+":",t+=r(n,o)+";")}return t||null},setValueForStyles:function(e,t){var o=e.style;for(var i in t)if(t.hasOwnProperty(i)){var a=r(i,t[i]);if("float"===i&&(i=u),a)o[i]=a;else{var s=c&&n.shorthandPropertyExpansions[i];if(s)for(var l in s)o[l]="";else o[i]=""}}}};i.measureMethods(h,"CSSPropertyOperations",{setValueForStyles:"setValueForStyles"}),t.exports=h},{"./CSSProperty":102,"./ReactPerf":170,"./dangerousStyleValue":204,"fbjs/lib/ExecutionEnvironment":229,"fbjs/lib/camelizeStyleName":231,"fbjs/lib/hyphenateStyleName":242,"fbjs/lib/memoizeStringOnly":249,"fbjs/lib/warning":254}],104:[function(e,t){"use strict";function n(){this._callbacks=null,this._contexts=null}var o=e("./PooledClass"),i=e("./Object.assign"),r=e("fbjs/lib/invariant");i(n.prototype,{enqueue:function(e,t){this._callbacks=this._callbacks||[],this._contexts=this._contexts||[],this._callbacks.push(e),this._contexts.push(t)},notifyAll:function(){var e=this._callbacks,t=this._contexts;if(e){e.length!==t.length?r(!1):void 0,this._callbacks=null,this._contexts=null;for(var n=0;n<e.length;n++)e[n].call(t[n]);e.length=0,t.length=0}},reset:function(){this._callbacks=null,this._contexts=null},destructor:function(){this.reset()}}),o.addPoolingTo(n),t.exports=n},{"./Object.assign":121,"./PooledClass":122,"fbjs/lib/invariant":243}],105:[function(e,t){"use strict";function n(e){var t=e.nodeName&&e.nodeName.toLowerCase();return"select"===t||"input"===t&&"file"===e.type}function o(e){var t=S.getPooled(I.change,D,e,R(e));y.accumulateTwoPhaseDispatches(t),C.batchedUpdates(i,t)}function i(e){E.enqueueEvents(e),E.processEventQueue(!1)}function r(e,t){A=e,D=t,A.attachEvent("onchange",o)}function a(){A&&(A.detachEvent("onchange",o),A=null,D=null)}function s(e,t,n){return e===P.topChange?n:void 0}function l(e,t,n){e===P.topFocus?(a(),r(t,n)):e===P.topBlur&&a()}function c(e,t){A=e,D=t,_=e.value,w=Object.getOwnPropertyDescriptor(e.constructor.prototype,"value"),Object.defineProperty(A,"value",x),A.attachEvent("onpropertychange",p)}function u(){A&&(delete A.value,A.detachEvent("onpropertychange",p),A=null,D=null,_=null,w=null)}function p(e){if("value"===e.propertyName){var t=e.srcElement.value;t!==_&&(_=t,o(e))}}function d(e,t,n){return e===P.topInput?n:void 0}function h(e,t,n){e===P.topFocus?(u(),c(t,n)):e===P.topBlur&&u()}function f(e){return e!==P.topSelectionChange&&e!==P.topKeyUp&&e!==P.topKeyDown||!A||A.value===_?void 0:(_=A.value,D)}function m(e){return e.nodeName&&"input"===e.nodeName.toLowerCase()&&("checkbox"===e.type||"radio"===e.type)}function v(e,t,n){return e===P.topClick?n:void 0}var g=e("./EventConstants"),E=e("./EventPluginHub"),y=e("./EventPropagators"),b=e("fbjs/lib/ExecutionEnvironment"),C=e("./ReactUpdates"),S=e("./SyntheticEvent"),R=e("./getEventTarget"),T=e("./isEventSupported"),N=e("./isTextInputElement"),O=e("fbjs/lib/keyOf"),P=g.topLevelTypes,I={change:{phasedRegistrationNames:{bubbled:O({onChange:null}),captured:O({onChangeCapture:null})},dependencies:[P.topBlur,P.topChange,P.topClick,P.topFocus,P.topInput,P.topKeyDown,P.topKeyUp,P.topSelectionChange]}},A=null,D=null,_=null,w=null,k=!1;b.canUseDOM&&(k=T("change")&&(!("documentMode"in document)||document.documentMode>8));var M=!1;b.canUseDOM&&(M=T("input")&&(!("documentMode"in document)||document.documentMode>9));var x={get:function(){return w.get.call(this)},set:function(e){_=""+e,w.set.call(this,e)}},L={eventTypes:I,extractEvents:function(e,t,o,i,r){var a,c;if(n(t)?k?a=s:c=l:N(t)?M?a=d:(a=f,c=h):m(t)&&(a=v),a){var u=a(e,t,o);if(u){var p=S.getPooled(I.change,u,i,r);return p.type="change",y.accumulateTwoPhaseDispatches(p),p}}c&&c(e,t,o)}};t.exports=L},{"./EventConstants":113,"./EventPluginHub":114,"./EventPropagators":117,"./ReactUpdates":182,"./SyntheticEvent":191,"./getEventTarget":213,"./isEventSupported":218,"./isTextInputElement":219,"fbjs/lib/ExecutionEnvironment":229,"fbjs/lib/keyOf":247}],106:[function(e,t){"use strict";var n=0,o={createReactRootIndex:function(){return n++}};t.exports=o},{}],107:[function(e,t){"use strict";function n(e,t,n){var o=n>=e.childNodes.length?null:e.childNodes.item(n);e.insertBefore(t,o)}var o=e("./Danger"),i=e("./ReactMultiChildUpdateTypes"),r=e("./ReactPerf"),a=e("./setInnerHTML"),s=e("./setTextContent"),l=e("fbjs/lib/invariant"),c={dangerouslyReplaceNodeWithMarkup:o.dangerouslyReplaceNodeWithMarkup,updateTextContent:s,processUpdates:function(e,t){for(var r,c=null,u=null,p=0;p<e.length;p++)if(r=e[p],r.type===i.MOVE_EXISTING||r.type===i.REMOVE_NODE){var d=r.fromIndex,h=r.parentNode.childNodes[d],f=r.parentID;h?void 0:l(!1),c=c||{},c[f]=c[f]||[],c[f][d]=h,u=u||[],u.push(h)}var m;if(m=t.length&&"string"==typeof t[0]?o.dangerouslyRenderMarkup(t):t,u)for(var v=0;v<u.length;v++)u[v].parentNode.removeChild(u[v]);for(var g=0;g<e.length;g++)switch(r=e[g],r.type){case i.INSERT_MARKUP:n(r.parentNode,m[r.markupIndex],r.toIndex);break;case i.MOVE_EXISTING:n(r.parentNode,c[r.parentID][r.fromIndex],r.toIndex);break;case i.SET_MARKUP:a(r.parentNode,r.content);break;case i.TEXT_CONTENT:s(r.parentNode,r.content);break;case i.REMOVE_NODE:}}};r.measureMethods(c,"DOMChildrenOperations",{updateTextContent:"updateTextContent"}),t.exports=c},{"./Danger":110,"./ReactMultiChildUpdateTypes":166,"./ReactPerf":170,"./setInnerHTML":223,"./setTextContent":224,"fbjs/lib/invariant":243}],108:[function(e,t){"use strict";function n(e,t){return(e&t)===t}var o=e("fbjs/lib/invariant"),i={MUST_USE_ATTRIBUTE:1,MUST_USE_PROPERTY:2,HAS_SIDE_EFFECTS:4,HAS_BOOLEAN_VALUE:8,HAS_NUMERIC_VALUE:16,HAS_POSITIVE_NUMERIC_VALUE:48,HAS_OVERLOADED_BOOLEAN_VALUE:64,injectDOMPropertyConfig:function(e){var t=i,r=e.Properties||{},s=e.DOMAttributeNamespaces||{},l=e.DOMAttributeNames||{},c=e.DOMPropertyNames||{},u=e.DOMMutationMethods||{};e.isCustomAttribute&&a._isCustomAttributeFunctions.push(e.isCustomAttribute);for(var p in r){a.properties.hasOwnProperty(p)?o(!1):void 0;var d=p.toLowerCase(),h=r[p],f={attributeName:d,attributeNamespace:null,propertyName:p,mutationMethod:null,mustUseAttribute:n(h,t.MUST_USE_ATTRIBUTE),mustUseProperty:n(h,t.MUST_USE_PROPERTY),hasSideEffects:n(h,t.HAS_SIDE_EFFECTS),hasBooleanValue:n(h,t.HAS_BOOLEAN_VALUE),hasNumericValue:n(h,t.HAS_NUMERIC_VALUE),hasPositiveNumericValue:n(h,t.HAS_POSITIVE_NUMERIC_VALUE),hasOverloadedBooleanValue:n(h,t.HAS_OVERLOADED_BOOLEAN_VALUE)};if(f.mustUseAttribute&&f.mustUseProperty?o(!1):void 0,!f.mustUseProperty&&f.hasSideEffects?o(!1):void 0,f.hasBooleanValue+f.hasNumericValue+f.hasOverloadedBooleanValue<=1?void 0:o(!1),l.hasOwnProperty(p)){var m=l[p];f.attributeName=m}s.hasOwnProperty(p)&&(f.attributeNamespace=s[p]),c.hasOwnProperty(p)&&(f.propertyName=c[p]),u.hasOwnProperty(p)&&(f.mutationMethod=u[p]),a.properties[p]=f}}},r={},a={ID_ATTRIBUTE_NAME:"data-reactid",properties:{},getPossibleStandardName:null,_isCustomAttributeFunctions:[],isCustomAttribute:function(e){for(var t=0;t<a._isCustomAttributeFunctions.length;t++){var n=a._isCustomAttributeFunctions[t];
    if(n(e))return!0}return!1},getDefaultValueForProperty:function(e,t){var n,o=r[e];return o||(r[e]=o={}),t in o||(n=document.createElement(e),o[t]=n[t]),o[t]},injection:i};t.exports=a},{"fbjs/lib/invariant":243}],109:[function(e,t){"use strict";function n(e){return c.hasOwnProperty(e)?!0:l.hasOwnProperty(e)?!1:s.test(e)?(c[e]=!0,!0):(l[e]=!0,!1)}function o(e,t){return null==t||e.hasBooleanValue&&!t||e.hasNumericValue&&isNaN(t)||e.hasPositiveNumericValue&&1>t||e.hasOverloadedBooleanValue&&t===!1}var i=e("./DOMProperty"),r=e("./ReactPerf"),a=e("./quoteAttributeValueForBrowser"),s=(e("fbjs/lib/warning"),/^[a-zA-Z_][\w\.\-]*$/),l={},c={},u={createMarkupForID:function(e){return i.ID_ATTRIBUTE_NAME+"="+a(e)},setAttributeForID:function(e,t){e.setAttribute(i.ID_ATTRIBUTE_NAME,t)},createMarkupForProperty:function(e,t){var n=i.properties.hasOwnProperty(e)?i.properties[e]:null;if(n){if(o(n,t))return"";var r=n.attributeName;return n.hasBooleanValue||n.hasOverloadedBooleanValue&&t===!0?r+'=""':r+"="+a(t)}return i.isCustomAttribute(e)?null==t?"":e+"="+a(t):null},createMarkupForCustomAttribute:function(e,t){return n(e)&&null!=t?e+"="+a(t):""},setValueForProperty:function(e,t,n){var r=i.properties.hasOwnProperty(t)?i.properties[t]:null;if(r){var a=r.mutationMethod;if(a)a(e,n);else if(o(r,n))this.deleteValueForProperty(e,t);else if(r.mustUseAttribute){var s=r.attributeName,l=r.attributeNamespace;l?e.setAttributeNS(l,s,""+n):r.hasBooleanValue||r.hasOverloadedBooleanValue&&n===!0?e.setAttribute(s,""):e.setAttribute(s,""+n)}else{var c=r.propertyName;r.hasSideEffects&&""+e[c]==""+n||(e[c]=n)}}else i.isCustomAttribute(t)&&u.setValueForAttribute(e,t,n)},setValueForAttribute:function(e,t,o){n(t)&&(null==o?e.removeAttribute(t):e.setAttribute(t,""+o))},deleteValueForProperty:function(e,t){var n=i.properties.hasOwnProperty(t)?i.properties[t]:null;if(n){var o=n.mutationMethod;if(o)o(e,void 0);else if(n.mustUseAttribute)e.removeAttribute(n.attributeName);else{var r=n.propertyName,a=i.getDefaultValueForProperty(e.nodeName,r);n.hasSideEffects&&""+e[r]===a||(e[r]=a)}}else i.isCustomAttribute(t)&&e.removeAttribute(t)}};r.measureMethods(u,"DOMPropertyOperations",{setValueForProperty:"setValueForProperty",setValueForAttribute:"setValueForAttribute",deleteValueForProperty:"deleteValueForProperty"}),t.exports=u},{"./DOMProperty":108,"./ReactPerf":170,"./quoteAttributeValueForBrowser":221,"fbjs/lib/warning":254}],110:[function(e,t){"use strict";function n(e){return e.substring(1,e.indexOf(" "))}var o=e("fbjs/lib/ExecutionEnvironment"),i=e("fbjs/lib/createNodesFromMarkup"),r=e("fbjs/lib/emptyFunction"),a=e("fbjs/lib/getMarkupWrap"),s=e("fbjs/lib/invariant"),l=/^(<[^ \/>]+)/,c="data-danger-index",u={dangerouslyRenderMarkup:function(e){o.canUseDOM?void 0:s(!1);for(var t,u={},p=0;p<e.length;p++)e[p]?void 0:s(!1),t=n(e[p]),t=a(t)?t:"*",u[t]=u[t]||[],u[t][p]=e[p];var d=[],h=0;for(t in u)if(u.hasOwnProperty(t)){var f,m=u[t];for(f in m)if(m.hasOwnProperty(f)){var v=m[f];m[f]=v.replace(l,"$1 "+c+'="'+f+'" ')}for(var g=i(m.join(""),r),E=0;E<g.length;++E){var y=g[E];y.hasAttribute&&y.hasAttribute(c)&&(f=+y.getAttribute(c),y.removeAttribute(c),d.hasOwnProperty(f)?s(!1):void 0,d[f]=y,h+=1)}}return h!==d.length?s(!1):void 0,d.length!==e.length?s(!1):void 0,d},dangerouslyReplaceNodeWithMarkup:function(e,t){o.canUseDOM?void 0:s(!1),t?void 0:s(!1),"html"===e.tagName.toLowerCase()?s(!1):void 0;var n;n="string"==typeof t?i(t,r)[0]:t,e.parentNode.replaceChild(n,e)}};t.exports=u},{"fbjs/lib/ExecutionEnvironment":229,"fbjs/lib/createNodesFromMarkup":234,"fbjs/lib/emptyFunction":235,"fbjs/lib/getMarkupWrap":239,"fbjs/lib/invariant":243}],111:[function(e,t){"use strict";var n=e("fbjs/lib/keyOf"),o=[n({ResponderEventPlugin:null}),n({SimpleEventPlugin:null}),n({TapEventPlugin:null}),n({EnterLeaveEventPlugin:null}),n({ChangeEventPlugin:null}),n({SelectEventPlugin:null}),n({BeforeInputEventPlugin:null})];t.exports=o},{"fbjs/lib/keyOf":247}],112:[function(e,t){"use strict";var n=e("./EventConstants"),o=e("./EventPropagators"),i=e("./SyntheticMouseEvent"),r=e("./ReactMount"),a=e("fbjs/lib/keyOf"),s=n.topLevelTypes,l=r.getFirstReactDOM,c={mouseEnter:{registrationName:a({onMouseEnter:null}),dependencies:[s.topMouseOut,s.topMouseOver]},mouseLeave:{registrationName:a({onMouseLeave:null}),dependencies:[s.topMouseOut,s.topMouseOver]}},u=[null,null],p={eventTypes:c,extractEvents:function(e,t,n,a,p){if(e===s.topMouseOver&&(a.relatedTarget||a.fromElement))return null;if(e!==s.topMouseOut&&e!==s.topMouseOver)return null;var d;if(t.window===t)d=t;else{var h=t.ownerDocument;d=h?h.defaultView||h.parentWindow:window}var f,m,v="",g="";if(e===s.topMouseOut?(f=t,v=n,m=l(a.relatedTarget||a.toElement),m?g=r.getID(m):m=d,m=m||d):(f=d,m=t,g=n),f===m)return null;var E=i.getPooled(c.mouseLeave,v,a,p);E.type="mouseleave",E.target=f,E.relatedTarget=m;var y=i.getPooled(c.mouseEnter,g,a,p);return y.type="mouseenter",y.target=m,y.relatedTarget=f,o.accumulateEnterLeaveDispatches(E,y,v,g),u[0]=E,u[1]=y,u}};t.exports=p},{"./EventConstants":113,"./EventPropagators":117,"./ReactMount":164,"./SyntheticMouseEvent":195,"fbjs/lib/keyOf":247}],113:[function(e,t){"use strict";var n=e("fbjs/lib/keyMirror"),o=n({bubbled:null,captured:null}),i=n({topAbort:null,topBlur:null,topCanPlay:null,topCanPlayThrough:null,topChange:null,topClick:null,topCompositionEnd:null,topCompositionStart:null,topCompositionUpdate:null,topContextMenu:null,topCopy:null,topCut:null,topDoubleClick:null,topDrag:null,topDragEnd:null,topDragEnter:null,topDragExit:null,topDragLeave:null,topDragOver:null,topDragStart:null,topDrop:null,topDurationChange:null,topEmptied:null,topEncrypted:null,topEnded:null,topError:null,topFocus:null,topInput:null,topKeyDown:null,topKeyPress:null,topKeyUp:null,topLoad:null,topLoadedData:null,topLoadedMetadata:null,topLoadStart:null,topMouseDown:null,topMouseMove:null,topMouseOut:null,topMouseOver:null,topMouseUp:null,topPaste:null,topPause:null,topPlay:null,topPlaying:null,topProgress:null,topRateChange:null,topReset:null,topScroll:null,topSeeked:null,topSeeking:null,topSelectionChange:null,topStalled:null,topSubmit:null,topSuspend:null,topTextInput:null,topTimeUpdate:null,topTouchCancel:null,topTouchEnd:null,topTouchMove:null,topTouchStart:null,topVolumeChange:null,topWaiting:null,topWheel:null}),r={topLevelTypes:i,PropagationPhases:o};t.exports=r},{"fbjs/lib/keyMirror":246}],114:[function(e,t){"use strict";var n=e("./EventPluginRegistry"),o=e("./EventPluginUtils"),i=e("./ReactErrorUtils"),r=e("./accumulateInto"),a=e("./forEachAccumulated"),s=e("fbjs/lib/invariant"),l=(e("fbjs/lib/warning"),{}),c=null,u=function(e,t){e&&(o.executeDispatchesInOrder(e,t),e.isPersistent()||e.constructor.release(e))},p=function(e){return u(e,!0)},d=function(e){return u(e,!1)},h=null,f={injection:{injectMount:o.injection.injectMount,injectInstanceHandle:function(e){h=e},getInstanceHandle:function(){return h},injectEventPluginOrder:n.injectEventPluginOrder,injectEventPluginsByName:n.injectEventPluginsByName},eventNameDispatchConfigs:n.eventNameDispatchConfigs,registrationNameModules:n.registrationNameModules,putListener:function(e,t,o){"function"!=typeof o?s(!1):void 0;var i=l[t]||(l[t]={});i[e]=o;var r=n.registrationNameModules[t];r&&r.didPutListener&&r.didPutListener(e,t,o)},getListener:function(e,t){var n=l[t];return n&&n[e]},deleteListener:function(e,t){var o=n.registrationNameModules[t];o&&o.willDeleteListener&&o.willDeleteListener(e,t);var i=l[t];i&&delete i[e]},deleteAllListeners:function(e){for(var t in l)if(l[t][e]){var o=n.registrationNameModules[t];o&&o.willDeleteListener&&o.willDeleteListener(e,t),delete l[t][e]}},extractEvents:function(e,t,o,i,a){for(var s,l=n.plugins,c=0;c<l.length;c++){var u=l[c];if(u){var p=u.extractEvents(e,t,o,i,a);p&&(s=r(s,p))}}return s},enqueueEvents:function(e){e&&(c=r(c,e))},processEventQueue:function(e){var t=c;c=null,e?a(t,p):a(t,d),c?s(!1):void 0,i.rethrowCaughtError()},__purge:function(){l={}},__getListenerBank:function(){return l}};t.exports=f},{"./EventPluginRegistry":115,"./EventPluginUtils":116,"./ReactErrorUtils":155,"./accumulateInto":201,"./forEachAccumulated":209,"fbjs/lib/invariant":243,"fbjs/lib/warning":254}],115:[function(e,t){"use strict";function n(){if(a)for(var e in s){var t=s[e],n=a.indexOf(e);if(n>-1?void 0:r(!1),!l.plugins[n]){t.extractEvents?void 0:r(!1),l.plugins[n]=t;var i=t.eventTypes;for(var c in i)o(i[c],t,c)?void 0:r(!1)}}}function o(e,t,n){l.eventNameDispatchConfigs.hasOwnProperty(n)?r(!1):void 0,l.eventNameDispatchConfigs[n]=e;var o=e.phasedRegistrationNames;if(o){for(var a in o)if(o.hasOwnProperty(a)){var s=o[a];i(s,t,n)}return!0}return e.registrationName?(i(e.registrationName,t,n),!0):!1}function i(e,t,n){l.registrationNameModules[e]?r(!1):void 0,l.registrationNameModules[e]=t,l.registrationNameDependencies[e]=t.eventTypes[n].dependencies}var r=e("fbjs/lib/invariant"),a=null,s={},l={plugins:[],eventNameDispatchConfigs:{},registrationNameModules:{},registrationNameDependencies:{},injectEventPluginOrder:function(e){a?r(!1):void 0,a=Array.prototype.slice.call(e),n()},injectEventPluginsByName:function(e){var t=!1;for(var o in e)if(e.hasOwnProperty(o)){var i=e[o];s.hasOwnProperty(o)&&s[o]===i||(s[o]?r(!1):void 0,s[o]=i,t=!0)}t&&n()},getPluginModuleForEvent:function(e){var t=e.dispatchConfig;if(t.registrationName)return l.registrationNameModules[t.registrationName]||null;for(var n in t.phasedRegistrationNames)if(t.phasedRegistrationNames.hasOwnProperty(n)){var o=l.registrationNameModules[t.phasedRegistrationNames[n]];if(o)return o}return null},_resetEventPlugins:function(){a=null;for(var e in s)s.hasOwnProperty(e)&&delete s[e];l.plugins.length=0;var t=l.eventNameDispatchConfigs;for(var n in t)t.hasOwnProperty(n)&&delete t[n];var o=l.registrationNameModules;for(var i in o)o.hasOwnProperty(i)&&delete o[i]}};t.exports=l},{"fbjs/lib/invariant":243}],116:[function(e,t){"use strict";function n(e){return e===m.topMouseUp||e===m.topTouchEnd||e===m.topTouchCancel}function o(e){return e===m.topMouseMove||e===m.topTouchMove}function i(e){return e===m.topMouseDown||e===m.topTouchStart}function r(e,t,n,o){var i=e.type||"unknown-event";e.currentTarget=f.Mount.getNode(o),t?d.invokeGuardedCallbackWithCatch(i,n,e,o):d.invokeGuardedCallback(i,n,e,o),e.currentTarget=null}function a(e,t){var n=e._dispatchListeners,o=e._dispatchIDs;if(Array.isArray(n))for(var i=0;i<n.length&&!e.isPropagationStopped();i++)r(e,t,n[i],o[i]);else n&&r(e,t,n,o);e._dispatchListeners=null,e._dispatchIDs=null}function s(e){var t=e._dispatchListeners,n=e._dispatchIDs;if(Array.isArray(t)){for(var o=0;o<t.length&&!e.isPropagationStopped();o++)if(t[o](e,n[o]))return n[o]}else if(t&&t(e,n))return n;return null}function l(e){var t=s(e);return e._dispatchIDs=null,e._dispatchListeners=null,t}function c(e){var t=e._dispatchListeners,n=e._dispatchIDs;Array.isArray(t)?h(!1):void 0;var o=t?t(e,n):null;return e._dispatchListeners=null,e._dispatchIDs=null,o}function u(e){return!!e._dispatchListeners}var p=e("./EventConstants"),d=e("./ReactErrorUtils"),h=e("fbjs/lib/invariant"),f=(e("fbjs/lib/warning"),{Mount:null,injectMount:function(e){f.Mount=e}}),m=p.topLevelTypes,v={isEndish:n,isMoveish:o,isStartish:i,executeDirectDispatch:c,executeDispatchesInOrder:a,executeDispatchesInOrderStopAtTrue:l,hasDispatches:u,getNode:function(e){return f.Mount.getNode(e)},getID:function(e){return f.Mount.getID(e)},injection:f};t.exports=v},{"./EventConstants":113,"./ReactErrorUtils":155,"fbjs/lib/invariant":243,"fbjs/lib/warning":254}],117:[function(e,t){"use strict";function n(e,t,n){var o=t.dispatchConfig.phasedRegistrationNames[n];return g(e,o)}function o(e,t,o){var i=t?v.bubbled:v.captured,r=n(e,o,i);r&&(o._dispatchListeners=f(o._dispatchListeners,r),o._dispatchIDs=f(o._dispatchIDs,e))}function i(e){e&&e.dispatchConfig.phasedRegistrationNames&&h.injection.getInstanceHandle().traverseTwoPhase(e.dispatchMarker,o,e)}function r(e){e&&e.dispatchConfig.phasedRegistrationNames&&h.injection.getInstanceHandle().traverseTwoPhaseSkipTarget(e.dispatchMarker,o,e)}function a(e,t,n){if(n&&n.dispatchConfig.registrationName){var o=n.dispatchConfig.registrationName,i=g(e,o);i&&(n._dispatchListeners=f(n._dispatchListeners,i),n._dispatchIDs=f(n._dispatchIDs,e))}}function s(e){e&&e.dispatchConfig.registrationName&&a(e.dispatchMarker,null,e)}function l(e){m(e,i)}function c(e){m(e,r)}function u(e,t,n,o){h.injection.getInstanceHandle().traverseEnterLeave(n,o,a,e,t)}function p(e){m(e,s)}var d=e("./EventConstants"),h=e("./EventPluginHub"),f=(e("fbjs/lib/warning"),e("./accumulateInto")),m=e("./forEachAccumulated"),v=d.PropagationPhases,g=h.getListener,E={accumulateTwoPhaseDispatches:l,accumulateTwoPhaseDispatchesSkipTarget:c,accumulateDirectDispatches:p,accumulateEnterLeaveDispatches:u};t.exports=E},{"./EventConstants":113,"./EventPluginHub":114,"./accumulateInto":201,"./forEachAccumulated":209,"fbjs/lib/warning":254}],118:[function(e,t){"use strict";function n(e){this._root=e,this._startText=this.getText(),this._fallbackText=null}var o=e("./PooledClass"),i=e("./Object.assign"),r=e("./getTextContentAccessor");i(n.prototype,{destructor:function(){this._root=null,this._startText=null,this._fallbackText=null},getText:function(){return"value"in this._root?this._root.value:this._root[r()]},getData:function(){if(this._fallbackText)return this._fallbackText;var e,t,n=this._startText,o=n.length,i=this.getText(),r=i.length;for(e=0;o>e&&n[e]===i[e];e++);var a=o-e;for(t=1;a>=t&&n[o-t]===i[r-t];t++);var s=t>1?1-t:void 0;return this._fallbackText=i.slice(e,s),this._fallbackText}}),o.addPoolingTo(n),t.exports=n},{"./Object.assign":121,"./PooledClass":122,"./getTextContentAccessor":216}],119:[function(e,t){"use strict";var n,o=e("./DOMProperty"),i=e("fbjs/lib/ExecutionEnvironment"),r=o.injection.MUST_USE_ATTRIBUTE,a=o.injection.MUST_USE_PROPERTY,s=o.injection.HAS_BOOLEAN_VALUE,l=o.injection.HAS_SIDE_EFFECTS,c=o.injection.HAS_NUMERIC_VALUE,u=o.injection.HAS_POSITIVE_NUMERIC_VALUE,p=o.injection.HAS_OVERLOADED_BOOLEAN_VALUE;if(i.canUseDOM){var d=document.implementation;n=d&&d.hasFeature&&d.hasFeature("http://www.w3.org/TR/SVG11/feature#BasicStructure","1.1")}var h={isCustomAttribute:RegExp.prototype.test.bind(/^(data|aria)-[a-z_][a-z\d_.\-]*$/),Properties:{accept:null,acceptCharset:null,accessKey:null,action:null,allowFullScreen:r|s,allowTransparency:r,alt:null,async:s,autoComplete:null,autoPlay:s,capture:r|s,cellPadding:null,cellSpacing:null,charSet:r,challenge:r,checked:a|s,classID:r,className:n?r:a,cols:r|u,colSpan:null,content:null,contentEditable:null,contextMenu:r,controls:a|s,coords:null,crossOrigin:null,data:null,dateTime:r,"default":s,defer:s,dir:null,disabled:r|s,download:p,draggable:null,encType:null,form:r,formAction:r,formEncType:r,formMethod:r,formNoValidate:s,formTarget:r,frameBorder:r,headers:null,height:r,hidden:r|s,high:null,href:null,hrefLang:null,htmlFor:null,httpEquiv:null,icon:null,id:a,inputMode:r,integrity:null,is:r,keyParams:r,keyType:r,kind:null,label:null,lang:null,list:r,loop:a|s,low:null,manifest:r,marginHeight:null,marginWidth:null,max:null,maxLength:r,media:r,mediaGroup:null,method:null,min:null,minLength:r,multiple:a|s,muted:a|s,name:null,nonce:r,noValidate:s,open:s,optimum:null,pattern:null,placeholder:null,poster:null,preload:null,radioGroup:null,readOnly:a|s,rel:null,required:s,reversed:s,role:r,rows:r|u,rowSpan:null,sandbox:null,scope:null,scoped:s,scrolling:null,seamless:r|s,selected:a|s,shape:null,size:r|u,sizes:r,span:u,spellCheck:null,src:null,srcDoc:a,srcLang:null,srcSet:r,start:c,step:null,style:null,summary:null,tabIndex:null,target:null,title:null,type:null,useMap:null,value:a|l,width:r,wmode:r,wrap:null,about:r,datatype:r,inlist:r,prefix:r,property:r,resource:r,"typeof":r,vocab:r,autoCapitalize:r,autoCorrect:r,autoSave:null,color:null,itemProp:r,itemScope:r|s,itemType:r,itemID:r,itemRef:r,results:null,security:r,unselectable:r},DOMAttributeNames:{acceptCharset:"accept-charset",className:"class",htmlFor:"for",httpEquiv:"http-equiv"},DOMPropertyNames:{autoComplete:"autocomplete",autoFocus:"autofocus",autoPlay:"autoplay",autoSave:"autosave",encType:"encoding",hrefLang:"hreflang",radioGroup:"radiogroup",spellCheck:"spellcheck",srcDoc:"srcdoc",srcSet:"srcset"}};t.exports=h},{"./DOMProperty":108,"fbjs/lib/ExecutionEnvironment":229}],120:[function(e,t){"use strict";function n(e){null!=e.checkedLink&&null!=e.valueLink?l(!1):void 0}function o(e){n(e),null!=e.value||null!=e.onChange?l(!1):void 0}function i(e){n(e),null!=e.checked||null!=e.onChange?l(!1):void 0}function r(e){if(e){var t=e.getName();if(t)return" Check the render method of `"+t+"`."}return""}var a=e("./ReactPropTypes"),s=e("./ReactPropTypeLocations"),l=e("fbjs/lib/invariant"),c=(e("fbjs/lib/warning"),{button:!0,checkbox:!0,image:!0,hidden:!0,radio:!0,reset:!0,submit:!0}),u={value:function(e,t){return!e[t]||c[e.type]||e.onChange||e.readOnly||e.disabled?null:new Error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.")},checked:function(e,t){return!e[t]||e.onChange||e.readOnly||e.disabled?null:new Error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.")},onChange:a.func},p={},d={checkPropTypes:function(e,t,n){for(var o in u){if(u.hasOwnProperty(o))var i=u[o](t,o,e,s.prop);if(i instanceof Error&&!(i.message in p)){p[i.message]=!0;{r(n)}}}},getValue:function(e){return e.valueLink?(o(e),e.valueLink.value):e.value},getChecked:function(e){return e.checkedLink?(i(e),e.checkedLink.value):e.checked},executeOnChange:function(e,t){return e.valueLink?(o(e),e.valueLink.requestChange(t.target.value)):e.checkedLink?(i(e),e.checkedLink.requestChange(t.target.checked)):e.onChange?e.onChange.call(void 0,t):void 0}};t.exports=d},{"./ReactPropTypeLocations":172,"./ReactPropTypes":173,"fbjs/lib/invariant":243,"fbjs/lib/warning":254}],121:[function(e,t){"use strict";function n(e){if(null==e)throw new TypeError("Object.assign target cannot be null or undefined");for(var t=Object(e),n=Object.prototype.hasOwnProperty,o=1;o<arguments.length;o++){var i=arguments[o];if(null!=i){var r=Object(i);for(var a in r)n.call(r,a)&&(t[a]=r[a])}}return t}t.exports=n},{}],122:[function(e,t){"use strict";var n=e("fbjs/lib/invariant"),o=function(e){var t=this;if(t.instancePool.length){var n=t.instancePool.pop();return t.call(n,e),n}return new t(e)},i=function(e,t){var n=this;if(n.instancePool.length){var o=n.instancePool.pop();return n.call(o,e,t),o}return new n(e,t)},r=function(e,t,n){var o=this;if(o.instancePool.length){var i=o.instancePool.pop();return o.call(i,e,t,n),i}return new o(e,t,n)},a=function(e,t,n,o){var i=this;if(i.instancePool.length){var r=i.instancePool.pop();return i.call(r,e,t,n,o),r}return new i(e,t,n,o)},s=function(e,t,n,o,i){var r=this;if(r.instancePool.length){var a=r.instancePool.pop();return r.call(a,e,t,n,o,i),a}return new r(e,t,n,o,i)},l=function(e){var t=this;e instanceof t?void 0:n(!1),e.destructor(),t.instancePool.length<t.poolSize&&t.instancePool.push(e)},c=10,u=o,p=function(e,t){var n=e;return n.instancePool=[],n.getPooled=t||u,n.poolSize||(n.poolSize=c),n.release=l,n},d={addPoolingTo:p,oneArgumentPooler:o,twoArgumentPooler:i,threeArgumentPooler:r,fourArgumentPooler:a,fiveArgumentPooler:s};t.exports=d},{"fbjs/lib/invariant":243}],123:[function(e,t){"use strict";var n=e("./ReactDOM"),o=e("./ReactDOMServer"),i=e("./ReactIsomorphic"),r=e("./Object.assign"),a=e("./deprecated"),s={};r(s,i),r(s,{findDOMNode:a("findDOMNode","ReactDOM","react-dom",n,n.findDOMNode),render:a("render","ReactDOM","react-dom",n,n.render),unmountComponentAtNode:a("unmountComponentAtNode","ReactDOM","react-dom",n,n.unmountComponentAtNode),renderToString:a("renderToString","ReactDOMServer","react-dom/server",o,o.renderToString),renderToStaticMarkup:a("renderToStaticMarkup","ReactDOMServer","react-dom/server",o,o.renderToStaticMarkup)}),s.__SECRET_DOM_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=n,s.__SECRET_DOM_SERVER_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=o,t.exports=s},{"./Object.assign":121,"./ReactDOM":134,"./ReactDOMServer":144,"./ReactIsomorphic":162,"./deprecated":205}],124:[function(e,t){"use strict";var n=(e("./ReactInstanceMap"),e("./findDOMNode")),o=(e("fbjs/lib/warning"),"_getDOMNodeDidWarn"),i={getDOMNode:function(){return this.constructor[o]=!0,n(this)}};t.exports=i},{"./ReactInstanceMap":161,"./findDOMNode":207,"fbjs/lib/warning":254}],125:[function(e,t){"use strict";function n(e){return Object.prototype.hasOwnProperty.call(e,m)||(e[m]=h++,p[e[m]]={}),p[e[m]]}var o=e("./EventConstants"),i=e("./EventPluginHub"),r=e("./EventPluginRegistry"),a=e("./ReactEventEmitterMixin"),s=e("./ReactPerf"),l=e("./ViewportMetrics"),c=e("./Object.assign"),u=e("./isEventSupported"),p={},d=!1,h=0,f={topAbort:"abort",topBlur:"blur",topCanPlay:"canplay",topCanPlayThrough:"canplaythrough",topChange:"change",topClick:"click",topCompositionEnd:"compositionend",topCompositionStart:"compositionstart",topCompositionUpdate:"compositionupdate",topContextMenu:"contextmenu",topCopy:"copy",topCut:"cut",topDoubleClick:"dblclick",topDrag:"drag",topDragEnd:"dragend",topDragEnter:"dragenter",topDragExit:"dragexit",topDragLeave:"dragleave",topDragOver:"dragover",topDragStart:"dragstart",topDrop:"drop",topDurationChange:"durationchange",topEmptied:"emptied",topEncrypted:"encrypted",topEnded:"ended",topError:"error",topFocus:"focus",topInput:"input",topKeyDown:"keydown",topKeyPress:"keypress",topKeyUp:"keyup",topLoadedData:"loadeddata",topLoadedMetadata:"loadedmetadata",topLoadStart:"loadstart",topMouseDown:"mousedown",topMouseMove:"mousemove",topMouseOut:"mouseout",topMouseOver:"mouseover",topMouseUp:"mouseup",topPaste:"paste",topPause:"pause",topPlay:"play",topPlaying:"playing",topProgress:"progress",topRateChange:"ratechange",topScroll:"scroll",topSeeked:"seeked",topSeeking:"seeking",topSelectionChange:"selectionchange",topStalled:"stalled",topSuspend:"suspend",topTextInput:"textInput",topTimeUpdate:"timeupdate",topTouchCancel:"touchcancel",topTouchEnd:"touchend",topTouchMove:"touchmove",topTouchStart:"touchstart",topVolumeChange:"volumechange",topWaiting:"waiting",topWheel:"wheel"},m="_reactListenersID"+String(Math.random()).slice(2),v=c({},a,{ReactEventListener:null,injection:{injectReactEventListener:function(e){e.setHandleTopLevel(v.handleTopLevel),v.ReactEventListener=e}},setEnabled:function(e){v.ReactEventListener&&v.ReactEventListener.setEnabled(e)},isEnabled:function(){return!(!v.ReactEventListener||!v.ReactEventListener.isEnabled())},listenTo:function(e,t){for(var i=t,a=n(i),s=r.registrationNameDependencies[e],l=o.topLevelTypes,c=0;c<s.length;c++){var p=s[c];a.hasOwnProperty(p)&&a[p]||(p===l.topWheel?u("wheel")?v.ReactEventListener.trapBubbledEvent(l.topWheel,"wheel",i):u("mousewheel")?v.ReactEventListener.trapBubbledEvent(l.topWheel,"mousewheel",i):v.ReactEventListener.trapBubbledEvent(l.topWheel,"DOMMouseScroll",i):p===l.topScroll?u("scroll",!0)?v.ReactEventListener.trapCapturedEvent(l.topScroll,"scroll",i):v.ReactEventListener.trapBubbledEvent(l.topScroll,"scroll",v.ReactEventListener.WINDOW_HANDLE):p===l.topFocus||p===l.topBlur?(u("focus",!0)?(v.ReactEventListener.trapCapturedEvent(l.topFocus,"focus",i),v.ReactEventListener.trapCapturedEvent(l.topBlur,"blur",i)):u("focusin")&&(v.ReactEventListener.trapBubbledEvent(l.topFocus,"focusin",i),v.ReactEventListener.trapBubbledEvent(l.topBlur,"focusout",i)),a[l.topBlur]=!0,a[l.topFocus]=!0):f.hasOwnProperty(p)&&v.ReactEventListener.trapBubbledEvent(p,f[p],i),a[p]=!0)}},trapBubbledEvent:function(e,t,n){return v.ReactEventListener.trapBubbledEvent(e,t,n)},trapCapturedEvent:function(e,t,n){return v.ReactEventListener.trapCapturedEvent(e,t,n)},ensureScrollValueMonitoring:function(){if(!d){var e=l.refreshScrollValues;v.ReactEventListener.monitorScrollValue(e),d=!0}},eventNameDispatchConfigs:i.eventNameDispatchConfigs,registrationNameModules:i.registrationNameModules,putListener:i.putListener,getListener:i.getListener,deleteListener:i.deleteListener,deleteAllListeners:i.deleteAllListeners});s.measureMethods(v,"ReactBrowserEventEmitter",{putListener:"putListener",deleteListener:"deleteListener"}),t.exports=v},{"./EventConstants":113,"./EventPluginHub":114,"./EventPluginRegistry":115,"./Object.assign":121,"./ReactEventEmitterMixin":156,"./ReactPerf":170,"./ViewportMetrics":200,"./isEventSupported":218}],126:[function(e,t){"use strict";function n(e,t,n){var o=void 0===e[n];null!=t&&o&&(e[n]=i(t,null))}var o=e("./ReactReconciler"),i=e("./instantiateReactComponent"),r=e("./shouldUpdateReactComponent"),a=e("./traverseAllChildren"),s=(e("fbjs/lib/warning"),{instantiateChildren:function(e){if(null==e)return null;var t={};return a(e,n,t),t},updateChildren:function(e,t,n,a){if(!t&&!e)return null;var s;for(s in t)if(t.hasOwnProperty(s)){var l=e&&e[s],c=l&&l._currentElement,u=t[s];if(null!=l&&r(c,u))o.receiveComponent(l,u,n,a),t[s]=l;else{l&&o.unmountComponent(l,s);var p=i(u,null);t[s]=p}}for(s in e)!e.hasOwnProperty(s)||t&&t.hasOwnProperty(s)||o.unmountComponent(e[s]);return t},unmountChildren:function(e){for(var t in e)if(e.hasOwnProperty(t)){var n=e[t];o.unmountComponent(n)}}});t.exports=s},{"./ReactReconciler":175,"./instantiateReactComponent":217,"./shouldUpdateReactComponent":225,"./traverseAllChildren":226,"fbjs/lib/warning":254}],127:[function(e,t){"use strict";function n(e){return(""+e).replace(y,"//")}function o(e,t){this.func=e,this.context=t,this.count=0}function i(e,t){var n=e.func,o=e.context;n.call(o,t,e.count++)}function r(e,t,n){if(null==e)return e;var r=o.getPooled(t,n);v(e,i,r),o.release(r)}function a(e,t,n,o){this.result=e,this.keyPrefix=t,this.func=n,this.context=o,this.count=0}function s(e,t,o){var i=e.result,r=e.keyPrefix,a=e.func,s=e.context,c=a.call(s,t,e.count++);Array.isArray(c)?l(c,i,o,m.thatReturnsArgument):null!=c&&(f.isValidElement(c)&&(c=f.cloneAndReplaceKey(c,r+(c!==t?n(c.key||"")+"/":"")+o)),i.push(c))}function l(e,t,o,i,r){var l="";null!=o&&(l=n(o)+"/");var c=a.getPooled(t,l,i,r);v(e,s,c),a.release(c)}function c(e,t,n){if(null==e)return e;var o=[];return l(e,o,null,t,n),o}function u(){return null}function p(e){return v(e,u,null)}function d(e){var t=[];return l(e,t,null,m.thatReturnsArgument),t}var h=e("./PooledClass"),f=e("./ReactElement"),m=e("fbjs/lib/emptyFunction"),v=e("./traverseAllChildren"),g=h.twoArgumentPooler,E=h.fourArgumentPooler,y=/\/(?!\/)/g;o.prototype.destructor=function(){this.func=null,this.context=null,this.count=0},h.addPoolingTo(o,g),a.prototype.destructor=function(){this.result=null,this.keyPrefix=null,this.func=null,this.context=null,this.count=0},h.addPoolingTo(a,E);var b={forEach:r,map:c,mapIntoWithKeyPrefixInternal:l,count:p,toArray:d};t.exports=b},{"./PooledClass":122,"./ReactElement":151,"./traverseAllChildren":226,"fbjs/lib/emptyFunction":235}],128:[function(e,t){"use strict";function n(e,t){var n=C.hasOwnProperty(t)?C[t]:null;R.hasOwnProperty(t)&&(n!==y.OVERRIDE_BASE?m(!1):void 0),e.hasOwnProperty(t)&&(n!==y.DEFINE_MANY&&n!==y.DEFINE_MANY_MERGED?m(!1):void 0)}function o(e,t){if(t){"function"==typeof t?m(!1):void 0,p.isValidElement(t)?m(!1):void 0;var o=e.prototype;t.hasOwnProperty(E)&&S.mixins(e,t.mixins);for(var i in t)if(t.hasOwnProperty(i)&&i!==E){var r=t[i];if(n(o,i),S.hasOwnProperty(i))S[i](e,r);else{var l=C.hasOwnProperty(i),c=o.hasOwnProperty(i),u="function"==typeof r,d=u&&!l&&!c&&t.autobind!==!1;if(d)o.__reactAutoBindMap||(o.__reactAutoBindMap={}),o.__reactAutoBindMap[i]=r,o[i]=r;else if(c){var h=C[i];!l||h!==y.DEFINE_MANY_MERGED&&h!==y.DEFINE_MANY?m(!1):void 0,h===y.DEFINE_MANY_MERGED?o[i]=a(o[i],r):h===y.DEFINE_MANY&&(o[i]=s(o[i],r))}else o[i]=r}}}}function i(e,t){if(t)for(var n in t){var o=t[n];if(t.hasOwnProperty(n)){var i=n in S;i?m(!1):void 0;var r=n in e;r?m(!1):void 0,e[n]=o}}}function r(e,t){e&&t&&"object"==typeof e&&"object"==typeof t?void 0:m(!1);for(var n in t)t.hasOwnProperty(n)&&(void 0!==e[n]?m(!1):void 0,e[n]=t[n]);return e}function a(e,t){return function(){var n=e.apply(this,arguments),o=t.apply(this,arguments);if(null==n)return o;if(null==o)return n;var i={};return r(i,n),r(i,o),i}}function s(e,t){return function(){e.apply(this,arguments),t.apply(this,arguments)}}function l(e,t){var n=t.bind(e);return n}function c(e){for(var t in e.__reactAutoBindMap)if(e.__reactAutoBindMap.hasOwnProperty(t)){var n=e.__reactAutoBindMap[t];e[t]=l(e,n)}}var u=e("./ReactComponent"),p=e("./ReactElement"),d=(e("./ReactPropTypeLocations"),e("./ReactPropTypeLocationNames"),e("./ReactNoopUpdateQueue")),h=e("./Object.assign"),f=e("fbjs/lib/emptyObject"),m=e("fbjs/lib/invariant"),v=e("fbjs/lib/keyMirror"),g=e("fbjs/lib/keyOf"),E=(e("fbjs/lib/warning"),g({mixins:null})),y=v({DEFINE_ONCE:null,DEFINE_MANY:null,OVERRIDE_BASE:null,DEFINE_MANY_MERGED:null}),b=[],C={mixins:y.DEFINE_MANY,statics:y.DEFINE_MANY,propTypes:y.DEFINE_MANY,contextTypes:y.DEFINE_MANY,childContextTypes:y.DEFINE_MANY,getDefaultProps:y.DEFINE_MANY_MERGED,getInitialState:y.DEFINE_MANY_MERGED,getChildContext:y.DEFINE_MANY_MERGED,render:y.DEFINE_ONCE,componentWillMount:y.DEFINE_MANY,componentDidMount:y.DEFINE_MANY,componentWillReceiveProps:y.DEFINE_MANY,shouldComponentUpdate:y.DEFINE_ONCE,componentWillUpdate:y.DEFINE_MANY,componentDidUpdate:y.DEFINE_MANY,componentWillUnmount:y.DEFINE_MANY,updateComponent:y.OVERRIDE_BASE},S={displayName:function(e,t){e.displayName=t},mixins:function(e,t){if(t)for(var n=0;n<t.length;n++)o(e,t[n])},childContextTypes:function(e,t){e.childContextTypes=h({},e.childContextTypes,t)},contextTypes:function(e,t){e.contextTypes=h({},e.contextTypes,t)},getDefaultProps:function(e,t){e.getDefaultProps=e.getDefaultProps?a(e.getDefaultProps,t):t},propTypes:function(e,t){e.propTypes=h({},e.propTypes,t)},statics:function(e,t){i(e,t)},autobind:function(){}},R={replaceState:function(e,t){this.updater.enqueueReplaceState(this,e),t&&this.updater.enqueueCallback(this,t)},isMounted:function(){return this.updater.isMounted(this)},setProps:function(e,t){this.updater.enqueueSetProps(this,e),t&&this.updater.enqueueCallback(this,t)},replaceProps:function(e,t){this.updater.enqueueReplaceProps(this,e),t&&this.updater.enqueueCallback(this,t)}},T=function(){};h(T.prototype,u.prototype,R);var N={createClass:function(e){var t=function(e,t,n){this.__reactAutoBindMap&&c(this),this.props=e,this.context=t,this.refs=f,this.updater=n||d,this.state=null;var o=this.getInitialState?this.getInitialState():null;"object"!=typeof o||Array.isArray(o)?m(!1):void 0,this.state=o};t.prototype=new T,t.prototype.constructor=t,b.forEach(o.bind(null,t)),o(t,e),t.getDefaultProps&&(t.defaultProps=t.getDefaultProps()),t.prototype.render?void 0:m(!1);for(var n in C)t.prototype[n]||(t.prototype[n]=null);return t},injection:{injectMixin:function(e){b.push(e)}}};t.exports=N},{"./Object.assign":121,"./ReactComponent":129,"./ReactElement":151,"./ReactNoopUpdateQueue":168,"./ReactPropTypeLocationNames":171,"./ReactPropTypeLocations":172,"fbjs/lib/emptyObject":236,"fbjs/lib/invariant":243,"fbjs/lib/keyMirror":246,"fbjs/lib/keyOf":247,"fbjs/lib/warning":254}],129:[function(e,t){"use strict";function n(e,t,n){this.props=e,this.context=t,this.refs=i,this.updater=n||o}{var o=e("./ReactNoopUpdateQueue"),i=(e("./canDefineProperty"),e("fbjs/lib/emptyObject")),r=e("fbjs/lib/invariant");e("fbjs/lib/warning")}n.prototype.isReactComponent={},n.prototype.setState=function(e,t){"object"!=typeof e&&"function"!=typeof e&&null!=e?r(!1):void 0,this.updater.enqueueSetState(this,e),t&&this.updater.enqueueCallback(this,t)},n.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this),e&&this.updater.enqueueCallback(this,e)};t.exports=n},{"./ReactNoopUpdateQueue":168,"./canDefineProperty":203,"fbjs/lib/emptyObject":236,"fbjs/lib/invariant":243,"fbjs/lib/warning":254}],130:[function(e,t){"use strict";var n=e("./ReactDOMIDOperations"),o=e("./ReactMount"),i={processChildrenUpdates:n.dangerouslyProcessChildrenUpdates,replaceNodeWithMarkupByID:n.dangerouslyReplaceNodeWithMarkupByID,unmountIDFromEnvironment:function(e){o.purgeID(e)
}};t.exports=i},{"./ReactDOMIDOperations":139,"./ReactMount":164}],131:[function(e,t){"use strict";var n=e("fbjs/lib/invariant"),o=!1,i={unmountIDFromEnvironment:null,replaceNodeWithMarkupByID:null,processChildrenUpdates:null,injection:{injectEnvironment:function(e){o?n(!1):void 0,i.unmountIDFromEnvironment=e.unmountIDFromEnvironment,i.replaceNodeWithMarkupByID=e.replaceNodeWithMarkupByID,i.processChildrenUpdates=e.processChildrenUpdates,o=!0}}};t.exports=i},{"fbjs/lib/invariant":243}],132:[function(e,t){"use strict";function n(e){var t=e._currentElement._owner||null;if(t){var n=t.getName();if(n)return" Check the render method of `"+n+"`."}return""}function o(){}{var i=e("./ReactComponentEnvironment"),r=e("./ReactCurrentOwner"),a=e("./ReactElement"),s=e("./ReactInstanceMap"),l=e("./ReactPerf"),c=e("./ReactPropTypeLocations"),u=(e("./ReactPropTypeLocationNames"),e("./ReactReconciler")),p=e("./ReactUpdateQueue"),d=e("./Object.assign"),h=e("fbjs/lib/emptyObject"),f=e("fbjs/lib/invariant"),m=e("./shouldUpdateReactComponent");e("fbjs/lib/warning")}o.prototype.render=function(){var e=s.get(this)._currentElement.type;return e(this.props,this.context,this.updater)};var v=1,g={construct:function(e){this._currentElement=e,this._rootNodeID=null,this._instance=null,this._pendingElement=null,this._pendingStateQueue=null,this._pendingReplaceState=!1,this._pendingForceUpdate=!1,this._renderedComponent=null,this._context=null,this._mountOrder=0,this._topLevelWrapper=null,this._pendingCallbacks=null},mountComponent:function(e,t,n){this._context=n,this._mountOrder=v++,this._rootNodeID=e;var i,r,l=this._processProps(this._currentElement.props),c=this._processContext(n),d=this._currentElement.type,m="prototype"in d;m&&(i=new d(l,c,p)),(!m||null===i||i===!1||a.isValidElement(i))&&(r=i,i=new o(d)),i.props=l,i.context=c,i.refs=h,i.updater=p,this._instance=i,s.set(i,this);var g=i.state;void 0===g&&(i.state=g=null),"object"!=typeof g||Array.isArray(g)?f(!1):void 0,this._pendingStateQueue=null,this._pendingReplaceState=!1,this._pendingForceUpdate=!1,i.componentWillMount&&(i.componentWillMount(),this._pendingStateQueue&&(i.state=this._processPendingState(i.props,i.context))),void 0===r&&(r=this._renderValidatedComponent()),this._renderedComponent=this._instantiateReactComponent(r);var E=u.mountComponent(this._renderedComponent,e,t,this._processChildContext(n));return i.componentDidMount&&t.getReactMountReady().enqueue(i.componentDidMount,i),E},unmountComponent:function(){var e=this._instance;e.componentWillUnmount&&e.componentWillUnmount(),u.unmountComponent(this._renderedComponent),this._renderedComponent=null,this._instance=null,this._pendingStateQueue=null,this._pendingReplaceState=!1,this._pendingForceUpdate=!1,this._pendingCallbacks=null,this._pendingElement=null,this._context=null,this._rootNodeID=null,this._topLevelWrapper=null,s.remove(e)},_maskContext:function(e){var t=null,n=this._currentElement.type,o=n.contextTypes;if(!o)return h;t={};for(var i in o)t[i]=e[i];return t},_processContext:function(e){var t=this._maskContext(e);return t},_processChildContext:function(e){var t=this._currentElement.type,n=this._instance,o=n.getChildContext&&n.getChildContext();if(o){"object"!=typeof t.childContextTypes?f(!1):void 0;for(var i in o)i in t.childContextTypes?void 0:f(!1);return d({},e,o)}return e},_processProps:function(e){return e},_checkPropTypes:function(e,t,o){var i=this.getName();for(var r in e)if(e.hasOwnProperty(r)){var a;try{"function"!=typeof e[r]?f(!1):void 0,a=e[r](t,r,i,o)}catch(s){a=s}if(a instanceof Error){{n(this)}o===c.prop}}},receiveComponent:function(e,t,n){var o=this._currentElement,i=this._context;this._pendingElement=null,this.updateComponent(t,o,e,i,n)},performUpdateIfNecessary:function(e){null!=this._pendingElement&&u.receiveComponent(this,this._pendingElement||this._currentElement,e,this._context),(null!==this._pendingStateQueue||this._pendingForceUpdate)&&this.updateComponent(e,this._currentElement,this._currentElement,this._context,this._context)},updateComponent:function(e,t,n,o,i){var r,a=this._instance,s=this._context===i?a.context:this._processContext(i);t===n?r=n.props:(r=this._processProps(n.props),a.componentWillReceiveProps&&a.componentWillReceiveProps(r,s));var l=this._processPendingState(r,s),c=this._pendingForceUpdate||!a.shouldComponentUpdate||a.shouldComponentUpdate(r,l,s);c?(this._pendingForceUpdate=!1,this._performComponentUpdate(n,r,l,s,e,i)):(this._currentElement=n,this._context=i,a.props=r,a.state=l,a.context=s)},_processPendingState:function(e,t){var n=this._instance,o=this._pendingStateQueue,i=this._pendingReplaceState;if(this._pendingReplaceState=!1,this._pendingStateQueue=null,!o)return n.state;if(i&&1===o.length)return o[0];for(var r=d({},i?o[0]:n.state),a=i?1:0;a<o.length;a++){var s=o[a];d(r,"function"==typeof s?s.call(n,r,e,t):s)}return r},_performComponentUpdate:function(e,t,n,o,i,r){var a,s,l,c=this._instance,u=Boolean(c.componentDidUpdate);u&&(a=c.props,s=c.state,l=c.context),c.componentWillUpdate&&c.componentWillUpdate(t,n,o),this._currentElement=e,this._context=r,c.props=t,c.state=n,c.context=o,this._updateRenderedComponent(i,r),u&&i.getReactMountReady().enqueue(c.componentDidUpdate.bind(c,a,s,l),c)},_updateRenderedComponent:function(e,t){var n=this._renderedComponent,o=n._currentElement,i=this._renderValidatedComponent();if(m(o,i))u.receiveComponent(n,i,e,this._processChildContext(t));else{var r=this._rootNodeID,a=n._rootNodeID;u.unmountComponent(n),this._renderedComponent=this._instantiateReactComponent(i);var s=u.mountComponent(this._renderedComponent,r,e,this._processChildContext(t));this._replaceNodeWithMarkupByID(a,s)}},_replaceNodeWithMarkupByID:function(e,t){i.replaceNodeWithMarkupByID(e,t)},_renderValidatedComponentWithoutOwnerOrContext:function(){var e=this._instance,t=e.render();return t},_renderValidatedComponent:function(){var e;r.current=this;try{e=this._renderValidatedComponentWithoutOwnerOrContext()}finally{r.current=null}return null===e||e===!1||a.isValidElement(e)?void 0:f(!1),e},attachRef:function(e,t){var n=this.getPublicInstance();null==n?f(!1):void 0;var o=t.getPublicInstance(),i=n.refs===h?n.refs={}:n.refs;i[e]=o},detachRef:function(e){var t=this.getPublicInstance().refs;delete t[e]},getName:function(){var e=this._currentElement.type,t=this._instance&&this._instance.constructor;return e.displayName||t&&t.displayName||e.name||t&&t.name||null},getPublicInstance:function(){var e=this._instance;return e instanceof o?null:e},_instantiateReactComponent:null};l.measureMethods(g,"ReactCompositeComponent",{mountComponent:"mountComponent",updateComponent:"updateComponent",_renderValidatedComponent:"_renderValidatedComponent"});var E={Mixin:g};t.exports=E},{"./Object.assign":121,"./ReactComponentEnvironment":131,"./ReactCurrentOwner":133,"./ReactElement":151,"./ReactInstanceMap":161,"./ReactPerf":170,"./ReactPropTypeLocationNames":171,"./ReactPropTypeLocations":172,"./ReactReconciler":175,"./ReactUpdateQueue":181,"./shouldUpdateReactComponent":225,"fbjs/lib/emptyObject":236,"fbjs/lib/invariant":243,"fbjs/lib/warning":254}],133:[function(e,t){"use strict";var n={current:null};t.exports=n},{}],134:[function(e,t){"use strict";{var n=e("./ReactCurrentOwner"),o=e("./ReactDOMTextComponent"),i=e("./ReactDefaultInjection"),r=e("./ReactInstanceHandles"),a=e("./ReactMount"),s=e("./ReactPerf"),l=e("./ReactReconciler"),c=e("./ReactUpdates"),u=e("./ReactVersion"),p=e("./findDOMNode"),d=e("./renderSubtreeIntoContainer");e("fbjs/lib/warning")}i.inject();var h=s.measure("React","render",a.render),f={findDOMNode:p,render:h,unmountComponentAtNode:a.unmountComponentAtNode,version:u,unstable_batchedUpdates:c.batchedUpdates,unstable_renderSubtreeIntoContainer:d};"undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject&&__REACT_DEVTOOLS_GLOBAL_HOOK__.inject({CurrentOwner:n,InstanceHandles:r,Mount:a,Reconciler:l,TextComponent:o});t.exports=f},{"./ReactCurrentOwner":133,"./ReactDOMTextComponent":145,"./ReactDefaultInjection":148,"./ReactInstanceHandles":160,"./ReactMount":164,"./ReactPerf":170,"./ReactReconciler":175,"./ReactUpdates":182,"./ReactVersion":183,"./findDOMNode":207,"./renderSubtreeIntoContainer":222,"fbjs/lib/ExecutionEnvironment":229,"fbjs/lib/warning":254}],135:[function(e,t){"use strict";var n={onClick:!0,onDoubleClick:!0,onMouseDown:!0,onMouseMove:!0,onMouseUp:!0,onClickCapture:!0,onDoubleClickCapture:!0,onMouseDownCapture:!0,onMouseMoveCapture:!0,onMouseUpCapture:!0},o={getNativeProps:function(e,t){if(!t.disabled)return t;var o={};for(var i in t)t.hasOwnProperty(i)&&!n[i]&&(o[i]=t[i]);return o}};t.exports=o},{}],136:[function(e,t){"use strict";function n(){return this}function o(){var e=this._reactInternalComponent;return!!e}function i(){}function r(e,t){var n=this._reactInternalComponent;n&&(_.enqueueSetPropsInternal(n,e),t&&_.enqueueCallbackInternal(n,t))}function a(e,t){var n=this._reactInternalComponent;n&&(_.enqueueReplacePropsInternal(n,e),t&&_.enqueueCallbackInternal(n,t))}function s(e,t){t&&(null!=t.dangerouslySetInnerHTML&&(null!=t.children?x(!1):void 0,"object"==typeof t.dangerouslySetInnerHTML&&z in t.dangerouslySetInnerHTML?void 0:x(!1)),null!=t.style&&"object"!=typeof t.style?x(!1):void 0)}function l(e,t,n,o){var i=I.findReactContainerForID(e);if(i){var r=i.nodeType===K?i.ownerDocument:i;j(t,r)}o.getReactMountReady().enqueue(c,{id:e,registrationName:t,listener:n})}function c(){var e=this;C.putListener(e.id,e.registrationName,e.listener)}function u(){var e=this;e._rootNodeID?void 0:x(!1);var t=I.getNode(e._rootNodeID);switch(t?void 0:x(!1),e._tag){case"iframe":e._wrapperState.listeners=[C.trapBubbledEvent(b.topLevelTypes.topLoad,"load",t)];break;case"video":case"audio":e._wrapperState.listeners=[];for(var n in G)G.hasOwnProperty(n)&&e._wrapperState.listeners.push(C.trapBubbledEvent(b.topLevelTypes[n],G[n],t));break;case"img":e._wrapperState.listeners=[C.trapBubbledEvent(b.topLevelTypes.topError,"error",t),C.trapBubbledEvent(b.topLevelTypes.topLoad,"load",t)];break;case"form":e._wrapperState.listeners=[C.trapBubbledEvent(b.topLevelTypes.topReset,"reset",t),C.trapBubbledEvent(b.topLevelTypes.topSubmit,"submit",t)]}}function p(){T.mountReadyWrapper(this)}function d(){O.postUpdateWrapper(this)}function h(e){$.call(J,e)||(Q.test(e)?void 0:x(!1),J[e]=!0)}function f(e,t){return e.indexOf("-")>=0||null!=t.is}function m(e){h(e),this._tag=e.toLowerCase(),this._renderedChildren=null,this._previousStyle=null,this._previousStyleCopy=null,this._rootNodeID=null,this._wrapperState=null,this._topLevelWrapper=null,this._nodeWithLegacyProperties=null}var v=e("./AutoFocusUtils"),g=e("./CSSPropertyOperations"),E=e("./DOMProperty"),y=e("./DOMPropertyOperations"),b=e("./EventConstants"),C=e("./ReactBrowserEventEmitter"),S=e("./ReactComponentBrowserEnvironment"),R=e("./ReactDOMButton"),T=e("./ReactDOMInput"),N=e("./ReactDOMOption"),O=e("./ReactDOMSelect"),P=e("./ReactDOMTextarea"),I=e("./ReactMount"),A=e("./ReactMultiChild"),D=e("./ReactPerf"),_=e("./ReactUpdateQueue"),w=e("./Object.assign"),k=e("./canDefineProperty"),M=e("./escapeTextContentForBrowser"),x=e("fbjs/lib/invariant"),L=(e("./isEventSupported"),e("fbjs/lib/keyOf")),V=e("./setInnerHTML"),B=e("./setTextContent"),U=(e("fbjs/lib/shallowEqual"),e("./validateDOMNesting"),e("fbjs/lib/warning"),C.deleteListener),j=C.listenTo,F=C.registrationNameModules,W={string:!0,number:!0},H=L({children:null}),Y=L({style:null}),z=L({__html:null}),K=1,G={topAbort:"abort",topCanPlay:"canplay",topCanPlayThrough:"canplaythrough",topDurationChange:"durationchange",topEmptied:"emptied",topEncrypted:"encrypted",topEnded:"ended",topError:"error",topLoadedData:"loadeddata",topLoadedMetadata:"loadedmetadata",topLoadStart:"loadstart",topPause:"pause",topPlay:"play",topPlaying:"playing",topProgress:"progress",topRateChange:"ratechange",topSeeked:"seeked",topSeeking:"seeking",topStalled:"stalled",topSuspend:"suspend",topTimeUpdate:"timeupdate",topVolumeChange:"volumechange",topWaiting:"waiting"},X={area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0},q={listing:!0,pre:!0,textarea:!0},Q=(w({menuitem:!0},X),/^[a-zA-Z][a-zA-Z:_\.\-\d]*$/),J={},$={}.hasOwnProperty;m.displayName="ReactDOMComponent",m.Mixin={construct:function(e){this._currentElement=e},mountComponent:function(e,t,n){this._rootNodeID=e;var o=this._currentElement.props;switch(this._tag){case"iframe":case"img":case"form":case"video":case"audio":this._wrapperState={listeners:null},t.getReactMountReady().enqueue(u,this);break;case"button":o=R.getNativeProps(this,o,n);break;case"input":T.mountWrapper(this,o,n),o=T.getNativeProps(this,o,n);break;case"option":N.mountWrapper(this,o,n),o=N.getNativeProps(this,o,n);break;case"select":O.mountWrapper(this,o,n),o=O.getNativeProps(this,o,n),n=O.processChildContext(this,o,n);break;case"textarea":P.mountWrapper(this,o,n),o=P.getNativeProps(this,o,n)}s(this,o);var i;if(t.useCreateElement){var r=n[I.ownerDocumentContextKey],a=r.createElement(this._currentElement.type);y.setAttributeForID(a,this._rootNodeID),I.getID(a),this._updateDOMProperties({},o,t,a),this._createInitialChildren(t,o,n,a),i=a}else{var l=this._createOpenTagMarkupAndPutListeners(t,o),c=this._createContentMarkup(t,o,n);i=!c&&X[this._tag]?l+"/>":l+">"+c+"</"+this._currentElement.type+">"}switch(this._tag){case"input":t.getReactMountReady().enqueue(p,this);case"button":case"select":case"textarea":o.autoFocus&&t.getReactMountReady().enqueue(v.focusDOMComponent,this)}return i},_createOpenTagMarkupAndPutListeners:function(e,t){var n="<"+this._currentElement.type;for(var o in t)if(t.hasOwnProperty(o)){var i=t[o];if(null!=i)if(F.hasOwnProperty(o))i&&l(this._rootNodeID,o,i,e);else{o===Y&&(i&&(i=this._previousStyleCopy=w({},t.style)),i=g.createMarkupForStyles(i));var r=null;null!=this._tag&&f(this._tag,t)?o!==H&&(r=y.createMarkupForCustomAttribute(o,i)):r=y.createMarkupForProperty(o,i),r&&(n+=" "+r)}}if(e.renderToStaticMarkup)return n;var a=y.createMarkupForID(this._rootNodeID);return n+" "+a},_createContentMarkup:function(e,t,n){var o="",i=t.dangerouslySetInnerHTML;if(null!=i)null!=i.__html&&(o=i.__html);else{var r=W[typeof t.children]?t.children:null,a=null!=r?null:t.children;if(null!=r)o=M(r);else if(null!=a){var s=this.mountChildren(a,e,n);o=s.join("")}}return q[this._tag]&&"\n"===o.charAt(0)?"\n"+o:o},_createInitialChildren:function(e,t,n,o){var i=t.dangerouslySetInnerHTML;if(null!=i)null!=i.__html&&V(o,i.__html);else{var r=W[typeof t.children]?t.children:null,a=null!=r?null:t.children;if(null!=r)B(o,r);else if(null!=a)for(var s=this.mountChildren(a,e,n),l=0;l<s.length;l++)o.appendChild(s[l])}},receiveComponent:function(e,t,n){var o=this._currentElement;this._currentElement=e,this.updateComponent(t,o,e,n)},updateComponent:function(e,t,n,o){var i=t.props,r=this._currentElement.props;switch(this._tag){case"button":i=R.getNativeProps(this,i),r=R.getNativeProps(this,r);break;case"input":T.updateWrapper(this),i=T.getNativeProps(this,i),r=T.getNativeProps(this,r);break;case"option":i=N.getNativeProps(this,i),r=N.getNativeProps(this,r);break;case"select":i=O.getNativeProps(this,i),r=O.getNativeProps(this,r);break;case"textarea":P.updateWrapper(this),i=P.getNativeProps(this,i),r=P.getNativeProps(this,r)}s(this,r),this._updateDOMProperties(i,r,e,null),this._updateDOMChildren(i,r,e,o),!k&&this._nodeWithLegacyProperties&&(this._nodeWithLegacyProperties.props=r),"select"===this._tag&&e.getReactMountReady().enqueue(d,this)},_updateDOMProperties:function(e,t,n,o){var i,r,a;for(i in e)if(!t.hasOwnProperty(i)&&e.hasOwnProperty(i))if(i===Y){var s=this._previousStyleCopy;for(r in s)s.hasOwnProperty(r)&&(a=a||{},a[r]="");this._previousStyleCopy=null}else F.hasOwnProperty(i)?e[i]&&U(this._rootNodeID,i):(E.properties[i]||E.isCustomAttribute(i))&&(o||(o=I.getNode(this._rootNodeID)),y.deleteValueForProperty(o,i));for(i in t){var c=t[i],u=i===Y?this._previousStyleCopy:e[i];if(t.hasOwnProperty(i)&&c!==u)if(i===Y)if(c?c=this._previousStyleCopy=w({},c):this._previousStyleCopy=null,u){for(r in u)!u.hasOwnProperty(r)||c&&c.hasOwnProperty(r)||(a=a||{},a[r]="");for(r in c)c.hasOwnProperty(r)&&u[r]!==c[r]&&(a=a||{},a[r]=c[r])}else a=c;else F.hasOwnProperty(i)?c?l(this._rootNodeID,i,c,n):u&&U(this._rootNodeID,i):f(this._tag,t)?(o||(o=I.getNode(this._rootNodeID)),i===H&&(c=null),y.setValueForAttribute(o,i,c)):(E.properties[i]||E.isCustomAttribute(i))&&(o||(o=I.getNode(this._rootNodeID)),null!=c?y.setValueForProperty(o,i,c):y.deleteValueForProperty(o,i))}a&&(o||(o=I.getNode(this._rootNodeID)),g.setValueForStyles(o,a))},_updateDOMChildren:function(e,t,n,o){var i=W[typeof e.children]?e.children:null,r=W[typeof t.children]?t.children:null,a=e.dangerouslySetInnerHTML&&e.dangerouslySetInnerHTML.__html,s=t.dangerouslySetInnerHTML&&t.dangerouslySetInnerHTML.__html,l=null!=i?null:e.children,c=null!=r?null:t.children,u=null!=i||null!=a,p=null!=r||null!=s;null!=l&&null==c?this.updateChildren(null,n,o):u&&!p&&this.updateTextContent(""),null!=r?i!==r&&this.updateTextContent(""+r):null!=s?a!==s&&this.updateMarkup(""+s):null!=c&&this.updateChildren(c,n,o)},unmountComponent:function(){switch(this._tag){case"iframe":case"img":case"form":case"video":case"audio":var e=this._wrapperState.listeners;if(e)for(var t=0;t<e.length;t++)e[t].remove();break;case"input":T.unmountWrapper(this);break;case"html":case"head":case"body":x(!1)}if(this.unmountChildren(),C.deleteAllListeners(this._rootNodeID),S.unmountIDFromEnvironment(this._rootNodeID),this._rootNodeID=null,this._wrapperState=null,this._nodeWithLegacyProperties){var n=this._nodeWithLegacyProperties;n._reactInternalComponent=null,this._nodeWithLegacyProperties=null}},getPublicInstance:function(){if(!this._nodeWithLegacyProperties){var e=I.getNode(this._rootNodeID);e._reactInternalComponent=this,e.getDOMNode=n,e.isMounted=o,e.setState=i,e.replaceState=i,e.forceUpdate=i,e.setProps=r,e.replaceProps=a,e.props=this._currentElement.props,this._nodeWithLegacyProperties=e}return this._nodeWithLegacyProperties}},D.measureMethods(m,"ReactDOMComponent",{mountComponent:"mountComponent",updateComponent:"updateComponent"}),w(m.prototype,m.Mixin,A.Mixin),t.exports=m},{"./AutoFocusUtils":100,"./CSSPropertyOperations":103,"./DOMProperty":108,"./DOMPropertyOperations":109,"./EventConstants":113,"./Object.assign":121,"./ReactBrowserEventEmitter":125,"./ReactComponentBrowserEnvironment":130,"./ReactDOMButton":135,"./ReactDOMInput":140,"./ReactDOMOption":141,"./ReactDOMSelect":142,"./ReactDOMTextarea":146,"./ReactMount":164,"./ReactMultiChild":165,"./ReactPerf":170,"./ReactUpdateQueue":181,"./canDefineProperty":203,"./escapeTextContentForBrowser":206,"./isEventSupported":218,"./setInnerHTML":223,"./setTextContent":224,"./validateDOMNesting":227,"fbjs/lib/invariant":243,"fbjs/lib/keyOf":247,"fbjs/lib/shallowEqual":252,"fbjs/lib/warning":254}],137:[function(e,t){"use strict";function n(e){return o.createFactory(e)}var o=e("./ReactElement"),i=(e("./ReactElementValidator"),e("fbjs/lib/mapObject")),r=i({a:"a",abbr:"abbr",address:"address",area:"area",article:"article",aside:"aside",audio:"audio",b:"b",base:"base",bdi:"bdi",bdo:"bdo",big:"big",blockquote:"blockquote",body:"body",br:"br",button:"button",canvas:"canvas",caption:"caption",cite:"cite",code:"code",col:"col",colgroup:"colgroup",data:"data",datalist:"datalist",dd:"dd",del:"del",details:"details",dfn:"dfn",dialog:"dialog",div:"div",dl:"dl",dt:"dt",em:"em",embed:"embed",fieldset:"fieldset",figcaption:"figcaption",figure:"figure",footer:"footer",form:"form",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",h6:"h6",head:"head",header:"header",hgroup:"hgroup",hr:"hr",html:"html",i:"i",iframe:"iframe",img:"img",input:"input",ins:"ins",kbd:"kbd",keygen:"keygen",label:"label",legend:"legend",li:"li",link:"link",main:"main",map:"map",mark:"mark",menu:"menu",menuitem:"menuitem",meta:"meta",meter:"meter",nav:"nav",noscript:"noscript",object:"object",ol:"ol",optgroup:"optgroup",option:"option",output:"output",p:"p",param:"param",picture:"picture",pre:"pre",progress:"progress",q:"q",rp:"rp",rt:"rt",ruby:"ruby",s:"s",samp:"samp",script:"script",section:"section",select:"select",small:"small",source:"source",span:"span",strong:"strong",style:"style",sub:"sub",summary:"summary",sup:"sup",table:"table",tbody:"tbody",td:"td",textarea:"textarea",tfoot:"tfoot",th:"th",thead:"thead",time:"time",title:"title",tr:"tr",track:"track",u:"u",ul:"ul","var":"var",video:"video",wbr:"wbr",circle:"circle",clipPath:"clipPath",defs:"defs",ellipse:"ellipse",g:"g",image:"image",line:"line",linearGradient:"linearGradient",mask:"mask",path:"path",pattern:"pattern",polygon:"polygon",polyline:"polyline",radialGradient:"radialGradient",rect:"rect",stop:"stop",svg:"svg",text:"text",tspan:"tspan"},n);t.exports=r},{"./ReactElement":151,"./ReactElementValidator":152,"fbjs/lib/mapObject":248}],138:[function(e,t){"use strict";var n={useCreateElement:!1};t.exports=n},{}],139:[function(e,t){"use strict";var n=e("./DOMChildrenOperations"),o=e("./DOMPropertyOperations"),i=e("./ReactMount"),r=e("./ReactPerf"),a=e("fbjs/lib/invariant"),s={dangerouslySetInnerHTML:"`dangerouslySetInnerHTML` must be set using `updateInnerHTMLByID()`.",style:"`style` must be set using `updateStylesByID()`."},l={updatePropertyByID:function(e,t,n){var r=i.getNode(e);s.hasOwnProperty(t)?a(!1):void 0,null!=n?o.setValueForProperty(r,t,n):o.deleteValueForProperty(r,t)},dangerouslyReplaceNodeWithMarkupByID:function(e,t){var o=i.getNode(e);n.dangerouslyReplaceNodeWithMarkup(o,t)},dangerouslyProcessChildrenUpdates:function(e,t){for(var o=0;o<e.length;o++)e[o].parentNode=i.getNode(e[o].parentID);n.processUpdates(e,t)}};r.measureMethods(l,"ReactDOMIDOperations",{dangerouslyReplaceNodeWithMarkupByID:"dangerouslyReplaceNodeWithMarkupByID",dangerouslyProcessChildrenUpdates:"dangerouslyProcessChildrenUpdates"}),t.exports=l},{"./DOMChildrenOperations":107,"./DOMPropertyOperations":109,"./ReactMount":164,"./ReactPerf":170,"fbjs/lib/invariant":243}],140:[function(e,t){"use strict";function n(){this._rootNodeID&&p.updateWrapper(this)}function o(e){var t=this._currentElement.props,o=r.executeOnChange(t,e);s.asap(n,this);var i=t.name;if("radio"===t.type&&null!=i){for(var l=a.getNode(this._rootNodeID),p=l;p.parentNode;)p=p.parentNode;for(var d=p.querySelectorAll("input[name="+JSON.stringify(""+i)+'][type="radio"]'),h=0;h<d.length;h++){var f=d[h];if(f!==l&&f.form===l.form){var m=a.getID(f);m?void 0:c(!1);var v=u[m];v?void 0:c(!1),s.asap(n,v)}}}return o}var i=e("./ReactDOMIDOperations"),r=e("./LinkedValueUtils"),a=e("./ReactMount"),s=e("./ReactUpdates"),l=e("./Object.assign"),c=e("fbjs/lib/invariant"),u={},p={getNativeProps:function(e,t){var n=r.getValue(t),o=r.getChecked(t),i=l({},t,{defaultChecked:void 0,defaultValue:void 0,value:null!=n?n:e._wrapperState.initialValue,checked:null!=o?o:e._wrapperState.initialChecked,onChange:e._wrapperState.onChange});return i},mountWrapper:function(e,t){var n=t.defaultValue;e._wrapperState={initialChecked:t.defaultChecked||!1,initialValue:null!=n?n:null,onChange:o.bind(e)}},mountReadyWrapper:function(e){u[e._rootNodeID]=e},unmountWrapper:function(e){delete u[e._rootNodeID]},updateWrapper:function(e){var t=e._currentElement.props,n=t.checked;null!=n&&i.updatePropertyByID(e._rootNodeID,"checked",n||!1);var o=r.getValue(t);null!=o&&i.updatePropertyByID(e._rootNodeID,"value",""+o)}};t.exports=p},{"./LinkedValueUtils":120,"./Object.assign":121,"./ReactDOMIDOperations":139,"./ReactMount":164,"./ReactUpdates":182,"fbjs/lib/invariant":243}],141:[function(e,t){"use strict";var n=e("./ReactChildren"),o=e("./ReactDOMSelect"),i=e("./Object.assign"),r=(e("fbjs/lib/warning"),o.valueContextKey),a={mountWrapper:function(e,t,n){var o=n[r],i=null;if(null!=o)if(i=!1,Array.isArray(o)){for(var a=0;a<o.length;a++)if(""+o[a]==""+t.value){i=!0;break}}else i=""+o==""+t.value;e._wrapperState={selected:i}},getNativeProps:function(e,t){var o=i({selected:void 0,children:void 0},t);null!=e._wrapperState.selected&&(o.selected=e._wrapperState.selected);var r="";return n.forEach(t.children,function(e){null!=e&&("string"==typeof e||"number"==typeof e)&&(r+=e)}),r&&(o.children=r),o}};t.exports=a},{"./Object.assign":121,"./ReactChildren":127,"./ReactDOMSelect":142,"fbjs/lib/warning":254}],142:[function(e,t){"use strict";function n(){if(this._rootNodeID&&this._wrapperState.pendingUpdate){this._wrapperState.pendingUpdate=!1;var e=this._currentElement.props,t=r.getValue(e);null!=t&&o(this,Boolean(e.multiple),t)}}function o(e,t,n){var o,i,r=a.getNode(e._rootNodeID).options;if(t){for(o={},i=0;i<n.length;i++)o[""+n[i]]=!0;for(i=0;i<r.length;i++){var s=o.hasOwnProperty(r[i].value);r[i].selected!==s&&(r[i].selected=s)}}else{for(o=""+n,i=0;i<r.length;i++)if(r[i].value===o)return void(r[i].selected=!0);r.length&&(r[0].selected=!0)}}function i(e){var t=this._currentElement.props,o=r.executeOnChange(t,e);return this._wrapperState.pendingUpdate=!0,s.asap(n,this),o}var r=e("./LinkedValueUtils"),a=e("./ReactMount"),s=e("./ReactUpdates"),l=e("./Object.assign"),c=(e("fbjs/lib/warning"),"__ReactDOMSelect_value$"+Math.random().toString(36).slice(2)),u={valueContextKey:c,getNativeProps:function(e,t){return l({},t,{onChange:e._wrapperState.onChange,value:void 0})},mountWrapper:function(e,t){var n=r.getValue(t);e._wrapperState={pendingUpdate:!1,initialValue:null!=n?n:t.defaultValue,onChange:i.bind(e),wasMultiple:Boolean(t.multiple)}},processChildContext:function(e,t,n){var o=l({},n);return o[c]=e._wrapperState.initialValue,o},postUpdateWrapper:function(e){var t=e._currentElement.props;e._wrapperState.initialValue=void 0;var n=e._wrapperState.wasMultiple;e._wrapperState.wasMultiple=Boolean(t.multiple);var i=r.getValue(t);null!=i?(e._wrapperState.pendingUpdate=!1,o(e,Boolean(t.multiple),i)):n!==Boolean(t.multiple)&&(null!=t.defaultValue?o(e,Boolean(t.multiple),t.defaultValue):o(e,Boolean(t.multiple),t.multiple?[]:""))}};t.exports=u},{"./LinkedValueUtils":120,"./Object.assign":121,"./ReactMount":164,"./ReactUpdates":182,"fbjs/lib/warning":254}],143:[function(e,t){"use strict";function n(e,t,n,o){return e===n&&t===o}function o(e){var t=document.selection,n=t.createRange(),o=n.text.length,i=n.duplicate();i.moveToElementText(e),i.setEndPoint("EndToStart",n);var r=i.text.length,a=r+o;return{start:r,end:a}}function i(e){var t=window.getSelection&&window.getSelection();if(!t||0===t.rangeCount)return null;var o=t.anchorNode,i=t.anchorOffset,r=t.focusNode,a=t.focusOffset,s=t.getRangeAt(0);try{s.startContainer.nodeType,s.endContainer.nodeType}catch(l){return null}var c=n(t.anchorNode,t.anchorOffset,t.focusNode,t.focusOffset),u=c?0:s.toString().length,p=s.cloneRange();p.selectNodeContents(e),p.setEnd(s.startContainer,s.startOffset);var d=n(p.startContainer,p.startOffset,p.endContainer,p.endOffset),h=d?0:p.toString().length,f=h+u,m=document.createRange();m.setStart(o,i),m.setEnd(r,a);var v=m.collapsed;return{start:v?f:h,end:v?h:f}}function r(e,t){var n,o,i=document.selection.createRange().duplicate();"undefined"==typeof t.end?(n=t.start,o=n):t.start>t.end?(n=t.end,o=t.start):(n=t.start,o=t.end),i.moveToElementText(e),i.moveStart("character",n),i.setEndPoint("EndToStart",i),i.moveEnd("character",o-n),i.select()}function a(e,t){if(window.getSelection){var n=window.getSelection(),o=e[c()].length,i=Math.min(t.start,o),r="undefined"==typeof t.end?i:Math.min(t.end,o);if(!n.extend&&i>r){var a=r;r=i,i=a}var s=l(e,i),u=l(e,r);if(s&&u){var p=document.createRange();p.setStart(s.node,s.offset),n.removeAllRanges(),i>r?(n.addRange(p),n.extend(u.node,u.offset)):(p.setEnd(u.node,u.offset),n.addRange(p))}}}var s=e("fbjs/lib/ExecutionEnvironment"),l=e("./getNodeForCharacterOffset"),c=e("./getTextContentAccessor"),u=s.canUseDOM&&"selection"in document&&!("getSelection"in window),p={getOffsets:u?o:i,setOffsets:u?r:a};t.exports=p},{"./getNodeForCharacterOffset":215,"./getTextContentAccessor":216,"fbjs/lib/ExecutionEnvironment":229}],144:[function(e,t){"use strict";var n=e("./ReactDefaultInjection"),o=e("./ReactServerRendering"),i=e("./ReactVersion");n.inject();var r={renderToString:o.renderToString,renderToStaticMarkup:o.renderToStaticMarkup,version:i};t.exports=r},{"./ReactDefaultInjection":148,"./ReactServerRendering":179,"./ReactVersion":183}],145:[function(e,t){"use strict";var n=e("./DOMChildrenOperations"),o=e("./DOMPropertyOperations"),i=e("./ReactComponentBrowserEnvironment"),r=e("./ReactMount"),a=e("./Object.assign"),s=e("./escapeTextContentForBrowser"),l=e("./setTextContent"),c=(e("./validateDOMNesting"),function(){});a(c.prototype,{construct:function(e){this._currentElement=e,this._stringText=""+e,this._rootNodeID=null,this._mountIndex=0},mountComponent:function(e,t,n){if(this._rootNodeID=e,t.useCreateElement){var i=n[r.ownerDocumentContextKey],a=i.createElement("span");return o.setAttributeForID(a,e),r.getID(a),l(a,this._stringText),a}var c=s(this._stringText);return t.renderToStaticMarkup?c:"<span "+o.createMarkupForID(e)+">"+c+"</span>"},receiveComponent:function(e){if(e!==this._currentElement){this._currentElement=e;var t=""+e;if(t!==this._stringText){this._stringText=t;var o=r.getNode(this._rootNodeID);n.updateTextContent(o,t)}}},unmountComponent:function(){i.unmountIDFromEnvironment(this._rootNodeID)}}),t.exports=c},{"./DOMChildrenOperations":107,"./DOMPropertyOperations":109,"./Object.assign":121,"./ReactComponentBrowserEnvironment":130,"./ReactMount":164,"./escapeTextContentForBrowser":206,"./setTextContent":224,"./validateDOMNesting":227}],146:[function(e,t){"use strict";function n(){this._rootNodeID&&c.updateWrapper(this)}function o(e){var t=this._currentElement.props,o=i.executeOnChange(t,e);return a.asap(n,this),o}var i=e("./LinkedValueUtils"),r=e("./ReactDOMIDOperations"),a=e("./ReactUpdates"),s=e("./Object.assign"),l=e("fbjs/lib/invariant"),c=(e("fbjs/lib/warning"),{getNativeProps:function(e,t){null!=t.dangerouslySetInnerHTML?l(!1):void 0;var n=s({},t,{defaultValue:void 0,value:void 0,children:e._wrapperState.initialValue,onChange:e._wrapperState.onChange});return n},mountWrapper:function(e,t){var n=t.defaultValue,r=t.children;null!=r&&(null!=n?l(!1):void 0,Array.isArray(r)&&(r.length<=1?void 0:l(!1),r=r[0]),n=""+r),null==n&&(n="");var a=i.getValue(t);e._wrapperState={initialValue:""+(null!=a?a:n),onChange:o.bind(e)}},updateWrapper:function(e){var t=e._currentElement.props,n=i.getValue(t);null!=n&&r.updatePropertyByID(e._rootNodeID,"value",""+n)}});t.exports=c},{"./LinkedValueUtils":120,"./Object.assign":121,"./ReactDOMIDOperations":139,"./ReactUpdates":182,"fbjs/lib/invariant":243,"fbjs/lib/warning":254}],147:[function(e,t){"use strict";function n(){this.reinitializeTransaction()}var o=e("./ReactUpdates"),i=e("./Transaction"),r=e("./Object.assign"),a=e("fbjs/lib/emptyFunction"),s={initialize:a,close:function(){p.isBatchingUpdates=!1}},l={initialize:a,close:o.flushBatchedUpdates.bind(o)},c=[l,s];r(n.prototype,i.Mixin,{getTransactionWrappers:function(){return c}});var u=new n,p={isBatchingUpdates:!1,batchedUpdates:function(e,t,n,o,i,r){var a=p.isBatchingUpdates;p.isBatchingUpdates=!0,a?e(t,n,o,i,r):u.perform(e,null,t,n,o,i,r)}};t.exports=p},{"./Object.assign":121,"./ReactUpdates":182,"./Transaction":199,"fbjs/lib/emptyFunction":235}],148:[function(e,t){"use strict";function n(){if(!T){T=!0,v.EventEmitter.injectReactEventListener(m),v.EventPluginHub.injectEventPluginOrder(a),v.EventPluginHub.injectInstanceHandle(g),v.EventPluginHub.injectMount(E),v.EventPluginHub.injectEventPluginsByName({SimpleEventPlugin:S,EnterLeaveEventPlugin:s,ChangeEventPlugin:i,SelectEventPlugin:b,BeforeInputEventPlugin:o}),v.NativeComponent.injectGenericComponentClass(h),v.NativeComponent.injectTextComponentClass(f),v.Class.injectMixin(u),v.DOMProperty.injectDOMPropertyConfig(c),v.DOMProperty.injectDOMPropertyConfig(R),v.EmptyComponent.injectEmptyComponent("noscript"),v.Updates.injectReconcileTransaction(y),v.Updates.injectBatchingStrategy(d),v.RootIndex.injectCreateReactRootIndex(l.canUseDOM?r.createReactRootIndex:C.createReactRootIndex),v.Component.injectEnvironment(p)
}}var o=e("./BeforeInputEventPlugin"),i=e("./ChangeEventPlugin"),r=e("./ClientReactRootIndex"),a=e("./DefaultEventPluginOrder"),s=e("./EnterLeaveEventPlugin"),l=e("fbjs/lib/ExecutionEnvironment"),c=e("./HTMLDOMPropertyConfig"),u=e("./ReactBrowserComponentMixin"),p=e("./ReactComponentBrowserEnvironment"),d=e("./ReactDefaultBatchingStrategy"),h=e("./ReactDOMComponent"),f=e("./ReactDOMTextComponent"),m=e("./ReactEventListener"),v=e("./ReactInjection"),g=e("./ReactInstanceHandles"),E=e("./ReactMount"),y=e("./ReactReconcileTransaction"),b=e("./SelectEventPlugin"),C=e("./ServerReactRootIndex"),S=e("./SimpleEventPlugin"),R=e("./SVGDOMPropertyConfig"),T=!1;t.exports={inject:n}},{"./BeforeInputEventPlugin":101,"./ChangeEventPlugin":105,"./ClientReactRootIndex":106,"./DefaultEventPluginOrder":111,"./EnterLeaveEventPlugin":112,"./HTMLDOMPropertyConfig":119,"./ReactBrowserComponentMixin":124,"./ReactComponentBrowserEnvironment":130,"./ReactDOMComponent":136,"./ReactDOMTextComponent":145,"./ReactDefaultBatchingStrategy":147,"./ReactDefaultPerf":149,"./ReactEventListener":157,"./ReactInjection":158,"./ReactInstanceHandles":160,"./ReactMount":164,"./ReactReconcileTransaction":174,"./SVGDOMPropertyConfig":184,"./SelectEventPlugin":185,"./ServerReactRootIndex":186,"./SimpleEventPlugin":187,"fbjs/lib/ExecutionEnvironment":229}],149:[function(e,t){"use strict";function n(e){return Math.floor(100*e)/100}function o(e,t,n){e[t]=(e[t]||0)+n}var i=e("./DOMProperty"),r=e("./ReactDefaultPerfAnalysis"),a=e("./ReactMount"),s=e("./ReactPerf"),l=e("fbjs/lib/performanceNow"),c={_allMeasurements:[],_mountStack:[0],_injected:!1,start:function(){c._injected||s.injection.injectMeasure(c.measure),c._allMeasurements.length=0,s.enableMeasure=!0},stop:function(){s.enableMeasure=!1},getLastMeasurements:function(){return c._allMeasurements},printExclusive:function(e){e=e||c._allMeasurements;var t=r.getExclusiveSummary(e);console.table(t.map(function(e){return{"Component class name":e.componentName,"Total inclusive time (ms)":n(e.inclusive),"Exclusive mount time (ms)":n(e.exclusive),"Exclusive render time (ms)":n(e.render),"Mount time per instance (ms)":n(e.exclusive/e.count),"Render time per instance (ms)":n(e.render/e.count),Instances:e.count}}))},printInclusive:function(e){e=e||c._allMeasurements;var t=r.getInclusiveSummary(e);console.table(t.map(function(e){return{"Owner > component":e.componentName,"Inclusive time (ms)":n(e.time),Instances:e.count}})),console.log("Total time:",r.getTotalTime(e).toFixed(2)+" ms")},getMeasurementsSummaryMap:function(e){var t=r.getInclusiveSummary(e,!0);return t.map(function(e){return{"Owner > component":e.componentName,"Wasted time (ms)":e.time,Instances:e.count}})},printWasted:function(e){e=e||c._allMeasurements,console.table(c.getMeasurementsSummaryMap(e)),console.log("Total time:",r.getTotalTime(e).toFixed(2)+" ms")},printDOM:function(e){e=e||c._allMeasurements;var t=r.getDOMSummary(e);console.table(t.map(function(e){var t={};return t[i.ID_ATTRIBUTE_NAME]=e.id,t.type=e.type,t.args=JSON.stringify(e.args),t})),console.log("Total time:",r.getTotalTime(e).toFixed(2)+" ms")},_recordWrite:function(e,t,n,o){var i=c._allMeasurements[c._allMeasurements.length-1].writes;i[e]=i[e]||[],i[e].push({type:t,time:n,args:o})},measure:function(e,t,n){return function(){for(var i=arguments.length,r=Array(i),s=0;i>s;s++)r[s]=arguments[s];var u,p,d;if("_renderNewRootComponent"===t||"flushBatchedUpdates"===t)return c._allMeasurements.push({exclusive:{},inclusive:{},render:{},counts:{},writes:{},displayNames:{},totalTime:0,created:{}}),d=l(),p=n.apply(this,r),c._allMeasurements[c._allMeasurements.length-1].totalTime=l()-d,p;if("_mountImageIntoNode"===t||"ReactBrowserEventEmitter"===e||"ReactDOMIDOperations"===e||"CSSPropertyOperations"===e||"DOMChildrenOperations"===e||"DOMPropertyOperations"===e){if(d=l(),p=n.apply(this,r),u=l()-d,"_mountImageIntoNode"===t){var h=a.getID(r[1]);c._recordWrite(h,t,u,r[0])}else if("dangerouslyProcessChildrenUpdates"===t)r[0].forEach(function(e){var t={};null!==e.fromIndex&&(t.fromIndex=e.fromIndex),null!==e.toIndex&&(t.toIndex=e.toIndex),null!==e.textContent&&(t.textContent=e.textContent),null!==e.markupIndex&&(t.markup=r[1][e.markupIndex]),c._recordWrite(e.parentID,e.type,u,t)});else{var f=r[0];"object"==typeof f&&(f=a.getID(r[0])),c._recordWrite(f,t,u,Array.prototype.slice.call(r,1))}return p}if("ReactCompositeComponent"!==e||"mountComponent"!==t&&"updateComponent"!==t&&"_renderValidatedComponent"!==t)return n.apply(this,r);if(this._currentElement.type===a.TopLevelWrapper)return n.apply(this,r);var m="mountComponent"===t?r[0]:this._rootNodeID,v="_renderValidatedComponent"===t,g="mountComponent"===t,E=c._mountStack,y=c._allMeasurements[c._allMeasurements.length-1];if(v?o(y.counts,m,1):g&&(y.created[m]=!0,E.push(0)),d=l(),p=n.apply(this,r),u=l()-d,v)o(y.render,m,u);else if(g){var b=E.pop();E[E.length-1]+=u,o(y.exclusive,m,u-b),o(y.inclusive,m,u)}else o(y.inclusive,m,u);return y.displayNames[m]={current:this.getName(),owner:this._currentElement._owner?this._currentElement._owner.getName():"<root>"},p}}};t.exports=c},{"./DOMProperty":108,"./ReactDefaultPerfAnalysis":150,"./ReactMount":164,"./ReactPerf":170,"fbjs/lib/performanceNow":251}],150:[function(e,t){"use strict";function n(e){for(var t=0,n=0;n<e.length;n++){var o=e[n];t+=o.totalTime}return t}function o(e){var t=[];return e.forEach(function(e){Object.keys(e.writes).forEach(function(n){e.writes[n].forEach(function(e){t.push({id:n,type:c[e.type]||e.type,args:e.args})})})}),t}function i(e){for(var t,n={},o=0;o<e.length;o++){var i=e[o],r=s({},i.exclusive,i.inclusive);for(var a in r)t=i.displayNames[a].current,n[t]=n[t]||{componentName:t,inclusive:0,exclusive:0,render:0,count:0},i.render[a]&&(n[t].render+=i.render[a]),i.exclusive[a]&&(n[t].exclusive+=i.exclusive[a]),i.inclusive[a]&&(n[t].inclusive+=i.inclusive[a]),i.counts[a]&&(n[t].count+=i.counts[a])}var c=[];for(t in n)n[t].exclusive>=l&&c.push(n[t]);return c.sort(function(e,t){return t.exclusive-e.exclusive}),c}function r(e,t){for(var n,o={},i=0;i<e.length;i++){var r,c=e[i],u=s({},c.exclusive,c.inclusive);t&&(r=a(c));for(var p in u)if(!t||r[p]){var d=c.displayNames[p];n=d.owner+" > "+d.current,o[n]=o[n]||{componentName:n,time:0,count:0},c.inclusive[p]&&(o[n].time+=c.inclusive[p]),c.counts[p]&&(o[n].count+=c.counts[p])}}var h=[];for(n in o)o[n].time>=l&&h.push(o[n]);return h.sort(function(e,t){return t.time-e.time}),h}function a(e){var t={},n=Object.keys(e.writes),o=s({},e.exclusive,e.inclusive);for(var i in o){for(var r=!1,a=0;a<n.length;a++)if(0===n[a].indexOf(i)){r=!0;break}e.created[i]&&(r=!0),!r&&e.counts[i]>0&&(t[i]=!0)}return t}var s=e("./Object.assign"),l=1.2,c={_mountImageIntoNode:"set innerHTML",INSERT_MARKUP:"set innerHTML",MOVE_EXISTING:"move",REMOVE_NODE:"remove",SET_MARKUP:"set innerHTML",TEXT_CONTENT:"set textContent",setValueForProperty:"update attribute",setValueForAttribute:"update attribute",deleteValueForProperty:"remove attribute",setValueForStyles:"update styles",replaceNodeWithMarkup:"replace",updateTextContent:"set textContent"},u={getExclusiveSummary:i,getInclusiveSummary:r,getDOMSummary:o,getTotalTime:n};t.exports=u},{"./Object.assign":121}],151:[function(e,t){"use strict";var n=e("./ReactCurrentOwner"),o=e("./Object.assign"),i=(e("./canDefineProperty"),"function"==typeof Symbol&&Symbol["for"]&&Symbol["for"]("react.element")||60103),r={key:!0,ref:!0,__self:!0,__source:!0},a=function(e,t,n,o,r,a,s){var l={$$typeof:i,type:e,key:t,ref:n,props:s,_owner:a};return l};a.createElement=function(e,t,o){var i,s={},l=null,c=null,u=null,p=null;if(null!=t){c=void 0===t.ref?null:t.ref,l=void 0===t.key?null:""+t.key,u=void 0===t.__self?null:t.__self,p=void 0===t.__source?null:t.__source;for(i in t)t.hasOwnProperty(i)&&!r.hasOwnProperty(i)&&(s[i]=t[i])}var d=arguments.length-2;if(1===d)s.children=o;else if(d>1){for(var h=Array(d),f=0;d>f;f++)h[f]=arguments[f+2];s.children=h}if(e&&e.defaultProps){var m=e.defaultProps;for(i in m)"undefined"==typeof s[i]&&(s[i]=m[i])}return a(e,l,c,u,p,n.current,s)},a.createFactory=function(e){var t=a.createElement.bind(null,e);return t.type=e,t},a.cloneAndReplaceKey=function(e,t){var n=a(e.type,t,e.ref,e._self,e._source,e._owner,e.props);return n},a.cloneAndReplaceProps=function(e,t){var n=a(e.type,e.key,e.ref,e._self,e._source,e._owner,t);return n},a.cloneElement=function(e,t,i){var s,l=o({},e.props),c=e.key,u=e.ref,p=e._self,d=e._source,h=e._owner;if(null!=t){void 0!==t.ref&&(u=t.ref,h=n.current),void 0!==t.key&&(c=""+t.key);for(s in t)t.hasOwnProperty(s)&&!r.hasOwnProperty(s)&&(l[s]=t[s])}var f=arguments.length-2;if(1===f)l.children=i;else if(f>1){for(var m=Array(f),v=0;f>v;v++)m[v]=arguments[v+2];l.children=m}return a(e.type,c,u,p,d,h,l)},a.isValidElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===i},t.exports=a},{"./Object.assign":121,"./ReactCurrentOwner":133,"./canDefineProperty":203}],152:[function(e,t){"use strict";function n(){if(u.current){var e=u.current.getName();if(e)return" Check the render method of `"+e+"`."}return""}function o(e,t){if(e._store&&!e._store.validated&&null==e.key){e._store.validated=!0;{i("uniqueKey",e,t)}}}function i(e,t,o){var i=n();if(!i){var r="string"==typeof o?o:o.displayName||o.name;r&&(i=" Check the top-level render call using <"+r+">.")}var a=h[e]||(h[e]={});if(a[i])return null;a[i]=!0;var s={parentOrOwner:i,url:" See https://fb.me/react-warning-keys for more information.",childOwner:null};return t&&t._owner&&t._owner!==u.current&&(s.childOwner=" It was passed a child from "+t._owner.getName()+"."),s}function r(e,t){if("object"==typeof e)if(Array.isArray(e))for(var n=0;n<e.length;n++){var i=e[n];l.isValidElement(i)&&o(i,t)}else if(l.isValidElement(e))e._store&&(e._store.validated=!0);else if(e){var r=p(e);if(r&&r!==e.entries)for(var a,s=r.call(e);!(a=s.next()).done;)l.isValidElement(a.value)&&o(a.value,t)}}function a(e,t,o,i){for(var r in t)if(t.hasOwnProperty(r)){var a;try{"function"!=typeof t[r]?d(!1):void 0,a=t[r](o,r,e,i)}catch(s){a=s}if(a instanceof Error&&!(a.message in f)){f[a.message]=!0;{n()}}}}function s(e){var t=e.type;if("function"==typeof t){var n=t.displayName||t.name;t.propTypes&&a(n,t.propTypes,e.props,c.prop),"function"==typeof t.getDefaultProps}}var l=e("./ReactElement"),c=e("./ReactPropTypeLocations"),u=(e("./ReactPropTypeLocationNames"),e("./ReactCurrentOwner")),p=(e("./canDefineProperty"),e("./getIteratorFn")),d=e("fbjs/lib/invariant"),h=(e("fbjs/lib/warning"),{}),f={},m={createElement:function(e){var t="string"==typeof e||"function"==typeof e,n=l.createElement.apply(this,arguments);if(null==n)return n;if(t)for(var o=2;o<arguments.length;o++)r(arguments[o],e);return s(n),n},createFactory:function(e){var t=m.createElement.bind(null,e);return t.type=e,t},cloneElement:function(){for(var e=l.cloneElement.apply(this,arguments),t=2;t<arguments.length;t++)r(arguments[t],e.type);return s(e),e}};t.exports=m},{"./ReactCurrentOwner":133,"./ReactElement":151,"./ReactPropTypeLocationNames":171,"./ReactPropTypeLocations":172,"./canDefineProperty":203,"./getIteratorFn":214,"fbjs/lib/invariant":243,"fbjs/lib/warning":254}],153:[function(e,t){"use strict";var n,o=e("./ReactElement"),i=e("./ReactEmptyComponentRegistry"),r=e("./ReactReconciler"),a=e("./Object.assign"),s={injectEmptyComponent:function(e){n=o.createElement(e)}},l=function(e){this._currentElement=null,this._rootNodeID=null,this._renderedComponent=e(n)};a(l.prototype,{construct:function(){},mountComponent:function(e,t,n){return i.registerNullComponentID(e),this._rootNodeID=e,r.mountComponent(this._renderedComponent,e,t,n)},receiveComponent:function(){},unmountComponent:function(){r.unmountComponent(this._renderedComponent),i.deregisterNullComponentID(this._rootNodeID),this._rootNodeID=null,this._renderedComponent=null}}),l.injection=s,t.exports=l},{"./Object.assign":121,"./ReactElement":151,"./ReactEmptyComponentRegistry":154,"./ReactReconciler":175}],154:[function(e,t){"use strict";function n(e){return!!r[e]}function o(e){r[e]=!0}function i(e){delete r[e]}var r={},a={isNullComponentID:n,registerNullComponentID:o,deregisterNullComponentID:i};t.exports=a},{}],155:[function(e,t){"use strict";function n(e,t,n,i){try{return t(n,i)}catch(r){return void(null===o&&(o=r))}}var o=null,i={invokeGuardedCallback:n,invokeGuardedCallbackWithCatch:n,rethrowCaughtError:function(){if(o){var e=o;throw o=null,e}}};t.exports=i},{}],156:[function(e,t){"use strict";function n(e){o.enqueueEvents(e),o.processEventQueue(!1)}var o=e("./EventPluginHub"),i={handleTopLevel:function(e,t,i,r,a){var s=o.extractEvents(e,t,i,r,a);n(s)}};t.exports=i},{"./EventPluginHub":114}],157:[function(e,t){"use strict";function n(e){var t=p.getID(e),n=u.getReactRootIDFromNodeID(t),o=p.findReactContainerForID(n),i=p.getFirstReactDOM(o);return i}function o(e,t){this.topLevelType=e,this.nativeEvent=t,this.ancestors=[]}function i(e){r(e)}function r(e){for(var t=p.getFirstReactDOM(f(e.nativeEvent))||window,o=t;o;)e.ancestors.push(o),o=n(o);for(var i=0;i<e.ancestors.length;i++){t=e.ancestors[i];var r=p.getID(t)||"";v._handleTopLevel(e.topLevelType,t,r,e.nativeEvent,f(e.nativeEvent))}}function a(e){var t=m(window);e(t)}var s=e("fbjs/lib/EventListener"),l=e("fbjs/lib/ExecutionEnvironment"),c=e("./PooledClass"),u=e("./ReactInstanceHandles"),p=e("./ReactMount"),d=e("./ReactUpdates"),h=e("./Object.assign"),f=e("./getEventTarget"),m=e("fbjs/lib/getUnboundedScrollPosition");h(o.prototype,{destructor:function(){this.topLevelType=null,this.nativeEvent=null,this.ancestors.length=0}}),c.addPoolingTo(o,c.twoArgumentPooler);var v={_enabled:!0,_handleTopLevel:null,WINDOW_HANDLE:l.canUseDOM?window:null,setHandleTopLevel:function(e){v._handleTopLevel=e},setEnabled:function(e){v._enabled=!!e},isEnabled:function(){return v._enabled},trapBubbledEvent:function(e,t,n){var o=n;return o?s.listen(o,t,v.dispatchEvent.bind(null,e)):null},trapCapturedEvent:function(e,t,n){var o=n;return o?s.capture(o,t,v.dispatchEvent.bind(null,e)):null},monitorScrollValue:function(e){var t=a.bind(null,e);s.listen(window,"scroll",t)},dispatchEvent:function(e,t){if(v._enabled){var n=o.getPooled(e,t);try{d.batchedUpdates(i,n)}finally{o.release(n)}}}};t.exports=v},{"./Object.assign":121,"./PooledClass":122,"./ReactInstanceHandles":160,"./ReactMount":164,"./ReactUpdates":182,"./getEventTarget":213,"fbjs/lib/EventListener":228,"fbjs/lib/ExecutionEnvironment":229,"fbjs/lib/getUnboundedScrollPosition":240}],158:[function(e,t){"use strict";var n=e("./DOMProperty"),o=e("./EventPluginHub"),i=e("./ReactComponentEnvironment"),r=e("./ReactClass"),a=e("./ReactEmptyComponent"),s=e("./ReactBrowserEventEmitter"),l=e("./ReactNativeComponent"),c=e("./ReactPerf"),u=e("./ReactRootIndex"),p=e("./ReactUpdates"),d={Component:i.injection,Class:r.injection,DOMProperty:n.injection,EmptyComponent:a.injection,EventPluginHub:o.injection,EventEmitter:s.injection,NativeComponent:l.injection,Perf:c.injection,RootIndex:u.injection,Updates:p.injection};t.exports=d},{"./DOMProperty":108,"./EventPluginHub":114,"./ReactBrowserEventEmitter":125,"./ReactClass":128,"./ReactComponentEnvironment":131,"./ReactEmptyComponent":153,"./ReactNativeComponent":167,"./ReactPerf":170,"./ReactRootIndex":177,"./ReactUpdates":182}],159:[function(e,t){"use strict";function n(e){return i(document.documentElement,e)}var o=e("./ReactDOMSelection"),i=e("fbjs/lib/containsNode"),r=e("fbjs/lib/focusNode"),a=e("fbjs/lib/getActiveElement"),s={hasSelectionCapabilities:function(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&"text"===e.type||"textarea"===t||"true"===e.contentEditable)},getSelectionInformation:function(){var e=a();return{focusedElem:e,selectionRange:s.hasSelectionCapabilities(e)?s.getSelection(e):null}},restoreSelection:function(e){var t=a(),o=e.focusedElem,i=e.selectionRange;t!==o&&n(o)&&(s.hasSelectionCapabilities(o)&&s.setSelection(o,i),r(o))},getSelection:function(e){var t;if("selectionStart"in e)t={start:e.selectionStart,end:e.selectionEnd};else if(document.selection&&e.nodeName&&"input"===e.nodeName.toLowerCase()){var n=document.selection.createRange();n.parentElement()===e&&(t={start:-n.moveStart("character",-e.value.length),end:-n.moveEnd("character",-e.value.length)})}else t=o.getOffsets(e);return t||{start:0,end:0}},setSelection:function(e,t){var n=t.start,i=t.end;if("undefined"==typeof i&&(i=n),"selectionStart"in e)e.selectionStart=n,e.selectionEnd=Math.min(i,e.value.length);else if(document.selection&&e.nodeName&&"input"===e.nodeName.toLowerCase()){var r=e.createTextRange();r.collapse(!0),r.moveStart("character",n),r.moveEnd("character",i-n),r.select()}else o.setOffsets(e,t)}};t.exports=s},{"./ReactDOMSelection":143,"fbjs/lib/containsNode":232,"fbjs/lib/focusNode":237,"fbjs/lib/getActiveElement":238}],160:[function(e,t){"use strict";function n(e){return d+e.toString(36)}function o(e,t){return e.charAt(t)===d||t===e.length}function i(e){return""===e||e.charAt(0)===d&&e.charAt(e.length-1)!==d}function r(e,t){return 0===t.indexOf(e)&&o(t,e.length)}function a(e){return e?e.substr(0,e.lastIndexOf(d)):""}function s(e,t){if(i(e)&&i(t)?void 0:p(!1),r(e,t)?void 0:p(!1),e===t)return e;var n,a=e.length+h;for(n=a;n<t.length&&!o(t,n);n++);return t.substr(0,n)}function l(e,t){var n=Math.min(e.length,t.length);if(0===n)return"";for(var r=0,a=0;n>=a;a++)if(o(e,a)&&o(t,a))r=a;else if(e.charAt(a)!==t.charAt(a))break;var s=e.substr(0,r);return i(s)?void 0:p(!1),s}function c(e,t,n,o,i,l){e=e||"",t=t||"",e===t?p(!1):void 0;var c=r(t,e);c||r(e,t)?void 0:p(!1);for(var u=0,d=c?a:s,h=e;;h=d(h,t)){var m;if(i&&h===e||l&&h===t||(m=n(h,c,o)),m===!1||h===t)break;u++<f?void 0:p(!1)}}var u=e("./ReactRootIndex"),p=e("fbjs/lib/invariant"),d=".",h=d.length,f=1e4,m={createReactRootID:function(){return n(u.createReactRootIndex())},createReactID:function(e,t){return e+t},getReactRootIDFromNodeID:function(e){if(e&&e.charAt(0)===d&&e.length>1){var t=e.indexOf(d,1);return t>-1?e.substr(0,t):e}return null},traverseEnterLeave:function(e,t,n,o,i){var r=l(e,t);r!==e&&c(e,r,n,o,!1,!0),r!==t&&c(r,t,n,i,!0,!1)},traverseTwoPhase:function(e,t,n){e&&(c("",e,t,n,!0,!1),c(e,"",t,n,!1,!0))},traverseTwoPhaseSkipTarget:function(e,t,n){e&&(c("",e,t,n,!0,!0),c(e,"",t,n,!0,!0))},traverseAncestors:function(e,t,n){c("",e,t,n,!0,!1)},getFirstCommonAncestorID:l,_getNextDescendantID:s,isAncestorIDOf:r,SEPARATOR:d};t.exports=m},{"./ReactRootIndex":177,"fbjs/lib/invariant":243}],161:[function(e,t){"use strict";var n={remove:function(e){e._reactInternalInstance=void 0},get:function(e){return e._reactInternalInstance},has:function(e){return void 0!==e._reactInternalInstance},set:function(e,t){e._reactInternalInstance=t}};t.exports=n},{}],162:[function(e,t){"use strict";var n=e("./ReactChildren"),o=e("./ReactComponent"),i=e("./ReactClass"),r=e("./ReactDOMFactories"),a=e("./ReactElement"),s=(e("./ReactElementValidator"),e("./ReactPropTypes")),l=e("./ReactVersion"),c=e("./Object.assign"),u=e("./onlyChild"),p=a.createElement,d=a.createFactory,h=a.cloneElement,f={Children:{map:n.map,forEach:n.forEach,count:n.count,toArray:n.toArray,only:u},Component:o,createElement:p,cloneElement:h,isValidElement:a.isValidElement,PropTypes:s,createClass:i.createClass,createFactory:d,createMixin:function(e){return e},DOM:r,version:l,__spread:c};t.exports=f},{"./Object.assign":121,"./ReactChildren":127,"./ReactClass":128,"./ReactComponent":129,"./ReactDOMFactories":137,"./ReactElement":151,"./ReactElementValidator":152,"./ReactPropTypes":173,"./ReactVersion":183,"./onlyChild":220}],163:[function(e,t){"use strict";var n=e("./adler32"),o=/\/?>/,i={CHECKSUM_ATTR_NAME:"data-react-checksum",addChecksumToMarkup:function(e){var t=n(e);return e.replace(o," "+i.CHECKSUM_ATTR_NAME+'="'+t+'"$&')},canReuseMarkup:function(e,t){var o=t.getAttribute(i.CHECKSUM_ATTR_NAME);o=o&&parseInt(o,10);var r=n(e);return r===o}};t.exports=i},{"./adler32":202}],164:[function(e,t){"use strict";function n(e,t){for(var n=Math.min(e.length,t.length),o=0;n>o;o++)if(e.charAt(o)!==t.charAt(o))return o;return e.length===t.length?-1:n}function o(e){return e?e.nodeType===F?e.documentElement:e.firstChild:null}function i(e){var t=o(e);return t&&q.getID(t)}function r(e){var t=a(e);if(t)if(U.hasOwnProperty(t)){var n=U[t];n!==e&&(u(n,t)?x(!1):void 0,U[t]=e)}else U[t]=e;return t}function a(e){return e&&e.getAttribute&&e.getAttribute(B)||""}function s(e,t){var n=a(e);n!==t&&delete U[n],e.setAttribute(B,t),U[t]=e}function l(e){return U.hasOwnProperty(e)&&u(U[e],e)||(U[e]=q.findReactNodeByID(e)),U[e]}function c(e){var t=N.get(e)._rootNodeID;return R.isNullComponentID(t)?null:(U.hasOwnProperty(t)&&u(U[t],t)||(U[t]=q.findReactNodeByID(t)),U[t])}function u(e,t){if(e){a(e)!==t?x(!1):void 0;var n=q.findReactContainerForID(t);if(n&&k(n,e))return!0}return!1}function p(e){delete U[e]}function d(e){var t=U[e];return t&&u(t,e)?void(G=t):!1}function h(e){G=null,T.traverseAncestors(e,d);var t=G;return G=null,t}function f(e,t,n,o,i,r){C.useCreateElement&&(r=_({},r),r[H]=n.nodeType===F?n:n.ownerDocument);var a=I.mountComponent(e,t,o,r);e._renderedComponent._topLevelWrapper=e,q._mountImageIntoNode(a,n,i,o)}function m(e,t,n,o,i){var r=D.ReactReconcileTransaction.getPooled(o);r.perform(f,null,e,t,n,r,o,i),D.ReactReconcileTransaction.release(r)}function v(e,t){for(I.unmountComponent(e),t.nodeType===F&&(t=t.documentElement);t.lastChild;)t.removeChild(t.lastChild)}function g(e){var t=i(e);return t?t!==T.getReactRootIDFromNodeID(t):!1}function E(e){for(;e&&e.parentNode!==e;e=e.parentNode)if(1===e.nodeType){var t=a(e);if(t){var n,o=T.getReactRootIDFromNodeID(t),i=e;do if(n=a(i),i=i.parentNode,null==i)return null;while(n!==o);if(i===z[o])return e}}return null}var y=e("./DOMProperty"),b=e("./ReactBrowserEventEmitter"),C=(e("./ReactCurrentOwner"),e("./ReactDOMFeatureFlags")),S=e("./ReactElement"),R=e("./ReactEmptyComponentRegistry"),T=e("./ReactInstanceHandles"),N=e("./ReactInstanceMap"),O=e("./ReactMarkupChecksum"),P=e("./ReactPerf"),I=e("./ReactReconciler"),A=e("./ReactUpdateQueue"),D=e("./ReactUpdates"),_=e("./Object.assign"),w=e("fbjs/lib/emptyObject"),k=e("fbjs/lib/containsNode"),M=e("./instantiateReactComponent"),x=e("fbjs/lib/invariant"),L=e("./setInnerHTML"),V=e("./shouldUpdateReactComponent"),B=(e("./validateDOMNesting"),e("fbjs/lib/warning"),y.ID_ATTRIBUTE_NAME),U={},j=1,F=9,W=11,H="__ReactMount_ownerDocument$"+Math.random().toString(36).slice(2),Y={},z={},K=[],G=null,X=function(){};X.prototype.isReactComponent={},X.prototype.render=function(){return this.props};var q={TopLevelWrapper:X,_instancesByReactRootID:Y,scrollMonitor:function(e,t){t()},_updateRootComponent:function(e,t,n,o){return q.scrollMonitor(n,function(){A.enqueueElementInternal(e,t),o&&A.enqueueCallbackInternal(e,o)}),e},_registerComponent:function(e,t){!t||t.nodeType!==j&&t.nodeType!==F&&t.nodeType!==W?x(!1):void 0,b.ensureScrollValueMonitoring();var n=q.registerContainer(t);return Y[n]=e,n},_renderNewRootComponent:function(e,t,n,o){var i=M(e,null),r=q._registerComponent(i,t);return D.batchedUpdates(m,i,r,t,n,o),i},renderSubtreeIntoContainer:function(e,t,n,o){return null==e||null==e._reactInternalInstance?x(!1):void 0,q._renderSubtreeIntoContainer(e,t,n,o)},_renderSubtreeIntoContainer:function(e,t,n,r){S.isValidElement(t)?void 0:x(!1);var s=new S(X,null,null,null,null,null,t),l=Y[i(n)];if(l){var c=l._currentElement,u=c.props;if(V(u,t)){var p=l._renderedComponent.getPublicInstance(),d=r&&function(){r.call(p)};return q._updateRootComponent(l,s,n,d),p}q.unmountComponentAtNode(n)}var h=o(n),f=h&&!!a(h),m=g(n),v=f&&!l&&!m,E=q._renderNewRootComponent(s,n,v,null!=e?e._reactInternalInstance._processChildContext(e._reactInternalInstance._context):w)._renderedComponent.getPublicInstance();return r&&r.call(E),E},render:function(e,t,n){return q._renderSubtreeIntoContainer(null,e,t,n)},registerContainer:function(e){var t=i(e);return t&&(t=T.getReactRootIDFromNodeID(t)),t||(t=T.createReactRootID()),z[t]=e,t},unmountComponentAtNode:function(e){!e||e.nodeType!==j&&e.nodeType!==F&&e.nodeType!==W?x(!1):void 0;var t=i(e),n=Y[t];if(!n){{var o=(g(e),a(e));o&&o===T.getReactRootIDFromNodeID(o)}return!1}return D.batchedUpdates(v,n,e),delete Y[t],delete z[t],!0},findReactContainerForID:function(e){var t=T.getReactRootIDFromNodeID(e),n=z[t];return n},findReactNodeByID:function(e){var t=q.findReactContainerForID(e);return q.findComponentRoot(t,e)},getFirstReactDOM:function(e){return E(e)},findComponentRoot:function(e,t){var n=K,o=0,i=h(t)||e;for(n[0]=i.firstChild,n.length=1;o<n.length;){for(var r,a=n[o++];a;){var s=q.getID(a);s?t===s?r=a:T.isAncestorIDOf(s,t)&&(n.length=o=0,n.push(a.firstChild)):n.push(a.firstChild),a=a.nextSibling}if(r)return n.length=0,r}n.length=0,x(!1)},_mountImageIntoNode:function(e,t,i,r){if(!t||t.nodeType!==j&&t.nodeType!==F&&t.nodeType!==W?x(!1):void 0,i){var a=o(t);if(O.canReuseMarkup(e,a))return;var s=a.getAttribute(O.CHECKSUM_ATTR_NAME);a.removeAttribute(O.CHECKSUM_ATTR_NAME);var l=a.outerHTML;a.setAttribute(O.CHECKSUM_ATTR_NAME,s);{var c=e,u=n(c,l);" (client) "+c.substring(u-20,u+20)+"\n (server) "+l.substring(u-20,u+20)}t.nodeType===F?x(!1):void 0}if(t.nodeType===F?x(!1):void 0,r.useCreateElement){for(;t.lastChild;)t.removeChild(t.lastChild);t.appendChild(e)}else L(t,e)},ownerDocumentContextKey:H,getReactRootID:i,getID:r,setID:s,getNode:l,getNodeFromInstance:c,isValid:u,purgeID:p};P.measureMethods(q,"ReactMount",{_renderNewRootComponent:"_renderNewRootComponent",_mountImageIntoNode:"_mountImageIntoNode"}),t.exports=q},{"./DOMProperty":108,"./Object.assign":121,"./ReactBrowserEventEmitter":125,"./ReactCurrentOwner":133,"./ReactDOMFeatureFlags":138,"./ReactElement":151,"./ReactEmptyComponentRegistry":154,"./ReactInstanceHandles":160,"./ReactInstanceMap":161,"./ReactMarkupChecksum":163,"./ReactPerf":170,"./ReactReconciler":175,"./ReactUpdateQueue":181,"./ReactUpdates":182,"./instantiateReactComponent":217,"./setInnerHTML":223,"./shouldUpdateReactComponent":225,"./validateDOMNesting":227,"fbjs/lib/containsNode":232,"fbjs/lib/emptyObject":236,"fbjs/lib/invariant":243,"fbjs/lib/warning":254}],165:[function(e,t){"use strict";function n(e,t,n){m.push({parentID:e,parentNode:null,type:u.INSERT_MARKUP,markupIndex:v.push(t)-1,content:null,fromIndex:null,toIndex:n})}function o(e,t,n){m.push({parentID:e,parentNode:null,type:u.MOVE_EXISTING,markupIndex:null,content:null,fromIndex:t,toIndex:n})}function i(e,t){m.push({parentID:e,parentNode:null,type:u.REMOVE_NODE,markupIndex:null,content:null,fromIndex:t,toIndex:null})}function r(e,t){m.push({parentID:e,parentNode:null,type:u.SET_MARKUP,markupIndex:null,content:t,fromIndex:null,toIndex:null})}function a(e,t){m.push({parentID:e,parentNode:null,type:u.TEXT_CONTENT,markupIndex:null,content:t,fromIndex:null,toIndex:null})}function s(){m.length&&(c.processChildrenUpdates(m,v),l())}function l(){m.length=0,v.length=0}var c=e("./ReactComponentEnvironment"),u=e("./ReactMultiChildUpdateTypes"),p=(e("./ReactCurrentOwner"),e("./ReactReconciler")),d=e("./ReactChildReconciler"),h=e("./flattenChildren"),f=0,m=[],v=[],g={Mixin:{_reconcilerInstantiateChildren:function(e,t,n){return d.instantiateChildren(e,t,n)},_reconcilerUpdateChildren:function(e,t,n,o){var i;return i=h(t),d.updateChildren(e,i,n,o)},mountChildren:function(e,t,n){var o=this._reconcilerInstantiateChildren(e,t,n);this._renderedChildren=o;var i=[],r=0;for(var a in o)if(o.hasOwnProperty(a)){var s=o[a],l=this._rootNodeID+a,c=p.mountComponent(s,l,t,n);s._mountIndex=r++,i.push(c)}return i},updateTextContent:function(e){f++;var t=!0;try{var n=this._renderedChildren;d.unmountChildren(n);for(var o in n)n.hasOwnProperty(o)&&this._unmountChild(n[o]);this.setTextContent(e),t=!1}finally{f--,f||(t?l():s())}},updateMarkup:function(e){f++;var t=!0;try{var n=this._renderedChildren;d.unmountChildren(n);for(var o in n)n.hasOwnProperty(o)&&this._unmountChildByName(n[o],o);this.setMarkup(e),t=!1}finally{f--,f||(t?l():s())}},updateChildren:function(e,t,n){f++;var o=!0;try{this._updateChildren(e,t,n),o=!1}finally{f--,f||(o?l():s())}},_updateChildren:function(e,t,n){var o=this._renderedChildren,i=this._reconcilerUpdateChildren(o,e,t,n);if(this._renderedChildren=i,i||o){var r,a=0,s=0;for(r in i)if(i.hasOwnProperty(r)){var l=o&&o[r],c=i[r];l===c?(this.moveChild(l,s,a),a=Math.max(l._mountIndex,a),l._mountIndex=s):(l&&(a=Math.max(l._mountIndex,a),this._unmountChild(l)),this._mountChildByNameAtIndex(c,r,s,t,n)),s++}for(r in o)!o.hasOwnProperty(r)||i&&i.hasOwnProperty(r)||this._unmountChild(o[r])}},unmountChildren:function(){var e=this._renderedChildren;d.unmountChildren(e),this._renderedChildren=null},moveChild:function(e,t,n){e._mountIndex<n&&o(this._rootNodeID,e._mountIndex,t)},createChild:function(e,t){n(this._rootNodeID,t,e._mountIndex)},removeChild:function(e){i(this._rootNodeID,e._mountIndex)},setTextContent:function(e){a(this._rootNodeID,e)},setMarkup:function(e){r(this._rootNodeID,e)},_mountChildByNameAtIndex:function(e,t,n,o,i){var r=this._rootNodeID+t,a=p.mountComponent(e,r,o,i);e._mountIndex=n,this.createChild(e,a)},_unmountChild:function(e){this.removeChild(e),e._mountIndex=null}}};t.exports=g},{"./ReactChildReconciler":126,"./ReactComponentEnvironment":131,"./ReactCurrentOwner":133,"./ReactMultiChildUpdateTypes":166,"./ReactReconciler":175,"./flattenChildren":208}],166:[function(e,t){"use strict";var n=e("fbjs/lib/keyMirror"),o=n({INSERT_MARKUP:null,MOVE_EXISTING:null,REMOVE_NODE:null,SET_MARKUP:null,TEXT_CONTENT:null});t.exports=o},{"fbjs/lib/keyMirror":246}],167:[function(e,t){"use strict";function n(e){if("function"==typeof e.type)return e.type;var t=e.type,n=u[t];return null==n&&(u[t]=n=l(t)),n}function o(e){return c?void 0:s(!1),new c(e.type,e.props)}function i(e){return new p(e)}function r(e){return e instanceof p}var a=e("./Object.assign"),s=e("fbjs/lib/invariant"),l=null,c=null,u={},p=null,d={injectGenericComponentClass:function(e){c=e},injectTextComponentClass:function(e){p=e},injectComponentClasses:function(e){a(u,e)}},h={getComponentClassForElement:n,createInternalComponent:o,createInstanceForText:i,isTextComponent:r,injection:d};t.exports=h},{"./Object.assign":121,"fbjs/lib/invariant":243}],168:[function(e,t){"use strict";function n(e,t){}var o=(e("fbjs/lib/warning"),{isMounted:function(){return!1},enqueueCallback:function(){},enqueueForceUpdate:function(e){n(e,"forceUpdate")},enqueueReplaceState:function(e){n(e,"replaceState")},enqueueSetState:function(e){n(e,"setState")},enqueueSetProps:function(e){n(e,"setProps")},enqueueReplaceProps:function(e){n(e,"replaceProps")}});t.exports=o},{"fbjs/lib/warning":254}],169:[function(e,t){"use strict";var n=e("fbjs/lib/invariant"),o={isValidOwner:function(e){return!(!e||"function"!=typeof e.attachRef||"function"!=typeof e.detachRef)},addComponentAsRefTo:function(e,t,i){o.isValidOwner(i)?void 0:n(!1),i.attachRef(t,e)},removeComponentAsRefFrom:function(e,t,i){o.isValidOwner(i)?void 0:n(!1),i.getPublicInstance().refs[t]===e.getPublicInstance()&&i.detachRef(t)}};t.exports=o},{"fbjs/lib/invariant":243}],170:[function(e,t){"use strict";function n(e,t,n){return n}var o={enableMeasure:!1,storedMeasure:n,measureMethods:function(e,t,n){},measure:function(e,t,n){return n},injection:{injectMeasure:function(e){o.storedMeasure=e}}};t.exports=o},{}],171:[function(e,t){"use strict";var n={};t.exports=n},{}],172:[function(e,t){"use strict";var n=e("fbjs/lib/keyMirror"),o=n({prop:null,context:null,childContext:null});t.exports=o},{"fbjs/lib/keyMirror":246}],173:[function(e,t){"use strict";function n(e){function t(t,n,o,i,r,a){if(i=i||C,a=a||o,null==n[o]){var s=E[r];return t?new Error("Required "+s+" `"+a+"` was not specified in "+("`"+i+"`.")):null}return e(n,o,i,r,a)}var n=t.bind(null,!1);return n.isRequired=t.bind(null,!0),n}function o(e){function t(t,n,o,i,r){var a=t[n],s=f(a);if(s!==e){var l=E[i],c=m(a);return new Error("Invalid "+l+" `"+r+"` of type "+("`"+c+"` supplied to `"+o+"`, expected ")+("`"+e+"`."))}return null}return n(t)}function i(){return n(y.thatReturns(null))}function r(e){function t(t,n,o,i,r){var a=t[n];
    if(!Array.isArray(a)){var s=E[i],l=f(a);return new Error("Invalid "+s+" `"+r+"` of type "+("`"+l+"` supplied to `"+o+"`, expected an array."))}for(var c=0;c<a.length;c++){var u=e(a,c,o,i,r+"["+c+"]");if(u instanceof Error)return u}return null}return n(t)}function a(){function e(e,t,n,o,i){if(!g.isValidElement(e[t])){var r=E[o];return new Error("Invalid "+r+" `"+i+"` supplied to "+("`"+n+"`, expected a single ReactElement."))}return null}return n(e)}function s(e){function t(t,n,o,i,r){if(!(t[n]instanceof e)){var a=E[i],s=e.name||C,l=v(t[n]);return new Error("Invalid "+a+" `"+r+"` of type "+("`"+l+"` supplied to `"+o+"`, expected ")+("instance of `"+s+"`."))}return null}return n(t)}function l(e){function t(t,n,o,i,r){for(var a=t[n],s=0;s<e.length;s++)if(a===e[s])return null;var l=E[i],c=JSON.stringify(e);return new Error("Invalid "+l+" `"+r+"` of value `"+a+"` "+("supplied to `"+o+"`, expected one of "+c+"."))}return n(Array.isArray(e)?t:function(){return new Error("Invalid argument supplied to oneOf, expected an instance of array.")})}function c(e){function t(t,n,o,i,r){var a=t[n],s=f(a);if("object"!==s){var l=E[i];return new Error("Invalid "+l+" `"+r+"` of type "+("`"+s+"` supplied to `"+o+"`, expected an object."))}for(var c in a)if(a.hasOwnProperty(c)){var u=e(a,c,o,i,r+"."+c);if(u instanceof Error)return u}return null}return n(t)}function u(e){function t(t,n,o,i,r){for(var a=0;a<e.length;a++){var s=e[a];if(null==s(t,n,o,i,r))return null}var l=E[i];return new Error("Invalid "+l+" `"+r+"` supplied to "+("`"+o+"`."))}return n(Array.isArray(e)?t:function(){return new Error("Invalid argument supplied to oneOfType, expected an instance of array.")})}function p(){function e(e,t,n,o,i){if(!h(e[t])){var r=E[o];return new Error("Invalid "+r+" `"+i+"` supplied to "+("`"+n+"`, expected a ReactNode."))}return null}return n(e)}function d(e){function t(t,n,o,i,r){var a=t[n],s=f(a);if("object"!==s){var l=E[i];return new Error("Invalid "+l+" `"+r+"` of type `"+s+"` "+("supplied to `"+o+"`, expected `object`."))}for(var c in e){var u=e[c];if(u){var p=u(a,c,o,i,r+"."+c);if(p)return p}}return null}return n(t)}function h(e){switch(typeof e){case"number":case"string":case"undefined":return!0;case"boolean":return!e;case"object":if(Array.isArray(e))return e.every(h);if(null===e||g.isValidElement(e))return!0;var t=b(e);if(!t)return!1;var n,o=t.call(e);if(t!==e.entries){for(;!(n=o.next()).done;)if(!h(n.value))return!1}else for(;!(n=o.next()).done;){var i=n.value;if(i&&!h(i[1]))return!1}return!0;default:return!1}}function f(e){var t=typeof e;return Array.isArray(e)?"array":e instanceof RegExp?"object":t}function m(e){var t=f(e);if("object"===t){if(e instanceof Date)return"date";if(e instanceof RegExp)return"regexp"}return t}function v(e){return e.constructor&&e.constructor.name?e.constructor.name:"<<anonymous>>"}var g=e("./ReactElement"),E=e("./ReactPropTypeLocationNames"),y=e("fbjs/lib/emptyFunction"),b=e("./getIteratorFn"),C="<<anonymous>>",S={array:o("array"),bool:o("boolean"),func:o("function"),number:o("number"),object:o("object"),string:o("string"),any:i(),arrayOf:r,element:a(),instanceOf:s,node:p(),objectOf:c,oneOf:l,oneOfType:u,shape:d};t.exports=S},{"./ReactElement":151,"./ReactPropTypeLocationNames":171,"./getIteratorFn":214,"fbjs/lib/emptyFunction":235}],174:[function(e,t){"use strict";function n(e){this.reinitializeTransaction(),this.renderToStaticMarkup=!1,this.reactMountReady=o.getPooled(null),this.useCreateElement=!e&&a.useCreateElement}var o=e("./CallbackQueue"),i=e("./PooledClass"),r=e("./ReactBrowserEventEmitter"),a=e("./ReactDOMFeatureFlags"),s=e("./ReactInputSelection"),l=e("./Transaction"),c=e("./Object.assign"),u={initialize:s.getSelectionInformation,close:s.restoreSelection},p={initialize:function(){var e=r.isEnabled();return r.setEnabled(!1),e},close:function(e){r.setEnabled(e)}},d={initialize:function(){this.reactMountReady.reset()},close:function(){this.reactMountReady.notifyAll()}},h=[u,p,d],f={getTransactionWrappers:function(){return h},getReactMountReady:function(){return this.reactMountReady},destructor:function(){o.release(this.reactMountReady),this.reactMountReady=null}};c(n.prototype,l.Mixin,f),i.addPoolingTo(n),t.exports=n},{"./CallbackQueue":104,"./Object.assign":121,"./PooledClass":122,"./ReactBrowserEventEmitter":125,"./ReactDOMFeatureFlags":138,"./ReactInputSelection":159,"./Transaction":199}],175:[function(e,t){"use strict";function n(){o.attachRefs(this,this._currentElement)}var o=e("./ReactRef"),i={mountComponent:function(e,t,o,i){var r=e.mountComponent(t,o,i);return e._currentElement&&null!=e._currentElement.ref&&o.getReactMountReady().enqueue(n,e),r},unmountComponent:function(e){o.detachRefs(e,e._currentElement),e.unmountComponent()},receiveComponent:function(e,t,i,r){var a=e._currentElement;if(t!==a||r!==e._context){var s=o.shouldUpdateRefs(a,t);s&&o.detachRefs(e,a),e.receiveComponent(t,i,r),s&&e._currentElement&&null!=e._currentElement.ref&&i.getReactMountReady().enqueue(n,e)}},performUpdateIfNecessary:function(e,t){e.performUpdateIfNecessary(t)}};t.exports=i},{"./ReactRef":176}],176:[function(e,t){"use strict";function n(e,t,n){"function"==typeof e?e(t.getPublicInstance()):i.addComponentAsRefTo(t,e,n)}function o(e,t,n){"function"==typeof e?e(null):i.removeComponentAsRefFrom(t,e,n)}var i=e("./ReactOwner"),r={};r.attachRefs=function(e,t){if(null!==t&&t!==!1){var o=t.ref;null!=o&&n(o,e,t._owner)}},r.shouldUpdateRefs=function(e,t){var n=null===e||e===!1,o=null===t||t===!1;return n||o||t._owner!==e._owner||t.ref!==e.ref},r.detachRefs=function(e,t){if(null!==t&&t!==!1){var n=t.ref;null!=n&&o(n,e,t._owner)}},t.exports=r},{"./ReactOwner":169}],177:[function(e,t){"use strict";var n={injectCreateReactRootIndex:function(e){o.createReactRootIndex=e}},o={createReactRootIndex:null,injection:n};t.exports=o},{}],178:[function(e,t){"use strict";var n={isBatchingUpdates:!1,batchedUpdates:function(){}};t.exports=n},{}],179:[function(e,t){"use strict";function n(e){r.isValidElement(e)?void 0:h(!1);var t;try{u.injection.injectBatchingStrategy(l);var n=a.createReactRootID();return t=c.getPooled(!1),t.perform(function(){var o=d(e,null),i=o.mountComponent(n,t,p);return s.addChecksumToMarkup(i)},null)}finally{c.release(t),u.injection.injectBatchingStrategy(i)}}function o(e){r.isValidElement(e)?void 0:h(!1);var t;try{u.injection.injectBatchingStrategy(l);var n=a.createReactRootID();return t=c.getPooled(!0),t.perform(function(){var o=d(e,null);return o.mountComponent(n,t,p)},null)}finally{c.release(t),u.injection.injectBatchingStrategy(i)}}var i=e("./ReactDefaultBatchingStrategy"),r=e("./ReactElement"),a=e("./ReactInstanceHandles"),s=e("./ReactMarkupChecksum"),l=e("./ReactServerBatchingStrategy"),c=e("./ReactServerRenderingTransaction"),u=e("./ReactUpdates"),p=e("fbjs/lib/emptyObject"),d=e("./instantiateReactComponent"),h=e("fbjs/lib/invariant");t.exports={renderToString:n,renderToStaticMarkup:o}},{"./ReactDefaultBatchingStrategy":147,"./ReactElement":151,"./ReactInstanceHandles":160,"./ReactMarkupChecksum":163,"./ReactServerBatchingStrategy":178,"./ReactServerRenderingTransaction":180,"./ReactUpdates":182,"./instantiateReactComponent":217,"fbjs/lib/emptyObject":236,"fbjs/lib/invariant":243}],180:[function(e,t){"use strict";function n(e){this.reinitializeTransaction(),this.renderToStaticMarkup=e,this.reactMountReady=i.getPooled(null),this.useCreateElement=!1}var o=e("./PooledClass"),i=e("./CallbackQueue"),r=e("./Transaction"),a=e("./Object.assign"),s=e("fbjs/lib/emptyFunction"),l={initialize:function(){this.reactMountReady.reset()},close:s},c=[l],u={getTransactionWrappers:function(){return c},getReactMountReady:function(){return this.reactMountReady},destructor:function(){i.release(this.reactMountReady),this.reactMountReady=null}};a(n.prototype,r.Mixin,u),o.addPoolingTo(n),t.exports=n},{"./CallbackQueue":104,"./Object.assign":121,"./PooledClass":122,"./Transaction":199,"fbjs/lib/emptyFunction":235}],181:[function(e,t){"use strict";function n(e){a.enqueueUpdate(e)}function o(e,t){var n=r.get(e);return n?n:null}var i=(e("./ReactCurrentOwner"),e("./ReactElement")),r=e("./ReactInstanceMap"),a=e("./ReactUpdates"),s=e("./Object.assign"),l=e("fbjs/lib/invariant"),c=(e("fbjs/lib/warning"),{isMounted:function(e){var t=r.get(e);return t?!!t._renderedComponent:!1},enqueueCallback:function(e,t){"function"!=typeof t?l(!1):void 0;var i=o(e);return i?(i._pendingCallbacks?i._pendingCallbacks.push(t):i._pendingCallbacks=[t],void n(i)):null},enqueueCallbackInternal:function(e,t){"function"!=typeof t?l(!1):void 0,e._pendingCallbacks?e._pendingCallbacks.push(t):e._pendingCallbacks=[t],n(e)},enqueueForceUpdate:function(e){var t=o(e,"forceUpdate");t&&(t._pendingForceUpdate=!0,n(t))},enqueueReplaceState:function(e,t){var i=o(e,"replaceState");i&&(i._pendingStateQueue=[t],i._pendingReplaceState=!0,n(i))},enqueueSetState:function(e,t){var i=o(e,"setState");if(i){var r=i._pendingStateQueue||(i._pendingStateQueue=[]);r.push(t),n(i)}},enqueueSetProps:function(e,t){var n=o(e,"setProps");n&&c.enqueueSetPropsInternal(n,t)},enqueueSetPropsInternal:function(e,t){var o=e._topLevelWrapper;o?void 0:l(!1);var r=o._pendingElement||o._currentElement,a=r.props,c=s({},a.props,t);o._pendingElement=i.cloneAndReplaceProps(r,i.cloneAndReplaceProps(a,c)),n(o)},enqueueReplaceProps:function(e,t){var n=o(e,"replaceProps");n&&c.enqueueReplacePropsInternal(n,t)},enqueueReplacePropsInternal:function(e,t){var o=e._topLevelWrapper;o?void 0:l(!1);var r=o._pendingElement||o._currentElement,a=r.props;o._pendingElement=i.cloneAndReplaceProps(r,i.cloneAndReplaceProps(a,t)),n(o)},enqueueElementInternal:function(e,t){e._pendingElement=t,n(e)}});t.exports=c},{"./Object.assign":121,"./ReactCurrentOwner":133,"./ReactElement":151,"./ReactInstanceMap":161,"./ReactUpdates":182,"fbjs/lib/invariant":243,"fbjs/lib/warning":254}],182:[function(e,t){"use strict";function n(){N.ReactReconcileTransaction&&y?void 0:m(!1)}function o(){this.reinitializeTransaction(),this.dirtyComponentsLength=null,this.callbackQueue=c.getPooled(),this.reconcileTransaction=N.ReactReconcileTransaction.getPooled(!1)}function i(e,t,o,i,r,a){n(),y.batchedUpdates(e,t,o,i,r,a)}function r(e,t){return e._mountOrder-t._mountOrder}function a(e){var t=e.dirtyComponentsLength;t!==v.length?m(!1):void 0,v.sort(r);for(var n=0;t>n;n++){var o=v[n],i=o._pendingCallbacks;if(o._pendingCallbacks=null,d.performUpdateIfNecessary(o,e.reconcileTransaction),i)for(var a=0;a<i.length;a++)e.callbackQueue.enqueue(i[a],o.getPublicInstance())}}function s(e){return n(),y.isBatchingUpdates?void v.push(e):void y.batchedUpdates(s,e)}function l(e,t){y.isBatchingUpdates?void 0:m(!1),g.enqueue(e,t),E=!0}var c=e("./CallbackQueue"),u=e("./PooledClass"),p=e("./ReactPerf"),d=e("./ReactReconciler"),h=e("./Transaction"),f=e("./Object.assign"),m=e("fbjs/lib/invariant"),v=[],g=c.getPooled(),E=!1,y=null,b={initialize:function(){this.dirtyComponentsLength=v.length},close:function(){this.dirtyComponentsLength!==v.length?(v.splice(0,this.dirtyComponentsLength),R()):v.length=0}},C={initialize:function(){this.callbackQueue.reset()},close:function(){this.callbackQueue.notifyAll()}},S=[b,C];f(o.prototype,h.Mixin,{getTransactionWrappers:function(){return S},destructor:function(){this.dirtyComponentsLength=null,c.release(this.callbackQueue),this.callbackQueue=null,N.ReactReconcileTransaction.release(this.reconcileTransaction),this.reconcileTransaction=null},perform:function(e,t,n){return h.Mixin.perform.call(this,this.reconcileTransaction.perform,this.reconcileTransaction,e,t,n)}}),u.addPoolingTo(o);var R=function(){for(;v.length||E;){if(v.length){var e=o.getPooled();e.perform(a,null,e),o.release(e)}if(E){E=!1;var t=g;g=c.getPooled(),t.notifyAll(),c.release(t)}}};R=p.measure("ReactUpdates","flushBatchedUpdates",R);var T={injectReconcileTransaction:function(e){e?void 0:m(!1),N.ReactReconcileTransaction=e},injectBatchingStrategy:function(e){e?void 0:m(!1),"function"!=typeof e.batchedUpdates?m(!1):void 0,"boolean"!=typeof e.isBatchingUpdates?m(!1):void 0,y=e}},N={ReactReconcileTransaction:null,batchedUpdates:i,enqueueUpdate:s,flushBatchedUpdates:R,injection:T,asap:l};t.exports=N},{"./CallbackQueue":104,"./Object.assign":121,"./PooledClass":122,"./ReactPerf":170,"./ReactReconciler":175,"./Transaction":199,"fbjs/lib/invariant":243}],183:[function(e,t){"use strict";t.exports="0.14.7"},{}],184:[function(e,t){"use strict";var n=e("./DOMProperty"),o=n.injection.MUST_USE_ATTRIBUTE,i={xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace"},r={Properties:{clipPath:o,cx:o,cy:o,d:o,dx:o,dy:o,fill:o,fillOpacity:o,fontFamily:o,fontSize:o,fx:o,fy:o,gradientTransform:o,gradientUnits:o,markerEnd:o,markerMid:o,markerStart:o,offset:o,opacity:o,patternContentUnits:o,patternUnits:o,points:o,preserveAspectRatio:o,r:o,rx:o,ry:o,spreadMethod:o,stopColor:o,stopOpacity:o,stroke:o,strokeDasharray:o,strokeLinecap:o,strokeOpacity:o,strokeWidth:o,textAnchor:o,transform:o,version:o,viewBox:o,x1:o,x2:o,x:o,xlinkActuate:o,xlinkArcrole:o,xlinkHref:o,xlinkRole:o,xlinkShow:o,xlinkTitle:o,xlinkType:o,xmlBase:o,xmlLang:o,xmlSpace:o,y1:o,y2:o,y:o},DOMAttributeNamespaces:{xlinkActuate:i.xlink,xlinkArcrole:i.xlink,xlinkHref:i.xlink,xlinkRole:i.xlink,xlinkShow:i.xlink,xlinkTitle:i.xlink,xlinkType:i.xlink,xmlBase:i.xml,xmlLang:i.xml,xmlSpace:i.xml},DOMAttributeNames:{clipPath:"clip-path",fillOpacity:"fill-opacity",fontFamily:"font-family",fontSize:"font-size",gradientTransform:"gradientTransform",gradientUnits:"gradientUnits",markerEnd:"marker-end",markerMid:"marker-mid",markerStart:"marker-start",patternContentUnits:"patternContentUnits",patternUnits:"patternUnits",preserveAspectRatio:"preserveAspectRatio",spreadMethod:"spreadMethod",stopColor:"stop-color",stopOpacity:"stop-opacity",strokeDasharray:"stroke-dasharray",strokeLinecap:"stroke-linecap",strokeOpacity:"stroke-opacity",strokeWidth:"stroke-width",textAnchor:"text-anchor",viewBox:"viewBox",xlinkActuate:"xlink:actuate",xlinkArcrole:"xlink:arcrole",xlinkHref:"xlink:href",xlinkRole:"xlink:role",xlinkShow:"xlink:show",xlinkTitle:"xlink:title",xlinkType:"xlink:type",xmlBase:"xml:base",xmlLang:"xml:lang",xmlSpace:"xml:space"}};t.exports=r},{"./DOMProperty":108}],185:[function(e,t){"use strict";function n(e){if("selectionStart"in e&&s.hasSelectionCapabilities(e))return{start:e.selectionStart,end:e.selectionEnd};if(window.getSelection){var t=window.getSelection();return{anchorNode:t.anchorNode,anchorOffset:t.anchorOffset,focusNode:t.focusNode,focusOffset:t.focusOffset}}if(document.selection){var n=document.selection.createRange();return{parentElement:n.parentElement(),text:n.text,top:n.boundingTop,left:n.boundingLeft}}}function o(e,t){if(y||null==v||v!==c())return null;var o=n(v);if(!E||!d(E,o)){E=o;var i=l.getPooled(m.select,g,e,t);return i.type="select",i.target=v,r.accumulateTwoPhaseDispatches(i),i}return null}var i=e("./EventConstants"),r=e("./EventPropagators"),a=e("fbjs/lib/ExecutionEnvironment"),s=e("./ReactInputSelection"),l=e("./SyntheticEvent"),c=e("fbjs/lib/getActiveElement"),u=e("./isTextInputElement"),p=e("fbjs/lib/keyOf"),d=e("fbjs/lib/shallowEqual"),h=i.topLevelTypes,f=a.canUseDOM&&"documentMode"in document&&document.documentMode<=11,m={select:{phasedRegistrationNames:{bubbled:p({onSelect:null}),captured:p({onSelectCapture:null})},dependencies:[h.topBlur,h.topContextMenu,h.topFocus,h.topKeyDown,h.topMouseDown,h.topMouseUp,h.topSelectionChange]}},v=null,g=null,E=null,y=!1,b=!1,C=p({onSelect:null}),S={eventTypes:m,extractEvents:function(e,t,n,i,r){if(!b)return null;switch(e){case h.topFocus:(u(t)||"true"===t.contentEditable)&&(v=t,g=n,E=null);break;case h.topBlur:v=null,g=null,E=null;break;case h.topMouseDown:y=!0;break;case h.topContextMenu:case h.topMouseUp:return y=!1,o(i,r);case h.topSelectionChange:if(f)break;case h.topKeyDown:case h.topKeyUp:return o(i,r)}return null},didPutListener:function(e,t){t===C&&(b=!0)}};t.exports=S},{"./EventConstants":113,"./EventPropagators":117,"./ReactInputSelection":159,"./SyntheticEvent":191,"./isTextInputElement":219,"fbjs/lib/ExecutionEnvironment":229,"fbjs/lib/getActiveElement":238,"fbjs/lib/keyOf":247,"fbjs/lib/shallowEqual":252}],186:[function(e,t){"use strict";var n=Math.pow(2,53),o={createReactRootIndex:function(){return Math.ceil(Math.random()*n)}};t.exports=o},{}],187:[function(e,t){"use strict";var n=e("./EventConstants"),o=e("fbjs/lib/EventListener"),i=e("./EventPropagators"),r=e("./ReactMount"),a=e("./SyntheticClipboardEvent"),s=e("./SyntheticEvent"),l=e("./SyntheticFocusEvent"),c=e("./SyntheticKeyboardEvent"),u=e("./SyntheticMouseEvent"),p=e("./SyntheticDragEvent"),d=e("./SyntheticTouchEvent"),h=e("./SyntheticUIEvent"),f=e("./SyntheticWheelEvent"),m=e("fbjs/lib/emptyFunction"),v=e("./getEventCharCode"),g=e("fbjs/lib/invariant"),E=e("fbjs/lib/keyOf"),y=n.topLevelTypes,b={abort:{phasedRegistrationNames:{bubbled:E({onAbort:!0}),captured:E({onAbortCapture:!0})}},blur:{phasedRegistrationNames:{bubbled:E({onBlur:!0}),captured:E({onBlurCapture:!0})}},canPlay:{phasedRegistrationNames:{bubbled:E({onCanPlay:!0}),captured:E({onCanPlayCapture:!0})}},canPlayThrough:{phasedRegistrationNames:{bubbled:E({onCanPlayThrough:!0}),captured:E({onCanPlayThroughCapture:!0})}},click:{phasedRegistrationNames:{bubbled:E({onClick:!0}),captured:E({onClickCapture:!0})}},contextMenu:{phasedRegistrationNames:{bubbled:E({onContextMenu:!0}),captured:E({onContextMenuCapture:!0})}},copy:{phasedRegistrationNames:{bubbled:E({onCopy:!0}),captured:E({onCopyCapture:!0})}},cut:{phasedRegistrationNames:{bubbled:E({onCut:!0}),captured:E({onCutCapture:!0})}},doubleClick:{phasedRegistrationNames:{bubbled:E({onDoubleClick:!0}),captured:E({onDoubleClickCapture:!0})}},drag:{phasedRegistrationNames:{bubbled:E({onDrag:!0}),captured:E({onDragCapture:!0})}},dragEnd:{phasedRegistrationNames:{bubbled:E({onDragEnd:!0}),captured:E({onDragEndCapture:!0})}},dragEnter:{phasedRegistrationNames:{bubbled:E({onDragEnter:!0}),captured:E({onDragEnterCapture:!0})}},dragExit:{phasedRegistrationNames:{bubbled:E({onDragExit:!0}),captured:E({onDragExitCapture:!0})}},dragLeave:{phasedRegistrationNames:{bubbled:E({onDragLeave:!0}),captured:E({onDragLeaveCapture:!0})}},dragOver:{phasedRegistrationNames:{bubbled:E({onDragOver:!0}),captured:E({onDragOverCapture:!0})}},dragStart:{phasedRegistrationNames:{bubbled:E({onDragStart:!0}),captured:E({onDragStartCapture:!0})}},drop:{phasedRegistrationNames:{bubbled:E({onDrop:!0}),captured:E({onDropCapture:!0})}},durationChange:{phasedRegistrationNames:{bubbled:E({onDurationChange:!0}),captured:E({onDurationChangeCapture:!0})}},emptied:{phasedRegistrationNames:{bubbled:E({onEmptied:!0}),captured:E({onEmptiedCapture:!0})}},encrypted:{phasedRegistrationNames:{bubbled:E({onEncrypted:!0}),captured:E({onEncryptedCapture:!0})}},ended:{phasedRegistrationNames:{bubbled:E({onEnded:!0}),captured:E({onEndedCapture:!0})}},error:{phasedRegistrationNames:{bubbled:E({onError:!0}),captured:E({onErrorCapture:!0})}},focus:{phasedRegistrationNames:{bubbled:E({onFocus:!0}),captured:E({onFocusCapture:!0})}},input:{phasedRegistrationNames:{bubbled:E({onInput:!0}),captured:E({onInputCapture:!0})}},keyDown:{phasedRegistrationNames:{bubbled:E({onKeyDown:!0}),captured:E({onKeyDownCapture:!0})}},keyPress:{phasedRegistrationNames:{bubbled:E({onKeyPress:!0}),captured:E({onKeyPressCapture:!0})}},keyUp:{phasedRegistrationNames:{bubbled:E({onKeyUp:!0}),captured:E({onKeyUpCapture:!0})}},load:{phasedRegistrationNames:{bubbled:E({onLoad:!0}),captured:E({onLoadCapture:!0})}},loadedData:{phasedRegistrationNames:{bubbled:E({onLoadedData:!0}),captured:E({onLoadedDataCapture:!0})}},loadedMetadata:{phasedRegistrationNames:{bubbled:E({onLoadedMetadata:!0}),captured:E({onLoadedMetadataCapture:!0})}},loadStart:{phasedRegistrationNames:{bubbled:E({onLoadStart:!0}),captured:E({onLoadStartCapture:!0})}},mouseDown:{phasedRegistrationNames:{bubbled:E({onMouseDown:!0}),captured:E({onMouseDownCapture:!0})}},mouseMove:{phasedRegistrationNames:{bubbled:E({onMouseMove:!0}),captured:E({onMouseMoveCapture:!0})}},mouseOut:{phasedRegistrationNames:{bubbled:E({onMouseOut:!0}),captured:E({onMouseOutCapture:!0})}},mouseOver:{phasedRegistrationNames:{bubbled:E({onMouseOver:!0}),captured:E({onMouseOverCapture:!0})}},mouseUp:{phasedRegistrationNames:{bubbled:E({onMouseUp:!0}),captured:E({onMouseUpCapture:!0})}},paste:{phasedRegistrationNames:{bubbled:E({onPaste:!0}),captured:E({onPasteCapture:!0})}},pause:{phasedRegistrationNames:{bubbled:E({onPause:!0}),captured:E({onPauseCapture:!0})}},play:{phasedRegistrationNames:{bubbled:E({onPlay:!0}),captured:E({onPlayCapture:!0})}},playing:{phasedRegistrationNames:{bubbled:E({onPlaying:!0}),captured:E({onPlayingCapture:!0})}},progress:{phasedRegistrationNames:{bubbled:E({onProgress:!0}),captured:E({onProgressCapture:!0})}},rateChange:{phasedRegistrationNames:{bubbled:E({onRateChange:!0}),captured:E({onRateChangeCapture:!0})}},reset:{phasedRegistrationNames:{bubbled:E({onReset:!0}),captured:E({onResetCapture:!0})}},scroll:{phasedRegistrationNames:{bubbled:E({onScroll:!0}),captured:E({onScrollCapture:!0})}},seeked:{phasedRegistrationNames:{bubbled:E({onSeeked:!0}),captured:E({onSeekedCapture:!0})}},seeking:{phasedRegistrationNames:{bubbled:E({onSeeking:!0}),captured:E({onSeekingCapture:!0})}},stalled:{phasedRegistrationNames:{bubbled:E({onStalled:!0}),captured:E({onStalledCapture:!0})}},submit:{phasedRegistrationNames:{bubbled:E({onSubmit:!0}),captured:E({onSubmitCapture:!0})}},suspend:{phasedRegistrationNames:{bubbled:E({onSuspend:!0}),captured:E({onSuspendCapture:!0})}},timeUpdate:{phasedRegistrationNames:{bubbled:E({onTimeUpdate:!0}),captured:E({onTimeUpdateCapture:!0})}},touchCancel:{phasedRegistrationNames:{bubbled:E({onTouchCancel:!0}),captured:E({onTouchCancelCapture:!0})}},touchEnd:{phasedRegistrationNames:{bubbled:E({onTouchEnd:!0}),captured:E({onTouchEndCapture:!0})}},touchMove:{phasedRegistrationNames:{bubbled:E({onTouchMove:!0}),captured:E({onTouchMoveCapture:!0})}},touchStart:{phasedRegistrationNames:{bubbled:E({onTouchStart:!0}),captured:E({onTouchStartCapture:!0})}},volumeChange:{phasedRegistrationNames:{bubbled:E({onVolumeChange:!0}),captured:E({onVolumeChangeCapture:!0})}},waiting:{phasedRegistrationNames:{bubbled:E({onWaiting:!0}),captured:E({onWaitingCapture:!0})}},wheel:{phasedRegistrationNames:{bubbled:E({onWheel:!0}),captured:E({onWheelCapture:!0})}}},C={topAbort:b.abort,topBlur:b.blur,topCanPlay:b.canPlay,topCanPlayThrough:b.canPlayThrough,topClick:b.click,topContextMenu:b.contextMenu,topCopy:b.copy,topCut:b.cut,topDoubleClick:b.doubleClick,topDrag:b.drag,topDragEnd:b.dragEnd,topDragEnter:b.dragEnter,topDragExit:b.dragExit,topDragLeave:b.dragLeave,topDragOver:b.dragOver,topDragStart:b.dragStart,topDrop:b.drop,topDurationChange:b.durationChange,topEmptied:b.emptied,topEncrypted:b.encrypted,topEnded:b.ended,topError:b.error,topFocus:b.focus,topInput:b.input,topKeyDown:b.keyDown,topKeyPress:b.keyPress,topKeyUp:b.keyUp,topLoad:b.load,topLoadedData:b.loadedData,topLoadedMetadata:b.loadedMetadata,topLoadStart:b.loadStart,topMouseDown:b.mouseDown,topMouseMove:b.mouseMove,topMouseOut:b.mouseOut,topMouseOver:b.mouseOver,topMouseUp:b.mouseUp,topPaste:b.paste,topPause:b.pause,topPlay:b.play,topPlaying:b.playing,topProgress:b.progress,topRateChange:b.rateChange,topReset:b.reset,topScroll:b.scroll,topSeeked:b.seeked,topSeeking:b.seeking,topStalled:b.stalled,topSubmit:b.submit,topSuspend:b.suspend,topTimeUpdate:b.timeUpdate,topTouchCancel:b.touchCancel,topTouchEnd:b.touchEnd,topTouchMove:b.touchMove,topTouchStart:b.touchStart,topVolumeChange:b.volumeChange,topWaiting:b.waiting,topWheel:b.wheel};for(var S in C)C[S].dependencies=[S];var R=E({onClick:null}),T={},N={eventTypes:b,extractEvents:function(e,t,n,o,r){var m=C[e];if(!m)return null;var E;switch(e){case y.topAbort:case y.topCanPlay:case y.topCanPlayThrough:case y.topDurationChange:case y.topEmptied:case y.topEncrypted:case y.topEnded:case y.topError:case y.topInput:case y.topLoad:case y.topLoadedData:case y.topLoadedMetadata:case y.topLoadStart:case y.topPause:case y.topPlay:case y.topPlaying:case y.topProgress:case y.topRateChange:case y.topReset:case y.topSeeked:case y.topSeeking:case y.topStalled:case y.topSubmit:case y.topSuspend:case y.topTimeUpdate:case y.topVolumeChange:case y.topWaiting:E=s;break;case y.topKeyPress:if(0===v(o))return null;case y.topKeyDown:case y.topKeyUp:E=c;break;case y.topBlur:case y.topFocus:E=l;break;case y.topClick:if(2===o.button)return null;case y.topContextMenu:case y.topDoubleClick:case y.topMouseDown:case y.topMouseMove:case y.topMouseOut:case y.topMouseOver:case y.topMouseUp:E=u;break;case y.topDrag:case y.topDragEnd:case y.topDragEnter:case y.topDragExit:case y.topDragLeave:case y.topDragOver:case y.topDragStart:case y.topDrop:E=p;break;case y.topTouchCancel:case y.topTouchEnd:case y.topTouchMove:case y.topTouchStart:E=d;break;case y.topScroll:E=h;break;case y.topWheel:E=f;break;case y.topCopy:case y.topCut:case y.topPaste:E=a}E?void 0:g(!1);var b=E.getPooled(m,n,o,r);return i.accumulateTwoPhaseDispatches(b),b},didPutListener:function(e,t){if(t===R){var n=r.getNode(e);T[e]||(T[e]=o.listen(n,"click",m))}},willDeleteListener:function(e,t){t===R&&(T[e].remove(),delete T[e])}};t.exports=N},{"./EventConstants":113,"./EventPropagators":117,"./ReactMount":164,"./SyntheticClipboardEvent":188,"./SyntheticDragEvent":190,"./SyntheticEvent":191,"./SyntheticFocusEvent":192,"./SyntheticKeyboardEvent":194,"./SyntheticMouseEvent":195,"./SyntheticTouchEvent":196,"./SyntheticUIEvent":197,"./SyntheticWheelEvent":198,"./getEventCharCode":210,"fbjs/lib/EventListener":228,"fbjs/lib/emptyFunction":235,"fbjs/lib/invariant":243,"fbjs/lib/keyOf":247}],188:[function(e,t){"use strict";function n(e,t,n,i){o.call(this,e,t,n,i)}var o=e("./SyntheticEvent"),i={clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}};o.augmentClass(n,i),t.exports=n},{"./SyntheticEvent":191}],189:[function(e,t){"use strict";function n(e,t,n,i){o.call(this,e,t,n,i)}var o=e("./SyntheticEvent"),i={data:null};o.augmentClass(n,i),t.exports=n},{"./SyntheticEvent":191}],190:[function(e,t){"use strict";function n(e,t,n,i){o.call(this,e,t,n,i)}var o=e("./SyntheticMouseEvent"),i={dataTransfer:null};o.augmentClass(n,i),t.exports=n},{"./SyntheticMouseEvent":195}],191:[function(e,t){"use strict";function n(e,t,n,o){this.dispatchConfig=e,this.dispatchMarker=t,this.nativeEvent=n;var i=this.constructor.Interface;for(var a in i)if(i.hasOwnProperty(a)){var s=i[a];s?this[a]=s(n):"target"===a?this.target=o:this[a]=n[a]}var l=null!=n.defaultPrevented?n.defaultPrevented:n.returnValue===!1;this.isDefaultPrevented=l?r.thatReturnsTrue:r.thatReturnsFalse,this.isPropagationStopped=r.thatReturnsFalse}var o=e("./PooledClass"),i=e("./Object.assign"),r=e("fbjs/lib/emptyFunction"),a=(e("fbjs/lib/warning"),{type:null,target:null,currentTarget:r.thatReturnsNull,eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null});i(n.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():e.returnValue=!1,this.isDefaultPrevented=r.thatReturnsTrue)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():e.cancelBubble=!0,this.isPropagationStopped=r.thatReturnsTrue)},persist:function(){this.isPersistent=r.thatReturnsTrue},isPersistent:r.thatReturnsFalse,destructor:function(){var e=this.constructor.Interface;for(var t in e)this[t]=null;this.dispatchConfig=null,this.dispatchMarker=null,this.nativeEvent=null}}),n.Interface=a,n.augmentClass=function(e,t){var n=this,r=Object.create(n.prototype);i(r,e.prototype),e.prototype=r,e.prototype.constructor=e,e.Interface=i({},n.Interface,t),e.augmentClass=n.augmentClass,o.addPoolingTo(e,o.fourArgumentPooler)},o.addPoolingTo(n,o.fourArgumentPooler),t.exports=n},{"./Object.assign":121,"./PooledClass":122,"fbjs/lib/emptyFunction":235,"fbjs/lib/warning":254}],192:[function(e,t){"use strict";function n(e,t,n,i){o.call(this,e,t,n,i)}var o=e("./SyntheticUIEvent"),i={relatedTarget:null};o.augmentClass(n,i),t.exports=n},{"./SyntheticUIEvent":197}],193:[function(e,t){"use strict";function n(e,t,n,i){o.call(this,e,t,n,i)}var o=e("./SyntheticEvent"),i={data:null};o.augmentClass(n,i),t.exports=n},{"./SyntheticEvent":191}],194:[function(e,t){"use strict";function n(e,t,n,i){o.call(this,e,t,n,i)}var o=e("./SyntheticUIEvent"),i=e("./getEventCharCode"),r=e("./getEventKey"),a=e("./getEventModifierState"),s={key:r,location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:a,charCode:function(e){return"keypress"===e.type?i(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?i(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}};o.augmentClass(n,s),t.exports=n},{"./SyntheticUIEvent":197,"./getEventCharCode":210,"./getEventKey":211,"./getEventModifierState":212}],195:[function(e,t){"use strict";function n(e,t,n,i){o.call(this,e,t,n,i)}var o=e("./SyntheticUIEvent"),i=e("./ViewportMetrics"),r=e("./getEventModifierState"),a={screenX:null,screenY:null,clientX:null,clientY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:r,button:function(e){var t=e.button;return"which"in e?t:2===t?2:4===t?1:0},buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)},pageX:function(e){return"pageX"in e?e.pageX:e.clientX+i.currentScrollLeft},pageY:function(e){return"pageY"in e?e.pageY:e.clientY+i.currentScrollTop}};o.augmentClass(n,a),t.exports=n},{"./SyntheticUIEvent":197,"./ViewportMetrics":200,"./getEventModifierState":212}],196:[function(e,t){"use strict";function n(e,t,n,i){o.call(this,e,t,n,i)}var o=e("./SyntheticUIEvent"),i=e("./getEventModifierState"),r={touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:i};o.augmentClass(n,r),t.exports=n},{"./SyntheticUIEvent":197,"./getEventModifierState":212}],197:[function(e,t){"use strict";function n(e,t,n,i){o.call(this,e,t,n,i)}var o=e("./SyntheticEvent"),i=e("./getEventTarget"),r={view:function(e){if(e.view)return e.view;var t=i(e);if(null!=t&&t.window===t)return t;var n=t.ownerDocument;return n?n.defaultView||n.parentWindow:window},detail:function(e){return e.detail||0}};o.augmentClass(n,r),t.exports=n},{"./SyntheticEvent":191,"./getEventTarget":213}],198:[function(e,t){"use strict";function n(e,t,n,i){o.call(this,e,t,n,i)}var o=e("./SyntheticMouseEvent"),i={deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null};o.augmentClass(n,i),t.exports=n},{"./SyntheticMouseEvent":195}],199:[function(e,t){"use strict";var n=e("fbjs/lib/invariant"),o={reinitializeTransaction:function(){this.transactionWrappers=this.getTransactionWrappers(),this.wrapperInitData?this.wrapperInitData.length=0:this.wrapperInitData=[],this._isInTransaction=!1},_isInTransaction:!1,getTransactionWrappers:null,isInTransaction:function(){return!!this._isInTransaction},perform:function(e,t,o,i,r,a,s,l){this.isInTransaction()?n(!1):void 0;var c,u;try{this._isInTransaction=!0,c=!0,this.initializeAll(0),u=e.call(t,o,i,r,a,s,l),c=!1}finally{try{if(c)try{this.closeAll(0)}catch(p){}else this.closeAll(0)}finally{this._isInTransaction=!1}}return u},initializeAll:function(e){for(var t=this.transactionWrappers,n=e;n<t.length;n++){var o=t[n];try{this.wrapperInitData[n]=i.OBSERVED_ERROR,this.wrapperInitData[n]=o.initialize?o.initialize.call(this):null}finally{if(this.wrapperInitData[n]===i.OBSERVED_ERROR)try{this.initializeAll(n+1)}catch(r){}}}},closeAll:function(e){this.isInTransaction()?void 0:n(!1);for(var t=this.transactionWrappers,o=e;o<t.length;o++){var r,a=t[o],s=this.wrapperInitData[o];
    try{r=!0,s!==i.OBSERVED_ERROR&&a.close&&a.close.call(this,s),r=!1}finally{if(r)try{this.closeAll(o+1)}catch(l){}}}this.wrapperInitData.length=0}},i={Mixin:o,OBSERVED_ERROR:{}};t.exports=i},{"fbjs/lib/invariant":243}],200:[function(e,t){"use strict";var n={currentScrollLeft:0,currentScrollTop:0,refreshScrollValues:function(e){n.currentScrollLeft=e.x,n.currentScrollTop=e.y}};t.exports=n},{}],201:[function(e,t){"use strict";function n(e,t){if(null==t?o(!1):void 0,null==e)return t;var n=Array.isArray(e),i=Array.isArray(t);return n&&i?(e.push.apply(e,t),e):n?(e.push(t),e):i?[e].concat(t):[e,t]}var o=e("fbjs/lib/invariant");t.exports=n},{"fbjs/lib/invariant":243}],202:[function(e,t){"use strict";function n(e){for(var t=1,n=0,i=0,r=e.length,a=-4&r;a>i;){for(;i<Math.min(i+4096,a);i+=4)n+=(t+=e.charCodeAt(i))+(t+=e.charCodeAt(i+1))+(t+=e.charCodeAt(i+2))+(t+=e.charCodeAt(i+3));t%=o,n%=o}for(;r>i;i++)n+=t+=e.charCodeAt(i);return t%=o,n%=o,t|n<<16}var o=65521;t.exports=n},{}],203:[function(e,t){"use strict";var n=!1;t.exports=n},{}],204:[function(e,t){"use strict";function n(e,t){var n=null==t||"boolean"==typeof t||""===t;if(n)return"";var o=isNaN(t);return o||0===t||i.hasOwnProperty(e)&&i[e]?""+t:("string"==typeof t&&(t=t.trim()),t+"px")}var o=e("./CSSProperty"),i=o.isUnitlessNumber;t.exports=n},{"./CSSProperty":102}],205:[function(e,t){"use strict";function n(e,t,n,o,i){return i}e("./Object.assign"),e("fbjs/lib/warning");t.exports=n},{"./Object.assign":121,"fbjs/lib/warning":254}],206:[function(e,t){"use strict";function n(e){return i[e]}function o(e){return(""+e).replace(r,n)}var i={"&":"&amp;",">":"&gt;","<":"&lt;",'"':"&quot;","'":"&#x27;"},r=/[&><"']/g;t.exports=o},{}],207:[function(e,t){"use strict";function n(e){return null==e?null:1===e.nodeType?e:o.has(e)?i.getNodeFromInstance(e):(null!=e.render&&"function"==typeof e.render?r(!1):void 0,void r(!1))}{var o=(e("./ReactCurrentOwner"),e("./ReactInstanceMap")),i=e("./ReactMount"),r=e("fbjs/lib/invariant");e("fbjs/lib/warning")}t.exports=n},{"./ReactCurrentOwner":133,"./ReactInstanceMap":161,"./ReactMount":164,"fbjs/lib/invariant":243,"fbjs/lib/warning":254}],208:[function(e,t){"use strict";function n(e,t,n){var o=e,i=void 0===o[n];i&&null!=t&&(o[n]=t)}function o(e){if(null==e)return e;var t={};return i(e,n,t),t}{var i=e("./traverseAllChildren");e("fbjs/lib/warning")}t.exports=o},{"./traverseAllChildren":226,"fbjs/lib/warning":254}],209:[function(e,t){"use strict";var n=function(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)};t.exports=n},{}],210:[function(e,t){"use strict";function n(e){var t,n=e.keyCode;return"charCode"in e?(t=e.charCode,0===t&&13===n&&(t=13)):t=n,t>=32||13===t?t:0}t.exports=n},{}],211:[function(e,t){"use strict";function n(e){if(e.key){var t=i[e.key]||e.key;if("Unidentified"!==t)return t}if("keypress"===e.type){var n=o(e);return 13===n?"Enter":String.fromCharCode(n)}return"keydown"===e.type||"keyup"===e.type?r[e.keyCode]||"Unidentified":""}var o=e("./getEventCharCode"),i={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},r={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"};t.exports=n},{"./getEventCharCode":210}],212:[function(e,t){"use strict";function n(e){var t=this,n=t.nativeEvent;if(n.getModifierState)return n.getModifierState(e);var o=i[e];return o?!!n[o]:!1}function o(){return n}var i={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};t.exports=o},{}],213:[function(e,t){"use strict";function n(e){var t=e.target||e.srcElement||window;return 3===t.nodeType?t.parentNode:t}t.exports=n},{}],214:[function(e,t){"use strict";function n(e){var t=e&&(o&&e[o]||e[i]);return"function"==typeof t?t:void 0}var o="function"==typeof Symbol&&Symbol.iterator,i="@@iterator";t.exports=n},{}],215:[function(e,t){"use strict";function n(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function o(e){for(;e;){if(e.nextSibling)return e.nextSibling;e=e.parentNode}}function i(e,t){for(var i=n(e),r=0,a=0;i;){if(3===i.nodeType){if(a=r+i.textContent.length,t>=r&&a>=t)return{node:i,offset:t-r};r=a}i=n(o(i))}}t.exports=i},{}],216:[function(e,t){"use strict";function n(){return!i&&o.canUseDOM&&(i="textContent"in document.documentElement?"textContent":"innerText"),i}var o=e("fbjs/lib/ExecutionEnvironment"),i=null;t.exports=n},{"fbjs/lib/ExecutionEnvironment":229}],217:[function(e,t){"use strict";function n(e){return"function"==typeof e&&"undefined"!=typeof e.prototype&&"function"==typeof e.prototype.mountComponent&&"function"==typeof e.prototype.receiveComponent}function o(e){var t;if(null===e||e===!1)t=new r(o);else if("object"==typeof e){var i=e;!i||"function"!=typeof i.type&&"string"!=typeof i.type?l(!1):void 0,t="string"==typeof i.type?a.createInternalComponent(i):n(i.type)?new i.type(i):new c}else"string"==typeof e||"number"==typeof e?t=a.createInstanceForText(e):l(!1);return t.construct(e),t._mountIndex=0,t._mountImage=null,t}var i=e("./ReactCompositeComponent"),r=e("./ReactEmptyComponent"),a=e("./ReactNativeComponent"),s=e("./Object.assign"),l=e("fbjs/lib/invariant"),c=(e("fbjs/lib/warning"),function(){});s(c.prototype,i.Mixin,{_instantiateReactComponent:o}),t.exports=o},{"./Object.assign":121,"./ReactCompositeComponent":132,"./ReactEmptyComponent":153,"./ReactNativeComponent":167,"fbjs/lib/invariant":243,"fbjs/lib/warning":254}],218:[function(e,t){"use strict";function n(e,t){if(!i.canUseDOM||t&&!("addEventListener"in document))return!1;var n="on"+e,r=n in document;if(!r){var a=document.createElement("div");a.setAttribute(n,"return;"),r="function"==typeof a[n]}return!r&&o&&"wheel"===e&&(r=document.implementation.hasFeature("Events.wheel","3.0")),r}var o,i=e("fbjs/lib/ExecutionEnvironment");i.canUseDOM&&(o=document.implementation&&document.implementation.hasFeature&&document.implementation.hasFeature("","")!==!0),t.exports=n},{"fbjs/lib/ExecutionEnvironment":229}],219:[function(e,t){"use strict";function n(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&o[e.type]||"textarea"===t)}var o={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};t.exports=n},{}],220:[function(e,t){"use strict";function n(e){return o.isValidElement(e)?void 0:i(!1),e}var o=e("./ReactElement"),i=e("fbjs/lib/invariant");t.exports=n},{"./ReactElement":151,"fbjs/lib/invariant":243}],221:[function(e,t){"use strict";function n(e){return'"'+o(e)+'"'}var o=e("./escapeTextContentForBrowser");t.exports=n},{"./escapeTextContentForBrowser":206}],222:[function(e,t){"use strict";var n=e("./ReactMount");t.exports=n.renderSubtreeIntoContainer},{"./ReactMount":164}],223:[function(e,t){"use strict";var n=e("fbjs/lib/ExecutionEnvironment"),o=/^[ \r\n\t\f]/,i=/<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/,r=function(e,t){e.innerHTML=t};if("undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction&&(r=function(e,t){MSApp.execUnsafeLocalFunction(function(){e.innerHTML=t})}),n.canUseDOM){var a=document.createElement("div");a.innerHTML=" ",""===a.innerHTML&&(r=function(e,t){if(e.parentNode&&e.parentNode.replaceChild(e,e),o.test(t)||"<"===t[0]&&i.test(t)){e.innerHTML=String.fromCharCode(65279)+t;var n=e.firstChild;1===n.data.length?e.removeChild(n):n.deleteData(0,1)}else e.innerHTML=t})}t.exports=r},{"fbjs/lib/ExecutionEnvironment":229}],224:[function(e,t){"use strict";var n=e("fbjs/lib/ExecutionEnvironment"),o=e("./escapeTextContentForBrowser"),i=e("./setInnerHTML"),r=function(e,t){e.textContent=t};n.canUseDOM&&("textContent"in document.documentElement||(r=function(e,t){i(e,o(t))})),t.exports=r},{"./escapeTextContentForBrowser":206,"./setInnerHTML":223,"fbjs/lib/ExecutionEnvironment":229}],225:[function(e,t){"use strict";function n(e,t){var n=null===e||e===!1,o=null===t||t===!1;if(n||o)return n===o;var i=typeof e,r=typeof t;return"string"===i||"number"===i?"string"===r||"number"===r:"object"===r&&e.type===t.type&&e.key===t.key}t.exports=n},{}],226:[function(e,t){"use strict";function n(e){return f[e]}function o(e,t){return e&&null!=e.key?r(e.key):t.toString(36)}function i(e){return(""+e).replace(m,n)}function r(e){return"$"+i(e)}function a(e,t,n,i){var s=typeof e;if(("undefined"===s||"boolean"===s)&&(e=null),null===e||"string"===s||"number"===s||l.isValidElement(e))return n(i,e,""===t?d+o(e,0):t),1;var c,f,m=0,v=""===t?d:t+h;if(Array.isArray(e))for(var g=0;g<e.length;g++)c=e[g],f=v+o(c,g),m+=a(c,f,n,i);else{var E=u(e);if(E){var y,b=E.call(e);if(E!==e.entries)for(var C=0;!(y=b.next()).done;)c=y.value,f=v+o(c,C++),m+=a(c,f,n,i);else for(;!(y=b.next()).done;){var S=y.value;S&&(c=S[1],f=v+r(S[0])+h+o(c,0),m+=a(c,f,n,i))}}else if("object"===s){{String(e)}p(!1)}}return m}function s(e,t,n){return null==e?0:a(e,"",t,n)}var l=(e("./ReactCurrentOwner"),e("./ReactElement")),c=e("./ReactInstanceHandles"),u=e("./getIteratorFn"),p=e("fbjs/lib/invariant"),d=(e("fbjs/lib/warning"),c.SEPARATOR),h=":",f={"=":"=0",".":"=1",":":"=2"},m=/[=.:]/g;t.exports=s},{"./ReactCurrentOwner":133,"./ReactElement":151,"./ReactInstanceHandles":160,"./getIteratorFn":214,"fbjs/lib/invariant":243,"fbjs/lib/warning":254}],227:[function(e,t){"use strict";var n=(e("./Object.assign"),e("fbjs/lib/emptyFunction")),o=(e("fbjs/lib/warning"),n);t.exports=o},{"./Object.assign":121,"fbjs/lib/emptyFunction":235,"fbjs/lib/warning":254}],228:[function(e,t){"use strict";var n=e("./emptyFunction"),o={listen:function(e,t,n){return e.addEventListener?(e.addEventListener(t,n,!1),{remove:function(){e.removeEventListener(t,n,!1)}}):e.attachEvent?(e.attachEvent("on"+t,n),{remove:function(){e.detachEvent("on"+t,n)}}):void 0},capture:function(e,t,o){return e.addEventListener?(e.addEventListener(t,o,!0),{remove:function(){e.removeEventListener(t,o,!0)}}):{remove:n}},registerDefault:function(){}};t.exports=o},{"./emptyFunction":235}],229:[function(e,t){"use strict";var n=!("undefined"==typeof window||!window.document||!window.document.createElement),o={canUseDOM:n,canUseWorkers:"undefined"!=typeof Worker,canUseEventListeners:n&&!(!window.addEventListener&&!window.attachEvent),canUseViewport:n&&!!window.screen,isInWorker:!n};t.exports=o},{}],230:[function(e,t){"use strict";function n(e){return e.replace(o,function(e,t){return t.toUpperCase()})}var o=/-(.)/g;t.exports=n},{}],231:[function(e,t){"use strict";function n(e){return o(e.replace(i,"ms-"))}var o=e("./camelize"),i=/^-ms-/;t.exports=n},{"./camelize":230}],232:[function(e,t){"use strict";function n(e,t){var n=!0;e:for(;n;){var i=e,r=t;if(n=!1,i&&r){if(i===r)return!0;if(o(i))return!1;if(o(r)){e=i,t=r.parentNode,n=!0;continue e}return i.contains?i.contains(r):i.compareDocumentPosition?!!(16&i.compareDocumentPosition(r)):!1}return!1}}var o=e("./isTextNode");t.exports=n},{"./isTextNode":245}],233:[function(e,t){"use strict";function n(e){return!!e&&("object"==typeof e||"function"==typeof e)&&"length"in e&&!("setInterval"in e)&&"number"!=typeof e.nodeType&&(Array.isArray(e)||"callee"in e||"item"in e)}function o(e){return n(e)?Array.isArray(e)?e.slice():i(e):[e]}var i=e("./toArray");t.exports=o},{"./toArray":253}],234:[function(e,t){"use strict";function n(e){var t=e.match(c);return t&&t[1].toLowerCase()}function o(e,t){var o=l;l?void 0:s(!1);var i=n(e),c=i&&a(i);if(c){o.innerHTML=c[1]+e+c[2];for(var u=c[0];u--;)o=o.lastChild}else o.innerHTML=e;var p=o.getElementsByTagName("script");p.length&&(t?void 0:s(!1),r(p).forEach(t));for(var d=r(o.childNodes);o.lastChild;)o.removeChild(o.lastChild);return d}var i=e("./ExecutionEnvironment"),r=e("./createArrayFromMixed"),a=e("./getMarkupWrap"),s=e("./invariant"),l=i.canUseDOM?document.createElement("div"):null,c=/^\s*<(\w+)/;t.exports=o},{"./ExecutionEnvironment":229,"./createArrayFromMixed":233,"./getMarkupWrap":239,"./invariant":243}],235:[function(e,t){"use strict";function n(e){return function(){return e}}function o(){}o.thatReturns=n,o.thatReturnsFalse=n(!1),o.thatReturnsTrue=n(!0),o.thatReturnsNull=n(null),o.thatReturnsThis=function(){return this},o.thatReturnsArgument=function(e){return e},t.exports=o},{}],236:[function(e,t){"use strict";var n={};t.exports=n},{}],237:[function(e,t){"use strict";function n(e){try{e.focus()}catch(t){}}t.exports=n},{}],238:[function(e,t){"use strict";function n(){if("undefined"==typeof document)return null;try{return document.activeElement||document.body}catch(e){return document.body}}t.exports=n},{}],239:[function(e,t){"use strict";function n(e){return r?void 0:i(!1),p.hasOwnProperty(e)||(e="*"),a.hasOwnProperty(e)||(r.innerHTML="*"===e?"<link />":"<"+e+"></"+e+">",a[e]=!r.firstChild),a[e]?p[e]:null}var o=e("./ExecutionEnvironment"),i=e("./invariant"),r=o.canUseDOM?document.createElement("div"):null,a={},s=[1,'<select multiple="true">',"</select>"],l=[1,"<table>","</table>"],c=[3,"<table><tbody><tr>","</tr></tbody></table>"],u=[1,'<svg xmlns="http://www.w3.org/2000/svg">',"</svg>"],p={"*":[1,"?<div>","</div>"],area:[1,"<map>","</map>"],col:[2,"<table><tbody></tbody><colgroup>","</colgroup></table>"],legend:[1,"<fieldset>","</fieldset>"],param:[1,"<object>","</object>"],tr:[2,"<table><tbody>","</tbody></table>"],optgroup:s,option:s,caption:l,colgroup:l,tbody:l,tfoot:l,thead:l,td:c,th:c},d=["circle","clipPath","defs","ellipse","g","image","line","linearGradient","mask","path","pattern","polygon","polyline","radialGradient","rect","stop","text","tspan"];d.forEach(function(e){p[e]=u,a[e]=!0}),t.exports=n},{"./ExecutionEnvironment":229,"./invariant":243}],240:[function(e,t){"use strict";function n(e){return e===window?{x:window.pageXOffset||document.documentElement.scrollLeft,y:window.pageYOffset||document.documentElement.scrollTop}:{x:e.scrollLeft,y:e.scrollTop}}t.exports=n},{}],241:[function(e,t){"use strict";function n(e){return e.replace(o,"-$1").toLowerCase()}var o=/([A-Z])/g;t.exports=n},{}],242:[function(e,t){"use strict";function n(e){return o(e).replace(i,"-ms-")}var o=e("./hyphenate"),i=/^ms-/;t.exports=n},{"./hyphenate":241}],243:[function(e,t){"use strict";function n(e,t,n,o,i,r,a,s){if(!e){var l;if(void 0===t)l=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var c=[n,o,i,r,a,s],u=0;l=new Error(t.replace(/%s/g,function(){return c[u++]})),l.name="Invariant Violation"}throw l.framesToPop=1,l}}t.exports=n},{}],244:[function(e,t){"use strict";function n(e){return!(!e||!("function"==typeof Node?e instanceof Node:"object"==typeof e&&"number"==typeof e.nodeType&&"string"==typeof e.nodeName))}t.exports=n},{}],245:[function(e,t){"use strict";function n(e){return o(e)&&3==e.nodeType}var o=e("./isNode");t.exports=n},{"./isNode":244}],246:[function(e,t){"use strict";var n=e("./invariant"),o=function(e){var t,o={};e instanceof Object&&!Array.isArray(e)?void 0:n(!1);for(t in e)e.hasOwnProperty(t)&&(o[t]=t);return o};t.exports=o},{"./invariant":243}],247:[function(e,t){"use strict";var n=function(e){var t;for(t in e)if(e.hasOwnProperty(t))return t;return null};t.exports=n},{}],248:[function(e,t){"use strict";function n(e,t,n){if(!e)return null;var i={};for(var r in e)o.call(e,r)&&(i[r]=t.call(n,e[r],r,e));return i}var o=Object.prototype.hasOwnProperty;t.exports=n},{}],249:[function(e,t){"use strict";function n(e){var t={};return function(n){return t.hasOwnProperty(n)||(t[n]=e.call(this,n)),t[n]}}t.exports=n},{}],250:[function(e,t){"use strict";var n,o=e("./ExecutionEnvironment");o.canUseDOM&&(n=window.performance||window.msPerformance||window.webkitPerformance),t.exports=n||{}},{"./ExecutionEnvironment":229}],251:[function(e,t){"use strict";var n,o=e("./performance");n=o.now?function(){return o.now()}:function(){return Date.now()},t.exports=n},{"./performance":250}],252:[function(e,t){"use strict";function n(e,t){if(e===t)return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),i=Object.keys(t);if(n.length!==i.length)return!1;for(var r=o.bind(t),a=0;a<n.length;a++)if(!r(n[a])||e[n[a]]!==t[n[a]])return!1;return!0}var o=Object.prototype.hasOwnProperty;t.exports=n},{}],253:[function(e,t){"use strict";function n(e){var t=e.length;if(Array.isArray(e)||"object"!=typeof e&&"function"!=typeof e?o(!1):void 0,"number"!=typeof t?o(!1):void 0,0===t||t-1 in e?void 0:o(!1),e.hasOwnProperty)try{return Array.prototype.slice.call(e)}catch(n){}for(var i=Array(t),r=0;t>r;r++)i[r]=e[r];return i}var o=e("./invariant");t.exports=n},{"./invariant":243}],254:[function(e,t){"use strict";var n=e("./emptyFunction"),o=n;t.exports=o},{"./emptyFunction":235}],255:[function(e,t,n){arguments[4][99][0].apply(n,arguments)},{"./lib/React":123,dup:99}],256:[function(e,t){!function(){"use strict";var e="undefined"!=typeof t&&t.exports,n="undefined"!=typeof Element&&"ALLOW_KEYBOARD_INPUT"in Element,o=function(){for(var e,t,n=[["requestFullscreen","exitFullscreen","fullscreenElement","fullscreenEnabled","fullscreenchange","fullscreenerror"],["webkitRequestFullscreen","webkitExitFullscreen","webkitFullscreenElement","webkitFullscreenEnabled","webkitfullscreenchange","webkitfullscreenerror"],["webkitRequestFullScreen","webkitCancelFullScreen","webkitCurrentFullScreenElement","webkitCancelFullScreen","webkitfullscreenchange","webkitfullscreenerror"],["mozRequestFullScreen","mozCancelFullScreen","mozFullScreenElement","mozFullScreenEnabled","mozfullscreenchange","mozfullscreenerror"],["msRequestFullscreen","msExitFullscreen","msFullscreenElement","msFullscreenEnabled","MSFullscreenChange","MSFullscreenError"]],o=0,i=n.length,r={};i>o;o++)if(e=n[o],e&&e[1]in document){for(o=0,t=e.length;t>o;o++)r[n[0][o]]=e[o];return r}return!1}(),i={request:function(e){var t=o.requestFullscreen;e=e||document.documentElement,/5\.1[\.\d]* Safari/.test(navigator.userAgent)?e[t]():e[t](n&&Element.ALLOW_KEYBOARD_INPUT)},exit:function(){document[o.exitFullscreen]()},toggle:function(e){this.isFullscreen?this.exit():this.request(e)},raw:o};return o?(Object.defineProperties(i,{isFullscreen:{get:function(){return Boolean(document[o.fullscreenElement])}},element:{enumerable:!0,get:function(){return document[o.fullscreenElement]}},enabled:{enumerable:!0,get:function(){return Boolean(document[o.fullscreenEnabled])}}}),void(e?t.exports=i:window.screenfull=i)):void(e?t.exports=!1:window.screenfull=!1)}()},{}]},{},[43]);
//# sourceMappingURL=html5-skin.min.js.map